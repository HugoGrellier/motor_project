
MOTOR_Grellier_Leconte.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08006f78  08006f78  00016f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007278  08007278  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007280  08007280  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001e4  0800746c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  0800746c  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010214  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024de  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00032908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00033850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180c6  00000000  00000000  00034678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ccb0  00000000  00000000  0004c73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f0fb  00000000  00000000  000593ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e84e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f5c  00000000  00000000  000e8564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f60 	.word	0x08006f60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08006f60 	.word	0x08006f60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <Encoder_Init>:
#include "encoder.h"
#include "tim.h"


void Encoder_Init(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8000f5c:	f000 fbf2 	bl	8001744 <MX_TIM2_Init>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000f60:	2100      	movs	r1, #0
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <Encoder_Init+0x28>)
 8000f64:	f001 ffd6 	bl	8002f14 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000f68:	2104      	movs	r1, #4
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <Encoder_Init+0x28>)
 8000f6c:	f001 ffd2 	bl	8002f14 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,32768);
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <Encoder_Init+0x28>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200002a0 	.word	0x200002a0

08000f84 <Encoder_Read>:

Encoder_Feedback_t Encoder_Read(void){
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b09a      	sub	sp, #104	; 0x68
 8000f88:	af00      	add	r7, sp, #0
	float pi= 3.14159;
 8000f8a:	4b3d      	ldr	r3, [pc, #244]	; (8001080 <Encoder_Read+0xfc>)
 8000f8c:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t MSG[50]={'\0'};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2232      	movs	r2, #50	; 0x32
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 f982 	bl	80042a0 <memset>
	Encoder_Feedback_t Encoder;
	float angle_abs_Prec=Encoder.angle_abs;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	663b      	str	r3, [r7, #96]	; 0x60
	float counter=__HAL_TIM_GET_COUNTER(&htim2);
 8000fa0:	4b38      	ldr	r3, [pc, #224]	; (8001084 <Encoder_Read+0x100>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	sprintf(MSG,"CNT: %f\n\r",counter);
 8000fb2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000fb4:	f7ff fad0 	bl	8000558 <__aeabi_f2d>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	460c      	mov	r4, r1
 8000fbc:	f107 001c 	add.w	r0, r7, #28
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	4930      	ldr	r1, [pc, #192]	; (8001088 <Encoder_Read+0x104>)
 8000fc6:	f003 fde7 	bl	8004b98 <siprintf>
	printf(MSG);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fdca 	bl	8004b68 <iprintf>
	Encoder.angle_abs=((counter-32768)/(75*8))*2*pi;
 8000fd4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000fd8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800108c <Encoder_Read+0x108>
 8000fdc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000fe0:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001090 <Encoder_Read+0x10c>
 8000fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000fec:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff4:	edc7 7a05 	vstr	s15, [r7, #20]
	Encoder.angle_rel=fmod(Encoder.angle_abs,2*pi);
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff faac 	bl	8000558 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001008:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff faa2 	bl	8000558 <__aeabi_f2d>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	ec43 2b11 	vmov	d1, r2, r3
 800101c:	ec45 4b10 	vmov	d0, r4, r5
 8001020:	f005 fe26 	bl	8006c70 <fmod>
 8001024:	ec54 3b10 	vmov	r3, r4, d0
 8001028:	4618      	mov	r0, r3
 800102a:	4621      	mov	r1, r4
 800102c:	f7ff fdc4 	bl	8000bb8 <__aeabi_d2f>
 8001030:	4603      	mov	r3, r0
 8001032:	613b      	str	r3, [r7, #16]
	Encoder.d_angle=(angle_abs_Prec-Encoder.d_angle)*84000000;
 8001034:	edd7 7a06 	vldr	s15, [r7, #24]
 8001038:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800103c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001040:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001094 <Encoder_Read+0x110>
 8001044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001048:	edc7 7a06 	vstr	s15, [r7, #24]



	return Encoder;
 800104c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001050:	f107 0210 	add.w	r2, r7, #16
 8001054:	ca07      	ldmia	r2, {r0, r1, r2}
 8001056:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800105a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800105c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800105e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001060:	ee06 1a90 	vmov	s13, r1
 8001064:	ee07 2a10 	vmov	s14, r2
 8001068:	ee07 3a90 	vmov	s15, r3

}
 800106c:	eeb0 0a66 	vmov.f32	s0, s13
 8001070:	eef0 0a47 	vmov.f32	s1, s14
 8001074:	eeb0 1a67 	vmov.f32	s2, s15
 8001078:	3768      	adds	r7, #104	; 0x68
 800107a:	46bd      	mov	sp, r7
 800107c:	bdb0      	pop	{r4, r5, r7, pc}
 800107e:	bf00      	nop
 8001080:	40490fd0 	.word	0x40490fd0
 8001084:	200002a0 	.word	0x200002a0
 8001088:	08006f78 	.word	0x08006f78
 800108c:	47000000 	.word	0x47000000
 8001090:	44160000 	.word	0x44160000
 8001094:	4ca037a0 	.word	0x4ca037a0

08001098 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <MX_GPIO_Init+0xb4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a25      	ldr	r2, [pc, #148]	; (800114c <MX_GPIO_Init+0xb4>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <MX_GPIO_Init+0xb4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_GPIO_Init+0xb4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a1e      	ldr	r2, [pc, #120]	; (800114c <MX_GPIO_Init+0xb4>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_GPIO_Init+0xb4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_GPIO_Init+0xb4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <MX_GPIO_Init+0xb4>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_GPIO_Init+0xb4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_GPIO_Init+0xb4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <MX_GPIO_Init+0xb4>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_GPIO_Init+0xb4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <MX_GPIO_Init+0xb8>)
 8001124:	f001 f804 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001128:	2320      	movs	r3, #32
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_GPIO_Init+0xb8>)
 8001140:	f000 fe74 	bl	8001e2c <HAL_GPIO_Init>

}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000

08001154 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_I2C1_Init+0x50>)
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <MX_I2C1_Init+0x54>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_I2C1_Init+0x58>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001176:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_I2C1_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001192:	f001 f801 	bl	8002198 <HAL_I2C_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 f908 	bl	80013b0 <Error_Handler>
  }

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000020c 	.word	0x2000020c
 80011a8:	40005400 	.word	0x40005400
 80011ac:	000186a0 	.word	0x000186a0

080011b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_I2C_MspInit+0x84>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d12b      	bne.n	800122a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_I2C_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <HAL_I2C_MspInit+0x88>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_I2C_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ee:	23c0      	movs	r3, #192	; 0xc0
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f2:	2312      	movs	r3, #18
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011fe:	2304      	movs	r3, #4
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <HAL_I2C_MspInit+0x8c>)
 800120a:	f000 fe0f 	bl	8001e2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_I2C_MspInit+0x88>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_I2C_MspInit+0x88>)
 8001218:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_I2C_MspInit+0x88>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	; 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40005400 	.word	0x40005400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020400 	.word	0x40020400

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f000 fc93 	bl	8001b70 <HAL_Init>

  /* USER CODE BEGIN Init */
  Motor_Init();
 800124a:	f000 f8b9 	bl	80013c0 <Motor_Init>
  Encoder_Init();
 800124e:	f7ff fe83 	bl	8000f58 <Encoder_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f813 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f7ff ff1f 	bl	8001098 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800125a:	f000 fbed 	bl	8001a38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800125e:	f7ff ff79 	bl	8001154 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t MSG[50]={'\0'};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2232      	movs	r2, #50	; 0x32
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f003 f819 	bl	80042a0 <memset>
  Motor_Pwm_Update(0.5);
 800126e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001272:	f000 f8b5 	bl	80013e0 <Motor_Pwm_Update>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  Encoder_Read();
 8001276:	f7ff fe85 	bl	8000f84 <Encoder_Read>
 800127a:	e7fc      	b.n	8001276 <main+0x36>

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f003 f808 	bl	80042a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <SystemClock_Config+0xd0>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a28      	ldr	r2, [pc, #160]	; (800134c <SystemClock_Config+0xd0>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <SystemClock_Config+0xd0>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <SystemClock_Config+0xd4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c8:	4a21      	ldr	r2, [pc, #132]	; (8001350 <SystemClock_Config+0xd4>)
 80012ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <SystemClock_Config+0xd4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e4:	2310      	movs	r3, #16
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e8:	2302      	movs	r3, #2
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012f0:	2310      	movs	r3, #16
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012fa:	2304      	movs	r3, #4
 80012fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012fe:	2307      	movs	r3, #7
 8001300:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	4618      	mov	r0, r3
 8001308:	f001 f87e 	bl	8002408 <HAL_RCC_OscConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001312:	f000 f84d 	bl	80013b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	230f      	movs	r3, #15
 8001318:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131a:	2302      	movs	r3, #2
 800131c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2102      	movs	r1, #2
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fad8 	bl	80028e8 <HAL_RCC_ClockConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800133e:	f000 f837 	bl	80013b0 <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	3750      	adds	r7, #80	; 0x50
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40007000 	.word	0x40007000

08001354 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	static uint16_t tempoNms = 500;
	if(tempoNms > 0 ) tempoNms--;
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_SYSTICK_Callback+0x30>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_SYSTICK_Callback+0x1a>
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_SYSTICK_Callback+0x30>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	3b01      	subs	r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_SYSTICK_Callback+0x30>)
 800136a:	801a      	strh	r2, [r3, #0]
		tempoNms = 500;
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);


	}
}
 800136c:	e007      	b.n	800137e <HAL_SYSTICK_Callback+0x2a>
		tempoNms = 500;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_SYSTICK_Callback+0x30>)
 8001370:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001374:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001376:	2120      	movs	r1, #32
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <HAL_SYSTICK_Callback+0x34>)
 800137a:	f000 fef2 	bl	8002162 <HAL_GPIO_TogglePin>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	40020000 	.word	0x40020000

0800138c <__io_putchar>:

int __io_putchar(int ch){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001394:	1d39      	adds	r1, r7, #4
 8001396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139a:	2201      	movs	r2, #1
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <__io_putchar+0x20>)
 800139e:	f002 faf6 	bl	800398e <HAL_UART_Transmit>
	return ch;
 80013a2:	687b      	ldr	r3, [r7, #4]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200002e0 	.word	0x200002e0

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <Motor_Init>:
#include "motor.h"
#include "tim.h"


void Motor_Init(void){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 80013c4:	f000 fa12 	bl	80017ec <MX_TIM3_Init>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013c8:	2100      	movs	r1, #0
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <Motor_Init+0x1c>)
 80013cc:	f001 fcde 	bl	8002d8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80013d0:	2104      	movs	r1, #4
 80013d2:	4802      	ldr	r0, [pc, #8]	; (80013dc <Motor_Init+0x1c>)
 80013d4:	f001 fcda 	bl	8002d8c <HAL_TIM_PWM_Start>
};
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000260 	.word	0x20000260

080013e0 <Motor_Pwm_Update>:


void Motor_Pwm_Update(float in){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b090      	sub	sp, #64	; 0x40
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	ed87 0a01 	vstr	s0, [r7, #4]

	TIM_OC_InitTypeDef sConfigOC1 = {0};
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	619a      	str	r2, [r3, #24]
	sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 80013fe:	2360      	movs	r3, #96	; 0x60
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC1.Pulse = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC1.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	; 0x34

	TIM_OC_InitTypeDef sConfigOC2 = {0};
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	619a      	str	r2, [r3, #24]
	sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8001422:	2360      	movs	r3, #96	; 0x60
 8001424:	60bb      	str	r3, [r7, #8]
	sConfigOC2.Pulse = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
	sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
	sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]


	if(in<-1.0){
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800143a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	d501      	bpl.n	8001448 <Motor_Pwm_Update+0x68>
		in=-1.0;
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <Motor_Pwm_Update+0x14c>)
 8001446:	607b      	str	r3, [r7, #4]
	}
	if(in>1.0){
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	dd02      	ble.n	8001460 <Motor_Pwm_Update+0x80>
			in=1.0;
 800145a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800145e:	607b      	str	r3, [r7, #4]
		}

	if(in<0.0){
 8001460:	edd7 7a01 	vldr	s15, [r7, #4]
 8001464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	d513      	bpl.n	8001496 <Motor_Pwm_Update+0xb6>
		sConfigOC1.Pulse = htim3.Init.Period*-in;
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <Motor_Pwm_Update+0x150>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800147a:	edd7 7a01 	vldr	s15, [r7, #4]
 800147e:	eef1 7a67 	vneg.f32	s15, s15
 8001482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148a:	ee17 3a90 	vmov	r3, s15
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
		sConfigOC2.Pulse = htim3.Init.Period;
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <Motor_Pwm_Update+0x150>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60fb      	str	r3, [r7, #12]
	}
	if(in>0.0){
 8001496:	edd7 7a01 	vldr	s15, [r7, #4]
 800149a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	dd11      	ble.n	80014c8 <Motor_Pwm_Update+0xe8>
			sConfigOC1.Pulse = htim3.Init.Period;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <Motor_Pwm_Update+0x150>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
			sConfigOC2.Pulse = htim3.Init.Period*in;
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <Motor_Pwm_Update+0x150>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c2:	ee17 3a90 	vmov	r3, s15
 80014c6:	60fb      	str	r3, [r7, #12]
		}
	if(in==0.0){
 80014c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	d105      	bne.n	80014e2 <Motor_Pwm_Update+0x102>
			sConfigOC1.Pulse = htim3.Init.Period;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <Motor_Pwm_Update+0x150>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
			sConfigOC2.Pulse = htim3.Init.Period;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <Motor_Pwm_Update+0x150>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60fb      	str	r3, [r7, #12]
			}

	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	2200      	movs	r2, #0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4811      	ldr	r0, [pc, #68]	; (8001530 <Motor_Pwm_Update+0x150>)
 80014ec:	f001 fd4a 	bl	8002f84 <HAL_TIM_PWM_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <Motor_Pwm_Update+0x11a>
	  {
	    Error_Handler();
 80014f6:	f7ff ff5b 	bl	80013b0 <Error_Handler>
	  }

	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	2204      	movs	r2, #4
 8001500:	4619      	mov	r1, r3
 8001502:	480b      	ldr	r0, [pc, #44]	; (8001530 <Motor_Pwm_Update+0x150>)
 8001504:	f001 fd3e 	bl	8002f84 <HAL_TIM_PWM_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <Motor_Pwm_Update+0x132>
	  {
	    Error_Handler();
 800150e:	f7ff ff4f 	bl	80013b0 <Error_Handler>
	  }
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001512:	2100      	movs	r1, #0
 8001514:	4806      	ldr	r0, [pc, #24]	; (8001530 <Motor_Pwm_Update+0x150>)
 8001516:	f001 fc39 	bl	8002d8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800151a:	2104      	movs	r1, #4
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <Motor_Pwm_Update+0x150>)
 800151e:	f001 fc35 	bl	8002d8c <HAL_TIM_PWM_Start>
}
 8001522:	bf00      	nop
 8001524:	3740      	adds	r7, #64	; 0x40
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	bf800000 	.word	0xbf800000
 8001530:	20000260 	.word	0x20000260

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_MspInit+0x4c>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_MspInit+0x4c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001572:	2007      	movs	r0, #7
 8001574:	f000 fc20 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 fb1c 	bl	8001c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80015dc:	f000 fc1f 	bl	8001e1e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e00a      	b.n	800160c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015f6:	f3af 8000 	nop.w
 80015fa:	4601      	mov	r1, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	b2ca      	uxtb	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf0      	blt.n	80015f6 <_read+0x12>
	}

return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e009      	b.n	8001644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fea7 	bl	800138c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf1      	blt.n	8001630 <_write+0x12>
	}
	return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:

int _close(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167e:	605a      	str	r2, [r3, #4]
	return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_isatty>:

int _isatty(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
	return 1;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_sbrk+0x50>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x16>
		heap_end = &end;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <_sbrk+0x50>)
 80016d2:	4a10      	ldr	r2, [pc, #64]	; (8001714 <_sbrk+0x54>)
 80016d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <_sbrk+0x50>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <_sbrk+0x50>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	466a      	mov	r2, sp
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d907      	bls.n	80016fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016ea:	f002 fdaf 	bl	800424c <__errno>
 80016ee:	4602      	mov	r2, r0
 80016f0:	230c      	movs	r3, #12
 80016f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
 80016f8:	e006      	b.n	8001708 <_sbrk+0x48>
	}

	heap_end += incr;
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <_sbrk+0x50>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a03      	ldr	r2, [pc, #12]	; (8001710 <_sbrk+0x50>)
 8001704:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000200 	.word	0x20000200
 8001714:	20000328 	.word	0x20000328

08001718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <SystemInit+0x28>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <SystemInit+0x28>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SystemInit+0x28>)
 800172e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001732:	609a      	str	r2, [r3, #8]
#endif
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	2224      	movs	r2, #36	; 0x24
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fda4 	bl	80042a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <MX_TIM2_Init+0xa4>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_TIM2_Init+0xa4>)
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_TIM2_Init+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_TIM2_Init+0xa4>)
 8001776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_TIM2_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_TIM2_Init+0xa4>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001788:	2301      	movs	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001790:	2301      	movs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017a0:	2301      	movs	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_TIM2_Init+0xa4>)
 80017b4:	f001 fb1c 	bl	8002df0 <HAL_TIM_Encoder_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80017be:	f7ff fdf7 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <MX_TIM2_Init+0xa4>)
 80017d0:	f002 f822 	bl	8003818 <HAL_TIMEx_MasterConfigSynchronization>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80017da:	f7ff fde9 	bl	80013b0 <Error_Handler>
  }

}
 80017de:	bf00      	nop
 80017e0:	3730      	adds	r7, #48	; 0x30
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200002a0 	.word	0x200002a0

080017ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08e      	sub	sp, #56	; 0x38
 80017f0:	af00      	add	r7, sp, #0
  int period= 4000; //Valeur de reload du timer 3
 80017f2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001810:	463b      	mov	r3, r7
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001822:	4b32      	ldr	r3, [pc, #200]	; (80018ec <MX_TIM3_Init+0x100>)
 8001824:	4a32      	ldr	r2, [pc, #200]	; (80018f0 <MX_TIM3_Init+0x104>)
 8001826:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001828:	4b30      	ldr	r3, [pc, #192]	; (80018ec <MX_TIM3_Init+0x100>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <MX_TIM3_Init+0x100>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = period;
 8001834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001836:	4a2d      	ldr	r2, [pc, #180]	; (80018ec <MX_TIM3_Init+0x100>)
 8001838:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <MX_TIM3_Init+0x100>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <MX_TIM3_Init+0x100>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001846:	4829      	ldr	r0, [pc, #164]	; (80018ec <MX_TIM3_Init+0x100>)
 8001848:	f001 fa40 	bl	8002ccc <HAL_TIM_Base_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001852:	f7ff fdad 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	4619      	mov	r1, r3
 8001862:	4822      	ldr	r0, [pc, #136]	; (80018ec <MX_TIM3_Init+0x100>)
 8001864:	f001 fc54 	bl	8003110 <HAL_TIM_ConfigClockSource>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800186e:	f7ff fd9f 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001872:	481e      	ldr	r0, [pc, #120]	; (80018ec <MX_TIM3_Init+0x100>)
 8001874:	f001 fa55 	bl	8002d22 <HAL_TIM_PWM_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800187e:	f7ff fd97 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	4816      	ldr	r0, [pc, #88]	; (80018ec <MX_TIM3_Init+0x100>)
 8001892:	f001 ffc1 	bl	8003818 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800189c:	f7ff fd88 	bl	80013b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a0:	2360      	movs	r3, #96	; 0x60
 80018a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	480d      	ldr	r0, [pc, #52]	; (80018ec <MX_TIM3_Init+0x100>)
 80018b8:	f001 fb64 	bl	8002f84 <HAL_TIM_PWM_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80018c2:	f7ff fd75 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	2204      	movs	r2, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4807      	ldr	r0, [pc, #28]	; (80018ec <MX_TIM3_Init+0x100>)
 80018ce:	f001 fb59 	bl	8002f84 <HAL_TIM_PWM_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80018d8:	f7ff fd6a 	bl	80013b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <MX_TIM3_Init+0x100>)
 80018de:	f000 f871 	bl	80019c4 <HAL_TIM_MspPostInit>

}
 80018e2:	bf00      	nop
 80018e4:	3738      	adds	r7, #56	; 0x38
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000260 	.word	0x20000260
 80018f0:	40000400 	.word	0x40000400

080018f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001914:	d12b      	bne.n	800196e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_TIM_Encoder_MspInit+0x84>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <HAL_TIM_Encoder_MspInit+0x84>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_TIM_Encoder_MspInit+0x84>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_TIM_Encoder_MspInit+0x84>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <HAL_TIM_Encoder_MspInit+0x84>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_TIM_Encoder_MspInit+0x84>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800194e:	2303      	movs	r3, #3
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800195e:	2301      	movs	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4804      	ldr	r0, [pc, #16]	; (800197c <HAL_TIM_Encoder_MspInit+0x88>)
 800196a:	f000 fa5f 	bl	8001e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000

08001980 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_TIM_Base_MspInit+0x3c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10d      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_TIM_Base_MspInit+0x40>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <HAL_TIM_Base_MspInit+0x40>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_TIM_Base_MspInit+0x40>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <HAL_TIM_MspPostInit+0x68>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d11d      	bne.n	8001a22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_TIM_MspPostInit+0x6c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_TIM_MspPostInit+0x6c>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_TIM_MspPostInit+0x6c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a02:	23c0      	movs	r3, #192	; 0xc0
 8001a04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <HAL_TIM_MspPostInit+0x70>)
 8001a1e:	f000 fa05 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40000400 	.word	0x40000400
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000

08001a38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_USART2_UART_Init+0x50>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a70:	f001 ff40 	bl	80038f4 <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a7a:	f7ff fc99 	bl	80013b0 <Error_Handler>
  }

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200002e0 	.word	0x200002e0
 8001a88:	40004400 	.word	0x40004400

08001a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_UART_MspInit+0x84>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12b      	bne.n	8001b06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af6:	2307      	movs	r3, #7
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <HAL_UART_MspInit+0x8c>)
 8001b02:	f000 f993 	bl	8001e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40004400 	.word	0x40004400
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b22:	e003      	b.n	8001b2c <LoopCopyDataInit>

08001b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b2a:	3104      	adds	r1, #4

08001b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b2c:	480b      	ldr	r0, [pc, #44]	; (8001b5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b34:	d3f6      	bcc.n	8001b24 <CopyDataInit>
  ldr  r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b38:	e002      	b.n	8001b40 <LoopFillZerobss>

08001b3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b3c:	f842 3b04 	str.w	r3, [r2], #4

08001b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b44:	d3f9      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b46:	f7ff fde7 	bl	8001718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f002 fb85 	bl	8004258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff fb77 	bl	8001240 <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b54:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001b58:	08007288 	.word	0x08007288
  ldr  r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b60:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001b64:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001b68:	20000328 	.word	0x20000328

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <HAL_Init+0x40>)
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_Init+0x40>)
 8001b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_Init+0x40>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f000 f90d 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 f808 	bl	8001bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba4:	f7ff fcc6 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00

08001bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x54>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x58>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f917 	bl	8001e06 <HAL_SYSTICK_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00e      	b.n	8001c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d80a      	bhi.n	8001bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f000 f8ed 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <HAL_InitTick+0x5c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	20000008 	.word	0x20000008

08001c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x20>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_IncTick+0x24>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	2000000c 	.word	0x2000000c
 8001c38:	20000320 	.word	0x20000320

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000320 	.word	0x20000320

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff8e 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff47 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff5c 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff8e 	bl	8001d0c <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5d 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffb0 	bl	8001d74 <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001e22:	f7ff fa97 	bl	8001354 <HAL_SYSTICK_Callback>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e159      	b.n	80020fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8148 	bne.w	80020f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d00b      	beq.n	8001e86 <HAL_GPIO_Init+0x5a>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7a:	2b11      	cmp	r3, #17
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d130      	bne.n	8001ee8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0xfc>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b12      	cmp	r3, #18
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a2 	beq.w	80020f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b56      	ldr	r3, [pc, #344]	; (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a55      	ldr	r2, [pc, #340]	; (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a51      	ldr	r2, [pc, #324]	; (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a48      	ldr	r2, [pc, #288]	; (8002118 <HAL_GPIO_Init+0x2ec>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x202>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a47      	ldr	r2, [pc, #284]	; (800211c <HAL_GPIO_Init+0x2f0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x1fe>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a46      	ldr	r2, [pc, #280]	; (8002120 <HAL_GPIO_Init+0x2f4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x1fa>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a45      	ldr	r2, [pc, #276]	; (8002124 <HAL_GPIO_Init+0x2f8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x1f6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a44      	ldr	r2, [pc, #272]	; (8002128 <HAL_GPIO_Init+0x2fc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x1f2>
 800201a:	2304      	movs	r3, #4
 800201c:	e008      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800201e:	2307      	movs	r3, #7
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x204>
 8002022:	2303      	movs	r3, #3
 8002024:	e004      	b.n	8002030 <HAL_GPIO_Init+0x204>
 8002026:	2302      	movs	r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800202e:	2300      	movs	r3, #0
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4093      	lsls	r3, r2
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002040:	4934      	ldr	r1, [pc, #208]	; (8002114 <HAL_GPIO_Init+0x2e8>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_GPIO_Init+0x300>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002072:	4a2e      	ldr	r2, [pc, #184]	; (800212c <HAL_GPIO_Init+0x300>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002078:	4b2c      	ldr	r3, [pc, #176]	; (800212c <HAL_GPIO_Init+0x300>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209c:	4a23      	ldr	r2, [pc, #140]	; (800212c <HAL_GPIO_Init+0x300>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_GPIO_Init+0x300>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c6:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_GPIO_Init+0x300>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020cc:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_GPIO_Init+0x300>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_GPIO_Init+0x300>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	f67f aea2 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002104:	bf00      	nop
 8002106:	3724      	adds	r7, #36	; 0x24
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40023800 	.word	0x40023800
 8002114:	40013800 	.word	0x40013800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40021000 	.word	0x40021000
 800212c:	40013c00 	.word	0x40013c00

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800214c:	e003      	b.n	8002156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	619a      	str	r2, [r3, #24]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	401a      	ands	r2, r3
 8002176:	887b      	ldrh	r3, [r7, #2]
 8002178:	429a      	cmp	r2, r3
 800217a:	d104      	bne.n	8002186 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800217c:	887b      	ldrh	r3, [r7, #2]
 800217e:	041a      	lsls	r2, r3, #16
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002184:	e002      	b.n	800218c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e11f      	b.n	80023ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fff6 	bl	80011b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2224      	movs	r2, #36	; 0x24
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021fc:	f000 fd3e 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8002200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4a7b      	ldr	r2, [pc, #492]	; (80023f4 <HAL_I2C_Init+0x25c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d807      	bhi.n	800221c <HAL_I2C_Init+0x84>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a7a      	ldr	r2, [pc, #488]	; (80023f8 <HAL_I2C_Init+0x260>)
 8002210:	4293      	cmp	r3, r2
 8002212:	bf94      	ite	ls
 8002214:	2301      	movls	r3, #1
 8002216:	2300      	movhi	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e006      	b.n	800222a <HAL_I2C_Init+0x92>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a77      	ldr	r2, [pc, #476]	; (80023fc <HAL_I2C_Init+0x264>)
 8002220:	4293      	cmp	r3, r2
 8002222:	bf94      	ite	ls
 8002224:	2301      	movls	r3, #1
 8002226:	2300      	movhi	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0db      	b.n	80023ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a72      	ldr	r2, [pc, #456]	; (8002400 <HAL_I2C_Init+0x268>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9b      	lsrs	r3, r3, #18
 800223c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a64      	ldr	r2, [pc, #400]	; (80023f4 <HAL_I2C_Init+0x25c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d802      	bhi.n	800226c <HAL_I2C_Init+0xd4>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3301      	adds	r3, #1
 800226a:	e009      	b.n	8002280 <HAL_I2C_Init+0xe8>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	4a63      	ldr	r2, [pc, #396]	; (8002404 <HAL_I2C_Init+0x26c>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	3301      	adds	r3, #1
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002292:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4956      	ldr	r1, [pc, #344]	; (80023f4 <HAL_I2C_Init+0x25c>)
 800229c:	428b      	cmp	r3, r1
 800229e:	d80d      	bhi.n	80022bc <HAL_I2C_Init+0x124>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1e59      	subs	r1, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	bf38      	it	cc
 80022b8:	2304      	movcc	r3, #4
 80022ba:	e04f      	b.n	800235c <HAL_I2C_Init+0x1c4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d111      	bne.n	80022e8 <HAL_I2C_Init+0x150>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e58      	subs	r0, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e012      	b.n	800230e <HAL_I2C_Init+0x176>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	0099      	lsls	r1, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x17e>
 8002312:	2301      	movs	r3, #1
 8002314:	e022      	b.n	800235c <HAL_I2C_Init+0x1c4>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10e      	bne.n	800233c <HAL_I2C_Init+0x1a4>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e58      	subs	r0, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	440b      	add	r3, r1
 800232c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233a:	e00f      	b.n	800235c <HAL_I2C_Init+0x1c4>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e58      	subs	r0, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	0099      	lsls	r1, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	6809      	ldr	r1, [r1, #0]
 8002360:	4313      	orrs	r3, r2
 8002362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800238a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6911      	ldr	r1, [r2, #16]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	4311      	orrs	r1, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	430b      	orrs	r3, r1
 800239e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	000186a0 	.word	0x000186a0
 80023f8:	001e847f 	.word	0x001e847f
 80023fc:	003d08ff 	.word	0x003d08ff
 8002400:	431bde83 	.word	0x431bde83
 8002404:	10624dd3 	.word	0x10624dd3

08002408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e25b      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d075      	beq.n	8002512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002426:	4ba3      	ldr	r3, [pc, #652]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b04      	cmp	r3, #4
 8002430:	d00c      	beq.n	800244c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002432:	4ba0      	ldr	r3, [pc, #640]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243a:	2b08      	cmp	r3, #8
 800243c:	d112      	bne.n	8002464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243e:	4b9d      	ldr	r3, [pc, #628]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244a:	d10b      	bne.n	8002464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	4b99      	ldr	r3, [pc, #612]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d05b      	beq.n	8002510 <HAL_RCC_OscConfig+0x108>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d157      	bne.n	8002510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e236      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x74>
 800246e:	4b91      	ldr	r3, [pc, #580]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a90      	ldr	r2, [pc, #576]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e01d      	b.n	80024b8 <HAL_RCC_OscConfig+0xb0>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x98>
 8002486:	4b8b      	ldr	r3, [pc, #556]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a8a      	ldr	r2, [pc, #552]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a87      	ldr	r2, [pc, #540]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xb0>
 80024a0:	4b84      	ldr	r3, [pc, #528]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a83      	ldr	r2, [pc, #524]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a80      	ldr	r2, [pc, #512]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fbbc 	bl	8001c3c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff fbb8 	bl	8001c3c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1fb      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0xc0>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff fba8 	bl	8001c3c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff fba4 	bl	8001c3c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1e7      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0xe8>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800251e:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252a:	4b62      	ldr	r3, [pc, #392]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002532:	2b08      	cmp	r3, #8
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b5f      	ldr	r3, [pc, #380]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b5c      	ldr	r3, [pc, #368]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x152>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1bb      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4952      	ldr	r1, [pc, #328]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e03a      	b.n	80025e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b4f      	ldr	r3, [pc, #316]	; (80026b8 <HAL_RCC_OscConfig+0x2b0>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7ff fb5d 	bl	8001c3c <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002586:	f7ff fb59 	bl	8001c3c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e19c      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b43      	ldr	r3, [pc, #268]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4940      	ldr	r1, [pc, #256]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_OscConfig+0x2b0>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7ff fb3c 	bl	8001c3c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c8:	f7ff fb38 	bl	8001c3c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e17b      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d030      	beq.n	8002654 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d016      	beq.n	8002628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fa:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_RCC_OscConfig+0x2b4>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff fb1c 	bl	8001c3c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff fb18 	bl	8001c3c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e15b      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x200>
 8002626:	e015      	b.n	8002654 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCC_OscConfig+0x2b4>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7ff fb05 	bl	8001c3c <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002636:	f7ff fb01 	bl	8001c3c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e144      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800264a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a0 	beq.w	80027a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10f      	bne.n	8002692 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x2b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d121      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCC_OscConfig+0x2b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <HAL_RCC_OscConfig+0x2b8>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7ff fac7 	bl	8001c3c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e011      	b.n	80026d6 <HAL_RCC_OscConfig+0x2ce>
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	42470000 	.word	0x42470000
 80026bc:	42470e80 	.word	0x42470e80
 80026c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c4:	f7ff faba 	bl	8001c3c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0fd      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b81      	ldr	r3, [pc, #516]	; (80028dc <HAL_RCC_OscConfig+0x4d4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x2f0>
 80026ea:	4b7d      	ldr	r3, [pc, #500]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a7c      	ldr	r2, [pc, #496]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	e01c      	b.n	8002732 <HAL_RCC_OscConfig+0x32a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d10c      	bne.n	800271a <HAL_RCC_OscConfig+0x312>
 8002700:	4b77      	ldr	r3, [pc, #476]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a76      	ldr	r2, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	4b74      	ldr	r3, [pc, #464]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a73      	ldr	r2, [pc, #460]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	e00b      	b.n	8002732 <HAL_RCC_OscConfig+0x32a>
 800271a:	4b71      	ldr	r3, [pc, #452]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a70      	ldr	r2, [pc, #448]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	4b6e      	ldr	r3, [pc, #440]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a6d      	ldr	r2, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d015      	beq.n	8002766 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7ff fa7f 	bl	8001c3c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7ff fa7b 	bl	8001c3c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0bc      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	4b61      	ldr	r3, [pc, #388]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ee      	beq.n	8002742 <HAL_RCC_OscConfig+0x33a>
 8002764:	e014      	b.n	8002790 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7ff fa69 	bl	8001c3c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7ff fa65 	bl	8001c3c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0a6      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	4b56      	ldr	r3, [pc, #344]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ee      	bne.n	800276e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b52      	ldr	r3, [pc, #328]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a51      	ldr	r2, [pc, #324]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8092 	beq.w	80028d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ac:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d05c      	beq.n	8002872 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d141      	bne.n	8002844 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b48      	ldr	r3, [pc, #288]	; (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7ff fa39 	bl	8001c3c <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ce:	f7ff fa35 	bl	8001c3c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e078      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e0:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	019b      	lsls	r3, r3, #6
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	085b      	lsrs	r3, r3, #1
 8002804:	3b01      	subs	r3, #1
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	061b      	lsls	r3, r3, #24
 8002810:	4933      	ldr	r1, [pc, #204]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002816:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fa0e 	bl	8001c3c <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002824:	f7ff fa0a 	bl	8001c3c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e04d      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x41c>
 8002842:	e045      	b.n	80028d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7ff f9f7 	bl	8001c3c <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7ff f9f3 	bl	8001c3c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e036      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x44a>
 8002870:	e02e      	b.n	80028d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e029      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_RCC_OscConfig+0x4d8>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	429a      	cmp	r2, r3
 8002890:	d11c      	bne.n	80028cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d115      	bne.n	80028cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d10d      	bne.n	80028cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40007000 	.word	0x40007000
 80028e0:	40023800 	.word	0x40023800
 80028e4:	42470060 	.word	0x42470060

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0cc      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d90c      	bls.n	8002924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b8      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002954:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	494d      	ldr	r1, [pc, #308]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d044      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d119      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e067      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4934      	ldr	r1, [pc, #208]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7ff f930 	bl	8001c3c <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7ff f92c 	bl	8001c3c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e04f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d20c      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4916      	ldr	r1, [pc, #88]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6e:	f000 f821 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4601      	mov	r1, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	5cd3      	ldrb	r3, [r2, r3]
 8002a82:	fa21 f303 	lsr.w	r3, r1, r3
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f890 	bl	8001bb4 <HAL_InitTick>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	08006f84 	.word	0x08006f84
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	20000008 	.word	0x20000008

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d007      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x32>
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d008      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x38>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 80b4 	bne.w	8002c48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ae2:	60bb      	str	r3, [r7, #8]
       break;
 8002ae4:	e0b3      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae6:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ae8:	60bb      	str	r3, [r7, #8]
      break;
 8002aea:	e0b0      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aec:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002af6:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d04a      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b02:	4b55      	ldr	r3, [pc, #340]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	f04f 0400 	mov.w	r4, #0
 8002b0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	ea03 0501 	and.w	r5, r3, r1
 8002b18:	ea04 0602 	and.w	r6, r4, r2
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	4632      	mov	r2, r6
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	f04f 0400 	mov.w	r4, #0
 8002b28:	0154      	lsls	r4, r2, #5
 8002b2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b2e:	014b      	lsls	r3, r1, #5
 8002b30:	4619      	mov	r1, r3
 8002b32:	4622      	mov	r2, r4
 8002b34:	1b49      	subs	r1, r1, r5
 8002b36:	eb62 0206 	sbc.w	r2, r2, r6
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	f04f 0400 	mov.w	r4, #0
 8002b42:	0194      	lsls	r4, r2, #6
 8002b44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b48:	018b      	lsls	r3, r1, #6
 8002b4a:	1a5b      	subs	r3, r3, r1
 8002b4c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b50:	f04f 0100 	mov.w	r1, #0
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	00e2      	lsls	r2, r4, #3
 8002b5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b5e:	00d9      	lsls	r1, r3, #3
 8002b60:	460b      	mov	r3, r1
 8002b62:	4614      	mov	r4, r2
 8002b64:	195b      	adds	r3, r3, r5
 8002b66:	eb44 0406 	adc.w	r4, r4, r6
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	0262      	lsls	r2, r4, #9
 8002b74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b78:	0259      	lsls	r1, r3, #9
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	4621      	mov	r1, r4
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f04f 0400 	mov.w	r4, #0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	f7fe f864 	bl	8000c58 <__aeabi_uldivmod>
 8002b90:	4603      	mov	r3, r0
 8002b92:	460c      	mov	r4, r1
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	e049      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b98:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	f04f 0400 	mov.w	r4, #0
 8002ba2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	ea03 0501 	and.w	r5, r3, r1
 8002bae:	ea04 0602 	and.w	r6, r4, r2
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	4632      	mov	r2, r6
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	f04f 0400 	mov.w	r4, #0
 8002bbe:	0154      	lsls	r4, r2, #5
 8002bc0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bc4:	014b      	lsls	r3, r1, #5
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4622      	mov	r2, r4
 8002bca:	1b49      	subs	r1, r1, r5
 8002bcc:	eb62 0206 	sbc.w	r2, r2, r6
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	f04f 0400 	mov.w	r4, #0
 8002bd8:	0194      	lsls	r4, r2, #6
 8002bda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bde:	018b      	lsls	r3, r1, #6
 8002be0:	1a5b      	subs	r3, r3, r1
 8002be2:	eb64 0402 	sbc.w	r4, r4, r2
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	00e2      	lsls	r2, r4, #3
 8002bf0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bf4:	00d9      	lsls	r1, r3, #3
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	195b      	adds	r3, r3, r5
 8002bfc:	eb44 0406 	adc.w	r4, r4, r6
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	02a2      	lsls	r2, r4, #10
 8002c0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c0e:	0299      	lsls	r1, r3, #10
 8002c10:	460b      	mov	r3, r1
 8002c12:	4614      	mov	r4, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	4621      	mov	r1, r4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f04f 0400 	mov.w	r4, #0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4623      	mov	r3, r4
 8002c22:	f7fe f819 	bl	8000c58 <__aeabi_uldivmod>
 8002c26:	4603      	mov	r3, r0
 8002c28:	460c      	mov	r4, r1
 8002c2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	3301      	adds	r3, #1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	60bb      	str	r3, [r7, #8]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c4a:	60bb      	str	r3, [r7, #8]
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	007a1200 	.word	0x007a1200

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000004 	.word	0x20000004

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff0 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c84:	4601      	mov	r1, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08006f94 	.word	0x08006f94

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ca8:	f7ff ffdc 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002cac:	4601      	mov	r1, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0b5b      	lsrs	r3, r3, #13
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4a03      	ldr	r2, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08006f94 	.word	0x08006f94

08002ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e01d      	b.n	8002d1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fe44 	bl	8001980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f000 fab8 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e01d      	b.n	8002d70 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f815 	bl	8002d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f000 fa8d 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	6839      	ldr	r1, [r7, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fd14 	bl	80037cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a10      	ldr	r2, [pc, #64]	; (8002dec <HAL_TIM_PWM_Start+0x60>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d107      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d007      	beq.n	8002de0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40010000 	.word	0x40010000

08002df0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e083      	b.n	8002f0c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7fe fd6b 	bl	80018f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e34:	f023 0307 	bic.w	r3, r3, #7
 8002e38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f000 fa1b 	bl	8003280 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	4313      	orrs	r3, r2
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e90:	f023 030c 	bic.w	r3, r3, #12
 8002e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	4313      	orrs	r3, r2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	011a      	lsls	r2, r3, #4
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	031b      	lsls	r3, r3, #12
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ece:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002ed6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_TIM_Encoder_Start+0x16>
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d008      	beq.n	8002f3a <HAL_TIM_Encoder_Start+0x26>
 8002f28:	e00f      	b.n	8002f4a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fc4a 	bl	80037cc <TIM_CCxChannelCmd>
      break;
 8002f38:	e016      	b.n	8002f68 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	2104      	movs	r1, #4
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fc42 	bl	80037cc <TIM_CCxChannelCmd>
      break;
 8002f48:	e00e      	b.n	8002f68 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fc3a 	bl	80037cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	2104      	movs	r1, #4
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fc33 	bl	80037cc <TIM_CCxChannelCmd>
      break;
 8002f66:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e0b4      	b.n	8003108 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	f200 809f 	bhi.w	80030f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	080030f5 	.word	0x080030f5
 8002fc4:	080030f5 	.word	0x080030f5
 8002fc8:	080030f5 	.word	0x080030f5
 8002fcc:	08003031 	.word	0x08003031
 8002fd0:	080030f5 	.word	0x080030f5
 8002fd4:	080030f5 	.word	0x080030f5
 8002fd8:	080030f5 	.word	0x080030f5
 8002fdc:	08003073 	.word	0x08003073
 8002fe0:	080030f5 	.word	0x080030f5
 8002fe4:	080030f5 	.word	0x080030f5
 8002fe8:	080030f5 	.word	0x080030f5
 8002fec:	080030b3 	.word	0x080030b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f9c2 	bl	8003380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0208 	orr.w	r2, r2, #8
 800300a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0204 	bic.w	r2, r2, #4
 800301a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6999      	ldr	r1, [r3, #24]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	619a      	str	r2, [r3, #24]
      break;
 800302e:	e062      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fa08 	bl	800344c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6999      	ldr	r1, [r3, #24]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	021a      	lsls	r2, r3, #8
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	619a      	str	r2, [r3, #24]
      break;
 8003070:	e041      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fa53 	bl	8003524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0208 	orr.w	r2, r2, #8
 800308c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0204 	bic.w	r2, r2, #4
 800309c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69d9      	ldr	r1, [r3, #28]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	61da      	str	r2, [r3, #28]
      break;
 80030b0:	e021      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fa9d 	bl	80035f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69da      	ldr	r2, [r3, #28]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69d9      	ldr	r1, [r3, #28]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	021a      	lsls	r2, r3, #8
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	61da      	str	r2, [r3, #28]
      break;
 80030f2:	e000      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80030f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_TIM_ConfigClockSource+0x18>
 8003124:	2302      	movs	r3, #2
 8003126:	e0a6      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x166>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003146:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800314e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d067      	beq.n	8003230 <HAL_TIM_ConfigClockSource+0x120>
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d80b      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x6c>
 8003164:	2b10      	cmp	r3, #16
 8003166:	d073      	beq.n	8003250 <HAL_TIM_ConfigClockSource+0x140>
 8003168:	2b10      	cmp	r3, #16
 800316a:	d802      	bhi.n	8003172 <HAL_TIM_ConfigClockSource+0x62>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d06f      	beq.n	8003250 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003170:	e078      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003172:	2b20      	cmp	r3, #32
 8003174:	d06c      	beq.n	8003250 <HAL_TIM_ConfigClockSource+0x140>
 8003176:	2b30      	cmp	r3, #48	; 0x30
 8003178:	d06a      	beq.n	8003250 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800317a:	e073      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800317c:	2b70      	cmp	r3, #112	; 0x70
 800317e:	d00d      	beq.n	800319c <HAL_TIM_ConfigClockSource+0x8c>
 8003180:	2b70      	cmp	r3, #112	; 0x70
 8003182:	d804      	bhi.n	800318e <HAL_TIM_ConfigClockSource+0x7e>
 8003184:	2b50      	cmp	r3, #80	; 0x50
 8003186:	d033      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0xe0>
 8003188:	2b60      	cmp	r3, #96	; 0x60
 800318a:	d041      	beq.n	8003210 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800318c:	e06a      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003192:	d066      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x152>
 8003194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003198:	d017      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800319a:	e063      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6899      	ldr	r1, [r3, #8]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f000 faee 	bl	800378c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	609a      	str	r2, [r3, #8]
      break;
 80031c8:	e04c      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f000 fad7 	bl	800378c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ec:	609a      	str	r2, [r3, #8]
      break;
 80031ee:	e039      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	461a      	mov	r2, r3
 80031fe:	f000 fa4b 	bl	8003698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2150      	movs	r1, #80	; 0x50
 8003208:	4618      	mov	r0, r3
 800320a:	f000 faa4 	bl	8003756 <TIM_ITRx_SetConfig>
      break;
 800320e:	e029      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	461a      	mov	r2, r3
 800321e:	f000 fa6a 	bl	80036f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2160      	movs	r1, #96	; 0x60
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fa94 	bl	8003756 <TIM_ITRx_SetConfig>
      break;
 800322e:	e019      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	461a      	mov	r2, r3
 800323e:	f000 fa2b 	bl	8003698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2140      	movs	r1, #64	; 0x40
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fa84 	bl	8003756 <TIM_ITRx_SetConfig>
      break;
 800324e:	e009      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f000 fa7b 	bl	8003756 <TIM_ITRx_SetConfig>
      break;
 8003260:	e000      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a34      	ldr	r2, [pc, #208]	; (8003364 <TIM_Base_SetConfig+0xe4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00f      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d00b      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a31      	ldr	r2, [pc, #196]	; (8003368 <TIM_Base_SetConfig+0xe8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a30      	ldr	r2, [pc, #192]	; (800336c <TIM_Base_SetConfig+0xec>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d003      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <TIM_Base_SetConfig+0xf0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d108      	bne.n	80032ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a25      	ldr	r2, [pc, #148]	; (8003364 <TIM_Base_SetConfig+0xe4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01b      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d017      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <TIM_Base_SetConfig+0xe8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a21      	ldr	r2, [pc, #132]	; (800336c <TIM_Base_SetConfig+0xec>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a20      	ldr	r2, [pc, #128]	; (8003370 <TIM_Base_SetConfig+0xf0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <TIM_Base_SetConfig+0xf4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <TIM_Base_SetConfig+0xf8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <TIM_Base_SetConfig+0xfc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a08      	ldr	r2, [pc, #32]	; (8003364 <TIM_Base_SetConfig+0xe4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40014000 	.word	0x40014000
 8003378:	40014400 	.word	0x40014400
 800337c:	40014800 	.word	0x40014800

08003380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f023 0201 	bic.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 0302 	bic.w	r3, r3, #2
 80033c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <TIM_OC1_SetConfig+0xc8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d10c      	bne.n	80033f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0308 	bic.w	r3, r3, #8
 80033e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a13      	ldr	r2, [pc, #76]	; (8003448 <TIM_OC1_SetConfig+0xc8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d111      	bne.n	8003422 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800340c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40010000 	.word	0x40010000

0800344c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f023 0210 	bic.w	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 0320 	bic.w	r3, r3, #32
 8003496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <TIM_OC2_SetConfig+0xd4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d10d      	bne.n	80034c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a15      	ldr	r2, [pc, #84]	; (8003520 <TIM_OC2_SetConfig+0xd4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d113      	bne.n	80034f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	621a      	str	r2, [r3, #32]
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40010000 	.word	0x40010000

08003524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800356c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <TIM_OC3_SetConfig+0xd0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10d      	bne.n	800359e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800359c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <TIM_OC3_SetConfig+0xd0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d113      	bne.n	80035ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	621a      	str	r2, [r3, #32]
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40010000 	.word	0x40010000

080035f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	031b      	lsls	r3, r3, #12
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a10      	ldr	r2, [pc, #64]	; (8003694 <TIM_OC4_SetConfig+0x9c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d109      	bne.n	800366c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800365e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	019b      	lsls	r3, r3, #6
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40010000 	.word	0x40010000

08003698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f023 0201 	bic.w	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f023 030a 	bic.w	r3, r3, #10
 80036d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b087      	sub	sp, #28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f023 0210 	bic.w	r2, r3, #16
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	031b      	lsls	r3, r3, #12
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003732:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	621a      	str	r2, [r3, #32]
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	f043 0307 	orr.w	r3, r3, #7
 8003778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	021a      	lsls	r2, r3, #8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	609a      	str	r2, [r3, #8]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	2201      	movs	r2, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a1a      	ldr	r2, [r3, #32]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	401a      	ands	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	431a      	orrs	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800382c:	2302      	movs	r3, #2
 800382e:	e050      	b.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d018      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387c:	d013      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00e      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a15      	ldr	r2, [pc, #84]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d10c      	bne.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40014000 	.word	0x40014000

080038f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e03f      	b.n	8003986 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fe f8b6 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	; 0x24
 8003924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f90b 	bl	8003b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800394c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800395c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800396c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b088      	sub	sp, #32
 8003992:	af02      	add	r7, sp, #8
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	f040 8083 	bne.w	8003ab6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_UART_Transmit+0x2e>
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e07b      	b.n	8003ab8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Transmit+0x40>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e074      	b.n	8003ab8 <HAL_UART_Transmit+0x12a>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2221      	movs	r2, #33	; 0x21
 80039e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039e4:	f7fe f92a 	bl	8001c3c <HAL_GetTick>
 80039e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039fe:	e042      	b.n	8003a86 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a16:	d122      	bne.n	8003a5e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2180      	movs	r1, #128	; 0x80
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f84c 	bl	8003ac0 <UART_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e042      	b.n	8003ab8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a44:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	3302      	adds	r3, #2
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	e017      	b.n	8003a86 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	e013      	b.n	8003a86 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f829 	bl	8003ac0 <UART_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e01f      	b.n	8003ab8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	60ba      	str	r2, [r7, #8]
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1b7      	bne.n	8003a00 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2200      	movs	r2, #0
 8003a98:	2140      	movs	r1, #64	; 0x40
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f810 	bl	8003ac0 <UART_WaitOnFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e006      	b.n	8003ab8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e000      	b.n	8003ab8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ab6:	2302      	movs	r3, #2
  }
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad0:	e02c      	b.n	8003b2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d028      	beq.n	8003b2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ae0:	f7fe f8ac 	bl	8001c3c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d21d      	bcs.n	8003b2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003afe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e00f      	b.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d0c3      	beq.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b96:	f023 030c 	bic.w	r3, r3, #12
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc2:	f040 818b 	bne.w	8003edc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4ac1      	ldr	r2, [pc, #772]	; (8003ed0 <UART_SetConfig+0x37c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d005      	beq.n	8003bdc <UART_SetConfig+0x88>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4abf      	ldr	r2, [pc, #764]	; (8003ed4 <UART_SetConfig+0x380>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	f040 80bd 	bne.w	8003d56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bdc:	f7ff f862 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8003be0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	461d      	mov	r5, r3
 8003be6:	f04f 0600 	mov.w	r6, #0
 8003bea:	46a8      	mov	r8, r5
 8003bec:	46b1      	mov	r9, r6
 8003bee:	eb18 0308 	adds.w	r3, r8, r8
 8003bf2:	eb49 0409 	adc.w	r4, r9, r9
 8003bf6:	4698      	mov	r8, r3
 8003bf8:	46a1      	mov	r9, r4
 8003bfa:	eb18 0805 	adds.w	r8, r8, r5
 8003bfe:	eb49 0906 	adc.w	r9, r9, r6
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c16:	4688      	mov	r8, r1
 8003c18:	4691      	mov	r9, r2
 8003c1a:	eb18 0005 	adds.w	r0, r8, r5
 8003c1e:	eb49 0106 	adc.w	r1, r9, r6
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	461d      	mov	r5, r3
 8003c28:	f04f 0600 	mov.w	r6, #0
 8003c2c:	196b      	adds	r3, r5, r5
 8003c2e:	eb46 0406 	adc.w	r4, r6, r6
 8003c32:	461a      	mov	r2, r3
 8003c34:	4623      	mov	r3, r4
 8003c36:	f7fd f80f 	bl	8000c58 <__aeabi_uldivmod>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4ba5      	ldr	r3, [pc, #660]	; (8003ed8 <UART_SetConfig+0x384>)
 8003c42:	fba3 2302 	umull	r2, r3, r3, r2
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	461d      	mov	r5, r3
 8003c50:	f04f 0600 	mov.w	r6, #0
 8003c54:	46a9      	mov	r9, r5
 8003c56:	46b2      	mov	sl, r6
 8003c58:	eb19 0309 	adds.w	r3, r9, r9
 8003c5c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c60:	4699      	mov	r9, r3
 8003c62:	46a2      	mov	sl, r4
 8003c64:	eb19 0905 	adds.w	r9, r9, r5
 8003c68:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c6c:	f04f 0100 	mov.w	r1, #0
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c80:	4689      	mov	r9, r1
 8003c82:	4692      	mov	sl, r2
 8003c84:	eb19 0005 	adds.w	r0, r9, r5
 8003c88:	eb4a 0106 	adc.w	r1, sl, r6
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	461d      	mov	r5, r3
 8003c92:	f04f 0600 	mov.w	r6, #0
 8003c96:	196b      	adds	r3, r5, r5
 8003c98:	eb46 0406 	adc.w	r4, r6, r6
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	f7fc ffda 	bl	8000c58 <__aeabi_uldivmod>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b8b      	ldr	r3, [pc, #556]	; (8003ed8 <UART_SetConfig+0x384>)
 8003cac:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	2164      	movs	r1, #100	; 0x64
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	3332      	adds	r3, #50	; 0x32
 8003cbe:	4a86      	ldr	r2, [pc, #536]	; (8003ed8 <UART_SetConfig+0x384>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ccc:	4498      	add	r8, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	461d      	mov	r5, r3
 8003cd2:	f04f 0600 	mov.w	r6, #0
 8003cd6:	46a9      	mov	r9, r5
 8003cd8:	46b2      	mov	sl, r6
 8003cda:	eb19 0309 	adds.w	r3, r9, r9
 8003cde:	eb4a 040a 	adc.w	r4, sl, sl
 8003ce2:	4699      	mov	r9, r3
 8003ce4:	46a2      	mov	sl, r4
 8003ce6:	eb19 0905 	adds.w	r9, r9, r5
 8003cea:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d02:	4689      	mov	r9, r1
 8003d04:	4692      	mov	sl, r2
 8003d06:	eb19 0005 	adds.w	r0, r9, r5
 8003d0a:	eb4a 0106 	adc.w	r1, sl, r6
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	461d      	mov	r5, r3
 8003d14:	f04f 0600 	mov.w	r6, #0
 8003d18:	196b      	adds	r3, r5, r5
 8003d1a:	eb46 0406 	adc.w	r4, r6, r6
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4623      	mov	r3, r4
 8003d22:	f7fc ff99 	bl	8000c58 <__aeabi_uldivmod>
 8003d26:	4603      	mov	r3, r0
 8003d28:	460c      	mov	r4, r1
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <UART_SetConfig+0x384>)
 8003d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2164      	movs	r1, #100	; 0x64
 8003d36:	fb01 f303 	mul.w	r3, r1, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	3332      	adds	r3, #50	; 0x32
 8003d40:	4a65      	ldr	r2, [pc, #404]	; (8003ed8 <UART_SetConfig+0x384>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	f003 0207 	and.w	r2, r3, #7
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4442      	add	r2, r8
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	e26f      	b.n	8004236 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d56:	f7fe ff91 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8003d5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	461d      	mov	r5, r3
 8003d60:	f04f 0600 	mov.w	r6, #0
 8003d64:	46a8      	mov	r8, r5
 8003d66:	46b1      	mov	r9, r6
 8003d68:	eb18 0308 	adds.w	r3, r8, r8
 8003d6c:	eb49 0409 	adc.w	r4, r9, r9
 8003d70:	4698      	mov	r8, r3
 8003d72:	46a1      	mov	r9, r4
 8003d74:	eb18 0805 	adds.w	r8, r8, r5
 8003d78:	eb49 0906 	adc.w	r9, r9, r6
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d90:	4688      	mov	r8, r1
 8003d92:	4691      	mov	r9, r2
 8003d94:	eb18 0005 	adds.w	r0, r8, r5
 8003d98:	eb49 0106 	adc.w	r1, r9, r6
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	461d      	mov	r5, r3
 8003da2:	f04f 0600 	mov.w	r6, #0
 8003da6:	196b      	adds	r3, r5, r5
 8003da8:	eb46 0406 	adc.w	r4, r6, r6
 8003dac:	461a      	mov	r2, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	f7fc ff52 	bl	8000c58 <__aeabi_uldivmod>
 8003db4:	4603      	mov	r3, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	461a      	mov	r2, r3
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <UART_SetConfig+0x384>)
 8003dbc:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	461d      	mov	r5, r3
 8003dca:	f04f 0600 	mov.w	r6, #0
 8003dce:	46a9      	mov	r9, r5
 8003dd0:	46b2      	mov	sl, r6
 8003dd2:	eb19 0309 	adds.w	r3, r9, r9
 8003dd6:	eb4a 040a 	adc.w	r4, sl, sl
 8003dda:	4699      	mov	r9, r3
 8003ddc:	46a2      	mov	sl, r4
 8003dde:	eb19 0905 	adds.w	r9, r9, r5
 8003de2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003df6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dfa:	4689      	mov	r9, r1
 8003dfc:	4692      	mov	sl, r2
 8003dfe:	eb19 0005 	adds.w	r0, r9, r5
 8003e02:	eb4a 0106 	adc.w	r1, sl, r6
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	f04f 0600 	mov.w	r6, #0
 8003e10:	196b      	adds	r3, r5, r5
 8003e12:	eb46 0406 	adc.w	r4, r6, r6
 8003e16:	461a      	mov	r2, r3
 8003e18:	4623      	mov	r3, r4
 8003e1a:	f7fc ff1d 	bl	8000c58 <__aeabi_uldivmod>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	460c      	mov	r4, r1
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b2c      	ldr	r3, [pc, #176]	; (8003ed8 <UART_SetConfig+0x384>)
 8003e26:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2164      	movs	r1, #100	; 0x64
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	3332      	adds	r3, #50	; 0x32
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <UART_SetConfig+0x384>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e46:	4498      	add	r8, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	f04f 0600 	mov.w	r6, #0
 8003e50:	46a9      	mov	r9, r5
 8003e52:	46b2      	mov	sl, r6
 8003e54:	eb19 0309 	adds.w	r3, r9, r9
 8003e58:	eb4a 040a 	adc.w	r4, sl, sl
 8003e5c:	4699      	mov	r9, r3
 8003e5e:	46a2      	mov	sl, r4
 8003e60:	eb19 0905 	adds.w	r9, r9, r5
 8003e64:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e68:	f04f 0100 	mov.w	r1, #0
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e7c:	4689      	mov	r9, r1
 8003e7e:	4692      	mov	sl, r2
 8003e80:	eb19 0005 	adds.w	r0, r9, r5
 8003e84:	eb4a 0106 	adc.w	r1, sl, r6
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	461d      	mov	r5, r3
 8003e8e:	f04f 0600 	mov.w	r6, #0
 8003e92:	196b      	adds	r3, r5, r5
 8003e94:	eb46 0406 	adc.w	r4, r6, r6
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	f7fc fedc 	bl	8000c58 <__aeabi_uldivmod>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <UART_SetConfig+0x384>)
 8003ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	2164      	movs	r1, #100	; 0x64
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	3332      	adds	r3, #50	; 0x32
 8003eba:	4a07      	ldr	r2, [pc, #28]	; (8003ed8 <UART_SetConfig+0x384>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	f003 0207 	and.w	r2, r3, #7
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4442      	add	r2, r8
 8003ecc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ece:	e1b2      	b.n	8004236 <UART_SetConfig+0x6e2>
 8003ed0:	40011000 	.word	0x40011000
 8003ed4:	40011400 	.word	0x40011400
 8003ed8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4ad7      	ldr	r2, [pc, #860]	; (8004240 <UART_SetConfig+0x6ec>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d005      	beq.n	8003ef2 <UART_SetConfig+0x39e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4ad6      	ldr	r2, [pc, #856]	; (8004244 <UART_SetConfig+0x6f0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	f040 80d1 	bne.w	8004094 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ef2:	f7fe fed7 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8003ef6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	469a      	mov	sl, r3
 8003efc:	f04f 0b00 	mov.w	fp, #0
 8003f00:	46d0      	mov	r8, sl
 8003f02:	46d9      	mov	r9, fp
 8003f04:	eb18 0308 	adds.w	r3, r8, r8
 8003f08:	eb49 0409 	adc.w	r4, r9, r9
 8003f0c:	4698      	mov	r8, r3
 8003f0e:	46a1      	mov	r9, r4
 8003f10:	eb18 080a 	adds.w	r8, r8, sl
 8003f14:	eb49 090b 	adc.w	r9, r9, fp
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f2c:	4688      	mov	r8, r1
 8003f2e:	4691      	mov	r9, r2
 8003f30:	eb1a 0508 	adds.w	r5, sl, r8
 8003f34:	eb4b 0609 	adc.w	r6, fp, r9
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	0094      	lsls	r4, r2, #2
 8003f4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f50:	008b      	lsls	r3, r1, #2
 8003f52:	461a      	mov	r2, r3
 8003f54:	4623      	mov	r3, r4
 8003f56:	4628      	mov	r0, r5
 8003f58:	4631      	mov	r1, r6
 8003f5a:	f7fc fe7d 	bl	8000c58 <__aeabi_uldivmod>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	460c      	mov	r4, r1
 8003f62:	461a      	mov	r2, r3
 8003f64:	4bb8      	ldr	r3, [pc, #736]	; (8004248 <UART_SetConfig+0x6f4>)
 8003f66:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	469b      	mov	fp, r3
 8003f74:	f04f 0c00 	mov.w	ip, #0
 8003f78:	46d9      	mov	r9, fp
 8003f7a:	46e2      	mov	sl, ip
 8003f7c:	eb19 0309 	adds.w	r3, r9, r9
 8003f80:	eb4a 040a 	adc.w	r4, sl, sl
 8003f84:	4699      	mov	r9, r3
 8003f86:	46a2      	mov	sl, r4
 8003f88:	eb19 090b 	adds.w	r9, r9, fp
 8003f8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa4:	4689      	mov	r9, r1
 8003fa6:	4692      	mov	sl, r2
 8003fa8:	eb1b 0509 	adds.w	r5, fp, r9
 8003fac:	eb4c 060a 	adc.w	r6, ip, sl
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	f04f 0400 	mov.w	r4, #0
 8003fc2:	0094      	lsls	r4, r2, #2
 8003fc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fc8:	008b      	lsls	r3, r1, #2
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4623      	mov	r3, r4
 8003fce:	4628      	mov	r0, r5
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	f7fc fe41 	bl	8000c58 <__aeabi_uldivmod>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	460c      	mov	r4, r1
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b9a      	ldr	r3, [pc, #616]	; (8004248 <UART_SetConfig+0x6f4>)
 8003fde:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	2164      	movs	r1, #100	; 0x64
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	3332      	adds	r3, #50	; 0x32
 8003ff0:	4a95      	ldr	r2, [pc, #596]	; (8004248 <UART_SetConfig+0x6f4>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffc:	4498      	add	r8, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	469b      	mov	fp, r3
 8004002:	f04f 0c00 	mov.w	ip, #0
 8004006:	46d9      	mov	r9, fp
 8004008:	46e2      	mov	sl, ip
 800400a:	eb19 0309 	adds.w	r3, r9, r9
 800400e:	eb4a 040a 	adc.w	r4, sl, sl
 8004012:	4699      	mov	r9, r3
 8004014:	46a2      	mov	sl, r4
 8004016:	eb19 090b 	adds.w	r9, r9, fp
 800401a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800402a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800402e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004032:	4689      	mov	r9, r1
 8004034:	4692      	mov	sl, r2
 8004036:	eb1b 0509 	adds.w	r5, fp, r9
 800403a:	eb4c 060a 	adc.w	r6, ip, sl
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4619      	mov	r1, r3
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	f04f 0400 	mov.w	r4, #0
 8004050:	0094      	lsls	r4, r2, #2
 8004052:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004056:	008b      	lsls	r3, r1, #2
 8004058:	461a      	mov	r2, r3
 800405a:	4623      	mov	r3, r4
 800405c:	4628      	mov	r0, r5
 800405e:	4631      	mov	r1, r6
 8004060:	f7fc fdfa 	bl	8000c58 <__aeabi_uldivmod>
 8004064:	4603      	mov	r3, r0
 8004066:	460c      	mov	r4, r1
 8004068:	461a      	mov	r2, r3
 800406a:	4b77      	ldr	r3, [pc, #476]	; (8004248 <UART_SetConfig+0x6f4>)
 800406c:	fba3 1302 	umull	r1, r3, r3, r2
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	2164      	movs	r1, #100	; 0x64
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	3332      	adds	r3, #50	; 0x32
 800407e:	4a72      	ldr	r2, [pc, #456]	; (8004248 <UART_SetConfig+0x6f4>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	f003 020f 	and.w	r2, r3, #15
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4442      	add	r2, r8
 8004090:	609a      	str	r2, [r3, #8]
 8004092:	e0d0      	b.n	8004236 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004094:	f7fe fdf2 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8004098:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	469a      	mov	sl, r3
 800409e:	f04f 0b00 	mov.w	fp, #0
 80040a2:	46d0      	mov	r8, sl
 80040a4:	46d9      	mov	r9, fp
 80040a6:	eb18 0308 	adds.w	r3, r8, r8
 80040aa:	eb49 0409 	adc.w	r4, r9, r9
 80040ae:	4698      	mov	r8, r3
 80040b0:	46a1      	mov	r9, r4
 80040b2:	eb18 080a 	adds.w	r8, r8, sl
 80040b6:	eb49 090b 	adc.w	r9, r9, fp
 80040ba:	f04f 0100 	mov.w	r1, #0
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040ce:	4688      	mov	r8, r1
 80040d0:	4691      	mov	r9, r2
 80040d2:	eb1a 0508 	adds.w	r5, sl, r8
 80040d6:	eb4b 0609 	adc.w	r6, fp, r9
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4619      	mov	r1, r3
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	f04f 0400 	mov.w	r4, #0
 80040ec:	0094      	lsls	r4, r2, #2
 80040ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040f2:	008b      	lsls	r3, r1, #2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4623      	mov	r3, r4
 80040f8:	4628      	mov	r0, r5
 80040fa:	4631      	mov	r1, r6
 80040fc:	f7fc fdac 	bl	8000c58 <__aeabi_uldivmod>
 8004100:	4603      	mov	r3, r0
 8004102:	460c      	mov	r4, r1
 8004104:	461a      	mov	r2, r3
 8004106:	4b50      	ldr	r3, [pc, #320]	; (8004248 <UART_SetConfig+0x6f4>)
 8004108:	fba3 2302 	umull	r2, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	469b      	mov	fp, r3
 8004116:	f04f 0c00 	mov.w	ip, #0
 800411a:	46d9      	mov	r9, fp
 800411c:	46e2      	mov	sl, ip
 800411e:	eb19 0309 	adds.w	r3, r9, r9
 8004122:	eb4a 040a 	adc.w	r4, sl, sl
 8004126:	4699      	mov	r9, r3
 8004128:	46a2      	mov	sl, r4
 800412a:	eb19 090b 	adds.w	r9, r9, fp
 800412e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004132:	f04f 0100 	mov.w	r1, #0
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004146:	4689      	mov	r9, r1
 8004148:	4692      	mov	sl, r2
 800414a:	eb1b 0509 	adds.w	r5, fp, r9
 800414e:	eb4c 060a 	adc.w	r6, ip, sl
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4619      	mov	r1, r3
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	f04f 0400 	mov.w	r4, #0
 8004164:	0094      	lsls	r4, r2, #2
 8004166:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800416a:	008b      	lsls	r3, r1, #2
 800416c:	461a      	mov	r2, r3
 800416e:	4623      	mov	r3, r4
 8004170:	4628      	mov	r0, r5
 8004172:	4631      	mov	r1, r6
 8004174:	f7fc fd70 	bl	8000c58 <__aeabi_uldivmod>
 8004178:	4603      	mov	r3, r0
 800417a:	460c      	mov	r4, r1
 800417c:	461a      	mov	r2, r3
 800417e:	4b32      	ldr	r3, [pc, #200]	; (8004248 <UART_SetConfig+0x6f4>)
 8004180:	fba3 1302 	umull	r1, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2164      	movs	r1, #100	; 0x64
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	3332      	adds	r3, #50	; 0x32
 8004192:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <UART_SetConfig+0x6f4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419e:	4498      	add	r8, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	469b      	mov	fp, r3
 80041a4:	f04f 0c00 	mov.w	ip, #0
 80041a8:	46d9      	mov	r9, fp
 80041aa:	46e2      	mov	sl, ip
 80041ac:	eb19 0309 	adds.w	r3, r9, r9
 80041b0:	eb4a 040a 	adc.w	r4, sl, sl
 80041b4:	4699      	mov	r9, r3
 80041b6:	46a2      	mov	sl, r4
 80041b8:	eb19 090b 	adds.w	r9, r9, fp
 80041bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041d4:	4689      	mov	r9, r1
 80041d6:	4692      	mov	sl, r2
 80041d8:	eb1b 0509 	adds.w	r5, fp, r9
 80041dc:	eb4c 060a 	adc.w	r6, ip, sl
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4619      	mov	r1, r3
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	f04f 0400 	mov.w	r4, #0
 80041f2:	0094      	lsls	r4, r2, #2
 80041f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041f8:	008b      	lsls	r3, r1, #2
 80041fa:	461a      	mov	r2, r3
 80041fc:	4623      	mov	r3, r4
 80041fe:	4628      	mov	r0, r5
 8004200:	4631      	mov	r1, r6
 8004202:	f7fc fd29 	bl	8000c58 <__aeabi_uldivmod>
 8004206:	4603      	mov	r3, r0
 8004208:	460c      	mov	r4, r1
 800420a:	461a      	mov	r2, r3
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <UART_SetConfig+0x6f4>)
 800420e:	fba3 1302 	umull	r1, r3, r3, r2
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2164      	movs	r1, #100	; 0x64
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	3332      	adds	r3, #50	; 0x32
 8004220:	4a09      	ldr	r2, [pc, #36]	; (8004248 <UART_SetConfig+0x6f4>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	f003 020f 	and.w	r2, r3, #15
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4442      	add	r2, r8
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	e7ff      	b.n	8004236 <UART_SetConfig+0x6e2>
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004240:	40011000 	.word	0x40011000
 8004244:	40011400 	.word	0x40011400
 8004248:	51eb851f 	.word	0x51eb851f

0800424c <__errno>:
 800424c:	4b01      	ldr	r3, [pc, #4]	; (8004254 <__errno+0x8>)
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000010 	.word	0x20000010

08004258 <__libc_init_array>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	4e0d      	ldr	r6, [pc, #52]	; (8004290 <__libc_init_array+0x38>)
 800425c:	4c0d      	ldr	r4, [pc, #52]	; (8004294 <__libc_init_array+0x3c>)
 800425e:	1ba4      	subs	r4, r4, r6
 8004260:	10a4      	asrs	r4, r4, #2
 8004262:	2500      	movs	r5, #0
 8004264:	42a5      	cmp	r5, r4
 8004266:	d109      	bne.n	800427c <__libc_init_array+0x24>
 8004268:	4e0b      	ldr	r6, [pc, #44]	; (8004298 <__libc_init_array+0x40>)
 800426a:	4c0c      	ldr	r4, [pc, #48]	; (800429c <__libc_init_array+0x44>)
 800426c:	f002 fe78 	bl	8006f60 <_init>
 8004270:	1ba4      	subs	r4, r4, r6
 8004272:	10a4      	asrs	r4, r4, #2
 8004274:	2500      	movs	r5, #0
 8004276:	42a5      	cmp	r5, r4
 8004278:	d105      	bne.n	8004286 <__libc_init_array+0x2e>
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004280:	4798      	blx	r3
 8004282:	3501      	adds	r5, #1
 8004284:	e7ee      	b.n	8004264 <__libc_init_array+0xc>
 8004286:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800428a:	4798      	blx	r3
 800428c:	3501      	adds	r5, #1
 800428e:	e7f2      	b.n	8004276 <__libc_init_array+0x1e>
 8004290:	08007280 	.word	0x08007280
 8004294:	08007280 	.word	0x08007280
 8004298:	08007280 	.word	0x08007280
 800429c:	08007284 	.word	0x08007284

080042a0 <memset>:
 80042a0:	4402      	add	r2, r0
 80042a2:	4603      	mov	r3, r0
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d100      	bne.n	80042aa <memset+0xa>
 80042a8:	4770      	bx	lr
 80042aa:	f803 1b01 	strb.w	r1, [r3], #1
 80042ae:	e7f9      	b.n	80042a4 <memset+0x4>

080042b0 <__cvt>:
 80042b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	ec55 4b10 	vmov	r4, r5, d0
 80042b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80042ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042be:	2d00      	cmp	r5, #0
 80042c0:	460e      	mov	r6, r1
 80042c2:	4691      	mov	r9, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	bfb8      	it	lt
 80042c8:	4622      	movlt	r2, r4
 80042ca:	462b      	mov	r3, r5
 80042cc:	f027 0720 	bic.w	r7, r7, #32
 80042d0:	bfbb      	ittet	lt
 80042d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042d6:	461d      	movlt	r5, r3
 80042d8:	2300      	movge	r3, #0
 80042da:	232d      	movlt	r3, #45	; 0x2d
 80042dc:	bfb8      	it	lt
 80042de:	4614      	movlt	r4, r2
 80042e0:	2f46      	cmp	r7, #70	; 0x46
 80042e2:	700b      	strb	r3, [r1, #0]
 80042e4:	d004      	beq.n	80042f0 <__cvt+0x40>
 80042e6:	2f45      	cmp	r7, #69	; 0x45
 80042e8:	d100      	bne.n	80042ec <__cvt+0x3c>
 80042ea:	3601      	adds	r6, #1
 80042ec:	2102      	movs	r1, #2
 80042ee:	e000      	b.n	80042f2 <__cvt+0x42>
 80042f0:	2103      	movs	r1, #3
 80042f2:	ab03      	add	r3, sp, #12
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	ab02      	add	r3, sp, #8
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	4632      	mov	r2, r6
 80042fc:	4653      	mov	r3, sl
 80042fe:	ec45 4b10 	vmov	d0, r4, r5
 8004302:	f000 fcf5 	bl	8004cf0 <_dtoa_r>
 8004306:	2f47      	cmp	r7, #71	; 0x47
 8004308:	4680      	mov	r8, r0
 800430a:	d102      	bne.n	8004312 <__cvt+0x62>
 800430c:	f019 0f01 	tst.w	r9, #1
 8004310:	d026      	beq.n	8004360 <__cvt+0xb0>
 8004312:	2f46      	cmp	r7, #70	; 0x46
 8004314:	eb08 0906 	add.w	r9, r8, r6
 8004318:	d111      	bne.n	800433e <__cvt+0x8e>
 800431a:	f898 3000 	ldrb.w	r3, [r8]
 800431e:	2b30      	cmp	r3, #48	; 0x30
 8004320:	d10a      	bne.n	8004338 <__cvt+0x88>
 8004322:	2200      	movs	r2, #0
 8004324:	2300      	movs	r3, #0
 8004326:	4620      	mov	r0, r4
 8004328:	4629      	mov	r1, r5
 800432a:	f7fc fbd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800432e:	b918      	cbnz	r0, 8004338 <__cvt+0x88>
 8004330:	f1c6 0601 	rsb	r6, r6, #1
 8004334:	f8ca 6000 	str.w	r6, [sl]
 8004338:	f8da 3000 	ldr.w	r3, [sl]
 800433c:	4499      	add	r9, r3
 800433e:	2200      	movs	r2, #0
 8004340:	2300      	movs	r3, #0
 8004342:	4620      	mov	r0, r4
 8004344:	4629      	mov	r1, r5
 8004346:	f7fc fbc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800434a:	b938      	cbnz	r0, 800435c <__cvt+0xac>
 800434c:	2230      	movs	r2, #48	; 0x30
 800434e:	9b03      	ldr	r3, [sp, #12]
 8004350:	454b      	cmp	r3, r9
 8004352:	d205      	bcs.n	8004360 <__cvt+0xb0>
 8004354:	1c59      	adds	r1, r3, #1
 8004356:	9103      	str	r1, [sp, #12]
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	e7f8      	b.n	800434e <__cvt+0x9e>
 800435c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004364:	eba3 0308 	sub.w	r3, r3, r8
 8004368:	4640      	mov	r0, r8
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	b004      	add	sp, #16
 800436e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004372 <__exponent>:
 8004372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004374:	2900      	cmp	r1, #0
 8004376:	4604      	mov	r4, r0
 8004378:	bfba      	itte	lt
 800437a:	4249      	neglt	r1, r1
 800437c:	232d      	movlt	r3, #45	; 0x2d
 800437e:	232b      	movge	r3, #43	; 0x2b
 8004380:	2909      	cmp	r1, #9
 8004382:	f804 2b02 	strb.w	r2, [r4], #2
 8004386:	7043      	strb	r3, [r0, #1]
 8004388:	dd20      	ble.n	80043cc <__exponent+0x5a>
 800438a:	f10d 0307 	add.w	r3, sp, #7
 800438e:	461f      	mov	r7, r3
 8004390:	260a      	movs	r6, #10
 8004392:	fb91 f5f6 	sdiv	r5, r1, r6
 8004396:	fb06 1115 	mls	r1, r6, r5, r1
 800439a:	3130      	adds	r1, #48	; 0x30
 800439c:	2d09      	cmp	r5, #9
 800439e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043a2:	f103 32ff 	add.w	r2, r3, #4294967295
 80043a6:	4629      	mov	r1, r5
 80043a8:	dc09      	bgt.n	80043be <__exponent+0x4c>
 80043aa:	3130      	adds	r1, #48	; 0x30
 80043ac:	3b02      	subs	r3, #2
 80043ae:	f802 1c01 	strb.w	r1, [r2, #-1]
 80043b2:	42bb      	cmp	r3, r7
 80043b4:	4622      	mov	r2, r4
 80043b6:	d304      	bcc.n	80043c2 <__exponent+0x50>
 80043b8:	1a10      	subs	r0, r2, r0
 80043ba:	b003      	add	sp, #12
 80043bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043be:	4613      	mov	r3, r2
 80043c0:	e7e7      	b.n	8004392 <__exponent+0x20>
 80043c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043c6:	f804 2b01 	strb.w	r2, [r4], #1
 80043ca:	e7f2      	b.n	80043b2 <__exponent+0x40>
 80043cc:	2330      	movs	r3, #48	; 0x30
 80043ce:	4419      	add	r1, r3
 80043d0:	7083      	strb	r3, [r0, #2]
 80043d2:	1d02      	adds	r2, r0, #4
 80043d4:	70c1      	strb	r1, [r0, #3]
 80043d6:	e7ef      	b.n	80043b8 <__exponent+0x46>

080043d8 <_printf_float>:
 80043d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043dc:	b08d      	sub	sp, #52	; 0x34
 80043de:	460c      	mov	r4, r1
 80043e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80043e4:	4616      	mov	r6, r2
 80043e6:	461f      	mov	r7, r3
 80043e8:	4605      	mov	r5, r0
 80043ea:	f001 fb03 	bl	80059f4 <_localeconv_r>
 80043ee:	6803      	ldr	r3, [r0, #0]
 80043f0:	9304      	str	r3, [sp, #16]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fb fef4 	bl	80001e0 <strlen>
 80043f8:	2300      	movs	r3, #0
 80043fa:	930a      	str	r3, [sp, #40]	; 0x28
 80043fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004400:	9005      	str	r0, [sp, #20]
 8004402:	3307      	adds	r3, #7
 8004404:	f023 0307 	bic.w	r3, r3, #7
 8004408:	f103 0208 	add.w	r2, r3, #8
 800440c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004410:	f8d4 b000 	ldr.w	fp, [r4]
 8004414:	f8c8 2000 	str.w	r2, [r8]
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004420:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004424:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004428:	9307      	str	r3, [sp, #28]
 800442a:	f8cd 8018 	str.w	r8, [sp, #24]
 800442e:	f04f 32ff 	mov.w	r2, #4294967295
 8004432:	4ba7      	ldr	r3, [pc, #668]	; (80046d0 <_printf_float+0x2f8>)
 8004434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004438:	f7fc fb80 	bl	8000b3c <__aeabi_dcmpun>
 800443c:	bb70      	cbnz	r0, 800449c <_printf_float+0xc4>
 800443e:	f04f 32ff 	mov.w	r2, #4294967295
 8004442:	4ba3      	ldr	r3, [pc, #652]	; (80046d0 <_printf_float+0x2f8>)
 8004444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004448:	f7fc fb5a 	bl	8000b00 <__aeabi_dcmple>
 800444c:	bb30      	cbnz	r0, 800449c <_printf_float+0xc4>
 800444e:	2200      	movs	r2, #0
 8004450:	2300      	movs	r3, #0
 8004452:	4640      	mov	r0, r8
 8004454:	4649      	mov	r1, r9
 8004456:	f7fc fb49 	bl	8000aec <__aeabi_dcmplt>
 800445a:	b110      	cbz	r0, 8004462 <_printf_float+0x8a>
 800445c:	232d      	movs	r3, #45	; 0x2d
 800445e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004462:	4a9c      	ldr	r2, [pc, #624]	; (80046d4 <_printf_float+0x2fc>)
 8004464:	4b9c      	ldr	r3, [pc, #624]	; (80046d8 <_printf_float+0x300>)
 8004466:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800446a:	bf8c      	ite	hi
 800446c:	4690      	movhi	r8, r2
 800446e:	4698      	movls	r8, r3
 8004470:	2303      	movs	r3, #3
 8004472:	f02b 0204 	bic.w	r2, fp, #4
 8004476:	6123      	str	r3, [r4, #16]
 8004478:	6022      	str	r2, [r4, #0]
 800447a:	f04f 0900 	mov.w	r9, #0
 800447e:	9700      	str	r7, [sp, #0]
 8004480:	4633      	mov	r3, r6
 8004482:	aa0b      	add	r2, sp, #44	; 0x2c
 8004484:	4621      	mov	r1, r4
 8004486:	4628      	mov	r0, r5
 8004488:	f000 f9e6 	bl	8004858 <_printf_common>
 800448c:	3001      	adds	r0, #1
 800448e:	f040 808d 	bne.w	80045ac <_printf_float+0x1d4>
 8004492:	f04f 30ff 	mov.w	r0, #4294967295
 8004496:	b00d      	add	sp, #52	; 0x34
 8004498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449c:	4642      	mov	r2, r8
 800449e:	464b      	mov	r3, r9
 80044a0:	4640      	mov	r0, r8
 80044a2:	4649      	mov	r1, r9
 80044a4:	f7fc fb4a 	bl	8000b3c <__aeabi_dcmpun>
 80044a8:	b110      	cbz	r0, 80044b0 <_printf_float+0xd8>
 80044aa:	4a8c      	ldr	r2, [pc, #560]	; (80046dc <_printf_float+0x304>)
 80044ac:	4b8c      	ldr	r3, [pc, #560]	; (80046e0 <_printf_float+0x308>)
 80044ae:	e7da      	b.n	8004466 <_printf_float+0x8e>
 80044b0:	6861      	ldr	r1, [r4, #4]
 80044b2:	1c4b      	adds	r3, r1, #1
 80044b4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80044b8:	a80a      	add	r0, sp, #40	; 0x28
 80044ba:	d13e      	bne.n	800453a <_printf_float+0x162>
 80044bc:	2306      	movs	r3, #6
 80044be:	6063      	str	r3, [r4, #4]
 80044c0:	2300      	movs	r3, #0
 80044c2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80044c6:	ab09      	add	r3, sp, #36	; 0x24
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	ec49 8b10 	vmov	d0, r8, r9
 80044ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044d2:	6022      	str	r2, [r4, #0]
 80044d4:	f8cd a004 	str.w	sl, [sp, #4]
 80044d8:	6861      	ldr	r1, [r4, #4]
 80044da:	4628      	mov	r0, r5
 80044dc:	f7ff fee8 	bl	80042b0 <__cvt>
 80044e0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80044e4:	2b47      	cmp	r3, #71	; 0x47
 80044e6:	4680      	mov	r8, r0
 80044e8:	d109      	bne.n	80044fe <_printf_float+0x126>
 80044ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ec:	1cd8      	adds	r0, r3, #3
 80044ee:	db02      	blt.n	80044f6 <_printf_float+0x11e>
 80044f0:	6862      	ldr	r2, [r4, #4]
 80044f2:	4293      	cmp	r3, r2
 80044f4:	dd47      	ble.n	8004586 <_printf_float+0x1ae>
 80044f6:	f1aa 0a02 	sub.w	sl, sl, #2
 80044fa:	fa5f fa8a 	uxtb.w	sl, sl
 80044fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004504:	d824      	bhi.n	8004550 <_printf_float+0x178>
 8004506:	3901      	subs	r1, #1
 8004508:	4652      	mov	r2, sl
 800450a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800450e:	9109      	str	r1, [sp, #36]	; 0x24
 8004510:	f7ff ff2f 	bl	8004372 <__exponent>
 8004514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004516:	1813      	adds	r3, r2, r0
 8004518:	2a01      	cmp	r2, #1
 800451a:	4681      	mov	r9, r0
 800451c:	6123      	str	r3, [r4, #16]
 800451e:	dc02      	bgt.n	8004526 <_printf_float+0x14e>
 8004520:	6822      	ldr	r2, [r4, #0]
 8004522:	07d1      	lsls	r1, r2, #31
 8004524:	d501      	bpl.n	800452a <_printf_float+0x152>
 8004526:	3301      	adds	r3, #1
 8004528:	6123      	str	r3, [r4, #16]
 800452a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0a5      	beq.n	800447e <_printf_float+0xa6>
 8004532:	232d      	movs	r3, #45	; 0x2d
 8004534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004538:	e7a1      	b.n	800447e <_printf_float+0xa6>
 800453a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800453e:	f000 8177 	beq.w	8004830 <_printf_float+0x458>
 8004542:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004546:	d1bb      	bne.n	80044c0 <_printf_float+0xe8>
 8004548:	2900      	cmp	r1, #0
 800454a:	d1b9      	bne.n	80044c0 <_printf_float+0xe8>
 800454c:	2301      	movs	r3, #1
 800454e:	e7b6      	b.n	80044be <_printf_float+0xe6>
 8004550:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004554:	d119      	bne.n	800458a <_printf_float+0x1b2>
 8004556:	2900      	cmp	r1, #0
 8004558:	6863      	ldr	r3, [r4, #4]
 800455a:	dd0c      	ble.n	8004576 <_printf_float+0x19e>
 800455c:	6121      	str	r1, [r4, #16]
 800455e:	b913      	cbnz	r3, 8004566 <_printf_float+0x18e>
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	07d2      	lsls	r2, r2, #31
 8004564:	d502      	bpl.n	800456c <_printf_float+0x194>
 8004566:	3301      	adds	r3, #1
 8004568:	440b      	add	r3, r1
 800456a:	6123      	str	r3, [r4, #16]
 800456c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004570:	f04f 0900 	mov.w	r9, #0
 8004574:	e7d9      	b.n	800452a <_printf_float+0x152>
 8004576:	b913      	cbnz	r3, 800457e <_printf_float+0x1a6>
 8004578:	6822      	ldr	r2, [r4, #0]
 800457a:	07d0      	lsls	r0, r2, #31
 800457c:	d501      	bpl.n	8004582 <_printf_float+0x1aa>
 800457e:	3302      	adds	r3, #2
 8004580:	e7f3      	b.n	800456a <_printf_float+0x192>
 8004582:	2301      	movs	r3, #1
 8004584:	e7f1      	b.n	800456a <_printf_float+0x192>
 8004586:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800458a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800458e:	4293      	cmp	r3, r2
 8004590:	db05      	blt.n	800459e <_printf_float+0x1c6>
 8004592:	6822      	ldr	r2, [r4, #0]
 8004594:	6123      	str	r3, [r4, #16]
 8004596:	07d1      	lsls	r1, r2, #31
 8004598:	d5e8      	bpl.n	800456c <_printf_float+0x194>
 800459a:	3301      	adds	r3, #1
 800459c:	e7e5      	b.n	800456a <_printf_float+0x192>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bfd4      	ite	le
 80045a2:	f1c3 0302 	rsble	r3, r3, #2
 80045a6:	2301      	movgt	r3, #1
 80045a8:	4413      	add	r3, r2
 80045aa:	e7de      	b.n	800456a <_printf_float+0x192>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	055a      	lsls	r2, r3, #21
 80045b0:	d407      	bmi.n	80045c2 <_printf_float+0x1ea>
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	4642      	mov	r2, r8
 80045b6:	4631      	mov	r1, r6
 80045b8:	4628      	mov	r0, r5
 80045ba:	47b8      	blx	r7
 80045bc:	3001      	adds	r0, #1
 80045be:	d12b      	bne.n	8004618 <_printf_float+0x240>
 80045c0:	e767      	b.n	8004492 <_printf_float+0xba>
 80045c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80045c6:	f240 80dc 	bls.w	8004782 <_printf_float+0x3aa>
 80045ca:	2200      	movs	r2, #0
 80045cc:	2300      	movs	r3, #0
 80045ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045d2:	f7fc fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d033      	beq.n	8004642 <_printf_float+0x26a>
 80045da:	2301      	movs	r3, #1
 80045dc:	4a41      	ldr	r2, [pc, #260]	; (80046e4 <_printf_float+0x30c>)
 80045de:	4631      	mov	r1, r6
 80045e0:	4628      	mov	r0, r5
 80045e2:	47b8      	blx	r7
 80045e4:	3001      	adds	r0, #1
 80045e6:	f43f af54 	beq.w	8004492 <_printf_float+0xba>
 80045ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045ee:	429a      	cmp	r2, r3
 80045f0:	db02      	blt.n	80045f8 <_printf_float+0x220>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	07d8      	lsls	r0, r3, #31
 80045f6:	d50f      	bpl.n	8004618 <_printf_float+0x240>
 80045f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045fc:	4631      	mov	r1, r6
 80045fe:	4628      	mov	r0, r5
 8004600:	47b8      	blx	r7
 8004602:	3001      	adds	r0, #1
 8004604:	f43f af45 	beq.w	8004492 <_printf_float+0xba>
 8004608:	f04f 0800 	mov.w	r8, #0
 800460c:	f104 091a 	add.w	r9, r4, #26
 8004610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	4543      	cmp	r3, r8
 8004616:	dc09      	bgt.n	800462c <_printf_float+0x254>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	079b      	lsls	r3, r3, #30
 800461c:	f100 8103 	bmi.w	8004826 <_printf_float+0x44e>
 8004620:	68e0      	ldr	r0, [r4, #12]
 8004622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004624:	4298      	cmp	r0, r3
 8004626:	bfb8      	it	lt
 8004628:	4618      	movlt	r0, r3
 800462a:	e734      	b.n	8004496 <_printf_float+0xbe>
 800462c:	2301      	movs	r3, #1
 800462e:	464a      	mov	r2, r9
 8004630:	4631      	mov	r1, r6
 8004632:	4628      	mov	r0, r5
 8004634:	47b8      	blx	r7
 8004636:	3001      	adds	r0, #1
 8004638:	f43f af2b 	beq.w	8004492 <_printf_float+0xba>
 800463c:	f108 0801 	add.w	r8, r8, #1
 8004640:	e7e6      	b.n	8004610 <_printf_float+0x238>
 8004642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	dc2b      	bgt.n	80046a0 <_printf_float+0x2c8>
 8004648:	2301      	movs	r3, #1
 800464a:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <_printf_float+0x30c>)
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f af1d 	beq.w	8004492 <_printf_float+0xba>
 8004658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465a:	b923      	cbnz	r3, 8004666 <_printf_float+0x28e>
 800465c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800465e:	b913      	cbnz	r3, 8004666 <_printf_float+0x28e>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	07d9      	lsls	r1, r3, #31
 8004664:	d5d8      	bpl.n	8004618 <_printf_float+0x240>
 8004666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	f43f af0e 	beq.w	8004492 <_printf_float+0xba>
 8004676:	f04f 0900 	mov.w	r9, #0
 800467a:	f104 0a1a 	add.w	sl, r4, #26
 800467e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004680:	425b      	negs	r3, r3
 8004682:	454b      	cmp	r3, r9
 8004684:	dc01      	bgt.n	800468a <_printf_float+0x2b2>
 8004686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004688:	e794      	b.n	80045b4 <_printf_float+0x1dc>
 800468a:	2301      	movs	r3, #1
 800468c:	4652      	mov	r2, sl
 800468e:	4631      	mov	r1, r6
 8004690:	4628      	mov	r0, r5
 8004692:	47b8      	blx	r7
 8004694:	3001      	adds	r0, #1
 8004696:	f43f aefc 	beq.w	8004492 <_printf_float+0xba>
 800469a:	f109 0901 	add.w	r9, r9, #1
 800469e:	e7ee      	b.n	800467e <_printf_float+0x2a6>
 80046a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046a4:	429a      	cmp	r2, r3
 80046a6:	bfa8      	it	ge
 80046a8:	461a      	movge	r2, r3
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	4691      	mov	r9, r2
 80046ae:	dd07      	ble.n	80046c0 <_printf_float+0x2e8>
 80046b0:	4613      	mov	r3, r2
 80046b2:	4631      	mov	r1, r6
 80046b4:	4642      	mov	r2, r8
 80046b6:	4628      	mov	r0, r5
 80046b8:	47b8      	blx	r7
 80046ba:	3001      	adds	r0, #1
 80046bc:	f43f aee9 	beq.w	8004492 <_printf_float+0xba>
 80046c0:	f104 031a 	add.w	r3, r4, #26
 80046c4:	f04f 0b00 	mov.w	fp, #0
 80046c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046cc:	9306      	str	r3, [sp, #24]
 80046ce:	e015      	b.n	80046fc <_printf_float+0x324>
 80046d0:	7fefffff 	.word	0x7fefffff
 80046d4:	08006fa4 	.word	0x08006fa4
 80046d8:	08006fa0 	.word	0x08006fa0
 80046dc:	08006fac 	.word	0x08006fac
 80046e0:	08006fa8 	.word	0x08006fa8
 80046e4:	08006fb0 	.word	0x08006fb0
 80046e8:	2301      	movs	r3, #1
 80046ea:	9a06      	ldr	r2, [sp, #24]
 80046ec:	4631      	mov	r1, r6
 80046ee:	4628      	mov	r0, r5
 80046f0:	47b8      	blx	r7
 80046f2:	3001      	adds	r0, #1
 80046f4:	f43f aecd 	beq.w	8004492 <_printf_float+0xba>
 80046f8:	f10b 0b01 	add.w	fp, fp, #1
 80046fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004700:	ebaa 0309 	sub.w	r3, sl, r9
 8004704:	455b      	cmp	r3, fp
 8004706:	dcef      	bgt.n	80046e8 <_printf_float+0x310>
 8004708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800470c:	429a      	cmp	r2, r3
 800470e:	44d0      	add	r8, sl
 8004710:	db15      	blt.n	800473e <_printf_float+0x366>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	07da      	lsls	r2, r3, #31
 8004716:	d412      	bmi.n	800473e <_printf_float+0x366>
 8004718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800471a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800471c:	eba3 020a 	sub.w	r2, r3, sl
 8004720:	eba3 0a01 	sub.w	sl, r3, r1
 8004724:	4592      	cmp	sl, r2
 8004726:	bfa8      	it	ge
 8004728:	4692      	movge	sl, r2
 800472a:	f1ba 0f00 	cmp.w	sl, #0
 800472e:	dc0e      	bgt.n	800474e <_printf_float+0x376>
 8004730:	f04f 0800 	mov.w	r8, #0
 8004734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004738:	f104 091a 	add.w	r9, r4, #26
 800473c:	e019      	b.n	8004772 <_printf_float+0x39a>
 800473e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004742:	4631      	mov	r1, r6
 8004744:	4628      	mov	r0, r5
 8004746:	47b8      	blx	r7
 8004748:	3001      	adds	r0, #1
 800474a:	d1e5      	bne.n	8004718 <_printf_float+0x340>
 800474c:	e6a1      	b.n	8004492 <_printf_float+0xba>
 800474e:	4653      	mov	r3, sl
 8004750:	4642      	mov	r2, r8
 8004752:	4631      	mov	r1, r6
 8004754:	4628      	mov	r0, r5
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	d1e9      	bne.n	8004730 <_printf_float+0x358>
 800475c:	e699      	b.n	8004492 <_printf_float+0xba>
 800475e:	2301      	movs	r3, #1
 8004760:	464a      	mov	r2, r9
 8004762:	4631      	mov	r1, r6
 8004764:	4628      	mov	r0, r5
 8004766:	47b8      	blx	r7
 8004768:	3001      	adds	r0, #1
 800476a:	f43f ae92 	beq.w	8004492 <_printf_float+0xba>
 800476e:	f108 0801 	add.w	r8, r8, #1
 8004772:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	eba3 030a 	sub.w	r3, r3, sl
 800477c:	4543      	cmp	r3, r8
 800477e:	dcee      	bgt.n	800475e <_printf_float+0x386>
 8004780:	e74a      	b.n	8004618 <_printf_float+0x240>
 8004782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004784:	2a01      	cmp	r2, #1
 8004786:	dc01      	bgt.n	800478c <_printf_float+0x3b4>
 8004788:	07db      	lsls	r3, r3, #31
 800478a:	d53a      	bpl.n	8004802 <_printf_float+0x42a>
 800478c:	2301      	movs	r3, #1
 800478e:	4642      	mov	r2, r8
 8004790:	4631      	mov	r1, r6
 8004792:	4628      	mov	r0, r5
 8004794:	47b8      	blx	r7
 8004796:	3001      	adds	r0, #1
 8004798:	f43f ae7b 	beq.w	8004492 <_printf_float+0xba>
 800479c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047a0:	4631      	mov	r1, r6
 80047a2:	4628      	mov	r0, r5
 80047a4:	47b8      	blx	r7
 80047a6:	3001      	adds	r0, #1
 80047a8:	f108 0801 	add.w	r8, r8, #1
 80047ac:	f43f ae71 	beq.w	8004492 <_printf_float+0xba>
 80047b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047b2:	2200      	movs	r2, #0
 80047b4:	f103 3aff 	add.w	sl, r3, #4294967295
 80047b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047bc:	2300      	movs	r3, #0
 80047be:	f7fc f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80047c2:	b9c8      	cbnz	r0, 80047f8 <_printf_float+0x420>
 80047c4:	4653      	mov	r3, sl
 80047c6:	4642      	mov	r2, r8
 80047c8:	4631      	mov	r1, r6
 80047ca:	4628      	mov	r0, r5
 80047cc:	47b8      	blx	r7
 80047ce:	3001      	adds	r0, #1
 80047d0:	d10e      	bne.n	80047f0 <_printf_float+0x418>
 80047d2:	e65e      	b.n	8004492 <_printf_float+0xba>
 80047d4:	2301      	movs	r3, #1
 80047d6:	4652      	mov	r2, sl
 80047d8:	4631      	mov	r1, r6
 80047da:	4628      	mov	r0, r5
 80047dc:	47b8      	blx	r7
 80047de:	3001      	adds	r0, #1
 80047e0:	f43f ae57 	beq.w	8004492 <_printf_float+0xba>
 80047e4:	f108 0801 	add.w	r8, r8, #1
 80047e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ea:	3b01      	subs	r3, #1
 80047ec:	4543      	cmp	r3, r8
 80047ee:	dcf1      	bgt.n	80047d4 <_printf_float+0x3fc>
 80047f0:	464b      	mov	r3, r9
 80047f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047f6:	e6de      	b.n	80045b6 <_printf_float+0x1de>
 80047f8:	f04f 0800 	mov.w	r8, #0
 80047fc:	f104 0a1a 	add.w	sl, r4, #26
 8004800:	e7f2      	b.n	80047e8 <_printf_float+0x410>
 8004802:	2301      	movs	r3, #1
 8004804:	e7df      	b.n	80047c6 <_printf_float+0x3ee>
 8004806:	2301      	movs	r3, #1
 8004808:	464a      	mov	r2, r9
 800480a:	4631      	mov	r1, r6
 800480c:	4628      	mov	r0, r5
 800480e:	47b8      	blx	r7
 8004810:	3001      	adds	r0, #1
 8004812:	f43f ae3e 	beq.w	8004492 <_printf_float+0xba>
 8004816:	f108 0801 	add.w	r8, r8, #1
 800481a:	68e3      	ldr	r3, [r4, #12]
 800481c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	4543      	cmp	r3, r8
 8004822:	dcf0      	bgt.n	8004806 <_printf_float+0x42e>
 8004824:	e6fc      	b.n	8004620 <_printf_float+0x248>
 8004826:	f04f 0800 	mov.w	r8, #0
 800482a:	f104 0919 	add.w	r9, r4, #25
 800482e:	e7f4      	b.n	800481a <_printf_float+0x442>
 8004830:	2900      	cmp	r1, #0
 8004832:	f43f ae8b 	beq.w	800454c <_printf_float+0x174>
 8004836:	2300      	movs	r3, #0
 8004838:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800483c:	ab09      	add	r3, sp, #36	; 0x24
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	ec49 8b10 	vmov	d0, r8, r9
 8004844:	6022      	str	r2, [r4, #0]
 8004846:	f8cd a004 	str.w	sl, [sp, #4]
 800484a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800484e:	4628      	mov	r0, r5
 8004850:	f7ff fd2e 	bl	80042b0 <__cvt>
 8004854:	4680      	mov	r8, r0
 8004856:	e648      	b.n	80044ea <_printf_float+0x112>

08004858 <_printf_common>:
 8004858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800485c:	4691      	mov	r9, r2
 800485e:	461f      	mov	r7, r3
 8004860:	688a      	ldr	r2, [r1, #8]
 8004862:	690b      	ldr	r3, [r1, #16]
 8004864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004868:	4293      	cmp	r3, r2
 800486a:	bfb8      	it	lt
 800486c:	4613      	movlt	r3, r2
 800486e:	f8c9 3000 	str.w	r3, [r9]
 8004872:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004876:	4606      	mov	r6, r0
 8004878:	460c      	mov	r4, r1
 800487a:	b112      	cbz	r2, 8004882 <_printf_common+0x2a>
 800487c:	3301      	adds	r3, #1
 800487e:	f8c9 3000 	str.w	r3, [r9]
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	0699      	lsls	r1, r3, #26
 8004886:	bf42      	ittt	mi
 8004888:	f8d9 3000 	ldrmi.w	r3, [r9]
 800488c:	3302      	addmi	r3, #2
 800488e:	f8c9 3000 	strmi.w	r3, [r9]
 8004892:	6825      	ldr	r5, [r4, #0]
 8004894:	f015 0506 	ands.w	r5, r5, #6
 8004898:	d107      	bne.n	80048aa <_printf_common+0x52>
 800489a:	f104 0a19 	add.w	sl, r4, #25
 800489e:	68e3      	ldr	r3, [r4, #12]
 80048a0:	f8d9 2000 	ldr.w	r2, [r9]
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	42ab      	cmp	r3, r5
 80048a8:	dc28      	bgt.n	80048fc <_printf_common+0xa4>
 80048aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	3300      	adds	r3, #0
 80048b2:	bf18      	it	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	0692      	lsls	r2, r2, #26
 80048b8:	d42d      	bmi.n	8004916 <_printf_common+0xbe>
 80048ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048be:	4639      	mov	r1, r7
 80048c0:	4630      	mov	r0, r6
 80048c2:	47c0      	blx	r8
 80048c4:	3001      	adds	r0, #1
 80048c6:	d020      	beq.n	800490a <_printf_common+0xb2>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	68e5      	ldr	r5, [r4, #12]
 80048cc:	f8d9 2000 	ldr.w	r2, [r9]
 80048d0:	f003 0306 	and.w	r3, r3, #6
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	bf08      	it	eq
 80048d8:	1aad      	subeq	r5, r5, r2
 80048da:	68a3      	ldr	r3, [r4, #8]
 80048dc:	6922      	ldr	r2, [r4, #16]
 80048de:	bf0c      	ite	eq
 80048e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048e4:	2500      	movne	r5, #0
 80048e6:	4293      	cmp	r3, r2
 80048e8:	bfc4      	itt	gt
 80048ea:	1a9b      	subgt	r3, r3, r2
 80048ec:	18ed      	addgt	r5, r5, r3
 80048ee:	f04f 0900 	mov.w	r9, #0
 80048f2:	341a      	adds	r4, #26
 80048f4:	454d      	cmp	r5, r9
 80048f6:	d11a      	bne.n	800492e <_printf_common+0xd6>
 80048f8:	2000      	movs	r0, #0
 80048fa:	e008      	b.n	800490e <_printf_common+0xb6>
 80048fc:	2301      	movs	r3, #1
 80048fe:	4652      	mov	r2, sl
 8004900:	4639      	mov	r1, r7
 8004902:	4630      	mov	r0, r6
 8004904:	47c0      	blx	r8
 8004906:	3001      	adds	r0, #1
 8004908:	d103      	bne.n	8004912 <_printf_common+0xba>
 800490a:	f04f 30ff 	mov.w	r0, #4294967295
 800490e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004912:	3501      	adds	r5, #1
 8004914:	e7c3      	b.n	800489e <_printf_common+0x46>
 8004916:	18e1      	adds	r1, r4, r3
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	2030      	movs	r0, #48	; 0x30
 800491c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004920:	4422      	add	r2, r4
 8004922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004926:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800492a:	3302      	adds	r3, #2
 800492c:	e7c5      	b.n	80048ba <_printf_common+0x62>
 800492e:	2301      	movs	r3, #1
 8004930:	4622      	mov	r2, r4
 8004932:	4639      	mov	r1, r7
 8004934:	4630      	mov	r0, r6
 8004936:	47c0      	blx	r8
 8004938:	3001      	adds	r0, #1
 800493a:	d0e6      	beq.n	800490a <_printf_common+0xb2>
 800493c:	f109 0901 	add.w	r9, r9, #1
 8004940:	e7d8      	b.n	80048f4 <_printf_common+0x9c>
	...

08004944 <_printf_i>:
 8004944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004948:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800494c:	460c      	mov	r4, r1
 800494e:	7e09      	ldrb	r1, [r1, #24]
 8004950:	b085      	sub	sp, #20
 8004952:	296e      	cmp	r1, #110	; 0x6e
 8004954:	4617      	mov	r7, r2
 8004956:	4606      	mov	r6, r0
 8004958:	4698      	mov	r8, r3
 800495a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800495c:	f000 80b3 	beq.w	8004ac6 <_printf_i+0x182>
 8004960:	d822      	bhi.n	80049a8 <_printf_i+0x64>
 8004962:	2963      	cmp	r1, #99	; 0x63
 8004964:	d036      	beq.n	80049d4 <_printf_i+0x90>
 8004966:	d80a      	bhi.n	800497e <_printf_i+0x3a>
 8004968:	2900      	cmp	r1, #0
 800496a:	f000 80b9 	beq.w	8004ae0 <_printf_i+0x19c>
 800496e:	2958      	cmp	r1, #88	; 0x58
 8004970:	f000 8083 	beq.w	8004a7a <_printf_i+0x136>
 8004974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004978:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800497c:	e032      	b.n	80049e4 <_printf_i+0xa0>
 800497e:	2964      	cmp	r1, #100	; 0x64
 8004980:	d001      	beq.n	8004986 <_printf_i+0x42>
 8004982:	2969      	cmp	r1, #105	; 0x69
 8004984:	d1f6      	bne.n	8004974 <_printf_i+0x30>
 8004986:	6820      	ldr	r0, [r4, #0]
 8004988:	6813      	ldr	r3, [r2, #0]
 800498a:	0605      	lsls	r5, r0, #24
 800498c:	f103 0104 	add.w	r1, r3, #4
 8004990:	d52a      	bpl.n	80049e8 <_printf_i+0xa4>
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6011      	str	r1, [r2, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da03      	bge.n	80049a2 <_printf_i+0x5e>
 800499a:	222d      	movs	r2, #45	; 0x2d
 800499c:	425b      	negs	r3, r3
 800499e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049a2:	486f      	ldr	r0, [pc, #444]	; (8004b60 <_printf_i+0x21c>)
 80049a4:	220a      	movs	r2, #10
 80049a6:	e039      	b.n	8004a1c <_printf_i+0xd8>
 80049a8:	2973      	cmp	r1, #115	; 0x73
 80049aa:	f000 809d 	beq.w	8004ae8 <_printf_i+0x1a4>
 80049ae:	d808      	bhi.n	80049c2 <_printf_i+0x7e>
 80049b0:	296f      	cmp	r1, #111	; 0x6f
 80049b2:	d020      	beq.n	80049f6 <_printf_i+0xb2>
 80049b4:	2970      	cmp	r1, #112	; 0x70
 80049b6:	d1dd      	bne.n	8004974 <_printf_i+0x30>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	f043 0320 	orr.w	r3, r3, #32
 80049be:	6023      	str	r3, [r4, #0]
 80049c0:	e003      	b.n	80049ca <_printf_i+0x86>
 80049c2:	2975      	cmp	r1, #117	; 0x75
 80049c4:	d017      	beq.n	80049f6 <_printf_i+0xb2>
 80049c6:	2978      	cmp	r1, #120	; 0x78
 80049c8:	d1d4      	bne.n	8004974 <_printf_i+0x30>
 80049ca:	2378      	movs	r3, #120	; 0x78
 80049cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049d0:	4864      	ldr	r0, [pc, #400]	; (8004b64 <_printf_i+0x220>)
 80049d2:	e055      	b.n	8004a80 <_printf_i+0x13c>
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	1d19      	adds	r1, r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6011      	str	r1, [r2, #0]
 80049dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e4:	2301      	movs	r3, #1
 80049e6:	e08c      	b.n	8004b02 <_printf_i+0x1be>
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6011      	str	r1, [r2, #0]
 80049ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049f0:	bf18      	it	ne
 80049f2:	b21b      	sxthne	r3, r3
 80049f4:	e7cf      	b.n	8004996 <_printf_i+0x52>
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	6825      	ldr	r5, [r4, #0]
 80049fa:	1d18      	adds	r0, r3, #4
 80049fc:	6010      	str	r0, [r2, #0]
 80049fe:	0628      	lsls	r0, r5, #24
 8004a00:	d501      	bpl.n	8004a06 <_printf_i+0xc2>
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	e002      	b.n	8004a0c <_printf_i+0xc8>
 8004a06:	0668      	lsls	r0, r5, #25
 8004a08:	d5fb      	bpl.n	8004a02 <_printf_i+0xbe>
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	4854      	ldr	r0, [pc, #336]	; (8004b60 <_printf_i+0x21c>)
 8004a0e:	296f      	cmp	r1, #111	; 0x6f
 8004a10:	bf14      	ite	ne
 8004a12:	220a      	movne	r2, #10
 8004a14:	2208      	moveq	r2, #8
 8004a16:	2100      	movs	r1, #0
 8004a18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a1c:	6865      	ldr	r5, [r4, #4]
 8004a1e:	60a5      	str	r5, [r4, #8]
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	f2c0 8095 	blt.w	8004b50 <_printf_i+0x20c>
 8004a26:	6821      	ldr	r1, [r4, #0]
 8004a28:	f021 0104 	bic.w	r1, r1, #4
 8004a2c:	6021      	str	r1, [r4, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d13d      	bne.n	8004aae <_printf_i+0x16a>
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	f040 808e 	bne.w	8004b54 <_printf_i+0x210>
 8004a38:	4665      	mov	r5, ip
 8004a3a:	2a08      	cmp	r2, #8
 8004a3c:	d10b      	bne.n	8004a56 <_printf_i+0x112>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	07db      	lsls	r3, r3, #31
 8004a42:	d508      	bpl.n	8004a56 <_printf_i+0x112>
 8004a44:	6923      	ldr	r3, [r4, #16]
 8004a46:	6862      	ldr	r2, [r4, #4]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	bfde      	ittt	le
 8004a4c:	2330      	movle	r3, #48	; 0x30
 8004a4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a56:	ebac 0305 	sub.w	r3, ip, r5
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	f8cd 8000 	str.w	r8, [sp]
 8004a60:	463b      	mov	r3, r7
 8004a62:	aa03      	add	r2, sp, #12
 8004a64:	4621      	mov	r1, r4
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff fef6 	bl	8004858 <_printf_common>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d14d      	bne.n	8004b0c <_printf_i+0x1c8>
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	b005      	add	sp, #20
 8004a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a7a:	4839      	ldr	r0, [pc, #228]	; (8004b60 <_printf_i+0x21c>)
 8004a7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a80:	6813      	ldr	r3, [r2, #0]
 8004a82:	6821      	ldr	r1, [r4, #0]
 8004a84:	1d1d      	adds	r5, r3, #4
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6015      	str	r5, [r2, #0]
 8004a8a:	060a      	lsls	r2, r1, #24
 8004a8c:	d50b      	bpl.n	8004aa6 <_printf_i+0x162>
 8004a8e:	07ca      	lsls	r2, r1, #31
 8004a90:	bf44      	itt	mi
 8004a92:	f041 0120 	orrmi.w	r1, r1, #32
 8004a96:	6021      	strmi	r1, [r4, #0]
 8004a98:	b91b      	cbnz	r3, 8004aa2 <_printf_i+0x15e>
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	f022 0220 	bic.w	r2, r2, #32
 8004aa0:	6022      	str	r2, [r4, #0]
 8004aa2:	2210      	movs	r2, #16
 8004aa4:	e7b7      	b.n	8004a16 <_printf_i+0xd2>
 8004aa6:	064d      	lsls	r5, r1, #25
 8004aa8:	bf48      	it	mi
 8004aaa:	b29b      	uxthmi	r3, r3
 8004aac:	e7ef      	b.n	8004a8e <_printf_i+0x14a>
 8004aae:	4665      	mov	r5, ip
 8004ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ab4:	fb02 3311 	mls	r3, r2, r1, r3
 8004ab8:	5cc3      	ldrb	r3, [r0, r3]
 8004aba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004abe:	460b      	mov	r3, r1
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	d1f5      	bne.n	8004ab0 <_printf_i+0x16c>
 8004ac4:	e7b9      	b.n	8004a3a <_printf_i+0xf6>
 8004ac6:	6813      	ldr	r3, [r2, #0]
 8004ac8:	6825      	ldr	r5, [r4, #0]
 8004aca:	6961      	ldr	r1, [r4, #20]
 8004acc:	1d18      	adds	r0, r3, #4
 8004ace:	6010      	str	r0, [r2, #0]
 8004ad0:	0628      	lsls	r0, r5, #24
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	d501      	bpl.n	8004ada <_printf_i+0x196>
 8004ad6:	6019      	str	r1, [r3, #0]
 8004ad8:	e002      	b.n	8004ae0 <_printf_i+0x19c>
 8004ada:	066a      	lsls	r2, r5, #25
 8004adc:	d5fb      	bpl.n	8004ad6 <_printf_i+0x192>
 8004ade:	8019      	strh	r1, [r3, #0]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	6123      	str	r3, [r4, #16]
 8004ae4:	4665      	mov	r5, ip
 8004ae6:	e7b9      	b.n	8004a5c <_printf_i+0x118>
 8004ae8:	6813      	ldr	r3, [r2, #0]
 8004aea:	1d19      	adds	r1, r3, #4
 8004aec:	6011      	str	r1, [r2, #0]
 8004aee:	681d      	ldr	r5, [r3, #0]
 8004af0:	6862      	ldr	r2, [r4, #4]
 8004af2:	2100      	movs	r1, #0
 8004af4:	4628      	mov	r0, r5
 8004af6:	f7fb fb7b 	bl	80001f0 <memchr>
 8004afa:	b108      	cbz	r0, 8004b00 <_printf_i+0x1bc>
 8004afc:	1b40      	subs	r0, r0, r5
 8004afe:	6060      	str	r0, [r4, #4]
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	6123      	str	r3, [r4, #16]
 8004b04:	2300      	movs	r3, #0
 8004b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b0a:	e7a7      	b.n	8004a5c <_printf_i+0x118>
 8004b0c:	6923      	ldr	r3, [r4, #16]
 8004b0e:	462a      	mov	r2, r5
 8004b10:	4639      	mov	r1, r7
 8004b12:	4630      	mov	r0, r6
 8004b14:	47c0      	blx	r8
 8004b16:	3001      	adds	r0, #1
 8004b18:	d0aa      	beq.n	8004a70 <_printf_i+0x12c>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	079b      	lsls	r3, r3, #30
 8004b1e:	d413      	bmi.n	8004b48 <_printf_i+0x204>
 8004b20:	68e0      	ldr	r0, [r4, #12]
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	4298      	cmp	r0, r3
 8004b26:	bfb8      	it	lt
 8004b28:	4618      	movlt	r0, r3
 8004b2a:	e7a3      	b.n	8004a74 <_printf_i+0x130>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	464a      	mov	r2, r9
 8004b30:	4639      	mov	r1, r7
 8004b32:	4630      	mov	r0, r6
 8004b34:	47c0      	blx	r8
 8004b36:	3001      	adds	r0, #1
 8004b38:	d09a      	beq.n	8004a70 <_printf_i+0x12c>
 8004b3a:	3501      	adds	r5, #1
 8004b3c:	68e3      	ldr	r3, [r4, #12]
 8004b3e:	9a03      	ldr	r2, [sp, #12]
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	42ab      	cmp	r3, r5
 8004b44:	dcf2      	bgt.n	8004b2c <_printf_i+0x1e8>
 8004b46:	e7eb      	b.n	8004b20 <_printf_i+0x1dc>
 8004b48:	2500      	movs	r5, #0
 8004b4a:	f104 0919 	add.w	r9, r4, #25
 8004b4e:	e7f5      	b.n	8004b3c <_printf_i+0x1f8>
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ac      	bne.n	8004aae <_printf_i+0x16a>
 8004b54:	7803      	ldrb	r3, [r0, #0]
 8004b56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b5e:	e76c      	b.n	8004a3a <_printf_i+0xf6>
 8004b60:	08006fb2 	.word	0x08006fb2
 8004b64:	08006fc3 	.word	0x08006fc3

08004b68 <iprintf>:
 8004b68:	b40f      	push	{r0, r1, r2, r3}
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <iprintf+0x2c>)
 8004b6c:	b513      	push	{r0, r1, r4, lr}
 8004b6e:	681c      	ldr	r4, [r3, #0]
 8004b70:	b124      	cbz	r4, 8004b7c <iprintf+0x14>
 8004b72:	69a3      	ldr	r3, [r4, #24]
 8004b74:	b913      	cbnz	r3, 8004b7c <iprintf+0x14>
 8004b76:	4620      	mov	r0, r4
 8004b78:	f000 feb2 	bl	80058e0 <__sinit>
 8004b7c:	ab05      	add	r3, sp, #20
 8004b7e:	9a04      	ldr	r2, [sp, #16]
 8004b80:	68a1      	ldr	r1, [r4, #8]
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	4620      	mov	r0, r4
 8004b86:	f001 fc63 	bl	8006450 <_vfiprintf_r>
 8004b8a:	b002      	add	sp, #8
 8004b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b90:	b004      	add	sp, #16
 8004b92:	4770      	bx	lr
 8004b94:	20000010 	.word	0x20000010

08004b98 <siprintf>:
 8004b98:	b40e      	push	{r1, r2, r3}
 8004b9a:	b500      	push	{lr}
 8004b9c:	b09c      	sub	sp, #112	; 0x70
 8004b9e:	ab1d      	add	r3, sp, #116	; 0x74
 8004ba0:	9002      	str	r0, [sp, #8]
 8004ba2:	9006      	str	r0, [sp, #24]
 8004ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ba8:	4809      	ldr	r0, [pc, #36]	; (8004bd0 <siprintf+0x38>)
 8004baa:	9107      	str	r1, [sp, #28]
 8004bac:	9104      	str	r1, [sp, #16]
 8004bae:	4909      	ldr	r1, [pc, #36]	; (8004bd4 <siprintf+0x3c>)
 8004bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bb4:	9105      	str	r1, [sp, #20]
 8004bb6:	6800      	ldr	r0, [r0, #0]
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	a902      	add	r1, sp, #8
 8004bbc:	f001 fb26 	bl	800620c <_svfiprintf_r>
 8004bc0:	9b02      	ldr	r3, [sp, #8]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	b01c      	add	sp, #112	; 0x70
 8004bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bcc:	b003      	add	sp, #12
 8004bce:	4770      	bx	lr
 8004bd0:	20000010 	.word	0x20000010
 8004bd4:	ffff0208 	.word	0xffff0208

08004bd8 <quorem>:
 8004bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	6903      	ldr	r3, [r0, #16]
 8004bde:	690c      	ldr	r4, [r1, #16]
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	4680      	mov	r8, r0
 8004be4:	f2c0 8082 	blt.w	8004cec <quorem+0x114>
 8004be8:	3c01      	subs	r4, #1
 8004bea:	f101 0714 	add.w	r7, r1, #20
 8004bee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004bf2:	f100 0614 	add.w	r6, r0, #20
 8004bf6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004bfa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004bfe:	eb06 030c 	add.w	r3, r6, ip
 8004c02:	3501      	adds	r5, #1
 8004c04:	eb07 090c 	add.w	r9, r7, ip
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	fbb0 f5f5 	udiv	r5, r0, r5
 8004c0e:	b395      	cbz	r5, 8004c76 <quorem+0x9e>
 8004c10:	f04f 0a00 	mov.w	sl, #0
 8004c14:	4638      	mov	r0, r7
 8004c16:	46b6      	mov	lr, r6
 8004c18:	46d3      	mov	fp, sl
 8004c1a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c1e:	b293      	uxth	r3, r2
 8004c20:	fb05 a303 	mla	r3, r5, r3, sl
 8004c24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	ebab 0303 	sub.w	r3, fp, r3
 8004c2e:	0c12      	lsrs	r2, r2, #16
 8004c30:	f8de b000 	ldr.w	fp, [lr]
 8004c34:	fb05 a202 	mla	r2, r5, r2, sl
 8004c38:	fa13 f38b 	uxtah	r3, r3, fp
 8004c3c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004c40:	fa1f fb82 	uxth.w	fp, r2
 8004c44:	f8de 2000 	ldr.w	r2, [lr]
 8004c48:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004c4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c56:	4581      	cmp	r9, r0
 8004c58:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004c5c:	f84e 3b04 	str.w	r3, [lr], #4
 8004c60:	d2db      	bcs.n	8004c1a <quorem+0x42>
 8004c62:	f856 300c 	ldr.w	r3, [r6, ip]
 8004c66:	b933      	cbnz	r3, 8004c76 <quorem+0x9e>
 8004c68:	9b01      	ldr	r3, [sp, #4]
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	429e      	cmp	r6, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	d330      	bcc.n	8004cd4 <quorem+0xfc>
 8004c72:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c76:	4640      	mov	r0, r8
 8004c78:	f001 f8f2 	bl	8005e60 <__mcmp>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	db25      	blt.n	8004ccc <quorem+0xf4>
 8004c80:	3501      	adds	r5, #1
 8004c82:	4630      	mov	r0, r6
 8004c84:	f04f 0c00 	mov.w	ip, #0
 8004c88:	f857 2b04 	ldr.w	r2, [r7], #4
 8004c8c:	f8d0 e000 	ldr.w	lr, [r0]
 8004c90:	b293      	uxth	r3, r2
 8004c92:	ebac 0303 	sub.w	r3, ip, r3
 8004c96:	0c12      	lsrs	r2, r2, #16
 8004c98:	fa13 f38e 	uxtah	r3, r3, lr
 8004c9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004caa:	45b9      	cmp	r9, r7
 8004cac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cb0:	f840 3b04 	str.w	r3, [r0], #4
 8004cb4:	d2e8      	bcs.n	8004c88 <quorem+0xb0>
 8004cb6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004cba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004cbe:	b92a      	cbnz	r2, 8004ccc <quorem+0xf4>
 8004cc0:	3b04      	subs	r3, #4
 8004cc2:	429e      	cmp	r6, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	d30b      	bcc.n	8004ce0 <quorem+0x108>
 8004cc8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ccc:	4628      	mov	r0, r5
 8004cce:	b003      	add	sp, #12
 8004cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	3b04      	subs	r3, #4
 8004cd8:	2a00      	cmp	r2, #0
 8004cda:	d1ca      	bne.n	8004c72 <quorem+0x9a>
 8004cdc:	3c01      	subs	r4, #1
 8004cde:	e7c5      	b.n	8004c6c <quorem+0x94>
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	3b04      	subs	r3, #4
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	d1ef      	bne.n	8004cc8 <quorem+0xf0>
 8004ce8:	3c01      	subs	r4, #1
 8004cea:	e7ea      	b.n	8004cc2 <quorem+0xea>
 8004cec:	2000      	movs	r0, #0
 8004cee:	e7ee      	b.n	8004cce <quorem+0xf6>

08004cf0 <_dtoa_r>:
 8004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf4:	ec57 6b10 	vmov	r6, r7, d0
 8004cf8:	b097      	sub	sp, #92	; 0x5c
 8004cfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004cfc:	9106      	str	r1, [sp, #24]
 8004cfe:	4604      	mov	r4, r0
 8004d00:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d02:	9312      	str	r3, [sp, #72]	; 0x48
 8004d04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004d08:	e9cd 6700 	strd	r6, r7, [sp]
 8004d0c:	b93d      	cbnz	r5, 8004d1e <_dtoa_r+0x2e>
 8004d0e:	2010      	movs	r0, #16
 8004d10:	f000 fe7e 	bl	8005a10 <malloc>
 8004d14:	6260      	str	r0, [r4, #36]	; 0x24
 8004d16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d1a:	6005      	str	r5, [r0, #0]
 8004d1c:	60c5      	str	r5, [r0, #12]
 8004d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d20:	6819      	ldr	r1, [r3, #0]
 8004d22:	b151      	cbz	r1, 8004d3a <_dtoa_r+0x4a>
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	604a      	str	r2, [r1, #4]
 8004d28:	2301      	movs	r3, #1
 8004d2a:	4093      	lsls	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f000 feb5 	bl	8005a9e <_Bfree>
 8004d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	1e3b      	subs	r3, r7, #0
 8004d3c:	bfbb      	ittet	lt
 8004d3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d42:	9301      	strlt	r3, [sp, #4]
 8004d44:	2300      	movge	r3, #0
 8004d46:	2201      	movlt	r2, #1
 8004d48:	bfac      	ite	ge
 8004d4a:	f8c8 3000 	strge.w	r3, [r8]
 8004d4e:	f8c8 2000 	strlt.w	r2, [r8]
 8004d52:	4baf      	ldr	r3, [pc, #700]	; (8005010 <_dtoa_r+0x320>)
 8004d54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d58:	ea33 0308 	bics.w	r3, r3, r8
 8004d5c:	d114      	bne.n	8004d88 <_dtoa_r+0x98>
 8004d5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d60:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	9b00      	ldr	r3, [sp, #0]
 8004d68:	b923      	cbnz	r3, 8004d74 <_dtoa_r+0x84>
 8004d6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f000 8542 	beq.w	80057f8 <_dtoa_r+0xb08>
 8004d74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005024 <_dtoa_r+0x334>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 8544 	beq.w	8005808 <_dtoa_r+0xb18>
 8004d80:	f10b 0303 	add.w	r3, fp, #3
 8004d84:	f000 bd3e 	b.w	8005804 <_dtoa_r+0xb14>
 8004d88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2300      	movs	r3, #0
 8004d90:	4630      	mov	r0, r6
 8004d92:	4639      	mov	r1, r7
 8004d94:	f7fb fea0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d98:	4681      	mov	r9, r0
 8004d9a:	b168      	cbz	r0, 8004db8 <_dtoa_r+0xc8>
 8004d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d9e:	2301      	movs	r3, #1
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8524 	beq.w	80057f2 <_dtoa_r+0xb02>
 8004daa:	4b9a      	ldr	r3, [pc, #616]	; (8005014 <_dtoa_r+0x324>)
 8004dac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004dae:	f103 3bff 	add.w	fp, r3, #4294967295
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	f000 bd28 	b.w	8005808 <_dtoa_r+0xb18>
 8004db8:	aa14      	add	r2, sp, #80	; 0x50
 8004dba:	a915      	add	r1, sp, #84	; 0x54
 8004dbc:	ec47 6b10 	vmov	d0, r6, r7
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f001 f8c4 	bl	8005f4e <__d2b>
 8004dc6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004dca:	9004      	str	r0, [sp, #16]
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	d07c      	beq.n	8004eca <_dtoa_r+0x1da>
 8004dd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004dd4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004dd8:	46b2      	mov	sl, r6
 8004dda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004dde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004de2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004de6:	2200      	movs	r2, #0
 8004de8:	4b8b      	ldr	r3, [pc, #556]	; (8005018 <_dtoa_r+0x328>)
 8004dea:	4650      	mov	r0, sl
 8004dec:	4659      	mov	r1, fp
 8004dee:	f7fb fa53 	bl	8000298 <__aeabi_dsub>
 8004df2:	a381      	add	r3, pc, #516	; (adr r3, 8004ff8 <_dtoa_r+0x308>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f7fb fc06 	bl	8000608 <__aeabi_dmul>
 8004dfc:	a380      	add	r3, pc, #512	; (adr r3, 8005000 <_dtoa_r+0x310>)
 8004dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e02:	f7fb fa4b 	bl	800029c <__adddf3>
 8004e06:	4606      	mov	r6, r0
 8004e08:	4628      	mov	r0, r5
 8004e0a:	460f      	mov	r7, r1
 8004e0c:	f7fb fb92 	bl	8000534 <__aeabi_i2d>
 8004e10:	a37d      	add	r3, pc, #500	; (adr r3, 8005008 <_dtoa_r+0x318>)
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb fbf7 	bl	8000608 <__aeabi_dmul>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4630      	mov	r0, r6
 8004e20:	4639      	mov	r1, r7
 8004e22:	f7fb fa3b 	bl	800029c <__adddf3>
 8004e26:	4606      	mov	r6, r0
 8004e28:	460f      	mov	r7, r1
 8004e2a:	f7fb fe9d 	bl	8000b68 <__aeabi_d2iz>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	4682      	mov	sl, r0
 8004e32:	2300      	movs	r3, #0
 8004e34:	4630      	mov	r0, r6
 8004e36:	4639      	mov	r1, r7
 8004e38:	f7fb fe58 	bl	8000aec <__aeabi_dcmplt>
 8004e3c:	b148      	cbz	r0, 8004e52 <_dtoa_r+0x162>
 8004e3e:	4650      	mov	r0, sl
 8004e40:	f7fb fb78 	bl	8000534 <__aeabi_i2d>
 8004e44:	4632      	mov	r2, r6
 8004e46:	463b      	mov	r3, r7
 8004e48:	f7fb fe46 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e4c:	b908      	cbnz	r0, 8004e52 <_dtoa_r+0x162>
 8004e4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e52:	f1ba 0f16 	cmp.w	sl, #22
 8004e56:	d859      	bhi.n	8004f0c <_dtoa_r+0x21c>
 8004e58:	4970      	ldr	r1, [pc, #448]	; (800501c <_dtoa_r+0x32c>)
 8004e5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e66:	f7fb fe5f 	bl	8000b28 <__aeabi_dcmpgt>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d050      	beq.n	8004f10 <_dtoa_r+0x220>
 8004e6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e72:	2300      	movs	r3, #0
 8004e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e78:	1b5d      	subs	r5, r3, r5
 8004e7a:	f1b5 0801 	subs.w	r8, r5, #1
 8004e7e:	bf49      	itett	mi
 8004e80:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e84:	2300      	movpl	r3, #0
 8004e86:	9305      	strmi	r3, [sp, #20]
 8004e88:	f04f 0800 	movmi.w	r8, #0
 8004e8c:	bf58      	it	pl
 8004e8e:	9305      	strpl	r3, [sp, #20]
 8004e90:	f1ba 0f00 	cmp.w	sl, #0
 8004e94:	db3e      	blt.n	8004f14 <_dtoa_r+0x224>
 8004e96:	2300      	movs	r3, #0
 8004e98:	44d0      	add	r8, sl
 8004e9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e9e:	9307      	str	r3, [sp, #28]
 8004ea0:	9b06      	ldr	r3, [sp, #24]
 8004ea2:	2b09      	cmp	r3, #9
 8004ea4:	f200 8090 	bhi.w	8004fc8 <_dtoa_r+0x2d8>
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	bfc4      	itt	gt
 8004eac:	3b04      	subgt	r3, #4
 8004eae:	9306      	strgt	r3, [sp, #24]
 8004eb0:	9b06      	ldr	r3, [sp, #24]
 8004eb2:	f1a3 0302 	sub.w	r3, r3, #2
 8004eb6:	bfcc      	ite	gt
 8004eb8:	2500      	movgt	r5, #0
 8004eba:	2501      	movle	r5, #1
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	f200 808f 	bhi.w	8004fe0 <_dtoa_r+0x2f0>
 8004ec2:	e8df f003 	tbb	[pc, r3]
 8004ec6:	7f7d      	.short	0x7f7d
 8004ec8:	7131      	.short	0x7131
 8004eca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004ece:	441d      	add	r5, r3
 8004ed0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004ed4:	2820      	cmp	r0, #32
 8004ed6:	dd13      	ble.n	8004f00 <_dtoa_r+0x210>
 8004ed8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004edc:	9b00      	ldr	r3, [sp, #0]
 8004ede:	fa08 f800 	lsl.w	r8, r8, r0
 8004ee2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004ee6:	fa23 f000 	lsr.w	r0, r3, r0
 8004eea:	ea48 0000 	orr.w	r0, r8, r0
 8004eee:	f7fb fb11 	bl	8000514 <__aeabi_ui2d>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4682      	mov	sl, r0
 8004ef6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004efa:	3d01      	subs	r5, #1
 8004efc:	9313      	str	r3, [sp, #76]	; 0x4c
 8004efe:	e772      	b.n	8004de6 <_dtoa_r+0xf6>
 8004f00:	9b00      	ldr	r3, [sp, #0]
 8004f02:	f1c0 0020 	rsb	r0, r0, #32
 8004f06:	fa03 f000 	lsl.w	r0, r3, r0
 8004f0a:	e7f0      	b.n	8004eee <_dtoa_r+0x1fe>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e7b1      	b.n	8004e74 <_dtoa_r+0x184>
 8004f10:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f12:	e7b0      	b.n	8004e76 <_dtoa_r+0x186>
 8004f14:	9b05      	ldr	r3, [sp, #20]
 8004f16:	eba3 030a 	sub.w	r3, r3, sl
 8004f1a:	9305      	str	r3, [sp, #20]
 8004f1c:	f1ca 0300 	rsb	r3, sl, #0
 8004f20:	9307      	str	r3, [sp, #28]
 8004f22:	2300      	movs	r3, #0
 8004f24:	930e      	str	r3, [sp, #56]	; 0x38
 8004f26:	e7bb      	b.n	8004ea0 <_dtoa_r+0x1b0>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	dd59      	ble.n	8004fe6 <_dtoa_r+0x2f6>
 8004f32:	9302      	str	r3, [sp, #8]
 8004f34:	4699      	mov	r9, r3
 8004f36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f38:	2200      	movs	r2, #0
 8004f3a:	6072      	str	r2, [r6, #4]
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	f102 0014 	add.w	r0, r2, #20
 8004f42:	4298      	cmp	r0, r3
 8004f44:	6871      	ldr	r1, [r6, #4]
 8004f46:	d953      	bls.n	8004ff0 <_dtoa_r+0x300>
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 fd74 	bl	8005a36 <_Balloc>
 8004f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f50:	6030      	str	r0, [r6, #0]
 8004f52:	f1b9 0f0e 	cmp.w	r9, #14
 8004f56:	f8d3 b000 	ldr.w	fp, [r3]
 8004f5a:	f200 80e6 	bhi.w	800512a <_dtoa_r+0x43a>
 8004f5e:	2d00      	cmp	r5, #0
 8004f60:	f000 80e3 	beq.w	800512a <_dtoa_r+0x43a>
 8004f64:	ed9d 7b00 	vldr	d7, [sp]
 8004f68:	f1ba 0f00 	cmp.w	sl, #0
 8004f6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004f70:	dd74      	ble.n	800505c <_dtoa_r+0x36c>
 8004f72:	4a2a      	ldr	r2, [pc, #168]	; (800501c <_dtoa_r+0x32c>)
 8004f74:	f00a 030f 	and.w	r3, sl, #15
 8004f78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f7c:	ed93 7b00 	vldr	d7, [r3]
 8004f80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004f84:	06f0      	lsls	r0, r6, #27
 8004f86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004f8a:	d565      	bpl.n	8005058 <_dtoa_r+0x368>
 8004f8c:	4b24      	ldr	r3, [pc, #144]	; (8005020 <_dtoa_r+0x330>)
 8004f8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f96:	f7fb fc61 	bl	800085c <__aeabi_ddiv>
 8004f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8004f9e:	f006 060f 	and.w	r6, r6, #15
 8004fa2:	2503      	movs	r5, #3
 8004fa4:	4f1e      	ldr	r7, [pc, #120]	; (8005020 <_dtoa_r+0x330>)
 8004fa6:	e04c      	b.n	8005042 <_dtoa_r+0x352>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	930a      	str	r3, [sp, #40]	; 0x28
 8004fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fae:	4453      	add	r3, sl
 8004fb0:	f103 0901 	add.w	r9, r3, #1
 8004fb4:	9302      	str	r3, [sp, #8]
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	bfb8      	it	lt
 8004fbc:	2301      	movlt	r3, #1
 8004fbe:	e7ba      	b.n	8004f36 <_dtoa_r+0x246>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e7b2      	b.n	8004f2a <_dtoa_r+0x23a>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e7f0      	b.n	8004faa <_dtoa_r+0x2ba>
 8004fc8:	2501      	movs	r5, #1
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9306      	str	r3, [sp, #24]
 8004fce:	950a      	str	r5, [sp, #40]	; 0x28
 8004fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd4:	9302      	str	r3, [sp, #8]
 8004fd6:	4699      	mov	r9, r3
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2312      	movs	r3, #18
 8004fdc:	920b      	str	r2, [sp, #44]	; 0x2c
 8004fde:	e7aa      	b.n	8004f36 <_dtoa_r+0x246>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fe4:	e7f4      	b.n	8004fd0 <_dtoa_r+0x2e0>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	9302      	str	r3, [sp, #8]
 8004fea:	4699      	mov	r9, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	e7f5      	b.n	8004fdc <_dtoa_r+0x2ec>
 8004ff0:	3101      	adds	r1, #1
 8004ff2:	6071      	str	r1, [r6, #4]
 8004ff4:	0052      	lsls	r2, r2, #1
 8004ff6:	e7a2      	b.n	8004f3e <_dtoa_r+0x24e>
 8004ff8:	636f4361 	.word	0x636f4361
 8004ffc:	3fd287a7 	.word	0x3fd287a7
 8005000:	8b60c8b3 	.word	0x8b60c8b3
 8005004:	3fc68a28 	.word	0x3fc68a28
 8005008:	509f79fb 	.word	0x509f79fb
 800500c:	3fd34413 	.word	0x3fd34413
 8005010:	7ff00000 	.word	0x7ff00000
 8005014:	08006fb1 	.word	0x08006fb1
 8005018:	3ff80000 	.word	0x3ff80000
 800501c:	08007070 	.word	0x08007070
 8005020:	08007048 	.word	0x08007048
 8005024:	08006fdd 	.word	0x08006fdd
 8005028:	07f1      	lsls	r1, r6, #31
 800502a:	d508      	bpl.n	800503e <_dtoa_r+0x34e>
 800502c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005034:	f7fb fae8 	bl	8000608 <__aeabi_dmul>
 8005038:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800503c:	3501      	adds	r5, #1
 800503e:	1076      	asrs	r6, r6, #1
 8005040:	3708      	adds	r7, #8
 8005042:	2e00      	cmp	r6, #0
 8005044:	d1f0      	bne.n	8005028 <_dtoa_r+0x338>
 8005046:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800504a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800504e:	f7fb fc05 	bl	800085c <__aeabi_ddiv>
 8005052:	e9cd 0100 	strd	r0, r1, [sp]
 8005056:	e01a      	b.n	800508e <_dtoa_r+0x39e>
 8005058:	2502      	movs	r5, #2
 800505a:	e7a3      	b.n	8004fa4 <_dtoa_r+0x2b4>
 800505c:	f000 80a0 	beq.w	80051a0 <_dtoa_r+0x4b0>
 8005060:	f1ca 0600 	rsb	r6, sl, #0
 8005064:	4b9f      	ldr	r3, [pc, #636]	; (80052e4 <_dtoa_r+0x5f4>)
 8005066:	4fa0      	ldr	r7, [pc, #640]	; (80052e8 <_dtoa_r+0x5f8>)
 8005068:	f006 020f 	and.w	r2, r6, #15
 800506c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005078:	f7fb fac6 	bl	8000608 <__aeabi_dmul>
 800507c:	e9cd 0100 	strd	r0, r1, [sp]
 8005080:	1136      	asrs	r6, r6, #4
 8005082:	2300      	movs	r3, #0
 8005084:	2502      	movs	r5, #2
 8005086:	2e00      	cmp	r6, #0
 8005088:	d17f      	bne.n	800518a <_dtoa_r+0x49a>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e1      	bne.n	8005052 <_dtoa_r+0x362>
 800508e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8087 	beq.w	80051a4 <_dtoa_r+0x4b4>
 8005096:	e9dd 6700 	ldrd	r6, r7, [sp]
 800509a:	2200      	movs	r2, #0
 800509c:	4b93      	ldr	r3, [pc, #588]	; (80052ec <_dtoa_r+0x5fc>)
 800509e:	4630      	mov	r0, r6
 80050a0:	4639      	mov	r1, r7
 80050a2:	f7fb fd23 	bl	8000aec <__aeabi_dcmplt>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d07c      	beq.n	80051a4 <_dtoa_r+0x4b4>
 80050aa:	f1b9 0f00 	cmp.w	r9, #0
 80050ae:	d079      	beq.n	80051a4 <_dtoa_r+0x4b4>
 80050b0:	9b02      	ldr	r3, [sp, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	dd35      	ble.n	8005122 <_dtoa_r+0x432>
 80050b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80050ba:	9308      	str	r3, [sp, #32]
 80050bc:	4639      	mov	r1, r7
 80050be:	2200      	movs	r2, #0
 80050c0:	4b8b      	ldr	r3, [pc, #556]	; (80052f0 <_dtoa_r+0x600>)
 80050c2:	4630      	mov	r0, r6
 80050c4:	f7fb faa0 	bl	8000608 <__aeabi_dmul>
 80050c8:	e9cd 0100 	strd	r0, r1, [sp]
 80050cc:	9f02      	ldr	r7, [sp, #8]
 80050ce:	3501      	adds	r5, #1
 80050d0:	4628      	mov	r0, r5
 80050d2:	f7fb fa2f 	bl	8000534 <__aeabi_i2d>
 80050d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050da:	f7fb fa95 	bl	8000608 <__aeabi_dmul>
 80050de:	2200      	movs	r2, #0
 80050e0:	4b84      	ldr	r3, [pc, #528]	; (80052f4 <_dtoa_r+0x604>)
 80050e2:	f7fb f8db 	bl	800029c <__adddf3>
 80050e6:	4605      	mov	r5, r0
 80050e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050ec:	2f00      	cmp	r7, #0
 80050ee:	d15d      	bne.n	80051ac <_dtoa_r+0x4bc>
 80050f0:	2200      	movs	r2, #0
 80050f2:	4b81      	ldr	r3, [pc, #516]	; (80052f8 <_dtoa_r+0x608>)
 80050f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050f8:	f7fb f8ce 	bl	8000298 <__aeabi_dsub>
 80050fc:	462a      	mov	r2, r5
 80050fe:	4633      	mov	r3, r6
 8005100:	e9cd 0100 	strd	r0, r1, [sp]
 8005104:	f7fb fd10 	bl	8000b28 <__aeabi_dcmpgt>
 8005108:	2800      	cmp	r0, #0
 800510a:	f040 8288 	bne.w	800561e <_dtoa_r+0x92e>
 800510e:	462a      	mov	r2, r5
 8005110:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005118:	f7fb fce8 	bl	8000aec <__aeabi_dcmplt>
 800511c:	2800      	cmp	r0, #0
 800511e:	f040 827c 	bne.w	800561a <_dtoa_r+0x92a>
 8005122:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005126:	e9cd 2300 	strd	r2, r3, [sp]
 800512a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800512c:	2b00      	cmp	r3, #0
 800512e:	f2c0 8150 	blt.w	80053d2 <_dtoa_r+0x6e2>
 8005132:	f1ba 0f0e 	cmp.w	sl, #14
 8005136:	f300 814c 	bgt.w	80053d2 <_dtoa_r+0x6e2>
 800513a:	4b6a      	ldr	r3, [pc, #424]	; (80052e4 <_dtoa_r+0x5f4>)
 800513c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005140:	ed93 7b00 	vldr	d7, [r3]
 8005144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005146:	2b00      	cmp	r3, #0
 8005148:	ed8d 7b02 	vstr	d7, [sp, #8]
 800514c:	f280 80d8 	bge.w	8005300 <_dtoa_r+0x610>
 8005150:	f1b9 0f00 	cmp.w	r9, #0
 8005154:	f300 80d4 	bgt.w	8005300 <_dtoa_r+0x610>
 8005158:	f040 825e 	bne.w	8005618 <_dtoa_r+0x928>
 800515c:	2200      	movs	r2, #0
 800515e:	4b66      	ldr	r3, [pc, #408]	; (80052f8 <_dtoa_r+0x608>)
 8005160:	ec51 0b17 	vmov	r0, r1, d7
 8005164:	f7fb fa50 	bl	8000608 <__aeabi_dmul>
 8005168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800516c:	f7fb fcd2 	bl	8000b14 <__aeabi_dcmpge>
 8005170:	464f      	mov	r7, r9
 8005172:	464e      	mov	r6, r9
 8005174:	2800      	cmp	r0, #0
 8005176:	f040 8234 	bne.w	80055e2 <_dtoa_r+0x8f2>
 800517a:	2331      	movs	r3, #49	; 0x31
 800517c:	f10b 0501 	add.w	r5, fp, #1
 8005180:	f88b 3000 	strb.w	r3, [fp]
 8005184:	f10a 0a01 	add.w	sl, sl, #1
 8005188:	e22f      	b.n	80055ea <_dtoa_r+0x8fa>
 800518a:	07f2      	lsls	r2, r6, #31
 800518c:	d505      	bpl.n	800519a <_dtoa_r+0x4aa>
 800518e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005192:	f7fb fa39 	bl	8000608 <__aeabi_dmul>
 8005196:	3501      	adds	r5, #1
 8005198:	2301      	movs	r3, #1
 800519a:	1076      	asrs	r6, r6, #1
 800519c:	3708      	adds	r7, #8
 800519e:	e772      	b.n	8005086 <_dtoa_r+0x396>
 80051a0:	2502      	movs	r5, #2
 80051a2:	e774      	b.n	800508e <_dtoa_r+0x39e>
 80051a4:	f8cd a020 	str.w	sl, [sp, #32]
 80051a8:	464f      	mov	r7, r9
 80051aa:	e791      	b.n	80050d0 <_dtoa_r+0x3e0>
 80051ac:	4b4d      	ldr	r3, [pc, #308]	; (80052e4 <_dtoa_r+0x5f4>)
 80051ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80051b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d047      	beq.n	800524c <_dtoa_r+0x55c>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	2000      	movs	r0, #0
 80051c2:	494e      	ldr	r1, [pc, #312]	; (80052fc <_dtoa_r+0x60c>)
 80051c4:	f7fb fb4a 	bl	800085c <__aeabi_ddiv>
 80051c8:	462a      	mov	r2, r5
 80051ca:	4633      	mov	r3, r6
 80051cc:	f7fb f864 	bl	8000298 <__aeabi_dsub>
 80051d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051d4:	465d      	mov	r5, fp
 80051d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051da:	f7fb fcc5 	bl	8000b68 <__aeabi_d2iz>
 80051de:	4606      	mov	r6, r0
 80051e0:	f7fb f9a8 	bl	8000534 <__aeabi_i2d>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051ec:	f7fb f854 	bl	8000298 <__aeabi_dsub>
 80051f0:	3630      	adds	r6, #48	; 0x30
 80051f2:	f805 6b01 	strb.w	r6, [r5], #1
 80051f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051fa:	e9cd 0100 	strd	r0, r1, [sp]
 80051fe:	f7fb fc75 	bl	8000aec <__aeabi_dcmplt>
 8005202:	2800      	cmp	r0, #0
 8005204:	d163      	bne.n	80052ce <_dtoa_r+0x5de>
 8005206:	e9dd 2300 	ldrd	r2, r3, [sp]
 800520a:	2000      	movs	r0, #0
 800520c:	4937      	ldr	r1, [pc, #220]	; (80052ec <_dtoa_r+0x5fc>)
 800520e:	f7fb f843 	bl	8000298 <__aeabi_dsub>
 8005212:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005216:	f7fb fc69 	bl	8000aec <__aeabi_dcmplt>
 800521a:	2800      	cmp	r0, #0
 800521c:	f040 80b7 	bne.w	800538e <_dtoa_r+0x69e>
 8005220:	eba5 030b 	sub.w	r3, r5, fp
 8005224:	429f      	cmp	r7, r3
 8005226:	f77f af7c 	ble.w	8005122 <_dtoa_r+0x432>
 800522a:	2200      	movs	r2, #0
 800522c:	4b30      	ldr	r3, [pc, #192]	; (80052f0 <_dtoa_r+0x600>)
 800522e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005232:	f7fb f9e9 	bl	8000608 <__aeabi_dmul>
 8005236:	2200      	movs	r2, #0
 8005238:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800523c:	4b2c      	ldr	r3, [pc, #176]	; (80052f0 <_dtoa_r+0x600>)
 800523e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005242:	f7fb f9e1 	bl	8000608 <__aeabi_dmul>
 8005246:	e9cd 0100 	strd	r0, r1, [sp]
 800524a:	e7c4      	b.n	80051d6 <_dtoa_r+0x4e6>
 800524c:	462a      	mov	r2, r5
 800524e:	4633      	mov	r3, r6
 8005250:	f7fb f9da 	bl	8000608 <__aeabi_dmul>
 8005254:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005258:	eb0b 0507 	add.w	r5, fp, r7
 800525c:	465e      	mov	r6, fp
 800525e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005262:	f7fb fc81 	bl	8000b68 <__aeabi_d2iz>
 8005266:	4607      	mov	r7, r0
 8005268:	f7fb f964 	bl	8000534 <__aeabi_i2d>
 800526c:	3730      	adds	r7, #48	; 0x30
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005276:	f7fb f80f 	bl	8000298 <__aeabi_dsub>
 800527a:	f806 7b01 	strb.w	r7, [r6], #1
 800527e:	42ae      	cmp	r6, r5
 8005280:	e9cd 0100 	strd	r0, r1, [sp]
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	d126      	bne.n	80052d8 <_dtoa_r+0x5e8>
 800528a:	4b1c      	ldr	r3, [pc, #112]	; (80052fc <_dtoa_r+0x60c>)
 800528c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005290:	f7fb f804 	bl	800029c <__adddf3>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800529c:	f7fb fc44 	bl	8000b28 <__aeabi_dcmpgt>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d174      	bne.n	800538e <_dtoa_r+0x69e>
 80052a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80052a8:	2000      	movs	r0, #0
 80052aa:	4914      	ldr	r1, [pc, #80]	; (80052fc <_dtoa_r+0x60c>)
 80052ac:	f7fa fff4 	bl	8000298 <__aeabi_dsub>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052b8:	f7fb fc18 	bl	8000aec <__aeabi_dcmplt>
 80052bc:	2800      	cmp	r0, #0
 80052be:	f43f af30 	beq.w	8005122 <_dtoa_r+0x432>
 80052c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052c6:	2b30      	cmp	r3, #48	; 0x30
 80052c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80052cc:	d002      	beq.n	80052d4 <_dtoa_r+0x5e4>
 80052ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80052d2:	e04a      	b.n	800536a <_dtoa_r+0x67a>
 80052d4:	4615      	mov	r5, r2
 80052d6:	e7f4      	b.n	80052c2 <_dtoa_r+0x5d2>
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <_dtoa_r+0x600>)
 80052da:	f7fb f995 	bl	8000608 <__aeabi_dmul>
 80052de:	e9cd 0100 	strd	r0, r1, [sp]
 80052e2:	e7bc      	b.n	800525e <_dtoa_r+0x56e>
 80052e4:	08007070 	.word	0x08007070
 80052e8:	08007048 	.word	0x08007048
 80052ec:	3ff00000 	.word	0x3ff00000
 80052f0:	40240000 	.word	0x40240000
 80052f4:	401c0000 	.word	0x401c0000
 80052f8:	40140000 	.word	0x40140000
 80052fc:	3fe00000 	.word	0x3fe00000
 8005300:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005304:	465d      	mov	r5, fp
 8005306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800530a:	4630      	mov	r0, r6
 800530c:	4639      	mov	r1, r7
 800530e:	f7fb faa5 	bl	800085c <__aeabi_ddiv>
 8005312:	f7fb fc29 	bl	8000b68 <__aeabi_d2iz>
 8005316:	4680      	mov	r8, r0
 8005318:	f7fb f90c 	bl	8000534 <__aeabi_i2d>
 800531c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005320:	f7fb f972 	bl	8000608 <__aeabi_dmul>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4630      	mov	r0, r6
 800532a:	4639      	mov	r1, r7
 800532c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005330:	f7fa ffb2 	bl	8000298 <__aeabi_dsub>
 8005334:	f805 6b01 	strb.w	r6, [r5], #1
 8005338:	eba5 060b 	sub.w	r6, r5, fp
 800533c:	45b1      	cmp	r9, r6
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	d139      	bne.n	80053b8 <_dtoa_r+0x6c8>
 8005344:	f7fa ffaa 	bl	800029c <__adddf3>
 8005348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800534c:	4606      	mov	r6, r0
 800534e:	460f      	mov	r7, r1
 8005350:	f7fb fbea 	bl	8000b28 <__aeabi_dcmpgt>
 8005354:	b9c8      	cbnz	r0, 800538a <_dtoa_r+0x69a>
 8005356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800535a:	4630      	mov	r0, r6
 800535c:	4639      	mov	r1, r7
 800535e:	f7fb fbbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005362:	b110      	cbz	r0, 800536a <_dtoa_r+0x67a>
 8005364:	f018 0f01 	tst.w	r8, #1
 8005368:	d10f      	bne.n	800538a <_dtoa_r+0x69a>
 800536a:	9904      	ldr	r1, [sp, #16]
 800536c:	4620      	mov	r0, r4
 800536e:	f000 fb96 	bl	8005a9e <_Bfree>
 8005372:	2300      	movs	r3, #0
 8005374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005376:	702b      	strb	r3, [r5, #0]
 8005378:	f10a 0301 	add.w	r3, sl, #1
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8241 	beq.w	8005808 <_dtoa_r+0xb18>
 8005386:	601d      	str	r5, [r3, #0]
 8005388:	e23e      	b.n	8005808 <_dtoa_r+0xb18>
 800538a:	f8cd a020 	str.w	sl, [sp, #32]
 800538e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005392:	2a39      	cmp	r2, #57	; 0x39
 8005394:	f105 33ff 	add.w	r3, r5, #4294967295
 8005398:	d108      	bne.n	80053ac <_dtoa_r+0x6bc>
 800539a:	459b      	cmp	fp, r3
 800539c:	d10a      	bne.n	80053b4 <_dtoa_r+0x6c4>
 800539e:	9b08      	ldr	r3, [sp, #32]
 80053a0:	3301      	adds	r3, #1
 80053a2:	9308      	str	r3, [sp, #32]
 80053a4:	2330      	movs	r3, #48	; 0x30
 80053a6:	f88b 3000 	strb.w	r3, [fp]
 80053aa:	465b      	mov	r3, fp
 80053ac:	781a      	ldrb	r2, [r3, #0]
 80053ae:	3201      	adds	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	e78c      	b.n	80052ce <_dtoa_r+0x5de>
 80053b4:	461d      	mov	r5, r3
 80053b6:	e7ea      	b.n	800538e <_dtoa_r+0x69e>
 80053b8:	2200      	movs	r2, #0
 80053ba:	4b9b      	ldr	r3, [pc, #620]	; (8005628 <_dtoa_r+0x938>)
 80053bc:	f7fb f924 	bl	8000608 <__aeabi_dmul>
 80053c0:	2200      	movs	r2, #0
 80053c2:	2300      	movs	r3, #0
 80053c4:	4606      	mov	r6, r0
 80053c6:	460f      	mov	r7, r1
 80053c8:	f7fb fb86 	bl	8000ad8 <__aeabi_dcmpeq>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d09a      	beq.n	8005306 <_dtoa_r+0x616>
 80053d0:	e7cb      	b.n	800536a <_dtoa_r+0x67a>
 80053d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	f000 808b 	beq.w	80054f0 <_dtoa_r+0x800>
 80053da:	9a06      	ldr	r2, [sp, #24]
 80053dc:	2a01      	cmp	r2, #1
 80053de:	dc6e      	bgt.n	80054be <_dtoa_r+0x7ce>
 80053e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053e2:	2a00      	cmp	r2, #0
 80053e4:	d067      	beq.n	80054b6 <_dtoa_r+0x7c6>
 80053e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053ea:	9f07      	ldr	r7, [sp, #28]
 80053ec:	9d05      	ldr	r5, [sp, #20]
 80053ee:	9a05      	ldr	r2, [sp, #20]
 80053f0:	2101      	movs	r1, #1
 80053f2:	441a      	add	r2, r3
 80053f4:	4620      	mov	r0, r4
 80053f6:	9205      	str	r2, [sp, #20]
 80053f8:	4498      	add	r8, r3
 80053fa:	f000 fbf0 	bl	8005bde <__i2b>
 80053fe:	4606      	mov	r6, r0
 8005400:	2d00      	cmp	r5, #0
 8005402:	dd0c      	ble.n	800541e <_dtoa_r+0x72e>
 8005404:	f1b8 0f00 	cmp.w	r8, #0
 8005408:	dd09      	ble.n	800541e <_dtoa_r+0x72e>
 800540a:	4545      	cmp	r5, r8
 800540c:	9a05      	ldr	r2, [sp, #20]
 800540e:	462b      	mov	r3, r5
 8005410:	bfa8      	it	ge
 8005412:	4643      	movge	r3, r8
 8005414:	1ad2      	subs	r2, r2, r3
 8005416:	9205      	str	r2, [sp, #20]
 8005418:	1aed      	subs	r5, r5, r3
 800541a:	eba8 0803 	sub.w	r8, r8, r3
 800541e:	9b07      	ldr	r3, [sp, #28]
 8005420:	b1eb      	cbz	r3, 800545e <_dtoa_r+0x76e>
 8005422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005424:	2b00      	cmp	r3, #0
 8005426:	d067      	beq.n	80054f8 <_dtoa_r+0x808>
 8005428:	b18f      	cbz	r7, 800544e <_dtoa_r+0x75e>
 800542a:	4631      	mov	r1, r6
 800542c:	463a      	mov	r2, r7
 800542e:	4620      	mov	r0, r4
 8005430:	f000 fc74 	bl	8005d1c <__pow5mult>
 8005434:	9a04      	ldr	r2, [sp, #16]
 8005436:	4601      	mov	r1, r0
 8005438:	4606      	mov	r6, r0
 800543a:	4620      	mov	r0, r4
 800543c:	f000 fbd8 	bl	8005bf0 <__multiply>
 8005440:	9904      	ldr	r1, [sp, #16]
 8005442:	9008      	str	r0, [sp, #32]
 8005444:	4620      	mov	r0, r4
 8005446:	f000 fb2a 	bl	8005a9e <_Bfree>
 800544a:	9b08      	ldr	r3, [sp, #32]
 800544c:	9304      	str	r3, [sp, #16]
 800544e:	9b07      	ldr	r3, [sp, #28]
 8005450:	1bda      	subs	r2, r3, r7
 8005452:	d004      	beq.n	800545e <_dtoa_r+0x76e>
 8005454:	9904      	ldr	r1, [sp, #16]
 8005456:	4620      	mov	r0, r4
 8005458:	f000 fc60 	bl	8005d1c <__pow5mult>
 800545c:	9004      	str	r0, [sp, #16]
 800545e:	2101      	movs	r1, #1
 8005460:	4620      	mov	r0, r4
 8005462:	f000 fbbc 	bl	8005bde <__i2b>
 8005466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005468:	4607      	mov	r7, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 81d0 	beq.w	8005810 <_dtoa_r+0xb20>
 8005470:	461a      	mov	r2, r3
 8005472:	4601      	mov	r1, r0
 8005474:	4620      	mov	r0, r4
 8005476:	f000 fc51 	bl	8005d1c <__pow5mult>
 800547a:	9b06      	ldr	r3, [sp, #24]
 800547c:	2b01      	cmp	r3, #1
 800547e:	4607      	mov	r7, r0
 8005480:	dc40      	bgt.n	8005504 <_dtoa_r+0x814>
 8005482:	9b00      	ldr	r3, [sp, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d139      	bne.n	80054fc <_dtoa_r+0x80c>
 8005488:	9b01      	ldr	r3, [sp, #4]
 800548a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800548e:	2b00      	cmp	r3, #0
 8005490:	d136      	bne.n	8005500 <_dtoa_r+0x810>
 8005492:	9b01      	ldr	r3, [sp, #4]
 8005494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005498:	0d1b      	lsrs	r3, r3, #20
 800549a:	051b      	lsls	r3, r3, #20
 800549c:	b12b      	cbz	r3, 80054aa <_dtoa_r+0x7ba>
 800549e:	9b05      	ldr	r3, [sp, #20]
 80054a0:	3301      	adds	r3, #1
 80054a2:	9305      	str	r3, [sp, #20]
 80054a4:	f108 0801 	add.w	r8, r8, #1
 80054a8:	2301      	movs	r3, #1
 80054aa:	9307      	str	r3, [sp, #28]
 80054ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d12a      	bne.n	8005508 <_dtoa_r+0x818>
 80054b2:	2001      	movs	r0, #1
 80054b4:	e030      	b.n	8005518 <_dtoa_r+0x828>
 80054b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054bc:	e795      	b.n	80053ea <_dtoa_r+0x6fa>
 80054be:	9b07      	ldr	r3, [sp, #28]
 80054c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80054c4:	42bb      	cmp	r3, r7
 80054c6:	bfbf      	itttt	lt
 80054c8:	9b07      	ldrlt	r3, [sp, #28]
 80054ca:	9707      	strlt	r7, [sp, #28]
 80054cc:	1afa      	sublt	r2, r7, r3
 80054ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80054d0:	bfbb      	ittet	lt
 80054d2:	189b      	addlt	r3, r3, r2
 80054d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80054d6:	1bdf      	subge	r7, r3, r7
 80054d8:	2700      	movlt	r7, #0
 80054da:	f1b9 0f00 	cmp.w	r9, #0
 80054de:	bfb5      	itete	lt
 80054e0:	9b05      	ldrlt	r3, [sp, #20]
 80054e2:	9d05      	ldrge	r5, [sp, #20]
 80054e4:	eba3 0509 	sublt.w	r5, r3, r9
 80054e8:	464b      	movge	r3, r9
 80054ea:	bfb8      	it	lt
 80054ec:	2300      	movlt	r3, #0
 80054ee:	e77e      	b.n	80053ee <_dtoa_r+0x6fe>
 80054f0:	9f07      	ldr	r7, [sp, #28]
 80054f2:	9d05      	ldr	r5, [sp, #20]
 80054f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80054f6:	e783      	b.n	8005400 <_dtoa_r+0x710>
 80054f8:	9a07      	ldr	r2, [sp, #28]
 80054fa:	e7ab      	b.n	8005454 <_dtoa_r+0x764>
 80054fc:	2300      	movs	r3, #0
 80054fe:	e7d4      	b.n	80054aa <_dtoa_r+0x7ba>
 8005500:	9b00      	ldr	r3, [sp, #0]
 8005502:	e7d2      	b.n	80054aa <_dtoa_r+0x7ba>
 8005504:	2300      	movs	r3, #0
 8005506:	9307      	str	r3, [sp, #28]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800550e:	6918      	ldr	r0, [r3, #16]
 8005510:	f000 fb17 	bl	8005b42 <__hi0bits>
 8005514:	f1c0 0020 	rsb	r0, r0, #32
 8005518:	4440      	add	r0, r8
 800551a:	f010 001f 	ands.w	r0, r0, #31
 800551e:	d047      	beq.n	80055b0 <_dtoa_r+0x8c0>
 8005520:	f1c0 0320 	rsb	r3, r0, #32
 8005524:	2b04      	cmp	r3, #4
 8005526:	dd3b      	ble.n	80055a0 <_dtoa_r+0x8b0>
 8005528:	9b05      	ldr	r3, [sp, #20]
 800552a:	f1c0 001c 	rsb	r0, r0, #28
 800552e:	4403      	add	r3, r0
 8005530:	9305      	str	r3, [sp, #20]
 8005532:	4405      	add	r5, r0
 8005534:	4480      	add	r8, r0
 8005536:	9b05      	ldr	r3, [sp, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	dd05      	ble.n	8005548 <_dtoa_r+0x858>
 800553c:	461a      	mov	r2, r3
 800553e:	9904      	ldr	r1, [sp, #16]
 8005540:	4620      	mov	r0, r4
 8005542:	f000 fc39 	bl	8005db8 <__lshift>
 8005546:	9004      	str	r0, [sp, #16]
 8005548:	f1b8 0f00 	cmp.w	r8, #0
 800554c:	dd05      	ble.n	800555a <_dtoa_r+0x86a>
 800554e:	4639      	mov	r1, r7
 8005550:	4642      	mov	r2, r8
 8005552:	4620      	mov	r0, r4
 8005554:	f000 fc30 	bl	8005db8 <__lshift>
 8005558:	4607      	mov	r7, r0
 800555a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800555c:	b353      	cbz	r3, 80055b4 <_dtoa_r+0x8c4>
 800555e:	4639      	mov	r1, r7
 8005560:	9804      	ldr	r0, [sp, #16]
 8005562:	f000 fc7d 	bl	8005e60 <__mcmp>
 8005566:	2800      	cmp	r0, #0
 8005568:	da24      	bge.n	80055b4 <_dtoa_r+0x8c4>
 800556a:	2300      	movs	r3, #0
 800556c:	220a      	movs	r2, #10
 800556e:	9904      	ldr	r1, [sp, #16]
 8005570:	4620      	mov	r0, r4
 8005572:	f000 faab 	bl	8005acc <__multadd>
 8005576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005578:	9004      	str	r0, [sp, #16]
 800557a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 814d 	beq.w	800581e <_dtoa_r+0xb2e>
 8005584:	2300      	movs	r3, #0
 8005586:	4631      	mov	r1, r6
 8005588:	220a      	movs	r2, #10
 800558a:	4620      	mov	r0, r4
 800558c:	f000 fa9e 	bl	8005acc <__multadd>
 8005590:	9b02      	ldr	r3, [sp, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	4606      	mov	r6, r0
 8005596:	dc4f      	bgt.n	8005638 <_dtoa_r+0x948>
 8005598:	9b06      	ldr	r3, [sp, #24]
 800559a:	2b02      	cmp	r3, #2
 800559c:	dd4c      	ble.n	8005638 <_dtoa_r+0x948>
 800559e:	e011      	b.n	80055c4 <_dtoa_r+0x8d4>
 80055a0:	d0c9      	beq.n	8005536 <_dtoa_r+0x846>
 80055a2:	9a05      	ldr	r2, [sp, #20]
 80055a4:	331c      	adds	r3, #28
 80055a6:	441a      	add	r2, r3
 80055a8:	9205      	str	r2, [sp, #20]
 80055aa:	441d      	add	r5, r3
 80055ac:	4498      	add	r8, r3
 80055ae:	e7c2      	b.n	8005536 <_dtoa_r+0x846>
 80055b0:	4603      	mov	r3, r0
 80055b2:	e7f6      	b.n	80055a2 <_dtoa_r+0x8b2>
 80055b4:	f1b9 0f00 	cmp.w	r9, #0
 80055b8:	dc38      	bgt.n	800562c <_dtoa_r+0x93c>
 80055ba:	9b06      	ldr	r3, [sp, #24]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	dd35      	ble.n	800562c <_dtoa_r+0x93c>
 80055c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80055c4:	9b02      	ldr	r3, [sp, #8]
 80055c6:	b963      	cbnz	r3, 80055e2 <_dtoa_r+0x8f2>
 80055c8:	4639      	mov	r1, r7
 80055ca:	2205      	movs	r2, #5
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 fa7d 	bl	8005acc <__multadd>
 80055d2:	4601      	mov	r1, r0
 80055d4:	4607      	mov	r7, r0
 80055d6:	9804      	ldr	r0, [sp, #16]
 80055d8:	f000 fc42 	bl	8005e60 <__mcmp>
 80055dc:	2800      	cmp	r0, #0
 80055de:	f73f adcc 	bgt.w	800517a <_dtoa_r+0x48a>
 80055e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e4:	465d      	mov	r5, fp
 80055e6:	ea6f 0a03 	mvn.w	sl, r3
 80055ea:	f04f 0900 	mov.w	r9, #0
 80055ee:	4639      	mov	r1, r7
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 fa54 	bl	8005a9e <_Bfree>
 80055f6:	2e00      	cmp	r6, #0
 80055f8:	f43f aeb7 	beq.w	800536a <_dtoa_r+0x67a>
 80055fc:	f1b9 0f00 	cmp.w	r9, #0
 8005600:	d005      	beq.n	800560e <_dtoa_r+0x91e>
 8005602:	45b1      	cmp	r9, r6
 8005604:	d003      	beq.n	800560e <_dtoa_r+0x91e>
 8005606:	4649      	mov	r1, r9
 8005608:	4620      	mov	r0, r4
 800560a:	f000 fa48 	bl	8005a9e <_Bfree>
 800560e:	4631      	mov	r1, r6
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fa44 	bl	8005a9e <_Bfree>
 8005616:	e6a8      	b.n	800536a <_dtoa_r+0x67a>
 8005618:	2700      	movs	r7, #0
 800561a:	463e      	mov	r6, r7
 800561c:	e7e1      	b.n	80055e2 <_dtoa_r+0x8f2>
 800561e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005622:	463e      	mov	r6, r7
 8005624:	e5a9      	b.n	800517a <_dtoa_r+0x48a>
 8005626:	bf00      	nop
 8005628:	40240000 	.word	0x40240000
 800562c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80fa 	beq.w	800582c <_dtoa_r+0xb3c>
 8005638:	2d00      	cmp	r5, #0
 800563a:	dd05      	ble.n	8005648 <_dtoa_r+0x958>
 800563c:	4631      	mov	r1, r6
 800563e:	462a      	mov	r2, r5
 8005640:	4620      	mov	r0, r4
 8005642:	f000 fbb9 	bl	8005db8 <__lshift>
 8005646:	4606      	mov	r6, r0
 8005648:	9b07      	ldr	r3, [sp, #28]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d04c      	beq.n	80056e8 <_dtoa_r+0x9f8>
 800564e:	6871      	ldr	r1, [r6, #4]
 8005650:	4620      	mov	r0, r4
 8005652:	f000 f9f0 	bl	8005a36 <_Balloc>
 8005656:	6932      	ldr	r2, [r6, #16]
 8005658:	3202      	adds	r2, #2
 800565a:	4605      	mov	r5, r0
 800565c:	0092      	lsls	r2, r2, #2
 800565e:	f106 010c 	add.w	r1, r6, #12
 8005662:	300c      	adds	r0, #12
 8005664:	f000 f9dc 	bl	8005a20 <memcpy>
 8005668:	2201      	movs	r2, #1
 800566a:	4629      	mov	r1, r5
 800566c:	4620      	mov	r0, r4
 800566e:	f000 fba3 	bl	8005db8 <__lshift>
 8005672:	9b00      	ldr	r3, [sp, #0]
 8005674:	f8cd b014 	str.w	fp, [sp, #20]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	46b1      	mov	r9, r6
 800567e:	9307      	str	r3, [sp, #28]
 8005680:	4606      	mov	r6, r0
 8005682:	4639      	mov	r1, r7
 8005684:	9804      	ldr	r0, [sp, #16]
 8005686:	f7ff faa7 	bl	8004bd8 <quorem>
 800568a:	4649      	mov	r1, r9
 800568c:	4605      	mov	r5, r0
 800568e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005692:	9804      	ldr	r0, [sp, #16]
 8005694:	f000 fbe4 	bl	8005e60 <__mcmp>
 8005698:	4632      	mov	r2, r6
 800569a:	9000      	str	r0, [sp, #0]
 800569c:	4639      	mov	r1, r7
 800569e:	4620      	mov	r0, r4
 80056a0:	f000 fbf8 	bl	8005e94 <__mdiff>
 80056a4:	68c3      	ldr	r3, [r0, #12]
 80056a6:	4602      	mov	r2, r0
 80056a8:	bb03      	cbnz	r3, 80056ec <_dtoa_r+0x9fc>
 80056aa:	4601      	mov	r1, r0
 80056ac:	9008      	str	r0, [sp, #32]
 80056ae:	9804      	ldr	r0, [sp, #16]
 80056b0:	f000 fbd6 	bl	8005e60 <__mcmp>
 80056b4:	9a08      	ldr	r2, [sp, #32]
 80056b6:	4603      	mov	r3, r0
 80056b8:	4611      	mov	r1, r2
 80056ba:	4620      	mov	r0, r4
 80056bc:	9308      	str	r3, [sp, #32]
 80056be:	f000 f9ee 	bl	8005a9e <_Bfree>
 80056c2:	9b08      	ldr	r3, [sp, #32]
 80056c4:	b9a3      	cbnz	r3, 80056f0 <_dtoa_r+0xa00>
 80056c6:	9a06      	ldr	r2, [sp, #24]
 80056c8:	b992      	cbnz	r2, 80056f0 <_dtoa_r+0xa00>
 80056ca:	9a07      	ldr	r2, [sp, #28]
 80056cc:	b982      	cbnz	r2, 80056f0 <_dtoa_r+0xa00>
 80056ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056d2:	d029      	beq.n	8005728 <_dtoa_r+0xa38>
 80056d4:	9b00      	ldr	r3, [sp, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dd01      	ble.n	80056de <_dtoa_r+0x9ee>
 80056da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80056de:	9b05      	ldr	r3, [sp, #20]
 80056e0:	1c5d      	adds	r5, r3, #1
 80056e2:	f883 8000 	strb.w	r8, [r3]
 80056e6:	e782      	b.n	80055ee <_dtoa_r+0x8fe>
 80056e8:	4630      	mov	r0, r6
 80056ea:	e7c2      	b.n	8005672 <_dtoa_r+0x982>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e7e3      	b.n	80056b8 <_dtoa_r+0x9c8>
 80056f0:	9a00      	ldr	r2, [sp, #0]
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	db04      	blt.n	8005700 <_dtoa_r+0xa10>
 80056f6:	d125      	bne.n	8005744 <_dtoa_r+0xa54>
 80056f8:	9a06      	ldr	r2, [sp, #24]
 80056fa:	bb1a      	cbnz	r2, 8005744 <_dtoa_r+0xa54>
 80056fc:	9a07      	ldr	r2, [sp, #28]
 80056fe:	bb0a      	cbnz	r2, 8005744 <_dtoa_r+0xa54>
 8005700:	2b00      	cmp	r3, #0
 8005702:	ddec      	ble.n	80056de <_dtoa_r+0x9ee>
 8005704:	2201      	movs	r2, #1
 8005706:	9904      	ldr	r1, [sp, #16]
 8005708:	4620      	mov	r0, r4
 800570a:	f000 fb55 	bl	8005db8 <__lshift>
 800570e:	4639      	mov	r1, r7
 8005710:	9004      	str	r0, [sp, #16]
 8005712:	f000 fba5 	bl	8005e60 <__mcmp>
 8005716:	2800      	cmp	r0, #0
 8005718:	dc03      	bgt.n	8005722 <_dtoa_r+0xa32>
 800571a:	d1e0      	bne.n	80056de <_dtoa_r+0x9ee>
 800571c:	f018 0f01 	tst.w	r8, #1
 8005720:	d0dd      	beq.n	80056de <_dtoa_r+0x9ee>
 8005722:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005726:	d1d8      	bne.n	80056da <_dtoa_r+0x9ea>
 8005728:	9b05      	ldr	r3, [sp, #20]
 800572a:	9a05      	ldr	r2, [sp, #20]
 800572c:	1c5d      	adds	r5, r3, #1
 800572e:	2339      	movs	r3, #57	; 0x39
 8005730:	7013      	strb	r3, [r2, #0]
 8005732:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005736:	2b39      	cmp	r3, #57	; 0x39
 8005738:	f105 32ff 	add.w	r2, r5, #4294967295
 800573c:	d04f      	beq.n	80057de <_dtoa_r+0xaee>
 800573e:	3301      	adds	r3, #1
 8005740:	7013      	strb	r3, [r2, #0]
 8005742:	e754      	b.n	80055ee <_dtoa_r+0x8fe>
 8005744:	9a05      	ldr	r2, [sp, #20]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f102 0501 	add.w	r5, r2, #1
 800574c:	dd06      	ble.n	800575c <_dtoa_r+0xa6c>
 800574e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005752:	d0e9      	beq.n	8005728 <_dtoa_r+0xa38>
 8005754:	f108 0801 	add.w	r8, r8, #1
 8005758:	9b05      	ldr	r3, [sp, #20]
 800575a:	e7c2      	b.n	80056e2 <_dtoa_r+0x9f2>
 800575c:	9a02      	ldr	r2, [sp, #8]
 800575e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005762:	eba5 030b 	sub.w	r3, r5, fp
 8005766:	4293      	cmp	r3, r2
 8005768:	d021      	beq.n	80057ae <_dtoa_r+0xabe>
 800576a:	2300      	movs	r3, #0
 800576c:	220a      	movs	r2, #10
 800576e:	9904      	ldr	r1, [sp, #16]
 8005770:	4620      	mov	r0, r4
 8005772:	f000 f9ab 	bl	8005acc <__multadd>
 8005776:	45b1      	cmp	r9, r6
 8005778:	9004      	str	r0, [sp, #16]
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	f04f 020a 	mov.w	r2, #10
 8005782:	4649      	mov	r1, r9
 8005784:	4620      	mov	r0, r4
 8005786:	d105      	bne.n	8005794 <_dtoa_r+0xaa4>
 8005788:	f000 f9a0 	bl	8005acc <__multadd>
 800578c:	4681      	mov	r9, r0
 800578e:	4606      	mov	r6, r0
 8005790:	9505      	str	r5, [sp, #20]
 8005792:	e776      	b.n	8005682 <_dtoa_r+0x992>
 8005794:	f000 f99a 	bl	8005acc <__multadd>
 8005798:	4631      	mov	r1, r6
 800579a:	4681      	mov	r9, r0
 800579c:	2300      	movs	r3, #0
 800579e:	220a      	movs	r2, #10
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 f993 	bl	8005acc <__multadd>
 80057a6:	4606      	mov	r6, r0
 80057a8:	e7f2      	b.n	8005790 <_dtoa_r+0xaa0>
 80057aa:	f04f 0900 	mov.w	r9, #0
 80057ae:	2201      	movs	r2, #1
 80057b0:	9904      	ldr	r1, [sp, #16]
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 fb00 	bl	8005db8 <__lshift>
 80057b8:	4639      	mov	r1, r7
 80057ba:	9004      	str	r0, [sp, #16]
 80057bc:	f000 fb50 	bl	8005e60 <__mcmp>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	dcb6      	bgt.n	8005732 <_dtoa_r+0xa42>
 80057c4:	d102      	bne.n	80057cc <_dtoa_r+0xadc>
 80057c6:	f018 0f01 	tst.w	r8, #1
 80057ca:	d1b2      	bne.n	8005732 <_dtoa_r+0xa42>
 80057cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057d0:	2b30      	cmp	r3, #48	; 0x30
 80057d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80057d6:	f47f af0a 	bne.w	80055ee <_dtoa_r+0x8fe>
 80057da:	4615      	mov	r5, r2
 80057dc:	e7f6      	b.n	80057cc <_dtoa_r+0xadc>
 80057de:	4593      	cmp	fp, r2
 80057e0:	d105      	bne.n	80057ee <_dtoa_r+0xafe>
 80057e2:	2331      	movs	r3, #49	; 0x31
 80057e4:	f10a 0a01 	add.w	sl, sl, #1
 80057e8:	f88b 3000 	strb.w	r3, [fp]
 80057ec:	e6ff      	b.n	80055ee <_dtoa_r+0x8fe>
 80057ee:	4615      	mov	r5, r2
 80057f0:	e79f      	b.n	8005732 <_dtoa_r+0xa42>
 80057f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005858 <_dtoa_r+0xb68>
 80057f6:	e007      	b.n	8005808 <_dtoa_r+0xb18>
 80057f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800585c <_dtoa_r+0xb6c>
 80057fe:	b11b      	cbz	r3, 8005808 <_dtoa_r+0xb18>
 8005800:	f10b 0308 	add.w	r3, fp, #8
 8005804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	4658      	mov	r0, fp
 800580a:	b017      	add	sp, #92	; 0x5c
 800580c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005810:	9b06      	ldr	r3, [sp, #24]
 8005812:	2b01      	cmp	r3, #1
 8005814:	f77f ae35 	ble.w	8005482 <_dtoa_r+0x792>
 8005818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800581a:	9307      	str	r3, [sp, #28]
 800581c:	e649      	b.n	80054b2 <_dtoa_r+0x7c2>
 800581e:	9b02      	ldr	r3, [sp, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	dc03      	bgt.n	800582c <_dtoa_r+0xb3c>
 8005824:	9b06      	ldr	r3, [sp, #24]
 8005826:	2b02      	cmp	r3, #2
 8005828:	f73f aecc 	bgt.w	80055c4 <_dtoa_r+0x8d4>
 800582c:	465d      	mov	r5, fp
 800582e:	4639      	mov	r1, r7
 8005830:	9804      	ldr	r0, [sp, #16]
 8005832:	f7ff f9d1 	bl	8004bd8 <quorem>
 8005836:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800583a:	f805 8b01 	strb.w	r8, [r5], #1
 800583e:	9a02      	ldr	r2, [sp, #8]
 8005840:	eba5 030b 	sub.w	r3, r5, fp
 8005844:	429a      	cmp	r2, r3
 8005846:	ddb0      	ble.n	80057aa <_dtoa_r+0xaba>
 8005848:	2300      	movs	r3, #0
 800584a:	220a      	movs	r2, #10
 800584c:	9904      	ldr	r1, [sp, #16]
 800584e:	4620      	mov	r0, r4
 8005850:	f000 f93c 	bl	8005acc <__multadd>
 8005854:	9004      	str	r0, [sp, #16]
 8005856:	e7ea      	b.n	800582e <_dtoa_r+0xb3e>
 8005858:	08006fb0 	.word	0x08006fb0
 800585c:	08006fd4 	.word	0x08006fd4

08005860 <std>:
 8005860:	2300      	movs	r3, #0
 8005862:	b510      	push	{r4, lr}
 8005864:	4604      	mov	r4, r0
 8005866:	e9c0 3300 	strd	r3, r3, [r0]
 800586a:	6083      	str	r3, [r0, #8]
 800586c:	8181      	strh	r1, [r0, #12]
 800586e:	6643      	str	r3, [r0, #100]	; 0x64
 8005870:	81c2      	strh	r2, [r0, #14]
 8005872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005876:	6183      	str	r3, [r0, #24]
 8005878:	4619      	mov	r1, r3
 800587a:	2208      	movs	r2, #8
 800587c:	305c      	adds	r0, #92	; 0x5c
 800587e:	f7fe fd0f 	bl	80042a0 <memset>
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x38>)
 8005884:	6263      	str	r3, [r4, #36]	; 0x24
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <std+0x3c>)
 8005888:	62a3      	str	r3, [r4, #40]	; 0x28
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <std+0x40>)
 800588c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <std+0x44>)
 8005890:	6224      	str	r4, [r4, #32]
 8005892:	6323      	str	r3, [r4, #48]	; 0x30
 8005894:	bd10      	pop	{r4, pc}
 8005896:	bf00      	nop
 8005898:	0800669d 	.word	0x0800669d
 800589c:	080066bf 	.word	0x080066bf
 80058a0:	080066f7 	.word	0x080066f7
 80058a4:	0800671b 	.word	0x0800671b

080058a8 <_cleanup_r>:
 80058a8:	4901      	ldr	r1, [pc, #4]	; (80058b0 <_cleanup_r+0x8>)
 80058aa:	f000 b885 	b.w	80059b8 <_fwalk_reent>
 80058ae:	bf00      	nop
 80058b0:	080069f5 	.word	0x080069f5

080058b4 <__sfmoreglue>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	1e4a      	subs	r2, r1, #1
 80058b8:	2568      	movs	r5, #104	; 0x68
 80058ba:	4355      	muls	r5, r2
 80058bc:	460e      	mov	r6, r1
 80058be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058c2:	f000 fbef 	bl	80060a4 <_malloc_r>
 80058c6:	4604      	mov	r4, r0
 80058c8:	b140      	cbz	r0, 80058dc <__sfmoreglue+0x28>
 80058ca:	2100      	movs	r1, #0
 80058cc:	e9c0 1600 	strd	r1, r6, [r0]
 80058d0:	300c      	adds	r0, #12
 80058d2:	60a0      	str	r0, [r4, #8]
 80058d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058d8:	f7fe fce2 	bl	80042a0 <memset>
 80058dc:	4620      	mov	r0, r4
 80058de:	bd70      	pop	{r4, r5, r6, pc}

080058e0 <__sinit>:
 80058e0:	6983      	ldr	r3, [r0, #24]
 80058e2:	b510      	push	{r4, lr}
 80058e4:	4604      	mov	r4, r0
 80058e6:	bb33      	cbnz	r3, 8005936 <__sinit+0x56>
 80058e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80058ec:	6503      	str	r3, [r0, #80]	; 0x50
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <__sinit+0x58>)
 80058f0:	4a12      	ldr	r2, [pc, #72]	; (800593c <__sinit+0x5c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6282      	str	r2, [r0, #40]	; 0x28
 80058f6:	4298      	cmp	r0, r3
 80058f8:	bf04      	itt	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	6183      	streq	r3, [r0, #24]
 80058fe:	f000 f81f 	bl	8005940 <__sfp>
 8005902:	6060      	str	r0, [r4, #4]
 8005904:	4620      	mov	r0, r4
 8005906:	f000 f81b 	bl	8005940 <__sfp>
 800590a:	60a0      	str	r0, [r4, #8]
 800590c:	4620      	mov	r0, r4
 800590e:	f000 f817 	bl	8005940 <__sfp>
 8005912:	2200      	movs	r2, #0
 8005914:	60e0      	str	r0, [r4, #12]
 8005916:	2104      	movs	r1, #4
 8005918:	6860      	ldr	r0, [r4, #4]
 800591a:	f7ff ffa1 	bl	8005860 <std>
 800591e:	2201      	movs	r2, #1
 8005920:	2109      	movs	r1, #9
 8005922:	68a0      	ldr	r0, [r4, #8]
 8005924:	f7ff ff9c 	bl	8005860 <std>
 8005928:	2202      	movs	r2, #2
 800592a:	2112      	movs	r1, #18
 800592c:	68e0      	ldr	r0, [r4, #12]
 800592e:	f7ff ff97 	bl	8005860 <std>
 8005932:	2301      	movs	r3, #1
 8005934:	61a3      	str	r3, [r4, #24]
 8005936:	bd10      	pop	{r4, pc}
 8005938:	08006f9c 	.word	0x08006f9c
 800593c:	080058a9 	.word	0x080058a9

08005940 <__sfp>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	4b1b      	ldr	r3, [pc, #108]	; (80059b0 <__sfp+0x70>)
 8005944:	681e      	ldr	r6, [r3, #0]
 8005946:	69b3      	ldr	r3, [r6, #24]
 8005948:	4607      	mov	r7, r0
 800594a:	b913      	cbnz	r3, 8005952 <__sfp+0x12>
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff ffc7 	bl	80058e0 <__sinit>
 8005952:	3648      	adds	r6, #72	; 0x48
 8005954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005958:	3b01      	subs	r3, #1
 800595a:	d503      	bpl.n	8005964 <__sfp+0x24>
 800595c:	6833      	ldr	r3, [r6, #0]
 800595e:	b133      	cbz	r3, 800596e <__sfp+0x2e>
 8005960:	6836      	ldr	r6, [r6, #0]
 8005962:	e7f7      	b.n	8005954 <__sfp+0x14>
 8005964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005968:	b16d      	cbz	r5, 8005986 <__sfp+0x46>
 800596a:	3468      	adds	r4, #104	; 0x68
 800596c:	e7f4      	b.n	8005958 <__sfp+0x18>
 800596e:	2104      	movs	r1, #4
 8005970:	4638      	mov	r0, r7
 8005972:	f7ff ff9f 	bl	80058b4 <__sfmoreglue>
 8005976:	6030      	str	r0, [r6, #0]
 8005978:	2800      	cmp	r0, #0
 800597a:	d1f1      	bne.n	8005960 <__sfp+0x20>
 800597c:	230c      	movs	r3, #12
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	4604      	mov	r4, r0
 8005982:	4620      	mov	r0, r4
 8005984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <__sfp+0x74>)
 8005988:	6665      	str	r5, [r4, #100]	; 0x64
 800598a:	e9c4 5500 	strd	r5, r5, [r4]
 800598e:	60a5      	str	r5, [r4, #8]
 8005990:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005994:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005998:	2208      	movs	r2, #8
 800599a:	4629      	mov	r1, r5
 800599c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059a0:	f7fe fc7e 	bl	80042a0 <memset>
 80059a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059ac:	e7e9      	b.n	8005982 <__sfp+0x42>
 80059ae:	bf00      	nop
 80059b0:	08006f9c 	.word	0x08006f9c
 80059b4:	ffff0001 	.word	0xffff0001

080059b8 <_fwalk_reent>:
 80059b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059bc:	4680      	mov	r8, r0
 80059be:	4689      	mov	r9, r1
 80059c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059c4:	2600      	movs	r6, #0
 80059c6:	b914      	cbnz	r4, 80059ce <_fwalk_reent+0x16>
 80059c8:	4630      	mov	r0, r6
 80059ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80059d2:	3f01      	subs	r7, #1
 80059d4:	d501      	bpl.n	80059da <_fwalk_reent+0x22>
 80059d6:	6824      	ldr	r4, [r4, #0]
 80059d8:	e7f5      	b.n	80059c6 <_fwalk_reent+0xe>
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d907      	bls.n	80059f0 <_fwalk_reent+0x38>
 80059e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059e4:	3301      	adds	r3, #1
 80059e6:	d003      	beq.n	80059f0 <_fwalk_reent+0x38>
 80059e8:	4629      	mov	r1, r5
 80059ea:	4640      	mov	r0, r8
 80059ec:	47c8      	blx	r9
 80059ee:	4306      	orrs	r6, r0
 80059f0:	3568      	adds	r5, #104	; 0x68
 80059f2:	e7ee      	b.n	80059d2 <_fwalk_reent+0x1a>

080059f4 <_localeconv_r>:
 80059f4:	4b04      	ldr	r3, [pc, #16]	; (8005a08 <_localeconv_r+0x14>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6a18      	ldr	r0, [r3, #32]
 80059fa:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <_localeconv_r+0x18>)
 80059fc:	2800      	cmp	r0, #0
 80059fe:	bf08      	it	eq
 8005a00:	4618      	moveq	r0, r3
 8005a02:	30f0      	adds	r0, #240	; 0xf0
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000010 	.word	0x20000010
 8005a0c:	20000074 	.word	0x20000074

08005a10 <malloc>:
 8005a10:	4b02      	ldr	r3, [pc, #8]	; (8005a1c <malloc+0xc>)
 8005a12:	4601      	mov	r1, r0
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	f000 bb45 	b.w	80060a4 <_malloc_r>
 8005a1a:	bf00      	nop
 8005a1c:	20000010 	.word	0x20000010

08005a20 <memcpy>:
 8005a20:	b510      	push	{r4, lr}
 8005a22:	1e43      	subs	r3, r0, #1
 8005a24:	440a      	add	r2, r1
 8005a26:	4291      	cmp	r1, r2
 8005a28:	d100      	bne.n	8005a2c <memcpy+0xc>
 8005a2a:	bd10      	pop	{r4, pc}
 8005a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a34:	e7f7      	b.n	8005a26 <memcpy+0x6>

08005a36 <_Balloc>:
 8005a36:	b570      	push	{r4, r5, r6, lr}
 8005a38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	460e      	mov	r6, r1
 8005a3e:	b93d      	cbnz	r5, 8005a50 <_Balloc+0x1a>
 8005a40:	2010      	movs	r0, #16
 8005a42:	f7ff ffe5 	bl	8005a10 <malloc>
 8005a46:	6260      	str	r0, [r4, #36]	; 0x24
 8005a48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a4c:	6005      	str	r5, [r0, #0]
 8005a4e:	60c5      	str	r5, [r0, #12]
 8005a50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005a52:	68eb      	ldr	r3, [r5, #12]
 8005a54:	b183      	cbz	r3, 8005a78 <_Balloc+0x42>
 8005a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a5e:	b9b8      	cbnz	r0, 8005a90 <_Balloc+0x5a>
 8005a60:	2101      	movs	r1, #1
 8005a62:	fa01 f506 	lsl.w	r5, r1, r6
 8005a66:	1d6a      	adds	r2, r5, #5
 8005a68:	0092      	lsls	r2, r2, #2
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f000 fabe 	bl	8005fec <_calloc_r>
 8005a70:	b160      	cbz	r0, 8005a8c <_Balloc+0x56>
 8005a72:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005a76:	e00e      	b.n	8005a96 <_Balloc+0x60>
 8005a78:	2221      	movs	r2, #33	; 0x21
 8005a7a:	2104      	movs	r1, #4
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 fab5 	bl	8005fec <_calloc_r>
 8005a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a84:	60e8      	str	r0, [r5, #12]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e4      	bne.n	8005a56 <_Balloc+0x20>
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	6802      	ldr	r2, [r0, #0]
 8005a92:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005a96:	2300      	movs	r3, #0
 8005a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a9c:	e7f7      	b.n	8005a8e <_Balloc+0x58>

08005a9e <_Bfree>:
 8005a9e:	b570      	push	{r4, r5, r6, lr}
 8005aa0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	460d      	mov	r5, r1
 8005aa6:	b93c      	cbnz	r4, 8005ab8 <_Bfree+0x1a>
 8005aa8:	2010      	movs	r0, #16
 8005aaa:	f7ff ffb1 	bl	8005a10 <malloc>
 8005aae:	6270      	str	r0, [r6, #36]	; 0x24
 8005ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ab4:	6004      	str	r4, [r0, #0]
 8005ab6:	60c4      	str	r4, [r0, #12]
 8005ab8:	b13d      	cbz	r5, 8005aca <_Bfree+0x2c>
 8005aba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005abc:	686a      	ldr	r2, [r5, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ac4:	6029      	str	r1, [r5, #0]
 8005ac6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005aca:	bd70      	pop	{r4, r5, r6, pc}

08005acc <__multadd>:
 8005acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad0:	690d      	ldr	r5, [r1, #16]
 8005ad2:	461f      	mov	r7, r3
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	f101 0c14 	add.w	ip, r1, #20
 8005adc:	2300      	movs	r3, #0
 8005ade:	f8dc 0000 	ldr.w	r0, [ip]
 8005ae2:	b281      	uxth	r1, r0
 8005ae4:	fb02 7101 	mla	r1, r2, r1, r7
 8005ae8:	0c0f      	lsrs	r7, r1, #16
 8005aea:	0c00      	lsrs	r0, r0, #16
 8005aec:	fb02 7000 	mla	r0, r2, r0, r7
 8005af0:	b289      	uxth	r1, r1
 8005af2:	3301      	adds	r3, #1
 8005af4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005af8:	429d      	cmp	r5, r3
 8005afa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005afe:	f84c 1b04 	str.w	r1, [ip], #4
 8005b02:	dcec      	bgt.n	8005ade <__multadd+0x12>
 8005b04:	b1d7      	cbz	r7, 8005b3c <__multadd+0x70>
 8005b06:	68a3      	ldr	r3, [r4, #8]
 8005b08:	42ab      	cmp	r3, r5
 8005b0a:	dc12      	bgt.n	8005b32 <__multadd+0x66>
 8005b0c:	6861      	ldr	r1, [r4, #4]
 8005b0e:	4630      	mov	r0, r6
 8005b10:	3101      	adds	r1, #1
 8005b12:	f7ff ff90 	bl	8005a36 <_Balloc>
 8005b16:	6922      	ldr	r2, [r4, #16]
 8005b18:	3202      	adds	r2, #2
 8005b1a:	f104 010c 	add.w	r1, r4, #12
 8005b1e:	4680      	mov	r8, r0
 8005b20:	0092      	lsls	r2, r2, #2
 8005b22:	300c      	adds	r0, #12
 8005b24:	f7ff ff7c 	bl	8005a20 <memcpy>
 8005b28:	4621      	mov	r1, r4
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f7ff ffb7 	bl	8005a9e <_Bfree>
 8005b30:	4644      	mov	r4, r8
 8005b32:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b36:	3501      	adds	r5, #1
 8005b38:	615f      	str	r7, [r3, #20]
 8005b3a:	6125      	str	r5, [r4, #16]
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b42 <__hi0bits>:
 8005b42:	0c02      	lsrs	r2, r0, #16
 8005b44:	0412      	lsls	r2, r2, #16
 8005b46:	4603      	mov	r3, r0
 8005b48:	b9b2      	cbnz	r2, 8005b78 <__hi0bits+0x36>
 8005b4a:	0403      	lsls	r3, r0, #16
 8005b4c:	2010      	movs	r0, #16
 8005b4e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b52:	bf04      	itt	eq
 8005b54:	021b      	lsleq	r3, r3, #8
 8005b56:	3008      	addeq	r0, #8
 8005b58:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b5c:	bf04      	itt	eq
 8005b5e:	011b      	lsleq	r3, r3, #4
 8005b60:	3004      	addeq	r0, #4
 8005b62:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b66:	bf04      	itt	eq
 8005b68:	009b      	lsleq	r3, r3, #2
 8005b6a:	3002      	addeq	r0, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	db06      	blt.n	8005b7e <__hi0bits+0x3c>
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	d503      	bpl.n	8005b7c <__hi0bits+0x3a>
 8005b74:	3001      	adds	r0, #1
 8005b76:	4770      	bx	lr
 8005b78:	2000      	movs	r0, #0
 8005b7a:	e7e8      	b.n	8005b4e <__hi0bits+0xc>
 8005b7c:	2020      	movs	r0, #32
 8005b7e:	4770      	bx	lr

08005b80 <__lo0bits>:
 8005b80:	6803      	ldr	r3, [r0, #0]
 8005b82:	f013 0207 	ands.w	r2, r3, #7
 8005b86:	4601      	mov	r1, r0
 8005b88:	d00b      	beq.n	8005ba2 <__lo0bits+0x22>
 8005b8a:	07da      	lsls	r2, r3, #31
 8005b8c:	d423      	bmi.n	8005bd6 <__lo0bits+0x56>
 8005b8e:	0798      	lsls	r0, r3, #30
 8005b90:	bf49      	itett	mi
 8005b92:	085b      	lsrmi	r3, r3, #1
 8005b94:	089b      	lsrpl	r3, r3, #2
 8005b96:	2001      	movmi	r0, #1
 8005b98:	600b      	strmi	r3, [r1, #0]
 8005b9a:	bf5c      	itt	pl
 8005b9c:	600b      	strpl	r3, [r1, #0]
 8005b9e:	2002      	movpl	r0, #2
 8005ba0:	4770      	bx	lr
 8005ba2:	b298      	uxth	r0, r3
 8005ba4:	b9a8      	cbnz	r0, 8005bd2 <__lo0bits+0x52>
 8005ba6:	0c1b      	lsrs	r3, r3, #16
 8005ba8:	2010      	movs	r0, #16
 8005baa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005bae:	bf04      	itt	eq
 8005bb0:	0a1b      	lsreq	r3, r3, #8
 8005bb2:	3008      	addeq	r0, #8
 8005bb4:	071a      	lsls	r2, r3, #28
 8005bb6:	bf04      	itt	eq
 8005bb8:	091b      	lsreq	r3, r3, #4
 8005bba:	3004      	addeq	r0, #4
 8005bbc:	079a      	lsls	r2, r3, #30
 8005bbe:	bf04      	itt	eq
 8005bc0:	089b      	lsreq	r3, r3, #2
 8005bc2:	3002      	addeq	r0, #2
 8005bc4:	07da      	lsls	r2, r3, #31
 8005bc6:	d402      	bmi.n	8005bce <__lo0bits+0x4e>
 8005bc8:	085b      	lsrs	r3, r3, #1
 8005bca:	d006      	beq.n	8005bda <__lo0bits+0x5a>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	600b      	str	r3, [r1, #0]
 8005bd0:	4770      	bx	lr
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	e7e9      	b.n	8005baa <__lo0bits+0x2a>
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	4770      	bx	lr
 8005bda:	2020      	movs	r0, #32
 8005bdc:	4770      	bx	lr

08005bde <__i2b>:
 8005bde:	b510      	push	{r4, lr}
 8005be0:	460c      	mov	r4, r1
 8005be2:	2101      	movs	r1, #1
 8005be4:	f7ff ff27 	bl	8005a36 <_Balloc>
 8005be8:	2201      	movs	r2, #1
 8005bea:	6144      	str	r4, [r0, #20]
 8005bec:	6102      	str	r2, [r0, #16]
 8005bee:	bd10      	pop	{r4, pc}

08005bf0 <__multiply>:
 8005bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	4614      	mov	r4, r2
 8005bf6:	690a      	ldr	r2, [r1, #16]
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	bfb8      	it	lt
 8005bfe:	460b      	movlt	r3, r1
 8005c00:	4688      	mov	r8, r1
 8005c02:	bfbc      	itt	lt
 8005c04:	46a0      	movlt	r8, r4
 8005c06:	461c      	movlt	r4, r3
 8005c08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c18:	eb07 0609 	add.w	r6, r7, r9
 8005c1c:	42b3      	cmp	r3, r6
 8005c1e:	bfb8      	it	lt
 8005c20:	3101      	addlt	r1, #1
 8005c22:	f7ff ff08 	bl	8005a36 <_Balloc>
 8005c26:	f100 0514 	add.w	r5, r0, #20
 8005c2a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005c2e:	462b      	mov	r3, r5
 8005c30:	2200      	movs	r2, #0
 8005c32:	4573      	cmp	r3, lr
 8005c34:	d316      	bcc.n	8005c64 <__multiply+0x74>
 8005c36:	f104 0214 	add.w	r2, r4, #20
 8005c3a:	f108 0114 	add.w	r1, r8, #20
 8005c3e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005c42:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	9b00      	ldr	r3, [sp, #0]
 8005c4a:	9201      	str	r2, [sp, #4]
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d80c      	bhi.n	8005c6a <__multiply+0x7a>
 8005c50:	2e00      	cmp	r6, #0
 8005c52:	dd03      	ble.n	8005c5c <__multiply+0x6c>
 8005c54:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d05d      	beq.n	8005d18 <__multiply+0x128>
 8005c5c:	6106      	str	r6, [r0, #16]
 8005c5e:	b003      	add	sp, #12
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	f843 2b04 	str.w	r2, [r3], #4
 8005c68:	e7e3      	b.n	8005c32 <__multiply+0x42>
 8005c6a:	f8b2 b000 	ldrh.w	fp, [r2]
 8005c6e:	f1bb 0f00 	cmp.w	fp, #0
 8005c72:	d023      	beq.n	8005cbc <__multiply+0xcc>
 8005c74:	4689      	mov	r9, r1
 8005c76:	46ac      	mov	ip, r5
 8005c78:	f04f 0800 	mov.w	r8, #0
 8005c7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005c80:	f8dc a000 	ldr.w	sl, [ip]
 8005c84:	b2a3      	uxth	r3, r4
 8005c86:	fa1f fa8a 	uxth.w	sl, sl
 8005c8a:	fb0b a303 	mla	r3, fp, r3, sl
 8005c8e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005c92:	f8dc 4000 	ldr.w	r4, [ip]
 8005c96:	4443      	add	r3, r8
 8005c98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c9c:	fb0b 840a 	mla	r4, fp, sl, r8
 8005ca0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005ca4:	46e2      	mov	sl, ip
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005cac:	454f      	cmp	r7, r9
 8005cae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005cb2:	f84a 3b04 	str.w	r3, [sl], #4
 8005cb6:	d82b      	bhi.n	8005d10 <__multiply+0x120>
 8005cb8:	f8cc 8004 	str.w	r8, [ip, #4]
 8005cbc:	9b01      	ldr	r3, [sp, #4]
 8005cbe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005cc2:	3204      	adds	r2, #4
 8005cc4:	f1ba 0f00 	cmp.w	sl, #0
 8005cc8:	d020      	beq.n	8005d0c <__multiply+0x11c>
 8005cca:	682b      	ldr	r3, [r5, #0]
 8005ccc:	4689      	mov	r9, r1
 8005cce:	46a8      	mov	r8, r5
 8005cd0:	f04f 0b00 	mov.w	fp, #0
 8005cd4:	f8b9 c000 	ldrh.w	ip, [r9]
 8005cd8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005cdc:	fb0a 440c 	mla	r4, sl, ip, r4
 8005ce0:	445c      	add	r4, fp
 8005ce2:	46c4      	mov	ip, r8
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005cea:	f84c 3b04 	str.w	r3, [ip], #4
 8005cee:	f859 3b04 	ldr.w	r3, [r9], #4
 8005cf2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005cf6:	0c1b      	lsrs	r3, r3, #16
 8005cf8:	fb0a b303 	mla	r3, sl, r3, fp
 8005cfc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005d00:	454f      	cmp	r7, r9
 8005d02:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005d06:	d805      	bhi.n	8005d14 <__multiply+0x124>
 8005d08:	f8c8 3004 	str.w	r3, [r8, #4]
 8005d0c:	3504      	adds	r5, #4
 8005d0e:	e79b      	b.n	8005c48 <__multiply+0x58>
 8005d10:	46d4      	mov	ip, sl
 8005d12:	e7b3      	b.n	8005c7c <__multiply+0x8c>
 8005d14:	46e0      	mov	r8, ip
 8005d16:	e7dd      	b.n	8005cd4 <__multiply+0xe4>
 8005d18:	3e01      	subs	r6, #1
 8005d1a:	e799      	b.n	8005c50 <__multiply+0x60>

08005d1c <__pow5mult>:
 8005d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d20:	4615      	mov	r5, r2
 8005d22:	f012 0203 	ands.w	r2, r2, #3
 8005d26:	4606      	mov	r6, r0
 8005d28:	460f      	mov	r7, r1
 8005d2a:	d007      	beq.n	8005d3c <__pow5mult+0x20>
 8005d2c:	3a01      	subs	r2, #1
 8005d2e:	4c21      	ldr	r4, [pc, #132]	; (8005db4 <__pow5mult+0x98>)
 8005d30:	2300      	movs	r3, #0
 8005d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d36:	f7ff fec9 	bl	8005acc <__multadd>
 8005d3a:	4607      	mov	r7, r0
 8005d3c:	10ad      	asrs	r5, r5, #2
 8005d3e:	d035      	beq.n	8005dac <__pow5mult+0x90>
 8005d40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d42:	b93c      	cbnz	r4, 8005d54 <__pow5mult+0x38>
 8005d44:	2010      	movs	r0, #16
 8005d46:	f7ff fe63 	bl	8005a10 <malloc>
 8005d4a:	6270      	str	r0, [r6, #36]	; 0x24
 8005d4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d50:	6004      	str	r4, [r0, #0]
 8005d52:	60c4      	str	r4, [r0, #12]
 8005d54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d5c:	b94c      	cbnz	r4, 8005d72 <__pow5mult+0x56>
 8005d5e:	f240 2171 	movw	r1, #625	; 0x271
 8005d62:	4630      	mov	r0, r6
 8005d64:	f7ff ff3b 	bl	8005bde <__i2b>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d6e:	4604      	mov	r4, r0
 8005d70:	6003      	str	r3, [r0, #0]
 8005d72:	f04f 0800 	mov.w	r8, #0
 8005d76:	07eb      	lsls	r3, r5, #31
 8005d78:	d50a      	bpl.n	8005d90 <__pow5mult+0x74>
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff ff36 	bl	8005bf0 <__multiply>
 8005d84:	4639      	mov	r1, r7
 8005d86:	4681      	mov	r9, r0
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f7ff fe88 	bl	8005a9e <_Bfree>
 8005d8e:	464f      	mov	r7, r9
 8005d90:	106d      	asrs	r5, r5, #1
 8005d92:	d00b      	beq.n	8005dac <__pow5mult+0x90>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	b938      	cbnz	r0, 8005da8 <__pow5mult+0x8c>
 8005d98:	4622      	mov	r2, r4
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f7ff ff27 	bl	8005bf0 <__multiply>
 8005da2:	6020      	str	r0, [r4, #0]
 8005da4:	f8c0 8000 	str.w	r8, [r0]
 8005da8:	4604      	mov	r4, r0
 8005daa:	e7e4      	b.n	8005d76 <__pow5mult+0x5a>
 8005dac:	4638      	mov	r0, r7
 8005dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db2:	bf00      	nop
 8005db4:	08007138 	.word	0x08007138

08005db8 <__lshift>:
 8005db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	6849      	ldr	r1, [r1, #4]
 8005dc6:	eb0a 0903 	add.w	r9, sl, r3
 8005dca:	68a3      	ldr	r3, [r4, #8]
 8005dcc:	4607      	mov	r7, r0
 8005dce:	4616      	mov	r6, r2
 8005dd0:	f109 0501 	add.w	r5, r9, #1
 8005dd4:	42ab      	cmp	r3, r5
 8005dd6:	db32      	blt.n	8005e3e <__lshift+0x86>
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f7ff fe2c 	bl	8005a36 <_Balloc>
 8005dde:	2300      	movs	r3, #0
 8005de0:	4680      	mov	r8, r0
 8005de2:	f100 0114 	add.w	r1, r0, #20
 8005de6:	461a      	mov	r2, r3
 8005de8:	4553      	cmp	r3, sl
 8005dea:	db2b      	blt.n	8005e44 <__lshift+0x8c>
 8005dec:	6920      	ldr	r0, [r4, #16]
 8005dee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005df2:	f104 0314 	add.w	r3, r4, #20
 8005df6:	f016 021f 	ands.w	r2, r6, #31
 8005dfa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dfe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e02:	d025      	beq.n	8005e50 <__lshift+0x98>
 8005e04:	f1c2 0e20 	rsb	lr, r2, #32
 8005e08:	2000      	movs	r0, #0
 8005e0a:	681e      	ldr	r6, [r3, #0]
 8005e0c:	468a      	mov	sl, r1
 8005e0e:	4096      	lsls	r6, r2
 8005e10:	4330      	orrs	r0, r6
 8005e12:	f84a 0b04 	str.w	r0, [sl], #4
 8005e16:	f853 0b04 	ldr.w	r0, [r3], #4
 8005e1a:	459c      	cmp	ip, r3
 8005e1c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005e20:	d814      	bhi.n	8005e4c <__lshift+0x94>
 8005e22:	6048      	str	r0, [r1, #4]
 8005e24:	b108      	cbz	r0, 8005e2a <__lshift+0x72>
 8005e26:	f109 0502 	add.w	r5, r9, #2
 8005e2a:	3d01      	subs	r5, #1
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005e32:	4621      	mov	r1, r4
 8005e34:	f7ff fe33 	bl	8005a9e <_Bfree>
 8005e38:	4640      	mov	r0, r8
 8005e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3e:	3101      	adds	r1, #1
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	e7c7      	b.n	8005dd4 <__lshift+0x1c>
 8005e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	e7cd      	b.n	8005de8 <__lshift+0x30>
 8005e4c:	4651      	mov	r1, sl
 8005e4e:	e7dc      	b.n	8005e0a <__lshift+0x52>
 8005e50:	3904      	subs	r1, #4
 8005e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e56:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e5a:	459c      	cmp	ip, r3
 8005e5c:	d8f9      	bhi.n	8005e52 <__lshift+0x9a>
 8005e5e:	e7e4      	b.n	8005e2a <__lshift+0x72>

08005e60 <__mcmp>:
 8005e60:	6903      	ldr	r3, [r0, #16]
 8005e62:	690a      	ldr	r2, [r1, #16]
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	b530      	push	{r4, r5, lr}
 8005e68:	d10c      	bne.n	8005e84 <__mcmp+0x24>
 8005e6a:	0092      	lsls	r2, r2, #2
 8005e6c:	3014      	adds	r0, #20
 8005e6e:	3114      	adds	r1, #20
 8005e70:	1884      	adds	r4, r0, r2
 8005e72:	4411      	add	r1, r2
 8005e74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e7c:	4295      	cmp	r5, r2
 8005e7e:	d003      	beq.n	8005e88 <__mcmp+0x28>
 8005e80:	d305      	bcc.n	8005e8e <__mcmp+0x2e>
 8005e82:	2301      	movs	r3, #1
 8005e84:	4618      	mov	r0, r3
 8005e86:	bd30      	pop	{r4, r5, pc}
 8005e88:	42a0      	cmp	r0, r4
 8005e8a:	d3f3      	bcc.n	8005e74 <__mcmp+0x14>
 8005e8c:	e7fa      	b.n	8005e84 <__mcmp+0x24>
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e92:	e7f7      	b.n	8005e84 <__mcmp+0x24>

08005e94 <__mdiff>:
 8005e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e98:	460d      	mov	r5, r1
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	f7ff ffdd 	bl	8005e60 <__mcmp>
 8005ea6:	1e06      	subs	r6, r0, #0
 8005ea8:	d108      	bne.n	8005ebc <__mdiff+0x28>
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4638      	mov	r0, r7
 8005eae:	f7ff fdc2 	bl	8005a36 <_Balloc>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebc:	bfa4      	itt	ge
 8005ebe:	4623      	movge	r3, r4
 8005ec0:	462c      	movge	r4, r5
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	6861      	ldr	r1, [r4, #4]
 8005ec6:	bfa6      	itte	ge
 8005ec8:	461d      	movge	r5, r3
 8005eca:	2600      	movge	r6, #0
 8005ecc:	2601      	movlt	r6, #1
 8005ece:	f7ff fdb2 	bl	8005a36 <_Balloc>
 8005ed2:	692b      	ldr	r3, [r5, #16]
 8005ed4:	60c6      	str	r6, [r0, #12]
 8005ed6:	6926      	ldr	r6, [r4, #16]
 8005ed8:	f105 0914 	add.w	r9, r5, #20
 8005edc:	f104 0214 	add.w	r2, r4, #20
 8005ee0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005ee4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005ee8:	f100 0514 	add.w	r5, r0, #20
 8005eec:	f04f 0e00 	mov.w	lr, #0
 8005ef0:	f852 ab04 	ldr.w	sl, [r2], #4
 8005ef4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005ef8:	fa1e f18a 	uxtah	r1, lr, sl
 8005efc:	b2a3      	uxth	r3, r4
 8005efe:	1ac9      	subs	r1, r1, r3
 8005f00:	0c23      	lsrs	r3, r4, #16
 8005f02:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005f06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f0a:	b289      	uxth	r1, r1
 8005f0c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005f10:	45c8      	cmp	r8, r9
 8005f12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f16:	4694      	mov	ip, r2
 8005f18:	f845 3b04 	str.w	r3, [r5], #4
 8005f1c:	d8e8      	bhi.n	8005ef0 <__mdiff+0x5c>
 8005f1e:	45bc      	cmp	ip, r7
 8005f20:	d304      	bcc.n	8005f2c <__mdiff+0x98>
 8005f22:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005f26:	b183      	cbz	r3, 8005f4a <__mdiff+0xb6>
 8005f28:	6106      	str	r6, [r0, #16]
 8005f2a:	e7c5      	b.n	8005eb8 <__mdiff+0x24>
 8005f2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005f30:	fa1e f381 	uxtah	r3, lr, r1
 8005f34:	141a      	asrs	r2, r3, #16
 8005f36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f40:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005f44:	f845 3b04 	str.w	r3, [r5], #4
 8005f48:	e7e9      	b.n	8005f1e <__mdiff+0x8a>
 8005f4a:	3e01      	subs	r6, #1
 8005f4c:	e7e9      	b.n	8005f22 <__mdiff+0x8e>

08005f4e <__d2b>:
 8005f4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f52:	460e      	mov	r6, r1
 8005f54:	2101      	movs	r1, #1
 8005f56:	ec59 8b10 	vmov	r8, r9, d0
 8005f5a:	4615      	mov	r5, r2
 8005f5c:	f7ff fd6b 	bl	8005a36 <_Balloc>
 8005f60:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005f64:	4607      	mov	r7, r0
 8005f66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f6a:	bb34      	cbnz	r4, 8005fba <__d2b+0x6c>
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	f1b8 0300 	subs.w	r3, r8, #0
 8005f72:	d027      	beq.n	8005fc4 <__d2b+0x76>
 8005f74:	a802      	add	r0, sp, #8
 8005f76:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005f7a:	f7ff fe01 	bl	8005b80 <__lo0bits>
 8005f7e:	9900      	ldr	r1, [sp, #0]
 8005f80:	b1f0      	cbz	r0, 8005fc0 <__d2b+0x72>
 8005f82:	9a01      	ldr	r2, [sp, #4]
 8005f84:	f1c0 0320 	rsb	r3, r0, #32
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	40c2      	lsrs	r2, r0
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	9201      	str	r2, [sp, #4]
 8005f94:	9b01      	ldr	r3, [sp, #4]
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	bf14      	ite	ne
 8005f9c:	2102      	movne	r1, #2
 8005f9e:	2101      	moveq	r1, #1
 8005fa0:	6139      	str	r1, [r7, #16]
 8005fa2:	b1c4      	cbz	r4, 8005fd6 <__d2b+0x88>
 8005fa4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005fa8:	4404      	add	r4, r0
 8005faa:	6034      	str	r4, [r6, #0]
 8005fac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005fb0:	6028      	str	r0, [r5, #0]
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	b003      	add	sp, #12
 8005fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fbe:	e7d5      	b.n	8005f6c <__d2b+0x1e>
 8005fc0:	6179      	str	r1, [r7, #20]
 8005fc2:	e7e7      	b.n	8005f94 <__d2b+0x46>
 8005fc4:	a801      	add	r0, sp, #4
 8005fc6:	f7ff fddb 	bl	8005b80 <__lo0bits>
 8005fca:	9b01      	ldr	r3, [sp, #4]
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	2101      	movs	r1, #1
 8005fd0:	6139      	str	r1, [r7, #16]
 8005fd2:	3020      	adds	r0, #32
 8005fd4:	e7e5      	b.n	8005fa2 <__d2b+0x54>
 8005fd6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005fda:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fde:	6030      	str	r0, [r6, #0]
 8005fe0:	6918      	ldr	r0, [r3, #16]
 8005fe2:	f7ff fdae 	bl	8005b42 <__hi0bits>
 8005fe6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005fea:	e7e1      	b.n	8005fb0 <__d2b+0x62>

08005fec <_calloc_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	fb02 f401 	mul.w	r4, r2, r1
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	f000 f856 	bl	80060a4 <_malloc_r>
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	b118      	cbz	r0, 8006004 <_calloc_r+0x18>
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	2100      	movs	r1, #0
 8006000:	f7fe f94e 	bl	80042a0 <memset>
 8006004:	4628      	mov	r0, r5
 8006006:	bd38      	pop	{r3, r4, r5, pc}

08006008 <_free_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4605      	mov	r5, r0
 800600c:	2900      	cmp	r1, #0
 800600e:	d045      	beq.n	800609c <_free_r+0x94>
 8006010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006014:	1f0c      	subs	r4, r1, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	bfb8      	it	lt
 800601a:	18e4      	addlt	r4, r4, r3
 800601c:	f000 fdb5 	bl	8006b8a <__malloc_lock>
 8006020:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <_free_r+0x98>)
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	4610      	mov	r0, r2
 8006026:	b933      	cbnz	r3, 8006036 <_free_r+0x2e>
 8006028:	6063      	str	r3, [r4, #4]
 800602a:	6014      	str	r4, [r2, #0]
 800602c:	4628      	mov	r0, r5
 800602e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006032:	f000 bdab 	b.w	8006b8c <__malloc_unlock>
 8006036:	42a3      	cmp	r3, r4
 8006038:	d90c      	bls.n	8006054 <_free_r+0x4c>
 800603a:	6821      	ldr	r1, [r4, #0]
 800603c:	1862      	adds	r2, r4, r1
 800603e:	4293      	cmp	r3, r2
 8006040:	bf04      	itt	eq
 8006042:	681a      	ldreq	r2, [r3, #0]
 8006044:	685b      	ldreq	r3, [r3, #4]
 8006046:	6063      	str	r3, [r4, #4]
 8006048:	bf04      	itt	eq
 800604a:	1852      	addeq	r2, r2, r1
 800604c:	6022      	streq	r2, [r4, #0]
 800604e:	6004      	str	r4, [r0, #0]
 8006050:	e7ec      	b.n	800602c <_free_r+0x24>
 8006052:	4613      	mov	r3, r2
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	b10a      	cbz	r2, 800605c <_free_r+0x54>
 8006058:	42a2      	cmp	r2, r4
 800605a:	d9fa      	bls.n	8006052 <_free_r+0x4a>
 800605c:	6819      	ldr	r1, [r3, #0]
 800605e:	1858      	adds	r0, r3, r1
 8006060:	42a0      	cmp	r0, r4
 8006062:	d10b      	bne.n	800607c <_free_r+0x74>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	4401      	add	r1, r0
 8006068:	1858      	adds	r0, r3, r1
 800606a:	4282      	cmp	r2, r0
 800606c:	6019      	str	r1, [r3, #0]
 800606e:	d1dd      	bne.n	800602c <_free_r+0x24>
 8006070:	6810      	ldr	r0, [r2, #0]
 8006072:	6852      	ldr	r2, [r2, #4]
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	4401      	add	r1, r0
 8006078:	6019      	str	r1, [r3, #0]
 800607a:	e7d7      	b.n	800602c <_free_r+0x24>
 800607c:	d902      	bls.n	8006084 <_free_r+0x7c>
 800607e:	230c      	movs	r3, #12
 8006080:	602b      	str	r3, [r5, #0]
 8006082:	e7d3      	b.n	800602c <_free_r+0x24>
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	1821      	adds	r1, r4, r0
 8006088:	428a      	cmp	r2, r1
 800608a:	bf04      	itt	eq
 800608c:	6811      	ldreq	r1, [r2, #0]
 800608e:	6852      	ldreq	r2, [r2, #4]
 8006090:	6062      	str	r2, [r4, #4]
 8006092:	bf04      	itt	eq
 8006094:	1809      	addeq	r1, r1, r0
 8006096:	6021      	streq	r1, [r4, #0]
 8006098:	605c      	str	r4, [r3, #4]
 800609a:	e7c7      	b.n	800602c <_free_r+0x24>
 800609c:	bd38      	pop	{r3, r4, r5, pc}
 800609e:	bf00      	nop
 80060a0:	20000204 	.word	0x20000204

080060a4 <_malloc_r>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	1ccd      	adds	r5, r1, #3
 80060a8:	f025 0503 	bic.w	r5, r5, #3
 80060ac:	3508      	adds	r5, #8
 80060ae:	2d0c      	cmp	r5, #12
 80060b0:	bf38      	it	cc
 80060b2:	250c      	movcc	r5, #12
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	4606      	mov	r6, r0
 80060b8:	db01      	blt.n	80060be <_malloc_r+0x1a>
 80060ba:	42a9      	cmp	r1, r5
 80060bc:	d903      	bls.n	80060c6 <_malloc_r+0x22>
 80060be:	230c      	movs	r3, #12
 80060c0:	6033      	str	r3, [r6, #0]
 80060c2:	2000      	movs	r0, #0
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	f000 fd60 	bl	8006b8a <__malloc_lock>
 80060ca:	4a21      	ldr	r2, [pc, #132]	; (8006150 <_malloc_r+0xac>)
 80060cc:	6814      	ldr	r4, [r2, #0]
 80060ce:	4621      	mov	r1, r4
 80060d0:	b991      	cbnz	r1, 80060f8 <_malloc_r+0x54>
 80060d2:	4c20      	ldr	r4, [pc, #128]	; (8006154 <_malloc_r+0xb0>)
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	b91b      	cbnz	r3, 80060e0 <_malloc_r+0x3c>
 80060d8:	4630      	mov	r0, r6
 80060da:	f000 facf 	bl	800667c <_sbrk_r>
 80060de:	6020      	str	r0, [r4, #0]
 80060e0:	4629      	mov	r1, r5
 80060e2:	4630      	mov	r0, r6
 80060e4:	f000 faca 	bl	800667c <_sbrk_r>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d124      	bne.n	8006136 <_malloc_r+0x92>
 80060ec:	230c      	movs	r3, #12
 80060ee:	6033      	str	r3, [r6, #0]
 80060f0:	4630      	mov	r0, r6
 80060f2:	f000 fd4b 	bl	8006b8c <__malloc_unlock>
 80060f6:	e7e4      	b.n	80060c2 <_malloc_r+0x1e>
 80060f8:	680b      	ldr	r3, [r1, #0]
 80060fa:	1b5b      	subs	r3, r3, r5
 80060fc:	d418      	bmi.n	8006130 <_malloc_r+0x8c>
 80060fe:	2b0b      	cmp	r3, #11
 8006100:	d90f      	bls.n	8006122 <_malloc_r+0x7e>
 8006102:	600b      	str	r3, [r1, #0]
 8006104:	50cd      	str	r5, [r1, r3]
 8006106:	18cc      	adds	r4, r1, r3
 8006108:	4630      	mov	r0, r6
 800610a:	f000 fd3f 	bl	8006b8c <__malloc_unlock>
 800610e:	f104 000b 	add.w	r0, r4, #11
 8006112:	1d23      	adds	r3, r4, #4
 8006114:	f020 0007 	bic.w	r0, r0, #7
 8006118:	1ac3      	subs	r3, r0, r3
 800611a:	d0d3      	beq.n	80060c4 <_malloc_r+0x20>
 800611c:	425a      	negs	r2, r3
 800611e:	50e2      	str	r2, [r4, r3]
 8006120:	e7d0      	b.n	80060c4 <_malloc_r+0x20>
 8006122:	428c      	cmp	r4, r1
 8006124:	684b      	ldr	r3, [r1, #4]
 8006126:	bf16      	itet	ne
 8006128:	6063      	strne	r3, [r4, #4]
 800612a:	6013      	streq	r3, [r2, #0]
 800612c:	460c      	movne	r4, r1
 800612e:	e7eb      	b.n	8006108 <_malloc_r+0x64>
 8006130:	460c      	mov	r4, r1
 8006132:	6849      	ldr	r1, [r1, #4]
 8006134:	e7cc      	b.n	80060d0 <_malloc_r+0x2c>
 8006136:	1cc4      	adds	r4, r0, #3
 8006138:	f024 0403 	bic.w	r4, r4, #3
 800613c:	42a0      	cmp	r0, r4
 800613e:	d005      	beq.n	800614c <_malloc_r+0xa8>
 8006140:	1a21      	subs	r1, r4, r0
 8006142:	4630      	mov	r0, r6
 8006144:	f000 fa9a 	bl	800667c <_sbrk_r>
 8006148:	3001      	adds	r0, #1
 800614a:	d0cf      	beq.n	80060ec <_malloc_r+0x48>
 800614c:	6025      	str	r5, [r4, #0]
 800614e:	e7db      	b.n	8006108 <_malloc_r+0x64>
 8006150:	20000204 	.word	0x20000204
 8006154:	20000208 	.word	0x20000208

08006158 <__ssputs_r>:
 8006158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800615c:	688e      	ldr	r6, [r1, #8]
 800615e:	429e      	cmp	r6, r3
 8006160:	4682      	mov	sl, r0
 8006162:	460c      	mov	r4, r1
 8006164:	4690      	mov	r8, r2
 8006166:	4699      	mov	r9, r3
 8006168:	d837      	bhi.n	80061da <__ssputs_r+0x82>
 800616a:	898a      	ldrh	r2, [r1, #12]
 800616c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006170:	d031      	beq.n	80061d6 <__ssputs_r+0x7e>
 8006172:	6825      	ldr	r5, [r4, #0]
 8006174:	6909      	ldr	r1, [r1, #16]
 8006176:	1a6f      	subs	r7, r5, r1
 8006178:	6965      	ldr	r5, [r4, #20]
 800617a:	2302      	movs	r3, #2
 800617c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006180:	fb95 f5f3 	sdiv	r5, r5, r3
 8006184:	f109 0301 	add.w	r3, r9, #1
 8006188:	443b      	add	r3, r7
 800618a:	429d      	cmp	r5, r3
 800618c:	bf38      	it	cc
 800618e:	461d      	movcc	r5, r3
 8006190:	0553      	lsls	r3, r2, #21
 8006192:	d530      	bpl.n	80061f6 <__ssputs_r+0x9e>
 8006194:	4629      	mov	r1, r5
 8006196:	f7ff ff85 	bl	80060a4 <_malloc_r>
 800619a:	4606      	mov	r6, r0
 800619c:	b950      	cbnz	r0, 80061b4 <__ssputs_r+0x5c>
 800619e:	230c      	movs	r3, #12
 80061a0:	f8ca 3000 	str.w	r3, [sl]
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b4:	463a      	mov	r2, r7
 80061b6:	6921      	ldr	r1, [r4, #16]
 80061b8:	f7ff fc32 	bl	8005a20 <memcpy>
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c6:	81a3      	strh	r3, [r4, #12]
 80061c8:	6126      	str	r6, [r4, #16]
 80061ca:	6165      	str	r5, [r4, #20]
 80061cc:	443e      	add	r6, r7
 80061ce:	1bed      	subs	r5, r5, r7
 80061d0:	6026      	str	r6, [r4, #0]
 80061d2:	60a5      	str	r5, [r4, #8]
 80061d4:	464e      	mov	r6, r9
 80061d6:	454e      	cmp	r6, r9
 80061d8:	d900      	bls.n	80061dc <__ssputs_r+0x84>
 80061da:	464e      	mov	r6, r9
 80061dc:	4632      	mov	r2, r6
 80061de:	4641      	mov	r1, r8
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	f000 fcb9 	bl	8006b58 <memmove>
 80061e6:	68a3      	ldr	r3, [r4, #8]
 80061e8:	1b9b      	subs	r3, r3, r6
 80061ea:	60a3      	str	r3, [r4, #8]
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	441e      	add	r6, r3
 80061f0:	6026      	str	r6, [r4, #0]
 80061f2:	2000      	movs	r0, #0
 80061f4:	e7dc      	b.n	80061b0 <__ssputs_r+0x58>
 80061f6:	462a      	mov	r2, r5
 80061f8:	f000 fcc9 	bl	8006b8e <_realloc_r>
 80061fc:	4606      	mov	r6, r0
 80061fe:	2800      	cmp	r0, #0
 8006200:	d1e2      	bne.n	80061c8 <__ssputs_r+0x70>
 8006202:	6921      	ldr	r1, [r4, #16]
 8006204:	4650      	mov	r0, sl
 8006206:	f7ff feff 	bl	8006008 <_free_r>
 800620a:	e7c8      	b.n	800619e <__ssputs_r+0x46>

0800620c <_svfiprintf_r>:
 800620c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006210:	461d      	mov	r5, r3
 8006212:	898b      	ldrh	r3, [r1, #12]
 8006214:	061f      	lsls	r7, r3, #24
 8006216:	b09d      	sub	sp, #116	; 0x74
 8006218:	4680      	mov	r8, r0
 800621a:	460c      	mov	r4, r1
 800621c:	4616      	mov	r6, r2
 800621e:	d50f      	bpl.n	8006240 <_svfiprintf_r+0x34>
 8006220:	690b      	ldr	r3, [r1, #16]
 8006222:	b96b      	cbnz	r3, 8006240 <_svfiprintf_r+0x34>
 8006224:	2140      	movs	r1, #64	; 0x40
 8006226:	f7ff ff3d 	bl	80060a4 <_malloc_r>
 800622a:	6020      	str	r0, [r4, #0]
 800622c:	6120      	str	r0, [r4, #16]
 800622e:	b928      	cbnz	r0, 800623c <_svfiprintf_r+0x30>
 8006230:	230c      	movs	r3, #12
 8006232:	f8c8 3000 	str.w	r3, [r8]
 8006236:	f04f 30ff 	mov.w	r0, #4294967295
 800623a:	e0c8      	b.n	80063ce <_svfiprintf_r+0x1c2>
 800623c:	2340      	movs	r3, #64	; 0x40
 800623e:	6163      	str	r3, [r4, #20]
 8006240:	2300      	movs	r3, #0
 8006242:	9309      	str	r3, [sp, #36]	; 0x24
 8006244:	2320      	movs	r3, #32
 8006246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800624a:	2330      	movs	r3, #48	; 0x30
 800624c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006250:	9503      	str	r5, [sp, #12]
 8006252:	f04f 0b01 	mov.w	fp, #1
 8006256:	4637      	mov	r7, r6
 8006258:	463d      	mov	r5, r7
 800625a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800625e:	b10b      	cbz	r3, 8006264 <_svfiprintf_r+0x58>
 8006260:	2b25      	cmp	r3, #37	; 0x25
 8006262:	d13e      	bne.n	80062e2 <_svfiprintf_r+0xd6>
 8006264:	ebb7 0a06 	subs.w	sl, r7, r6
 8006268:	d00b      	beq.n	8006282 <_svfiprintf_r+0x76>
 800626a:	4653      	mov	r3, sl
 800626c:	4632      	mov	r2, r6
 800626e:	4621      	mov	r1, r4
 8006270:	4640      	mov	r0, r8
 8006272:	f7ff ff71 	bl	8006158 <__ssputs_r>
 8006276:	3001      	adds	r0, #1
 8006278:	f000 80a4 	beq.w	80063c4 <_svfiprintf_r+0x1b8>
 800627c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627e:	4453      	add	r3, sl
 8006280:	9309      	str	r3, [sp, #36]	; 0x24
 8006282:	783b      	ldrb	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 809d 	beq.w	80063c4 <_svfiprintf_r+0x1b8>
 800628a:	2300      	movs	r3, #0
 800628c:	f04f 32ff 	mov.w	r2, #4294967295
 8006290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	9307      	str	r3, [sp, #28]
 8006298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800629c:	931a      	str	r3, [sp, #104]	; 0x68
 800629e:	462f      	mov	r7, r5
 80062a0:	2205      	movs	r2, #5
 80062a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80062a6:	4850      	ldr	r0, [pc, #320]	; (80063e8 <_svfiprintf_r+0x1dc>)
 80062a8:	f7f9 ffa2 	bl	80001f0 <memchr>
 80062ac:	9b04      	ldr	r3, [sp, #16]
 80062ae:	b9d0      	cbnz	r0, 80062e6 <_svfiprintf_r+0xda>
 80062b0:	06d9      	lsls	r1, r3, #27
 80062b2:	bf44      	itt	mi
 80062b4:	2220      	movmi	r2, #32
 80062b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062ba:	071a      	lsls	r2, r3, #28
 80062bc:	bf44      	itt	mi
 80062be:	222b      	movmi	r2, #43	; 0x2b
 80062c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062c4:	782a      	ldrb	r2, [r5, #0]
 80062c6:	2a2a      	cmp	r2, #42	; 0x2a
 80062c8:	d015      	beq.n	80062f6 <_svfiprintf_r+0xea>
 80062ca:	9a07      	ldr	r2, [sp, #28]
 80062cc:	462f      	mov	r7, r5
 80062ce:	2000      	movs	r0, #0
 80062d0:	250a      	movs	r5, #10
 80062d2:	4639      	mov	r1, r7
 80062d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062d8:	3b30      	subs	r3, #48	; 0x30
 80062da:	2b09      	cmp	r3, #9
 80062dc:	d94d      	bls.n	800637a <_svfiprintf_r+0x16e>
 80062de:	b1b8      	cbz	r0, 8006310 <_svfiprintf_r+0x104>
 80062e0:	e00f      	b.n	8006302 <_svfiprintf_r+0xf6>
 80062e2:	462f      	mov	r7, r5
 80062e4:	e7b8      	b.n	8006258 <_svfiprintf_r+0x4c>
 80062e6:	4a40      	ldr	r2, [pc, #256]	; (80063e8 <_svfiprintf_r+0x1dc>)
 80062e8:	1a80      	subs	r0, r0, r2
 80062ea:	fa0b f000 	lsl.w	r0, fp, r0
 80062ee:	4318      	orrs	r0, r3
 80062f0:	9004      	str	r0, [sp, #16]
 80062f2:	463d      	mov	r5, r7
 80062f4:	e7d3      	b.n	800629e <_svfiprintf_r+0x92>
 80062f6:	9a03      	ldr	r2, [sp, #12]
 80062f8:	1d11      	adds	r1, r2, #4
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	9103      	str	r1, [sp, #12]
 80062fe:	2a00      	cmp	r2, #0
 8006300:	db01      	blt.n	8006306 <_svfiprintf_r+0xfa>
 8006302:	9207      	str	r2, [sp, #28]
 8006304:	e004      	b.n	8006310 <_svfiprintf_r+0x104>
 8006306:	4252      	negs	r2, r2
 8006308:	f043 0302 	orr.w	r3, r3, #2
 800630c:	9207      	str	r2, [sp, #28]
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	783b      	ldrb	r3, [r7, #0]
 8006312:	2b2e      	cmp	r3, #46	; 0x2e
 8006314:	d10c      	bne.n	8006330 <_svfiprintf_r+0x124>
 8006316:	787b      	ldrb	r3, [r7, #1]
 8006318:	2b2a      	cmp	r3, #42	; 0x2a
 800631a:	d133      	bne.n	8006384 <_svfiprintf_r+0x178>
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	1d1a      	adds	r2, r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	9203      	str	r2, [sp, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	bfb8      	it	lt
 8006328:	f04f 33ff 	movlt.w	r3, #4294967295
 800632c:	3702      	adds	r7, #2
 800632e:	9305      	str	r3, [sp, #20]
 8006330:	4d2e      	ldr	r5, [pc, #184]	; (80063ec <_svfiprintf_r+0x1e0>)
 8006332:	7839      	ldrb	r1, [r7, #0]
 8006334:	2203      	movs	r2, #3
 8006336:	4628      	mov	r0, r5
 8006338:	f7f9 ff5a 	bl	80001f0 <memchr>
 800633c:	b138      	cbz	r0, 800634e <_svfiprintf_r+0x142>
 800633e:	2340      	movs	r3, #64	; 0x40
 8006340:	1b40      	subs	r0, r0, r5
 8006342:	fa03 f000 	lsl.w	r0, r3, r0
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	4303      	orrs	r3, r0
 800634a:	3701      	adds	r7, #1
 800634c:	9304      	str	r3, [sp, #16]
 800634e:	7839      	ldrb	r1, [r7, #0]
 8006350:	4827      	ldr	r0, [pc, #156]	; (80063f0 <_svfiprintf_r+0x1e4>)
 8006352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006356:	2206      	movs	r2, #6
 8006358:	1c7e      	adds	r6, r7, #1
 800635a:	f7f9 ff49 	bl	80001f0 <memchr>
 800635e:	2800      	cmp	r0, #0
 8006360:	d038      	beq.n	80063d4 <_svfiprintf_r+0x1c8>
 8006362:	4b24      	ldr	r3, [pc, #144]	; (80063f4 <_svfiprintf_r+0x1e8>)
 8006364:	bb13      	cbnz	r3, 80063ac <_svfiprintf_r+0x1a0>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	3307      	adds	r3, #7
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	3308      	adds	r3, #8
 8006370:	9303      	str	r3, [sp, #12]
 8006372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006374:	444b      	add	r3, r9
 8006376:	9309      	str	r3, [sp, #36]	; 0x24
 8006378:	e76d      	b.n	8006256 <_svfiprintf_r+0x4a>
 800637a:	fb05 3202 	mla	r2, r5, r2, r3
 800637e:	2001      	movs	r0, #1
 8006380:	460f      	mov	r7, r1
 8006382:	e7a6      	b.n	80062d2 <_svfiprintf_r+0xc6>
 8006384:	2300      	movs	r3, #0
 8006386:	3701      	adds	r7, #1
 8006388:	9305      	str	r3, [sp, #20]
 800638a:	4619      	mov	r1, r3
 800638c:	250a      	movs	r5, #10
 800638e:	4638      	mov	r0, r7
 8006390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006394:	3a30      	subs	r2, #48	; 0x30
 8006396:	2a09      	cmp	r2, #9
 8006398:	d903      	bls.n	80063a2 <_svfiprintf_r+0x196>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0c8      	beq.n	8006330 <_svfiprintf_r+0x124>
 800639e:	9105      	str	r1, [sp, #20]
 80063a0:	e7c6      	b.n	8006330 <_svfiprintf_r+0x124>
 80063a2:	fb05 2101 	mla	r1, r5, r1, r2
 80063a6:	2301      	movs	r3, #1
 80063a8:	4607      	mov	r7, r0
 80063aa:	e7f0      	b.n	800638e <_svfiprintf_r+0x182>
 80063ac:	ab03      	add	r3, sp, #12
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	4622      	mov	r2, r4
 80063b2:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <_svfiprintf_r+0x1ec>)
 80063b4:	a904      	add	r1, sp, #16
 80063b6:	4640      	mov	r0, r8
 80063b8:	f7fe f80e 	bl	80043d8 <_printf_float>
 80063bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80063c0:	4681      	mov	r9, r0
 80063c2:	d1d6      	bne.n	8006372 <_svfiprintf_r+0x166>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	065b      	lsls	r3, r3, #25
 80063c8:	f53f af35 	bmi.w	8006236 <_svfiprintf_r+0x2a>
 80063cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ce:	b01d      	add	sp, #116	; 0x74
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d4:	ab03      	add	r3, sp, #12
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	4622      	mov	r2, r4
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <_svfiprintf_r+0x1ec>)
 80063dc:	a904      	add	r1, sp, #16
 80063de:	4640      	mov	r0, r8
 80063e0:	f7fe fab0 	bl	8004944 <_printf_i>
 80063e4:	e7ea      	b.n	80063bc <_svfiprintf_r+0x1b0>
 80063e6:	bf00      	nop
 80063e8:	08007144 	.word	0x08007144
 80063ec:	0800714a 	.word	0x0800714a
 80063f0:	0800714e 	.word	0x0800714e
 80063f4:	080043d9 	.word	0x080043d9
 80063f8:	08006159 	.word	0x08006159

080063fc <__sfputc_r>:
 80063fc:	6893      	ldr	r3, [r2, #8]
 80063fe:	3b01      	subs	r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	b410      	push	{r4}
 8006404:	6093      	str	r3, [r2, #8]
 8006406:	da08      	bge.n	800641a <__sfputc_r+0x1e>
 8006408:	6994      	ldr	r4, [r2, #24]
 800640a:	42a3      	cmp	r3, r4
 800640c:	db01      	blt.n	8006412 <__sfputc_r+0x16>
 800640e:	290a      	cmp	r1, #10
 8006410:	d103      	bne.n	800641a <__sfputc_r+0x1e>
 8006412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006416:	f000 b985 	b.w	8006724 <__swbuf_r>
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	1c58      	adds	r0, r3, #1
 800641e:	6010      	str	r0, [r2, #0]
 8006420:	7019      	strb	r1, [r3, #0]
 8006422:	4608      	mov	r0, r1
 8006424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006428:	4770      	bx	lr

0800642a <__sfputs_r>:
 800642a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642c:	4606      	mov	r6, r0
 800642e:	460f      	mov	r7, r1
 8006430:	4614      	mov	r4, r2
 8006432:	18d5      	adds	r5, r2, r3
 8006434:	42ac      	cmp	r4, r5
 8006436:	d101      	bne.n	800643c <__sfputs_r+0x12>
 8006438:	2000      	movs	r0, #0
 800643a:	e007      	b.n	800644c <__sfputs_r+0x22>
 800643c:	463a      	mov	r2, r7
 800643e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006442:	4630      	mov	r0, r6
 8006444:	f7ff ffda 	bl	80063fc <__sfputc_r>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d1f3      	bne.n	8006434 <__sfputs_r+0xa>
 800644c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006450 <_vfiprintf_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	460c      	mov	r4, r1
 8006456:	b09d      	sub	sp, #116	; 0x74
 8006458:	4617      	mov	r7, r2
 800645a:	461d      	mov	r5, r3
 800645c:	4606      	mov	r6, r0
 800645e:	b118      	cbz	r0, 8006468 <_vfiprintf_r+0x18>
 8006460:	6983      	ldr	r3, [r0, #24]
 8006462:	b90b      	cbnz	r3, 8006468 <_vfiprintf_r+0x18>
 8006464:	f7ff fa3c 	bl	80058e0 <__sinit>
 8006468:	4b7c      	ldr	r3, [pc, #496]	; (800665c <_vfiprintf_r+0x20c>)
 800646a:	429c      	cmp	r4, r3
 800646c:	d158      	bne.n	8006520 <_vfiprintf_r+0xd0>
 800646e:	6874      	ldr	r4, [r6, #4]
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	0718      	lsls	r0, r3, #28
 8006474:	d55e      	bpl.n	8006534 <_vfiprintf_r+0xe4>
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d05b      	beq.n	8006534 <_vfiprintf_r+0xe4>
 800647c:	2300      	movs	r3, #0
 800647e:	9309      	str	r3, [sp, #36]	; 0x24
 8006480:	2320      	movs	r3, #32
 8006482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006486:	2330      	movs	r3, #48	; 0x30
 8006488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800648c:	9503      	str	r5, [sp, #12]
 800648e:	f04f 0b01 	mov.w	fp, #1
 8006492:	46b8      	mov	r8, r7
 8006494:	4645      	mov	r5, r8
 8006496:	f815 3b01 	ldrb.w	r3, [r5], #1
 800649a:	b10b      	cbz	r3, 80064a0 <_vfiprintf_r+0x50>
 800649c:	2b25      	cmp	r3, #37	; 0x25
 800649e:	d154      	bne.n	800654a <_vfiprintf_r+0xfa>
 80064a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80064a4:	d00b      	beq.n	80064be <_vfiprintf_r+0x6e>
 80064a6:	4653      	mov	r3, sl
 80064a8:	463a      	mov	r2, r7
 80064aa:	4621      	mov	r1, r4
 80064ac:	4630      	mov	r0, r6
 80064ae:	f7ff ffbc 	bl	800642a <__sfputs_r>
 80064b2:	3001      	adds	r0, #1
 80064b4:	f000 80c2 	beq.w	800663c <_vfiprintf_r+0x1ec>
 80064b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ba:	4453      	add	r3, sl
 80064bc:	9309      	str	r3, [sp, #36]	; 0x24
 80064be:	f898 3000 	ldrb.w	r3, [r8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 80ba 	beq.w	800663c <_vfiprintf_r+0x1ec>
 80064c8:	2300      	movs	r3, #0
 80064ca:	f04f 32ff 	mov.w	r2, #4294967295
 80064ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	9307      	str	r3, [sp, #28]
 80064d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064da:	931a      	str	r3, [sp, #104]	; 0x68
 80064dc:	46a8      	mov	r8, r5
 80064de:	2205      	movs	r2, #5
 80064e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80064e4:	485e      	ldr	r0, [pc, #376]	; (8006660 <_vfiprintf_r+0x210>)
 80064e6:	f7f9 fe83 	bl	80001f0 <memchr>
 80064ea:	9b04      	ldr	r3, [sp, #16]
 80064ec:	bb78      	cbnz	r0, 800654e <_vfiprintf_r+0xfe>
 80064ee:	06d9      	lsls	r1, r3, #27
 80064f0:	bf44      	itt	mi
 80064f2:	2220      	movmi	r2, #32
 80064f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064f8:	071a      	lsls	r2, r3, #28
 80064fa:	bf44      	itt	mi
 80064fc:	222b      	movmi	r2, #43	; 0x2b
 80064fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006502:	782a      	ldrb	r2, [r5, #0]
 8006504:	2a2a      	cmp	r2, #42	; 0x2a
 8006506:	d02a      	beq.n	800655e <_vfiprintf_r+0x10e>
 8006508:	9a07      	ldr	r2, [sp, #28]
 800650a:	46a8      	mov	r8, r5
 800650c:	2000      	movs	r0, #0
 800650e:	250a      	movs	r5, #10
 8006510:	4641      	mov	r1, r8
 8006512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006516:	3b30      	subs	r3, #48	; 0x30
 8006518:	2b09      	cmp	r3, #9
 800651a:	d969      	bls.n	80065f0 <_vfiprintf_r+0x1a0>
 800651c:	b360      	cbz	r0, 8006578 <_vfiprintf_r+0x128>
 800651e:	e024      	b.n	800656a <_vfiprintf_r+0x11a>
 8006520:	4b50      	ldr	r3, [pc, #320]	; (8006664 <_vfiprintf_r+0x214>)
 8006522:	429c      	cmp	r4, r3
 8006524:	d101      	bne.n	800652a <_vfiprintf_r+0xda>
 8006526:	68b4      	ldr	r4, [r6, #8]
 8006528:	e7a2      	b.n	8006470 <_vfiprintf_r+0x20>
 800652a:	4b4f      	ldr	r3, [pc, #316]	; (8006668 <_vfiprintf_r+0x218>)
 800652c:	429c      	cmp	r4, r3
 800652e:	bf08      	it	eq
 8006530:	68f4      	ldreq	r4, [r6, #12]
 8006532:	e79d      	b.n	8006470 <_vfiprintf_r+0x20>
 8006534:	4621      	mov	r1, r4
 8006536:	4630      	mov	r0, r6
 8006538:	f000 f958 	bl	80067ec <__swsetup_r>
 800653c:	2800      	cmp	r0, #0
 800653e:	d09d      	beq.n	800647c <_vfiprintf_r+0x2c>
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	b01d      	add	sp, #116	; 0x74
 8006546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654a:	46a8      	mov	r8, r5
 800654c:	e7a2      	b.n	8006494 <_vfiprintf_r+0x44>
 800654e:	4a44      	ldr	r2, [pc, #272]	; (8006660 <_vfiprintf_r+0x210>)
 8006550:	1a80      	subs	r0, r0, r2
 8006552:	fa0b f000 	lsl.w	r0, fp, r0
 8006556:	4318      	orrs	r0, r3
 8006558:	9004      	str	r0, [sp, #16]
 800655a:	4645      	mov	r5, r8
 800655c:	e7be      	b.n	80064dc <_vfiprintf_r+0x8c>
 800655e:	9a03      	ldr	r2, [sp, #12]
 8006560:	1d11      	adds	r1, r2, #4
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	9103      	str	r1, [sp, #12]
 8006566:	2a00      	cmp	r2, #0
 8006568:	db01      	blt.n	800656e <_vfiprintf_r+0x11e>
 800656a:	9207      	str	r2, [sp, #28]
 800656c:	e004      	b.n	8006578 <_vfiprintf_r+0x128>
 800656e:	4252      	negs	r2, r2
 8006570:	f043 0302 	orr.w	r3, r3, #2
 8006574:	9207      	str	r2, [sp, #28]
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	f898 3000 	ldrb.w	r3, [r8]
 800657c:	2b2e      	cmp	r3, #46	; 0x2e
 800657e:	d10e      	bne.n	800659e <_vfiprintf_r+0x14e>
 8006580:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006584:	2b2a      	cmp	r3, #42	; 0x2a
 8006586:	d138      	bne.n	80065fa <_vfiprintf_r+0x1aa>
 8006588:	9b03      	ldr	r3, [sp, #12]
 800658a:	1d1a      	adds	r2, r3, #4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	9203      	str	r2, [sp, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	bfb8      	it	lt
 8006594:	f04f 33ff 	movlt.w	r3, #4294967295
 8006598:	f108 0802 	add.w	r8, r8, #2
 800659c:	9305      	str	r3, [sp, #20]
 800659e:	4d33      	ldr	r5, [pc, #204]	; (800666c <_vfiprintf_r+0x21c>)
 80065a0:	f898 1000 	ldrb.w	r1, [r8]
 80065a4:	2203      	movs	r2, #3
 80065a6:	4628      	mov	r0, r5
 80065a8:	f7f9 fe22 	bl	80001f0 <memchr>
 80065ac:	b140      	cbz	r0, 80065c0 <_vfiprintf_r+0x170>
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	1b40      	subs	r0, r0, r5
 80065b2:	fa03 f000 	lsl.w	r0, r3, r0
 80065b6:	9b04      	ldr	r3, [sp, #16]
 80065b8:	4303      	orrs	r3, r0
 80065ba:	f108 0801 	add.w	r8, r8, #1
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	f898 1000 	ldrb.w	r1, [r8]
 80065c4:	482a      	ldr	r0, [pc, #168]	; (8006670 <_vfiprintf_r+0x220>)
 80065c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ca:	2206      	movs	r2, #6
 80065cc:	f108 0701 	add.w	r7, r8, #1
 80065d0:	f7f9 fe0e 	bl	80001f0 <memchr>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d037      	beq.n	8006648 <_vfiprintf_r+0x1f8>
 80065d8:	4b26      	ldr	r3, [pc, #152]	; (8006674 <_vfiprintf_r+0x224>)
 80065da:	bb1b      	cbnz	r3, 8006624 <_vfiprintf_r+0x1d4>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	3307      	adds	r3, #7
 80065e0:	f023 0307 	bic.w	r3, r3, #7
 80065e4:	3308      	adds	r3, #8
 80065e6:	9303      	str	r3, [sp, #12]
 80065e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ea:	444b      	add	r3, r9
 80065ec:	9309      	str	r3, [sp, #36]	; 0x24
 80065ee:	e750      	b.n	8006492 <_vfiprintf_r+0x42>
 80065f0:	fb05 3202 	mla	r2, r5, r2, r3
 80065f4:	2001      	movs	r0, #1
 80065f6:	4688      	mov	r8, r1
 80065f8:	e78a      	b.n	8006510 <_vfiprintf_r+0xc0>
 80065fa:	2300      	movs	r3, #0
 80065fc:	f108 0801 	add.w	r8, r8, #1
 8006600:	9305      	str	r3, [sp, #20]
 8006602:	4619      	mov	r1, r3
 8006604:	250a      	movs	r5, #10
 8006606:	4640      	mov	r0, r8
 8006608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800660c:	3a30      	subs	r2, #48	; 0x30
 800660e:	2a09      	cmp	r2, #9
 8006610:	d903      	bls.n	800661a <_vfiprintf_r+0x1ca>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0c3      	beq.n	800659e <_vfiprintf_r+0x14e>
 8006616:	9105      	str	r1, [sp, #20]
 8006618:	e7c1      	b.n	800659e <_vfiprintf_r+0x14e>
 800661a:	fb05 2101 	mla	r1, r5, r1, r2
 800661e:	2301      	movs	r3, #1
 8006620:	4680      	mov	r8, r0
 8006622:	e7f0      	b.n	8006606 <_vfiprintf_r+0x1b6>
 8006624:	ab03      	add	r3, sp, #12
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	4622      	mov	r2, r4
 800662a:	4b13      	ldr	r3, [pc, #76]	; (8006678 <_vfiprintf_r+0x228>)
 800662c:	a904      	add	r1, sp, #16
 800662e:	4630      	mov	r0, r6
 8006630:	f7fd fed2 	bl	80043d8 <_printf_float>
 8006634:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006638:	4681      	mov	r9, r0
 800663a:	d1d5      	bne.n	80065e8 <_vfiprintf_r+0x198>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	065b      	lsls	r3, r3, #25
 8006640:	f53f af7e 	bmi.w	8006540 <_vfiprintf_r+0xf0>
 8006644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006646:	e77d      	b.n	8006544 <_vfiprintf_r+0xf4>
 8006648:	ab03      	add	r3, sp, #12
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	4622      	mov	r2, r4
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <_vfiprintf_r+0x228>)
 8006650:	a904      	add	r1, sp, #16
 8006652:	4630      	mov	r0, r6
 8006654:	f7fe f976 	bl	8004944 <_printf_i>
 8006658:	e7ec      	b.n	8006634 <_vfiprintf_r+0x1e4>
 800665a:	bf00      	nop
 800665c:	08007004 	.word	0x08007004
 8006660:	08007144 	.word	0x08007144
 8006664:	08007024 	.word	0x08007024
 8006668:	08006fe4 	.word	0x08006fe4
 800666c:	0800714a 	.word	0x0800714a
 8006670:	0800714e 	.word	0x0800714e
 8006674:	080043d9 	.word	0x080043d9
 8006678:	0800642b 	.word	0x0800642b

0800667c <_sbrk_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4c06      	ldr	r4, [pc, #24]	; (8006698 <_sbrk_r+0x1c>)
 8006680:	2300      	movs	r3, #0
 8006682:	4605      	mov	r5, r0
 8006684:	4608      	mov	r0, r1
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	f7fb f81a 	bl	80016c0 <_sbrk>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d102      	bne.n	8006696 <_sbrk_r+0x1a>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	b103      	cbz	r3, 8006696 <_sbrk_r+0x1a>
 8006694:	602b      	str	r3, [r5, #0]
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	20000324 	.word	0x20000324

0800669c <__sread>:
 800669c:	b510      	push	{r4, lr}
 800669e:	460c      	mov	r4, r1
 80066a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a4:	f000 fa9a 	bl	8006bdc <_read_r>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	bfab      	itete	ge
 80066ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066ae:	89a3      	ldrhlt	r3, [r4, #12]
 80066b0:	181b      	addge	r3, r3, r0
 80066b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066b6:	bfac      	ite	ge
 80066b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066ba:	81a3      	strhlt	r3, [r4, #12]
 80066bc:	bd10      	pop	{r4, pc}

080066be <__swrite>:
 80066be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c2:	461f      	mov	r7, r3
 80066c4:	898b      	ldrh	r3, [r1, #12]
 80066c6:	05db      	lsls	r3, r3, #23
 80066c8:	4605      	mov	r5, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	4616      	mov	r6, r2
 80066ce:	d505      	bpl.n	80066dc <__swrite+0x1e>
 80066d0:	2302      	movs	r3, #2
 80066d2:	2200      	movs	r2, #0
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	f000 f9b6 	bl	8006a48 <_lseek_r>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	4632      	mov	r2, r6
 80066ea:	463b      	mov	r3, r7
 80066ec:	4628      	mov	r0, r5
 80066ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066f2:	f000 b869 	b.w	80067c8 <_write_r>

080066f6 <__sseek>:
 80066f6:	b510      	push	{r4, lr}
 80066f8:	460c      	mov	r4, r1
 80066fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066fe:	f000 f9a3 	bl	8006a48 <_lseek_r>
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	bf15      	itete	ne
 8006708:	6560      	strne	r0, [r4, #84]	; 0x54
 800670a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800670e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006712:	81a3      	strheq	r3, [r4, #12]
 8006714:	bf18      	it	ne
 8006716:	81a3      	strhne	r3, [r4, #12]
 8006718:	bd10      	pop	{r4, pc}

0800671a <__sclose>:
 800671a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671e:	f000 b8d3 	b.w	80068c8 <_close_r>
	...

08006724 <__swbuf_r>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	460e      	mov	r6, r1
 8006728:	4614      	mov	r4, r2
 800672a:	4605      	mov	r5, r0
 800672c:	b118      	cbz	r0, 8006736 <__swbuf_r+0x12>
 800672e:	6983      	ldr	r3, [r0, #24]
 8006730:	b90b      	cbnz	r3, 8006736 <__swbuf_r+0x12>
 8006732:	f7ff f8d5 	bl	80058e0 <__sinit>
 8006736:	4b21      	ldr	r3, [pc, #132]	; (80067bc <__swbuf_r+0x98>)
 8006738:	429c      	cmp	r4, r3
 800673a:	d12a      	bne.n	8006792 <__swbuf_r+0x6e>
 800673c:	686c      	ldr	r4, [r5, #4]
 800673e:	69a3      	ldr	r3, [r4, #24]
 8006740:	60a3      	str	r3, [r4, #8]
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	071a      	lsls	r2, r3, #28
 8006746:	d52e      	bpl.n	80067a6 <__swbuf_r+0x82>
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	b363      	cbz	r3, 80067a6 <__swbuf_r+0x82>
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	6820      	ldr	r0, [r4, #0]
 8006750:	1ac0      	subs	r0, r0, r3
 8006752:	6963      	ldr	r3, [r4, #20]
 8006754:	b2f6      	uxtb	r6, r6
 8006756:	4283      	cmp	r3, r0
 8006758:	4637      	mov	r7, r6
 800675a:	dc04      	bgt.n	8006766 <__swbuf_r+0x42>
 800675c:	4621      	mov	r1, r4
 800675e:	4628      	mov	r0, r5
 8006760:	f000 f948 	bl	80069f4 <_fflush_r>
 8006764:	bb28      	cbnz	r0, 80067b2 <__swbuf_r+0x8e>
 8006766:	68a3      	ldr	r3, [r4, #8]
 8006768:	3b01      	subs	r3, #1
 800676a:	60a3      	str	r3, [r4, #8]
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	6022      	str	r2, [r4, #0]
 8006772:	701e      	strb	r6, [r3, #0]
 8006774:	6963      	ldr	r3, [r4, #20]
 8006776:	3001      	adds	r0, #1
 8006778:	4283      	cmp	r3, r0
 800677a:	d004      	beq.n	8006786 <__swbuf_r+0x62>
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	07db      	lsls	r3, r3, #31
 8006780:	d519      	bpl.n	80067b6 <__swbuf_r+0x92>
 8006782:	2e0a      	cmp	r6, #10
 8006784:	d117      	bne.n	80067b6 <__swbuf_r+0x92>
 8006786:	4621      	mov	r1, r4
 8006788:	4628      	mov	r0, r5
 800678a:	f000 f933 	bl	80069f4 <_fflush_r>
 800678e:	b190      	cbz	r0, 80067b6 <__swbuf_r+0x92>
 8006790:	e00f      	b.n	80067b2 <__swbuf_r+0x8e>
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <__swbuf_r+0x9c>)
 8006794:	429c      	cmp	r4, r3
 8006796:	d101      	bne.n	800679c <__swbuf_r+0x78>
 8006798:	68ac      	ldr	r4, [r5, #8]
 800679a:	e7d0      	b.n	800673e <__swbuf_r+0x1a>
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <__swbuf_r+0xa0>)
 800679e:	429c      	cmp	r4, r3
 80067a0:	bf08      	it	eq
 80067a2:	68ec      	ldreq	r4, [r5, #12]
 80067a4:	e7cb      	b.n	800673e <__swbuf_r+0x1a>
 80067a6:	4621      	mov	r1, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 f81f 	bl	80067ec <__swsetup_r>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d0cc      	beq.n	800674c <__swbuf_r+0x28>
 80067b2:	f04f 37ff 	mov.w	r7, #4294967295
 80067b6:	4638      	mov	r0, r7
 80067b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ba:	bf00      	nop
 80067bc:	08007004 	.word	0x08007004
 80067c0:	08007024 	.word	0x08007024
 80067c4:	08006fe4 	.word	0x08006fe4

080067c8 <_write_r>:
 80067c8:	b538      	push	{r3, r4, r5, lr}
 80067ca:	4c07      	ldr	r4, [pc, #28]	; (80067e8 <_write_r+0x20>)
 80067cc:	4605      	mov	r5, r0
 80067ce:	4608      	mov	r0, r1
 80067d0:	4611      	mov	r1, r2
 80067d2:	2200      	movs	r2, #0
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	f7fa ff21 	bl	800161e <_write>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d102      	bne.n	80067e6 <_write_r+0x1e>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	b103      	cbz	r3, 80067e6 <_write_r+0x1e>
 80067e4:	602b      	str	r3, [r5, #0]
 80067e6:	bd38      	pop	{r3, r4, r5, pc}
 80067e8:	20000324 	.word	0x20000324

080067ec <__swsetup_r>:
 80067ec:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <__swsetup_r+0xcc>)
 80067ee:	b570      	push	{r4, r5, r6, lr}
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	4606      	mov	r6, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	b125      	cbz	r5, 8006802 <__swsetup_r+0x16>
 80067f8:	69ab      	ldr	r3, [r5, #24]
 80067fa:	b913      	cbnz	r3, 8006802 <__swsetup_r+0x16>
 80067fc:	4628      	mov	r0, r5
 80067fe:	f7ff f86f 	bl	80058e0 <__sinit>
 8006802:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <__swsetup_r+0xd0>)
 8006804:	429c      	cmp	r4, r3
 8006806:	d10f      	bne.n	8006828 <__swsetup_r+0x3c>
 8006808:	686c      	ldr	r4, [r5, #4]
 800680a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680e:	b29a      	uxth	r2, r3
 8006810:	0715      	lsls	r5, r2, #28
 8006812:	d42c      	bmi.n	800686e <__swsetup_r+0x82>
 8006814:	06d0      	lsls	r0, r2, #27
 8006816:	d411      	bmi.n	800683c <__swsetup_r+0x50>
 8006818:	2209      	movs	r2, #9
 800681a:	6032      	str	r2, [r6, #0]
 800681c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	f04f 30ff 	mov.w	r0, #4294967295
 8006826:	e03e      	b.n	80068a6 <__swsetup_r+0xba>
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <__swsetup_r+0xd4>)
 800682a:	429c      	cmp	r4, r3
 800682c:	d101      	bne.n	8006832 <__swsetup_r+0x46>
 800682e:	68ac      	ldr	r4, [r5, #8]
 8006830:	e7eb      	b.n	800680a <__swsetup_r+0x1e>
 8006832:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <__swsetup_r+0xd8>)
 8006834:	429c      	cmp	r4, r3
 8006836:	bf08      	it	eq
 8006838:	68ec      	ldreq	r4, [r5, #12]
 800683a:	e7e6      	b.n	800680a <__swsetup_r+0x1e>
 800683c:	0751      	lsls	r1, r2, #29
 800683e:	d512      	bpl.n	8006866 <__swsetup_r+0x7a>
 8006840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006842:	b141      	cbz	r1, 8006856 <__swsetup_r+0x6a>
 8006844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006848:	4299      	cmp	r1, r3
 800684a:	d002      	beq.n	8006852 <__swsetup_r+0x66>
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff fbdb 	bl	8006008 <_free_r>
 8006852:	2300      	movs	r3, #0
 8006854:	6363      	str	r3, [r4, #52]	; 0x34
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	2300      	movs	r3, #0
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f043 0308 	orr.w	r3, r3, #8
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	b94b      	cbnz	r3, 8006886 <__swsetup_r+0x9a>
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687c:	d003      	beq.n	8006886 <__swsetup_r+0x9a>
 800687e:	4621      	mov	r1, r4
 8006880:	4630      	mov	r0, r6
 8006882:	f000 f917 	bl	8006ab4 <__smakebuf_r>
 8006886:	89a2      	ldrh	r2, [r4, #12]
 8006888:	f012 0301 	ands.w	r3, r2, #1
 800688c:	d00c      	beq.n	80068a8 <__swsetup_r+0xbc>
 800688e:	2300      	movs	r3, #0
 8006890:	60a3      	str	r3, [r4, #8]
 8006892:	6963      	ldr	r3, [r4, #20]
 8006894:	425b      	negs	r3, r3
 8006896:	61a3      	str	r3, [r4, #24]
 8006898:	6923      	ldr	r3, [r4, #16]
 800689a:	b953      	cbnz	r3, 80068b2 <__swsetup_r+0xc6>
 800689c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80068a4:	d1ba      	bne.n	800681c <__swsetup_r+0x30>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	0792      	lsls	r2, r2, #30
 80068aa:	bf58      	it	pl
 80068ac:	6963      	ldrpl	r3, [r4, #20]
 80068ae:	60a3      	str	r3, [r4, #8]
 80068b0:	e7f2      	b.n	8006898 <__swsetup_r+0xac>
 80068b2:	2000      	movs	r0, #0
 80068b4:	e7f7      	b.n	80068a6 <__swsetup_r+0xba>
 80068b6:	bf00      	nop
 80068b8:	20000010 	.word	0x20000010
 80068bc:	08007004 	.word	0x08007004
 80068c0:	08007024 	.word	0x08007024
 80068c4:	08006fe4 	.word	0x08006fe4

080068c8 <_close_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4c06      	ldr	r4, [pc, #24]	; (80068e4 <_close_r+0x1c>)
 80068cc:	2300      	movs	r3, #0
 80068ce:	4605      	mov	r5, r0
 80068d0:	4608      	mov	r0, r1
 80068d2:	6023      	str	r3, [r4, #0]
 80068d4:	f7fa febf 	bl	8001656 <_close>
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d102      	bne.n	80068e2 <_close_r+0x1a>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	b103      	cbz	r3, 80068e2 <_close_r+0x1a>
 80068e0:	602b      	str	r3, [r5, #0]
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
 80068e4:	20000324 	.word	0x20000324

080068e8 <__sflush_r>:
 80068e8:	898a      	ldrh	r2, [r1, #12]
 80068ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ee:	4605      	mov	r5, r0
 80068f0:	0710      	lsls	r0, r2, #28
 80068f2:	460c      	mov	r4, r1
 80068f4:	d458      	bmi.n	80069a8 <__sflush_r+0xc0>
 80068f6:	684b      	ldr	r3, [r1, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc05      	bgt.n	8006908 <__sflush_r+0x20>
 80068fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	dc02      	bgt.n	8006908 <__sflush_r+0x20>
 8006902:	2000      	movs	r0, #0
 8006904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800690a:	2e00      	cmp	r6, #0
 800690c:	d0f9      	beq.n	8006902 <__sflush_r+0x1a>
 800690e:	2300      	movs	r3, #0
 8006910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006914:	682f      	ldr	r7, [r5, #0]
 8006916:	6a21      	ldr	r1, [r4, #32]
 8006918:	602b      	str	r3, [r5, #0]
 800691a:	d032      	beq.n	8006982 <__sflush_r+0x9a>
 800691c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	075a      	lsls	r2, r3, #29
 8006922:	d505      	bpl.n	8006930 <__sflush_r+0x48>
 8006924:	6863      	ldr	r3, [r4, #4]
 8006926:	1ac0      	subs	r0, r0, r3
 8006928:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800692a:	b10b      	cbz	r3, 8006930 <__sflush_r+0x48>
 800692c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800692e:	1ac0      	subs	r0, r0, r3
 8006930:	2300      	movs	r3, #0
 8006932:	4602      	mov	r2, r0
 8006934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006936:	6a21      	ldr	r1, [r4, #32]
 8006938:	4628      	mov	r0, r5
 800693a:	47b0      	blx	r6
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	d106      	bne.n	8006950 <__sflush_r+0x68>
 8006942:	6829      	ldr	r1, [r5, #0]
 8006944:	291d      	cmp	r1, #29
 8006946:	d848      	bhi.n	80069da <__sflush_r+0xf2>
 8006948:	4a29      	ldr	r2, [pc, #164]	; (80069f0 <__sflush_r+0x108>)
 800694a:	40ca      	lsrs	r2, r1
 800694c:	07d6      	lsls	r6, r2, #31
 800694e:	d544      	bpl.n	80069da <__sflush_r+0xf2>
 8006950:	2200      	movs	r2, #0
 8006952:	6062      	str	r2, [r4, #4]
 8006954:	04d9      	lsls	r1, r3, #19
 8006956:	6922      	ldr	r2, [r4, #16]
 8006958:	6022      	str	r2, [r4, #0]
 800695a:	d504      	bpl.n	8006966 <__sflush_r+0x7e>
 800695c:	1c42      	adds	r2, r0, #1
 800695e:	d101      	bne.n	8006964 <__sflush_r+0x7c>
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	b903      	cbnz	r3, 8006966 <__sflush_r+0x7e>
 8006964:	6560      	str	r0, [r4, #84]	; 0x54
 8006966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006968:	602f      	str	r7, [r5, #0]
 800696a:	2900      	cmp	r1, #0
 800696c:	d0c9      	beq.n	8006902 <__sflush_r+0x1a>
 800696e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006972:	4299      	cmp	r1, r3
 8006974:	d002      	beq.n	800697c <__sflush_r+0x94>
 8006976:	4628      	mov	r0, r5
 8006978:	f7ff fb46 	bl	8006008 <_free_r>
 800697c:	2000      	movs	r0, #0
 800697e:	6360      	str	r0, [r4, #52]	; 0x34
 8006980:	e7c0      	b.n	8006904 <__sflush_r+0x1c>
 8006982:	2301      	movs	r3, #1
 8006984:	4628      	mov	r0, r5
 8006986:	47b0      	blx	r6
 8006988:	1c41      	adds	r1, r0, #1
 800698a:	d1c8      	bne.n	800691e <__sflush_r+0x36>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0c5      	beq.n	800691e <__sflush_r+0x36>
 8006992:	2b1d      	cmp	r3, #29
 8006994:	d001      	beq.n	800699a <__sflush_r+0xb2>
 8006996:	2b16      	cmp	r3, #22
 8006998:	d101      	bne.n	800699e <__sflush_r+0xb6>
 800699a:	602f      	str	r7, [r5, #0]
 800699c:	e7b1      	b.n	8006902 <__sflush_r+0x1a>
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	e7ad      	b.n	8006904 <__sflush_r+0x1c>
 80069a8:	690f      	ldr	r7, [r1, #16]
 80069aa:	2f00      	cmp	r7, #0
 80069ac:	d0a9      	beq.n	8006902 <__sflush_r+0x1a>
 80069ae:	0793      	lsls	r3, r2, #30
 80069b0:	680e      	ldr	r6, [r1, #0]
 80069b2:	bf08      	it	eq
 80069b4:	694b      	ldreq	r3, [r1, #20]
 80069b6:	600f      	str	r7, [r1, #0]
 80069b8:	bf18      	it	ne
 80069ba:	2300      	movne	r3, #0
 80069bc:	eba6 0807 	sub.w	r8, r6, r7
 80069c0:	608b      	str	r3, [r1, #8]
 80069c2:	f1b8 0f00 	cmp.w	r8, #0
 80069c6:	dd9c      	ble.n	8006902 <__sflush_r+0x1a>
 80069c8:	4643      	mov	r3, r8
 80069ca:	463a      	mov	r2, r7
 80069cc:	6a21      	ldr	r1, [r4, #32]
 80069ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b0      	blx	r6
 80069d4:	2800      	cmp	r0, #0
 80069d6:	dc06      	bgt.n	80069e6 <__sflush_r+0xfe>
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	e78e      	b.n	8006904 <__sflush_r+0x1c>
 80069e6:	4407      	add	r7, r0
 80069e8:	eba8 0800 	sub.w	r8, r8, r0
 80069ec:	e7e9      	b.n	80069c2 <__sflush_r+0xda>
 80069ee:	bf00      	nop
 80069f0:	20400001 	.word	0x20400001

080069f4 <_fflush_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	690b      	ldr	r3, [r1, #16]
 80069f8:	4605      	mov	r5, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	b1db      	cbz	r3, 8006a36 <_fflush_r+0x42>
 80069fe:	b118      	cbz	r0, 8006a08 <_fflush_r+0x14>
 8006a00:	6983      	ldr	r3, [r0, #24]
 8006a02:	b90b      	cbnz	r3, 8006a08 <_fflush_r+0x14>
 8006a04:	f7fe ff6c 	bl	80058e0 <__sinit>
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <_fflush_r+0x48>)
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	d109      	bne.n	8006a22 <_fflush_r+0x2e>
 8006a0e:	686c      	ldr	r4, [r5, #4]
 8006a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a14:	b17b      	cbz	r3, 8006a36 <_fflush_r+0x42>
 8006a16:	4621      	mov	r1, r4
 8006a18:	4628      	mov	r0, r5
 8006a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a1e:	f7ff bf63 	b.w	80068e8 <__sflush_r>
 8006a22:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <_fflush_r+0x4c>)
 8006a24:	429c      	cmp	r4, r3
 8006a26:	d101      	bne.n	8006a2c <_fflush_r+0x38>
 8006a28:	68ac      	ldr	r4, [r5, #8]
 8006a2a:	e7f1      	b.n	8006a10 <_fflush_r+0x1c>
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <_fflush_r+0x50>)
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	bf08      	it	eq
 8006a32:	68ec      	ldreq	r4, [r5, #12]
 8006a34:	e7ec      	b.n	8006a10 <_fflush_r+0x1c>
 8006a36:	2000      	movs	r0, #0
 8006a38:	bd38      	pop	{r3, r4, r5, pc}
 8006a3a:	bf00      	nop
 8006a3c:	08007004 	.word	0x08007004
 8006a40:	08007024 	.word	0x08007024
 8006a44:	08006fe4 	.word	0x08006fe4

08006a48 <_lseek_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4c07      	ldr	r4, [pc, #28]	; (8006a68 <_lseek_r+0x20>)
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	4608      	mov	r0, r1
 8006a50:	4611      	mov	r1, r2
 8006a52:	2200      	movs	r2, #0
 8006a54:	6022      	str	r2, [r4, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f7fa fe24 	bl	80016a4 <_lseek>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_lseek_r+0x1e>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_lseek_r+0x1e>
 8006a64:	602b      	str	r3, [r5, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	20000324 	.word	0x20000324

08006a6c <__swhatbuf_r>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	460e      	mov	r6, r1
 8006a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a74:	2900      	cmp	r1, #0
 8006a76:	b096      	sub	sp, #88	; 0x58
 8006a78:	4614      	mov	r4, r2
 8006a7a:	461d      	mov	r5, r3
 8006a7c:	da07      	bge.n	8006a8e <__swhatbuf_r+0x22>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	89b3      	ldrh	r3, [r6, #12]
 8006a84:	061a      	lsls	r2, r3, #24
 8006a86:	d410      	bmi.n	8006aaa <__swhatbuf_r+0x3e>
 8006a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a8c:	e00e      	b.n	8006aac <__swhatbuf_r+0x40>
 8006a8e:	466a      	mov	r2, sp
 8006a90:	f000 f8c4 	bl	8006c1c <_fstat_r>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	dbf2      	blt.n	8006a7e <__swhatbuf_r+0x12>
 8006a98:	9a01      	ldr	r2, [sp, #4]
 8006a9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006aa2:	425a      	negs	r2, r3
 8006aa4:	415a      	adcs	r2, r3
 8006aa6:	602a      	str	r2, [r5, #0]
 8006aa8:	e7ee      	b.n	8006a88 <__swhatbuf_r+0x1c>
 8006aaa:	2340      	movs	r3, #64	; 0x40
 8006aac:	2000      	movs	r0, #0
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	b016      	add	sp, #88	; 0x58
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}

08006ab4 <__smakebuf_r>:
 8006ab4:	898b      	ldrh	r3, [r1, #12]
 8006ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ab8:	079d      	lsls	r5, r3, #30
 8006aba:	4606      	mov	r6, r0
 8006abc:	460c      	mov	r4, r1
 8006abe:	d507      	bpl.n	8006ad0 <__smakebuf_r+0x1c>
 8006ac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	6123      	str	r3, [r4, #16]
 8006ac8:	2301      	movs	r3, #1
 8006aca:	6163      	str	r3, [r4, #20]
 8006acc:	b002      	add	sp, #8
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	ab01      	add	r3, sp, #4
 8006ad2:	466a      	mov	r2, sp
 8006ad4:	f7ff ffca 	bl	8006a6c <__swhatbuf_r>
 8006ad8:	9900      	ldr	r1, [sp, #0]
 8006ada:	4605      	mov	r5, r0
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7ff fae1 	bl	80060a4 <_malloc_r>
 8006ae2:	b948      	cbnz	r0, 8006af8 <__smakebuf_r+0x44>
 8006ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae8:	059a      	lsls	r2, r3, #22
 8006aea:	d4ef      	bmi.n	8006acc <__smakebuf_r+0x18>
 8006aec:	f023 0303 	bic.w	r3, r3, #3
 8006af0:	f043 0302 	orr.w	r3, r3, #2
 8006af4:	81a3      	strh	r3, [r4, #12]
 8006af6:	e7e3      	b.n	8006ac0 <__smakebuf_r+0xc>
 8006af8:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <__smakebuf_r+0x7c>)
 8006afa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	6020      	str	r0, [r4, #0]
 8006b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	9b00      	ldr	r3, [sp, #0]
 8006b08:	6163      	str	r3, [r4, #20]
 8006b0a:	9b01      	ldr	r3, [sp, #4]
 8006b0c:	6120      	str	r0, [r4, #16]
 8006b0e:	b15b      	cbz	r3, 8006b28 <__smakebuf_r+0x74>
 8006b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b14:	4630      	mov	r0, r6
 8006b16:	f000 f893 	bl	8006c40 <_isatty_r>
 8006b1a:	b128      	cbz	r0, 8006b28 <__smakebuf_r+0x74>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	f023 0303 	bic.w	r3, r3, #3
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	81a3      	strh	r3, [r4, #12]
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	431d      	orrs	r5, r3
 8006b2c:	81a5      	strh	r5, [r4, #12]
 8006b2e:	e7cd      	b.n	8006acc <__smakebuf_r+0x18>
 8006b30:	080058a9 	.word	0x080058a9

08006b34 <__ascii_mbtowc>:
 8006b34:	b082      	sub	sp, #8
 8006b36:	b901      	cbnz	r1, 8006b3a <__ascii_mbtowc+0x6>
 8006b38:	a901      	add	r1, sp, #4
 8006b3a:	b142      	cbz	r2, 8006b4e <__ascii_mbtowc+0x1a>
 8006b3c:	b14b      	cbz	r3, 8006b52 <__ascii_mbtowc+0x1e>
 8006b3e:	7813      	ldrb	r3, [r2, #0]
 8006b40:	600b      	str	r3, [r1, #0]
 8006b42:	7812      	ldrb	r2, [r2, #0]
 8006b44:	1c10      	adds	r0, r2, #0
 8006b46:	bf18      	it	ne
 8006b48:	2001      	movne	r0, #1
 8006b4a:	b002      	add	sp, #8
 8006b4c:	4770      	bx	lr
 8006b4e:	4610      	mov	r0, r2
 8006b50:	e7fb      	b.n	8006b4a <__ascii_mbtowc+0x16>
 8006b52:	f06f 0001 	mvn.w	r0, #1
 8006b56:	e7f8      	b.n	8006b4a <__ascii_mbtowc+0x16>

08006b58 <memmove>:
 8006b58:	4288      	cmp	r0, r1
 8006b5a:	b510      	push	{r4, lr}
 8006b5c:	eb01 0302 	add.w	r3, r1, r2
 8006b60:	d807      	bhi.n	8006b72 <memmove+0x1a>
 8006b62:	1e42      	subs	r2, r0, #1
 8006b64:	4299      	cmp	r1, r3
 8006b66:	d00a      	beq.n	8006b7e <memmove+0x26>
 8006b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b6c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b70:	e7f8      	b.n	8006b64 <memmove+0xc>
 8006b72:	4283      	cmp	r3, r0
 8006b74:	d9f5      	bls.n	8006b62 <memmove+0xa>
 8006b76:	1881      	adds	r1, r0, r2
 8006b78:	1ad2      	subs	r2, r2, r3
 8006b7a:	42d3      	cmn	r3, r2
 8006b7c:	d100      	bne.n	8006b80 <memmove+0x28>
 8006b7e:	bd10      	pop	{r4, pc}
 8006b80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b84:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b88:	e7f7      	b.n	8006b7a <memmove+0x22>

08006b8a <__malloc_lock>:
 8006b8a:	4770      	bx	lr

08006b8c <__malloc_unlock>:
 8006b8c:	4770      	bx	lr

08006b8e <_realloc_r>:
 8006b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b90:	4607      	mov	r7, r0
 8006b92:	4614      	mov	r4, r2
 8006b94:	460e      	mov	r6, r1
 8006b96:	b921      	cbnz	r1, 8006ba2 <_realloc_r+0x14>
 8006b98:	4611      	mov	r1, r2
 8006b9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b9e:	f7ff ba81 	b.w	80060a4 <_malloc_r>
 8006ba2:	b922      	cbnz	r2, 8006bae <_realloc_r+0x20>
 8006ba4:	f7ff fa30 	bl	8006008 <_free_r>
 8006ba8:	4625      	mov	r5, r4
 8006baa:	4628      	mov	r0, r5
 8006bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bae:	f000 f857 	bl	8006c60 <_malloc_usable_size_r>
 8006bb2:	42a0      	cmp	r0, r4
 8006bb4:	d20f      	bcs.n	8006bd6 <_realloc_r+0x48>
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4638      	mov	r0, r7
 8006bba:	f7ff fa73 	bl	80060a4 <_malloc_r>
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d0f2      	beq.n	8006baa <_realloc_r+0x1c>
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	f7fe ff2a 	bl	8005a20 <memcpy>
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4638      	mov	r0, r7
 8006bd0:	f7ff fa1a 	bl	8006008 <_free_r>
 8006bd4:	e7e9      	b.n	8006baa <_realloc_r+0x1c>
 8006bd6:	4635      	mov	r5, r6
 8006bd8:	e7e7      	b.n	8006baa <_realloc_r+0x1c>
	...

08006bdc <_read_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4c07      	ldr	r4, [pc, #28]	; (8006bfc <_read_r+0x20>)
 8006be0:	4605      	mov	r5, r0
 8006be2:	4608      	mov	r0, r1
 8006be4:	4611      	mov	r1, r2
 8006be6:	2200      	movs	r2, #0
 8006be8:	6022      	str	r2, [r4, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f7fa fcfa 	bl	80015e4 <_read>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_read_r+0x1e>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_read_r+0x1e>
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	20000324 	.word	0x20000324

08006c00 <__ascii_wctomb>:
 8006c00:	b149      	cbz	r1, 8006c16 <__ascii_wctomb+0x16>
 8006c02:	2aff      	cmp	r2, #255	; 0xff
 8006c04:	bf85      	ittet	hi
 8006c06:	238a      	movhi	r3, #138	; 0x8a
 8006c08:	6003      	strhi	r3, [r0, #0]
 8006c0a:	700a      	strbls	r2, [r1, #0]
 8006c0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c10:	bf98      	it	ls
 8006c12:	2001      	movls	r0, #1
 8006c14:	4770      	bx	lr
 8006c16:	4608      	mov	r0, r1
 8006c18:	4770      	bx	lr
	...

08006c1c <_fstat_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4c07      	ldr	r4, [pc, #28]	; (8006c3c <_fstat_r+0x20>)
 8006c20:	2300      	movs	r3, #0
 8006c22:	4605      	mov	r5, r0
 8006c24:	4608      	mov	r0, r1
 8006c26:	4611      	mov	r1, r2
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	f7fa fd20 	bl	800166e <_fstat>
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	d102      	bne.n	8006c38 <_fstat_r+0x1c>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	b103      	cbz	r3, 8006c38 <_fstat_r+0x1c>
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	bd38      	pop	{r3, r4, r5, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20000324 	.word	0x20000324

08006c40 <_isatty_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4c06      	ldr	r4, [pc, #24]	; (8006c5c <_isatty_r+0x1c>)
 8006c44:	2300      	movs	r3, #0
 8006c46:	4605      	mov	r5, r0
 8006c48:	4608      	mov	r0, r1
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	f7fa fd1f 	bl	800168e <_isatty>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_isatty_r+0x1a>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_isatty_r+0x1a>
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	20000324 	.word	0x20000324

08006c60 <_malloc_usable_size_r>:
 8006c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c64:	1f18      	subs	r0, r3, #4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	bfbc      	itt	lt
 8006c6a:	580b      	ldrlt	r3, [r1, r0]
 8006c6c:	18c0      	addlt	r0, r0, r3
 8006c6e:	4770      	bx	lr

08006c70 <fmod>:
 8006c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c74:	ed2d 8b02 	vpush	{d8}
 8006c78:	b08b      	sub	sp, #44	; 0x2c
 8006c7a:	ec55 4b10 	vmov	r4, r5, d0
 8006c7e:	ec57 6b11 	vmov	r6, r7, d1
 8006c82:	f000 f859 	bl	8006d38 <__ieee754_fmod>
 8006c86:	4b2a      	ldr	r3, [pc, #168]	; (8006d30 <fmod+0xc0>)
 8006c88:	eeb0 8a40 	vmov.f32	s16, s0
 8006c8c:	eef0 8a60 	vmov.f32	s17, s1
 8006c90:	f993 8000 	ldrsb.w	r8, [r3]
 8006c94:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006c98:	d030      	beq.n	8006cfc <fmod+0x8c>
 8006c9a:	4632      	mov	r2, r6
 8006c9c:	463b      	mov	r3, r7
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 ff4b 	bl	8000b3c <__aeabi_dcmpun>
 8006ca6:	bb48      	cbnz	r0, 8006cfc <fmod+0x8c>
 8006ca8:	4622      	mov	r2, r4
 8006caa:	462b      	mov	r3, r5
 8006cac:	4620      	mov	r0, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	f7f9 ff44 	bl	8000b3c <__aeabi_dcmpun>
 8006cb4:	4681      	mov	r9, r0
 8006cb6:	bb08      	cbnz	r0, 8006cfc <fmod+0x8c>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	f7f9 ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cc4:	b1d0      	cbz	r0, 8006cfc <fmod+0x8c>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	4b1a      	ldr	r3, [pc, #104]	; (8006d34 <fmod+0xc4>)
 8006ccc:	9301      	str	r3, [sp, #4]
 8006cce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006cd2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006cd6:	f8cd 9020 	str.w	r9, [sp, #32]
 8006cda:	f1b8 0f00 	cmp.w	r8, #0
 8006cde:	d116      	bne.n	8006d0e <fmod+0x9e>
 8006ce0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006ce4:	4668      	mov	r0, sp
 8006ce6:	f000 f939 	bl	8006f5c <matherr>
 8006cea:	b1d8      	cbz	r0, 8006d24 <fmod+0xb4>
 8006cec:	9b08      	ldr	r3, [sp, #32]
 8006cee:	b11b      	cbz	r3, 8006cf8 <fmod+0x88>
 8006cf0:	f7fd faac 	bl	800424c <__errno>
 8006cf4:	9b08      	ldr	r3, [sp, #32]
 8006cf6:	6003      	str	r3, [r0, #0]
 8006cf8:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8006d00:	eef0 0a68 	vmov.f32	s1, s17
 8006d04:	b00b      	add	sp, #44	; 0x2c
 8006d06:	ecbd 8b02 	vpop	{d8}
 8006d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2300      	movs	r3, #0
 8006d12:	4610      	mov	r0, r2
 8006d14:	4619      	mov	r1, r3
 8006d16:	f7f9 fda1 	bl	800085c <__aeabi_ddiv>
 8006d1a:	f1b8 0f02 	cmp.w	r8, #2
 8006d1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d22:	d1df      	bne.n	8006ce4 <fmod+0x74>
 8006d24:	f7fd fa92 	bl	800424c <__errno>
 8006d28:	2321      	movs	r3, #33	; 0x21
 8006d2a:	6003      	str	r3, [r0, #0]
 8006d2c:	e7de      	b.n	8006cec <fmod+0x7c>
 8006d2e:	bf00      	nop
 8006d30:	200001e0 	.word	0x200001e0
 8006d34:	08007260 	.word	0x08007260

08006d38 <__ieee754_fmod>:
 8006d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	ec53 2b11 	vmov	r2, r3, d1
 8006d40:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8006d44:	ea5e 0402 	orrs.w	r4, lr, r2
 8006d48:	ec51 0b10 	vmov	r0, r1, d0
 8006d4c:	461e      	mov	r6, r3
 8006d4e:	ee11 5a10 	vmov	r5, s2
 8006d52:	4694      	mov	ip, r2
 8006d54:	d00c      	beq.n	8006d70 <__ieee754_fmod+0x38>
 8006d56:	4c7a      	ldr	r4, [pc, #488]	; (8006f40 <__ieee754_fmod+0x208>)
 8006d58:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8006d5c:	45a0      	cmp	r8, r4
 8006d5e:	4689      	mov	r9, r1
 8006d60:	dc06      	bgt.n	8006d70 <__ieee754_fmod+0x38>
 8006d62:	4254      	negs	r4, r2
 8006d64:	4314      	orrs	r4, r2
 8006d66:	4f77      	ldr	r7, [pc, #476]	; (8006f44 <__ieee754_fmod+0x20c>)
 8006d68:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8006d6c:	42bc      	cmp	r4, r7
 8006d6e:	d909      	bls.n	8006d84 <__ieee754_fmod+0x4c>
 8006d70:	f7f9 fc4a 	bl	8000608 <__aeabi_dmul>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	f7f9 fd70 	bl	800085c <__aeabi_ddiv>
 8006d7c:	ec41 0b10 	vmov	d0, r0, r1
 8006d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d84:	45f0      	cmp	r8, lr
 8006d86:	ee10 2a10 	vmov	r2, s0
 8006d8a:	4607      	mov	r7, r0
 8006d8c:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8006d90:	dc0a      	bgt.n	8006da8 <__ieee754_fmod+0x70>
 8006d92:	dbf3      	blt.n	8006d7c <__ieee754_fmod+0x44>
 8006d94:	42a8      	cmp	r0, r5
 8006d96:	d3f1      	bcc.n	8006d7c <__ieee754_fmod+0x44>
 8006d98:	d106      	bne.n	8006da8 <__ieee754_fmod+0x70>
 8006d9a:	496b      	ldr	r1, [pc, #428]	; (8006f48 <__ieee754_fmod+0x210>)
 8006d9c:	0fe4      	lsrs	r4, r4, #31
 8006d9e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006da2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006da6:	e7e9      	b.n	8006d7c <__ieee754_fmod+0x44>
 8006da8:	4b68      	ldr	r3, [pc, #416]	; (8006f4c <__ieee754_fmod+0x214>)
 8006daa:	4598      	cmp	r8, r3
 8006dac:	dc49      	bgt.n	8006e42 <__ieee754_fmod+0x10a>
 8006dae:	f1b8 0f00 	cmp.w	r8, #0
 8006db2:	d13d      	bne.n	8006e30 <__ieee754_fmod+0xf8>
 8006db4:	4866      	ldr	r0, [pc, #408]	; (8006f50 <__ieee754_fmod+0x218>)
 8006db6:	4611      	mov	r1, r2
 8006db8:	2900      	cmp	r1, #0
 8006dba:	dc36      	bgt.n	8006e2a <__ieee754_fmod+0xf2>
 8006dbc:	459e      	cmp	lr, r3
 8006dbe:	dc51      	bgt.n	8006e64 <__ieee754_fmod+0x12c>
 8006dc0:	f1be 0f00 	cmp.w	lr, #0
 8006dc4:	d145      	bne.n	8006e52 <__ieee754_fmod+0x11a>
 8006dc6:	4b62      	ldr	r3, [pc, #392]	; (8006f50 <__ieee754_fmod+0x218>)
 8006dc8:	4629      	mov	r1, r5
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	dc3e      	bgt.n	8006e4c <__ieee754_fmod+0x114>
 8006dce:	4961      	ldr	r1, [pc, #388]	; (8006f54 <__ieee754_fmod+0x21c>)
 8006dd0:	4288      	cmp	r0, r1
 8006dd2:	db4c      	blt.n	8006e6e <__ieee754_fmod+0x136>
 8006dd4:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8006dd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006ddc:	4a5d      	ldr	r2, [pc, #372]	; (8006f54 <__ieee754_fmod+0x21c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	db59      	blt.n	8006e96 <__ieee754_fmod+0x15e>
 8006de2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8006de6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8006dea:	1ac0      	subs	r0, r0, r3
 8006dec:	1b8a      	subs	r2, r1, r6
 8006dee:	eba7 050c 	sub.w	r5, r7, ip
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d166      	bne.n	8006ec4 <__ieee754_fmod+0x18c>
 8006df6:	4567      	cmp	r7, ip
 8006df8:	bf38      	it	cc
 8006dfa:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8006dfe:	2a00      	cmp	r2, #0
 8006e00:	bfbc      	itt	lt
 8006e02:	463d      	movlt	r5, r7
 8006e04:	460a      	movlt	r2, r1
 8006e06:	ea52 0105 	orrs.w	r1, r2, r5
 8006e0a:	d0c6      	beq.n	8006d9a <__ieee754_fmod+0x62>
 8006e0c:	494f      	ldr	r1, [pc, #316]	; (8006f4c <__ieee754_fmod+0x214>)
 8006e0e:	428a      	cmp	r2, r1
 8006e10:	dd6d      	ble.n	8006eee <__ieee754_fmod+0x1b6>
 8006e12:	4950      	ldr	r1, [pc, #320]	; (8006f54 <__ieee754_fmod+0x21c>)
 8006e14:	428b      	cmp	r3, r1
 8006e16:	db70      	blt.n	8006efa <__ieee754_fmod+0x1c2>
 8006e18:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8006e1c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006e20:	4314      	orrs	r4, r2
 8006e22:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8006e26:	4628      	mov	r0, r5
 8006e28:	e7a8      	b.n	8006d7c <__ieee754_fmod+0x44>
 8006e2a:	3801      	subs	r0, #1
 8006e2c:	0049      	lsls	r1, r1, #1
 8006e2e:	e7c3      	b.n	8006db8 <__ieee754_fmod+0x80>
 8006e30:	4848      	ldr	r0, [pc, #288]	; (8006f54 <__ieee754_fmod+0x21c>)
 8006e32:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8006e36:	0049      	lsls	r1, r1, #1
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	f100 30ff 	add.w	r0, r0, #4294967295
 8006e3e:	dcfa      	bgt.n	8006e36 <__ieee754_fmod+0xfe>
 8006e40:	e7bc      	b.n	8006dbc <__ieee754_fmod+0x84>
 8006e42:	ea4f 5028 	mov.w	r0, r8, asr #20
 8006e46:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8006e4a:	e7b7      	b.n	8006dbc <__ieee754_fmod+0x84>
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	0049      	lsls	r1, r1, #1
 8006e50:	e7bb      	b.n	8006dca <__ieee754_fmod+0x92>
 8006e52:	4b40      	ldr	r3, [pc, #256]	; (8006f54 <__ieee754_fmod+0x21c>)
 8006e54:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8006e58:	0049      	lsls	r1, r1, #1
 8006e5a:	2900      	cmp	r1, #0
 8006e5c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e60:	dcfa      	bgt.n	8006e58 <__ieee754_fmod+0x120>
 8006e62:	e7b4      	b.n	8006dce <__ieee754_fmod+0x96>
 8006e64:	ea4f 532e 	mov.w	r3, lr, asr #20
 8006e68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006e6c:	e7af      	b.n	8006dce <__ieee754_fmod+0x96>
 8006e6e:	1a0f      	subs	r7, r1, r0
 8006e70:	2f1f      	cmp	r7, #31
 8006e72:	dc0a      	bgt.n	8006e8a <__ieee754_fmod+0x152>
 8006e74:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8006e78:	fa08 f807 	lsl.w	r8, r8, r7
 8006e7c:	fa22 f101 	lsr.w	r1, r2, r1
 8006e80:	ea41 0108 	orr.w	r1, r1, r8
 8006e84:	fa02 f707 	lsl.w	r7, r2, r7
 8006e88:	e7a8      	b.n	8006ddc <__ieee754_fmod+0xa4>
 8006e8a:	4933      	ldr	r1, [pc, #204]	; (8006f58 <__ieee754_fmod+0x220>)
 8006e8c:	1a09      	subs	r1, r1, r0
 8006e8e:	fa02 f101 	lsl.w	r1, r2, r1
 8006e92:	2700      	movs	r7, #0
 8006e94:	e7a2      	b.n	8006ddc <__ieee754_fmod+0xa4>
 8006e96:	eba2 0c03 	sub.w	ip, r2, r3
 8006e9a:	f1bc 0f1f 	cmp.w	ip, #31
 8006e9e:	dc0a      	bgt.n	8006eb6 <__ieee754_fmod+0x17e>
 8006ea0:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8006ea4:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006ea8:	fa25 f606 	lsr.w	r6, r5, r6
 8006eac:	ea46 060e 	orr.w	r6, r6, lr
 8006eb0:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006eb4:	e799      	b.n	8006dea <__ieee754_fmod+0xb2>
 8006eb6:	4e28      	ldr	r6, [pc, #160]	; (8006f58 <__ieee754_fmod+0x220>)
 8006eb8:	1af6      	subs	r6, r6, r3
 8006eba:	fa05 f606 	lsl.w	r6, r5, r6
 8006ebe:	f04f 0c00 	mov.w	ip, #0
 8006ec2:	e792      	b.n	8006dea <__ieee754_fmod+0xb2>
 8006ec4:	4567      	cmp	r7, ip
 8006ec6:	bf38      	it	cc
 8006ec8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	da05      	bge.n	8006edc <__ieee754_fmod+0x1a4>
 8006ed0:	0ffa      	lsrs	r2, r7, #31
 8006ed2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006ed6:	007f      	lsls	r7, r7, #1
 8006ed8:	3801      	subs	r0, #1
 8006eda:	e787      	b.n	8006dec <__ieee754_fmod+0xb4>
 8006edc:	ea52 0105 	orrs.w	r1, r2, r5
 8006ee0:	f43f af5b 	beq.w	8006d9a <__ieee754_fmod+0x62>
 8006ee4:	0fe9      	lsrs	r1, r5, #31
 8006ee6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8006eea:	006f      	lsls	r7, r5, #1
 8006eec:	e7f4      	b.n	8006ed8 <__ieee754_fmod+0x1a0>
 8006eee:	0fe8      	lsrs	r0, r5, #31
 8006ef0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006ef4:	006d      	lsls	r5, r5, #1
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	e789      	b.n	8006e0e <__ieee754_fmod+0xd6>
 8006efa:	1ac9      	subs	r1, r1, r3
 8006efc:	2914      	cmp	r1, #20
 8006efe:	dc0a      	bgt.n	8006f16 <__ieee754_fmod+0x1de>
 8006f00:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	40cd      	lsrs	r5, r1
 8006f0a:	432b      	orrs	r3, r5
 8006f0c:	410a      	asrs	r2, r1
 8006f0e:	ea42 0104 	orr.w	r1, r2, r4
 8006f12:	4618      	mov	r0, r3
 8006f14:	e732      	b.n	8006d7c <__ieee754_fmod+0x44>
 8006f16:	291f      	cmp	r1, #31
 8006f18:	dc07      	bgt.n	8006f2a <__ieee754_fmod+0x1f2>
 8006f1a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006f1e:	40cd      	lsrs	r5, r1
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	432b      	orrs	r3, r5
 8006f26:	4622      	mov	r2, r4
 8006f28:	e7f1      	b.n	8006f0e <__ieee754_fmod+0x1d6>
 8006f2a:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8006f2e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8006f32:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8006f36:	33e2      	adds	r3, #226	; 0xe2
 8006f38:	fa42 f303 	asr.w	r3, r2, r3
 8006f3c:	e7f3      	b.n	8006f26 <__ieee754_fmod+0x1ee>
 8006f3e:	bf00      	nop
 8006f40:	7fefffff 	.word	0x7fefffff
 8006f44:	7ff00000 	.word	0x7ff00000
 8006f48:	08007268 	.word	0x08007268
 8006f4c:	000fffff 	.word	0x000fffff
 8006f50:	fffffbed 	.word	0xfffffbed
 8006f54:	fffffc02 	.word	0xfffffc02
 8006f58:	fffffbe2 	.word	0xfffffbe2

08006f5c <matherr>:
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	4770      	bx	lr

08006f60 <_init>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	bf00      	nop
 8006f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f66:	bc08      	pop	{r3}
 8006f68:	469e      	mov	lr, r3
 8006f6a:	4770      	bx	lr

08006f6c <_fini>:
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	bf00      	nop
 8006f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f72:	bc08      	pop	{r3}
 8006f74:	469e      	mov	lr, r3
 8006f76:	4770      	bx	lr
