
MOTOR_Grellier_Leconte.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008758  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  080088f8  080088f8  000188f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c58  08008c58  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c60  08008c60  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c60  08008c60  00018c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c64  08008c64  00018c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200001e4  08008e4c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08008e4c  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018250  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f69  00000000  00000000  00038464  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc0  00000000  00000000  0003b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e70  00000000  00000000  0003c390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199bd  00000000  00000000  0003d200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8e3  00000000  00000000  00056bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fcd2  00000000  00000000  000664a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6172  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc0  00000000  00000000  000f61f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080088e0 	.word	0x080088e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080088e0 	.word	0x080088e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <DriveSyst_Init>:
#include "stm32f4xx_hal.h"
#include <math.h>
int Button_pushed=0;
Encoder_Feedback_t Feedback;

void DriveSyst_Init (driveSyst_t *dsHandle){
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	dsHandle->sp_source=e_BUTTON;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
	dsHandle->sp_physics=e_POSITION;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	705a      	strb	r2, [r3, #1]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <DriveSyst_Loop>:


void DriveSyst_Loop(driveSyst_t *dsHandle){
 8000f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f7c:	b094      	sub	sp, #80	; 0x50
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]

	Xyz Accel;
	switch(dsHandle->sp_physics) {
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	785b      	ldrb	r3, [r3, #1]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	f000 8095 	beq.w	80010b6 <DriveSyst_Loop+0x13e>
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	f000 8172 	beq.w	8001276 <DriveSyst_Loop+0x2fe>
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 8188 	bne.w	80012a8 <DriveSyst_Loop+0x330>
		case e_SPEED:
						switch(dsHandle->sp_source){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	f200 8084 	bhi.w	80010aa <DriveSyst_Loop+0x132>
 8000fa2:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <DriveSyst_Loop+0x30>)
 8000fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa8:	08000fb9 	.word	0x08000fb9
 8000fac:	080010b3 	.word	0x080010b3
 8000fb0:	08000ff7 	.word	0x08000ff7
 8000fb4:	080010b3 	.word	0x080010b3
								case e_CONSTANT: 	pidHandleSpeed.input.order = 6;
 8000fb8:	4bc3      	ldr	r3, [pc, #780]	; (80012c8 <DriveSyst_Loop+0x350>)
 8000fba:	4ac4      	ldr	r2, [pc, #784]	; (80012cc <DriveSyst_Loop+0x354>)
 8000fbc:	615a      	str	r2, [r3, #20]
													pidHandleSpeed.input.feedback = Encoder_Read().d_angle;
 8000fbe:	f000 f9af 	bl	8001320 <Encoder_Read>
 8000fc2:	eef0 6a40 	vmov.f32	s13, s0
 8000fc6:	eeb0 7a60 	vmov.f32	s14, s1
 8000fca:	eef0 7a41 	vmov.f32	s15, s2
 8000fce:	edc7 6a05 	vstr	s13, [r7, #20]
 8000fd2:	ed87 7a06 	vstr	s14, [r7, #24]
 8000fd6:	edc7 7a07 	vstr	s15, [r7, #28]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	4aba      	ldr	r2, [pc, #744]	; (80012c8 <DriveSyst_Loop+0x350>)
 8000fde:	6193      	str	r3, [r2, #24]
													PID_Execute(&pidHandleSpeed);
 8000fe0:	48b9      	ldr	r0, [pc, #740]	; (80012c8 <DriveSyst_Loop+0x350>)
 8000fe2:	f000 fe82 	bl	8001cea <PID_Execute>
													Motor_Pwm_Update(pidHandleSpeed.process.output);
 8000fe6:	4bb8      	ldr	r3, [pc, #736]	; (80012c8 <DriveSyst_Loop+0x350>)
 8000fe8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000fec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff0:	f000 fc60 	bl	80018b4 <Motor_Pwm_Update>

												break;
 8000ff4:	e05e      	b.n	80010b4 <DriveSyst_Loop+0x13c>
								case e_BUTTON:
									;
												break;
								case e_ACCELEROMETER:Accel=MPU6050_Read_Accel();
 8000ff6:	f000 fda9 	bl	8001b4c <MPU6050_Read_Accel>
 8000ffa:	eef0 6a40 	vmov.f32	s13, s0
 8000ffe:	eeb0 7a60 	vmov.f32	s14, s1
 8001002:	eef0 7a41 	vmov.f32	s15, s2
 8001006:	edc7 6a02 	vstr	s13, [r7, #8]
 800100a:	ed87 7a03 	vstr	s14, [r7, #12]
 800100e:	edc7 7a04 	vstr	s15, [r7, #16]
													//printf(" %f y: %f z: %f\n\r ",Accel.x,Accel.y,Accel.z);

													pidHandleSpeed.input.order = 12+3*(-atan2(Accel.x,Accel.z));
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa9f 	bl	8000558 <__aeabi_f2d>
 800101a:	4604      	mov	r4, r0
 800101c:	460d      	mov	r5, r1
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa99 	bl	8000558 <__aeabi_f2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	ec43 2b11 	vmov	d1, r2, r3
 800102e:	ec45 4b10 	vmov	d0, r4, r5
 8001032:	f007 f853 	bl	80080dc <atan2>
 8001036:	ec54 3b10 	vmov	r3, r4, d0
 800103a:	4698      	mov	r8, r3
 800103c:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4ba2      	ldr	r3, [pc, #648]	; (80012d0 <DriveSyst_Loop+0x358>)
 8001046:	4640      	mov	r0, r8
 8001048:	4649      	mov	r1, r9
 800104a:	f7ff fadd 	bl	8000608 <__aeabi_dmul>
 800104e:	4603      	mov	r3, r0
 8001050:	460c      	mov	r4, r1
 8001052:	4618      	mov	r0, r3
 8001054:	4621      	mov	r1, r4
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b9e      	ldr	r3, [pc, #632]	; (80012d4 <DriveSyst_Loop+0x35c>)
 800105c:	f7ff f91e 	bl	800029c <__adddf3>
 8001060:	4603      	mov	r3, r0
 8001062:	460c      	mov	r4, r1
 8001064:	4618      	mov	r0, r3
 8001066:	4621      	mov	r1, r4
 8001068:	f7ff fda6 	bl	8000bb8 <__aeabi_d2f>
 800106c:	4602      	mov	r2, r0
 800106e:	4b96      	ldr	r3, [pc, #600]	; (80012c8 <DriveSyst_Loop+0x350>)
 8001070:	615a      	str	r2, [r3, #20]
													pidHandleSpeed.input.feedback = Encoder_Read().d_angle;
 8001072:	f000 f955 	bl	8001320 <Encoder_Read>
 8001076:	eef0 6a40 	vmov.f32	s13, s0
 800107a:	eeb0 7a60 	vmov.f32	s14, s1
 800107e:	eef0 7a41 	vmov.f32	s15, s2
 8001082:	edc7 6a08 	vstr	s13, [r7, #32]
 8001086:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800108a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800108e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001090:	4a8d      	ldr	r2, [pc, #564]	; (80012c8 <DriveSyst_Loop+0x350>)
 8001092:	6193      	str	r3, [r2, #24]
													PID_Execute(&pidHandleSpeed);
 8001094:	488c      	ldr	r0, [pc, #560]	; (80012c8 <DriveSyst_Loop+0x350>)
 8001096:	f000 fe28 	bl	8001cea <PID_Execute>
													Motor_Pwm_Update(pidHandleSpeed.process.output);
 800109a:	4b8b      	ldr	r3, [pc, #556]	; (80012c8 <DriveSyst_Loop+0x350>)
 800109c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80010a0:	eeb0 0a67 	vmov.f32	s0, s15
 80010a4:	f000 fc06 	bl	80018b4 <Motor_Pwm_Update>
												break;
 80010a8:	e004      	b.n	80010b4 <DriveSyst_Loop+0x13c>
								case e_UART:
												break;
								default: printf("error source");
 80010aa:	488b      	ldr	r0, [pc, #556]	; (80012d8 <DriveSyst_Loop+0x360>)
 80010ac:	f005 f94c 	bl	8006348 <iprintf>
							}
						break;
 80010b0:	e0fd      	b.n	80012ae <DriveSyst_Loop+0x336>
												break;
 80010b2:	bf00      	nop
						break;
 80010b4:	e0fb      	b.n	80012ae <DriveSyst_Loop+0x336>



		case e_POSITION:
						switch(dsHandle->sp_source){
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	f200 80d5 	bhi.w	800126a <DriveSyst_Loop+0x2f2>
 80010c0:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <DriveSyst_Loop+0x150>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	080010d9 	.word	0x080010d9
 80010cc:	08001117 	.word	0x08001117
 80010d0:	080011c9 	.word	0x080011c9
 80010d4:	08001273 	.word	0x08001273
								case e_CONSTANT: 	pidHandlePosition.input.order = 6*M_PI;
 80010d8:	4b80      	ldr	r3, [pc, #512]	; (80012dc <DriveSyst_Loop+0x364>)
 80010da:	4a81      	ldr	r2, [pc, #516]	; (80012e0 <DriveSyst_Loop+0x368>)
 80010dc:	615a      	str	r2, [r3, #20]
													pidHandlePosition.input.feedback = Encoder_Read().angle_abs;
 80010de:	f000 f91f 	bl	8001320 <Encoder_Read>
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 80010f2:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80010f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80010fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fc:	4a77      	ldr	r2, [pc, #476]	; (80012dc <DriveSyst_Loop+0x364>)
 80010fe:	6193      	str	r3, [r2, #24]
													PID_Execute(&pidHandlePosition);
 8001100:	4876      	ldr	r0, [pc, #472]	; (80012dc <DriveSyst_Loop+0x364>)
 8001102:	f000 fdf2 	bl	8001cea <PID_Execute>
													Motor_Pwm_Update(pidHandlePosition.process.output);
 8001106:	4b75      	ldr	r3, [pc, #468]	; (80012dc <DriveSyst_Loop+0x364>)
 8001108:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	f000 fbd0 	bl	80018b4 <Motor_Pwm_Update>
												break;
 8001114:	e0ae      	b.n	8001274 <DriveSyst_Loop+0x2fc>
								case e_BUTTON:
													if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==1 && Button_pushed!=0){
 8001116:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111a:	4872      	ldr	r0, [pc, #456]	; (80012e4 <DriveSyst_Loop+0x36c>)
 800111c:	f001 fd34 	bl	8002b88 <HAL_GPIO_ReadPin>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d106      	bne.n	8001134 <DriveSyst_Loop+0x1bc>
 8001126:	4b70      	ldr	r3, [pc, #448]	; (80012e8 <DriveSyst_Loop+0x370>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <DriveSyst_Loop+0x1bc>
														Button_pushed=0;
 800112e:	4b6e      	ldr	r3, [pc, #440]	; (80012e8 <DriveSyst_Loop+0x370>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
													}
													if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0 && Button_pushed==0){
 8001134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001138:	486a      	ldr	r0, [pc, #424]	; (80012e4 <DriveSyst_Loop+0x36c>)
 800113a:	f001 fd25 	bl	8002b88 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d125      	bne.n	8001190 <DriveSyst_Loop+0x218>
 8001144:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <DriveSyst_Loop+0x370>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d121      	bne.n	8001190 <DriveSyst_Loop+0x218>
														pidHandlePosition.input.order = pidHandlePosition.input.order+2*M_PI;
 800114c:	4b63      	ldr	r3, [pc, #396]	; (80012dc <DriveSyst_Loop+0x364>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa01 	bl	8000558 <__aeabi_f2d>
 8001156:	a358      	add	r3, pc, #352	; (adr r3, 80012b8 <DriveSyst_Loop+0x340>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff f89e 	bl	800029c <__adddf3>
 8001160:	4603      	mov	r3, r0
 8001162:	460c      	mov	r4, r1
 8001164:	4618      	mov	r0, r3
 8001166:	4621      	mov	r1, r4
 8001168:	f7ff fd26 	bl	8000bb8 <__aeabi_d2f>
 800116c:	4602      	mov	r2, r0
 800116e:	4b5b      	ldr	r3, [pc, #364]	; (80012dc <DriveSyst_Loop+0x364>)
 8001170:	615a      	str	r2, [r3, #20]
														printf("tour: %f \n\r",pidHandlePosition.input.order);
 8001172:	4b5a      	ldr	r3, [pc, #360]	; (80012dc <DriveSyst_Loop+0x364>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9ee 	bl	8000558 <__aeabi_f2d>
 800117c:	4603      	mov	r3, r0
 800117e:	460c      	mov	r4, r1
 8001180:	461a      	mov	r2, r3
 8001182:	4623      	mov	r3, r4
 8001184:	4859      	ldr	r0, [pc, #356]	; (80012ec <DriveSyst_Loop+0x374>)
 8001186:	f005 f8df 	bl	8006348 <iprintf>
														Button_pushed=1;
 800118a:	4b57      	ldr	r3, [pc, #348]	; (80012e8 <DriveSyst_Loop+0x370>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
													}

													pidHandlePosition.input.feedback = Encoder_Read().angle_abs;
 8001190:	f000 f8c6 	bl	8001320 <Encoder_Read>
 8001194:	eef0 6a40 	vmov.f32	s13, s0
 8001198:	eeb0 7a60 	vmov.f32	s14, s1
 800119c:	eef0 7a41 	vmov.f32	s15, s2
 80011a0:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 80011a4:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 80011a8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80011ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ae:	4a4b      	ldr	r2, [pc, #300]	; (80012dc <DriveSyst_Loop+0x364>)
 80011b0:	6193      	str	r3, [r2, #24]
													PID_Execute(&pidHandlePosition);
 80011b2:	484a      	ldr	r0, [pc, #296]	; (80012dc <DriveSyst_Loop+0x364>)
 80011b4:	f000 fd99 	bl	8001cea <PID_Execute>
													Motor_Pwm_Update(pidHandlePosition.process.output);
 80011b8:	4b48      	ldr	r3, [pc, #288]	; (80012dc <DriveSyst_Loop+0x364>)
 80011ba:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80011be:	eeb0 0a67 	vmov.f32	s0, s15
 80011c2:	f000 fb77 	bl	80018b4 <Motor_Pwm_Update>

												break;
 80011c6:	e055      	b.n	8001274 <DriveSyst_Loop+0x2fc>
								case e_ACCELEROMETER:
													Accel=MPU6050_Read_Accel();
 80011c8:	f000 fcc0 	bl	8001b4c <MPU6050_Read_Accel>
 80011cc:	eef0 6a40 	vmov.f32	s13, s0
 80011d0:	eeb0 7a60 	vmov.f32	s14, s1
 80011d4:	eef0 7a41 	vmov.f32	s15, s2
 80011d8:	edc7 6a02 	vstr	s13, [r7, #8]
 80011dc:	ed87 7a03 	vstr	s14, [r7, #12]
 80011e0:	edc7 7a04 	vstr	s15, [r7, #16]
													pidHandlePosition.input.order = -atan2(Accel.x,Accel.z)-M_PI/2;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f9b6 	bl	8000558 <__aeabi_f2d>
 80011ec:	4680      	mov	r8, r0
 80011ee:	4689      	mov	r9, r1
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f9b0 	bl	8000558 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ec43 2b11 	vmov	d1, r2, r3
 8001200:	ec49 8b10 	vmov	d0, r8, r9
 8001204:	f006 ff6a 	bl	80080dc <atan2>
 8001208:	ec53 2b10 	vmov	r2, r3, d0
 800120c:	4614      	mov	r4, r2
 800120e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001212:	a32b      	add	r3, pc, #172	; (adr r3, 80012c0 <DriveSyst_Loop+0x348>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f83c 	bl	8000298 <__aeabi_dsub>
 8001220:	4603      	mov	r3, r0
 8001222:	460c      	mov	r4, r1
 8001224:	4618      	mov	r0, r3
 8001226:	4621      	mov	r1, r4
 8001228:	f7ff fcc6 	bl	8000bb8 <__aeabi_d2f>
 800122c:	4602      	mov	r2, r0
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <DriveSyst_Loop+0x364>)
 8001230:	615a      	str	r2, [r3, #20]
													pidHandlePosition.input.feedback = Encoder_Read().angle_abs;
 8001232:	f000 f875 	bl	8001320 <Encoder_Read>
 8001236:	eef0 6a40 	vmov.f32	s13, s0
 800123a:	eeb0 7a60 	vmov.f32	s14, s1
 800123e:	eef0 7a41 	vmov.f32	s15, s2
 8001242:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8001246:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800124a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 800124e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001250:	4a22      	ldr	r2, [pc, #136]	; (80012dc <DriveSyst_Loop+0x364>)
 8001252:	6193      	str	r3, [r2, #24]
													PID_Execute(&pidHandlePosition);
 8001254:	4821      	ldr	r0, [pc, #132]	; (80012dc <DriveSyst_Loop+0x364>)
 8001256:	f000 fd48 	bl	8001cea <PID_Execute>
													Motor_Pwm_Update(pidHandlePosition.process.output);
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <DriveSyst_Loop+0x364>)
 800125c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001260:	eeb0 0a67 	vmov.f32	s0, s15
 8001264:	f000 fb26 	bl	80018b4 <Motor_Pwm_Update>
												break;
 8001268:	e004      	b.n	8001274 <DriveSyst_Loop+0x2fc>
								case e_UART:
												break;
								default: printf("error source");
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <DriveSyst_Loop+0x360>)
 800126c:	f005 f86c 	bl	8006348 <iprintf>
								}
						break;
 8001270:	e01d      	b.n	80012ae <DriveSyst_Loop+0x336>
												break;
 8001272:	bf00      	nop
						break;
 8001274:	e01b      	b.n	80012ae <DriveSyst_Loop+0x336>


		case e_TORQUE:
						switch(dsHandle->sp_source){
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d80e      	bhi.n	800129c <DriveSyst_Loop+0x324>
 800127e:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <DriveSyst_Loop+0x30c>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	08001295 	.word	0x08001295
 8001288:	080012a5 	.word	0x080012a5
 800128c:	080012a5 	.word	0x080012a5
 8001290:	080012a5 	.word	0x080012a5
								case e_CONSTANT: pidHandleSpeed.input.order = 6;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <DriveSyst_Loop+0x350>)
 8001296:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <DriveSyst_Loop+0x354>)
 8001298:	615a      	str	r2, [r3, #20]
												break;
 800129a:	e004      	b.n	80012a6 <DriveSyst_Loop+0x32e>
												break;
								case e_ACCELEROMETER:;
												break;
								case e_UART:
												break;
								default: printf("error source");
 800129c:	480e      	ldr	r0, [pc, #56]	; (80012d8 <DriveSyst_Loop+0x360>)
 800129e:	f005 f853 	bl	8006348 <iprintf>
						}
						break;
 80012a2:	e004      	b.n	80012ae <DriveSyst_Loop+0x336>
												break;
 80012a4:	bf00      	nop
						break;
 80012a6:	e002      	b.n	80012ae <DriveSyst_Loop+0x336>
		default: printf("error physics");
 80012a8:	4811      	ldr	r0, [pc, #68]	; (80012f0 <DriveSyst_Loop+0x378>)
 80012aa:	f005 f84d 	bl	8006348 <iprintf>
	}


}
 80012ae:	bf00      	nop
 80012b0:	3750      	adds	r7, #80	; 0x50
 80012b2:	46bd      	mov	sp, r7
 80012b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012b8:	54442d18 	.word	0x54442d18
 80012bc:	401921fb 	.word	0x401921fb
 80012c0:	54442d18 	.word	0x54442d18
 80012c4:	3ff921fb 	.word	0x3ff921fb
 80012c8:	2000027c 	.word	0x2000027c
 80012cc:	40c00000 	.word	0x40c00000
 80012d0:	40080000 	.word	0x40080000
 80012d4:	40280000 	.word	0x40280000
 80012d8:	080088f8 	.word	0x080088f8
 80012dc:	200002ac 	.word	0x200002ac
 80012e0:	4196cbe4 	.word	0x4196cbe4
 80012e4:	40020800 	.word	0x40020800
 80012e8:	20000200 	.word	0x20000200
 80012ec:	08008908 	.word	0x08008908
 80012f0:	08008914 	.word	0x08008914

080012f4 <Encoder_Init>:
#include "encoder.h"
#include "tim.h"
#include <math.h>
Encoder_Feedback_t Encoder;

void Encoder_Init(void){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 80012f8:	f000 fe70 	bl	8001fdc <MX_TIM2_Init>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 80012fc:	2100      	movs	r1, #0
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <Encoder_Init+0x28>)
 8001300:	f003 f9f8 	bl	80046f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8001304:	2104      	movs	r1, #4
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <Encoder_Init+0x28>)
 8001308:	f003 f9f4 	bl	80046f4 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,32768);
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <Encoder_Init+0x28>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001314:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000350 	.word	0x20000350

08001320 <Encoder_Read>:

Encoder_Feedback_t Encoder_Read(void){
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b08b      	sub	sp, #44	; 0x2c
 8001324:	af00      	add	r7, sp, #0

	float deltaT = 0.040;
 8001326:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <Encoder_Read+0x140>)
 8001328:	627b      	str	r3, [r7, #36]	; 0x24

	float counter=__HAL_TIM_GET_COUNTER(&htim2);
 800132a:	4b4e      	ldr	r3, [pc, #312]	; (8001464 <Encoder_Read+0x144>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001338:	edc7 7a08 	vstr	s15, [r7, #32]
	__HAL_TIM_SET_COUNTER(&htim2,32768);
 800133c:	4b49      	ldr	r3, [pc, #292]	; (8001464 <Encoder_Read+0x144>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

	float delta = ((counter-32768.0F)*2.0F*M_PI)/(74.8F*8.0F);
 8001346:	edd7 7a08 	vldr	s15, [r7, #32]
 800134a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001468 <Encoder_Read+0x148>
 800134e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001352:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001356:	ee17 0a90 	vmov	r0, s15
 800135a:	f7ff f8fd 	bl	8000558 <__aeabi_f2d>
 800135e:	a33a      	add	r3, pc, #232	; (adr r3, 8001448 <Encoder_Read+0x128>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff f950 	bl	8000608 <__aeabi_dmul>
 8001368:	4603      	mov	r3, r0
 800136a:	460c      	mov	r4, r1
 800136c:	4618      	mov	r0, r3
 800136e:	4621      	mov	r1, r4
 8001370:	a337      	add	r3, pc, #220	; (adr r3, 8001450 <Encoder_Read+0x130>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff fa71 	bl	800085c <__aeabi_ddiv>
 800137a:	4603      	mov	r3, r0
 800137c:	460c      	mov	r4, r1
 800137e:	4618      	mov	r0, r3
 8001380:	4621      	mov	r1, r4
 8001382:	f7ff fc19 	bl	8000bb8 <__aeabi_d2f>
 8001386:	4603      	mov	r3, r0
 8001388:	61fb      	str	r3, [r7, #28]
	Encoder.angle_abs += delta;
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <Encoder_Read+0x14c>)
 800138c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001390:	edd7 7a07 	vldr	s15, [r7, #28]
 8001394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <Encoder_Read+0x14c>)
 800139a:	edc3 7a01 	vstr	s15, [r3, #4]
	Encoder.angle_rel = fmod(Encoder.angle_abs,2*M_PI);
 800139e:	4b33      	ldr	r3, [pc, #204]	; (800146c <Encoder_Read+0x14c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8d8 	bl	8000558 <__aeabi_f2d>
 80013a8:	4603      	mov	r3, r0
 80013aa:	460c      	mov	r4, r1
 80013ac:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001458 <Encoder_Read+0x138>
 80013b0:	ec44 3b10 	vmov	d0, r3, r4
 80013b4:	f006 fe94 	bl	80080e0 <fmod>
 80013b8:	ec54 3b10 	vmov	r3, r4, d0
 80013bc:	4618      	mov	r0, r3
 80013be:	4621      	mov	r1, r4
 80013c0:	f7ff fbfa 	bl	8000bb8 <__aeabi_d2f>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <Encoder_Read+0x14c>)
 80013c8:	601a      	str	r2, [r3, #0]
	if (Encoder.angle_rel<0){
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <Encoder_Read+0x14c>)
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	d512      	bpl.n	8001400 <Encoder_Read+0xe0>
		Encoder.angle_rel = Encoder.angle_rel+2*M_PI;
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <Encoder_Read+0x14c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8ba 	bl	8000558 <__aeabi_f2d>
 80013e4:	a31c      	add	r3, pc, #112	; (adr r3, 8001458 <Encoder_Read+0x138>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7fe ff57 	bl	800029c <__adddf3>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	4618      	mov	r0, r3
 80013f4:	4621      	mov	r1, r4
 80013f6:	f7ff fbdf 	bl	8000bb8 <__aeabi_d2f>
 80013fa:	4602      	mov	r2, r0
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <Encoder_Read+0x14c>)
 80013fe:	601a      	str	r2, [r3, #0]
	}

	Encoder.d_angle=delta/deltaT;
 8001400:	edd7 6a07 	vldr	s13, [r7, #28]
 8001404:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <Encoder_Read+0x14c>)
 800140e:	edc3 7a02 	vstr	s15, [r3, #8]

	return Encoder;
 8001412:	4a16      	ldr	r2, [pc, #88]	; (800146c <Encoder_Read+0x14c>)
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	ca07      	ldmia	r2, {r0, r1, r2}
 800141a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800141e:	6939      	ldr	r1, [r7, #16]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	ee06 1a90 	vmov	s13, r1
 8001428:	ee07 2a10 	vmov	s14, r2
 800142c:	ee07 3a90 	vmov	s15, r3

}
 8001430:	eeb0 0a66 	vmov.f32	s0, s13
 8001434:	eef0 0a47 	vmov.f32	s1, s14
 8001438:	eeb0 1a67 	vmov.f32	s2, s15
 800143c:	372c      	adds	r7, #44	; 0x2c
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	f3af 8000 	nop.w
 8001448:	54442d18 	.word	0x54442d18
 800144c:	400921fb 	.word	0x400921fb
 8001450:	40000000 	.word	0x40000000
 8001454:	4082b333 	.word	0x4082b333
 8001458:	54442d18 	.word	0x54442d18
 800145c:	401921fb 	.word	0x401921fb
 8001460:	3d23d70a 	.word	0x3d23d70a
 8001464:	20000350 	.word	0x20000350
 8001468:	47000000 	.word	0x47000000
 800146c:	2000021c 	.word	0x2000021c

08001470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <MX_GPIO_Init+0xd0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a2c      	ldr	r2, [pc, #176]	; (8001540 <MX_GPIO_Init+0xd0>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <MX_GPIO_Init+0xd0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a25      	ldr	r2, [pc, #148]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2120      	movs	r1, #32
 80014fa:	4812      	ldr	r0, [pc, #72]	; (8001544 <MX_GPIO_Init+0xd4>)
 80014fc:	f001 fb5c 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <MX_GPIO_Init+0xd8>)
 8001516:	f001 f8d3 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800151a:	2320      	movs	r3, #32
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_GPIO_Init+0xd4>)
 8001532:	f001 f8c5 	bl	80026c0 <HAL_GPIO_Init>

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020800 	.word	0x40020800

0800154c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_I2C1_Init+0x50>)
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <MX_I2C1_Init+0x54>)
 8001554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_I2C1_Init+0x50>)
 8001558:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_I2C1_Init+0x58>)
 800155a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_I2C1_Init+0x50>)
 800156a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_I2C1_Init+0x50>)
 800158a:	f001 fb49 	bl	8002c20 <HAL_I2C_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001594:	f000 f976 	bl	8001884 <Error_Handler>
  }

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000228 	.word	0x20000228
 80015a0:	40005400 	.word	0x40005400
 80015a4:	000186a0 	.word	0x000186a0

080015a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_I2C_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12b      	bne.n	8001622 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e6:	23c0      	movs	r3, #192	; 0xc0
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ea:	2312      	movs	r3, #18
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f6:	2304      	movs	r3, #4
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <HAL_I2C_MspInit+0x8c>)
 8001602:	f001 f85d 	bl	80026c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_I2C_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_I2C_MspInit+0x88>)
 8001610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_I2C_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40005400 	.word	0x40005400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020400 	.word	0x40020400

08001638 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_I2C_MspDeInit+0x30>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d109      	bne.n	800165e <HAL_I2C_MspDeInit+0x26>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_I2C_MspDeInit+0x34>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_I2C_MspDeInit+0x34>)
 8001650:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001656:	21c0      	movs	r1, #192	; 0xc0
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_I2C_MspDeInit+0x38>)
 800165a:	f001 f9b3 	bl	80029c4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
} 
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40005400 	.word	0x40005400
 800166c:	40023800 	.word	0x40023800
 8001670:	40020400 	.word	0x40020400

08001674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167a:	f000 fec3 	bl	8002404 <HAL_Init>

  /* USER CODE BEGIN Init */
  float Kp_speed = 0.02;
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <main+0x8c>)
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  float Ki_speed = 0.09;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <main+0x90>)
 8001684:	623b      	str	r3, [r7, #32]
  float Kd_speed = 0.04;
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <main+0x94>)
 8001688:	61fb      	str	r3, [r7, #28]
  float error_stop_speed = 0.01;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <main+0x98>)
 800168c:	61bb      	str	r3, [r7, #24]
  float integ_sat_speed = 6;
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <main+0x9c>)
 8001690:	617b      	str	r3, [r7, #20]

  float Kp_position = 0.8;
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <main+0xa0>)
 8001694:	613b      	str	r3, [r7, #16]
  float Ki_position = 0.0005;
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <main+0xa4>)
 8001698:	60fb      	str	r3, [r7, #12]
  float Kd_position = 0.02;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <main+0x8c>)
 800169c:	60bb      	str	r3, [r7, #8]
  float error_stop_position = 0.01;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <main+0x98>)
 80016a0:	607b      	str	r3, [r7, #4]
  float integ_sat_position = 6;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <main+0x9c>)
 80016a4:	603b      	str	r3, [r7, #0]

  Motor_Init();
 80016a6:	f000 f8f5 	bl	8001894 <Motor_Init>
  Encoder_Init();
 80016aa:	f7ff fe23 	bl	80012f4 <Encoder_Init>
  MX_I2C1_Init();
 80016ae:	f7ff ff4d 	bl	800154c <MX_I2C1_Init>
  MPU6050_Init();
 80016b2:	f000 f9b9 	bl	8001a28 <MPU6050_Init>
  PID_Init(&pidHandleSpeed, Kp_speed, Ki_speed, Kd_speed, error_stop_speed, integ_sat_speed);
 80016b6:	ed97 2a05 	vldr	s4, [r7, #20]
 80016ba:	edd7 1a06 	vldr	s3, [r7, #24]
 80016be:	ed97 1a07 	vldr	s2, [r7, #28]
 80016c2:	edd7 0a08 	vldr	s1, [r7, #32]
 80016c6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80016ca:	4814      	ldr	r0, [pc, #80]	; (800171c <main+0xa8>)
 80016cc:	f000 face 	bl	8001c6c <PID_Init>
  PID_Init(&pidHandlePosition, Kp_position, Ki_position, Kd_position, error_stop_position, integ_sat_position);
 80016d0:	ed97 2a00 	vldr	s4, [r7]
 80016d4:	edd7 1a01 	vldr	s3, [r7, #4]
 80016d8:	ed97 1a02 	vldr	s2, [r7, #8]
 80016dc:	edd7 0a03 	vldr	s1, [r7, #12]
 80016e0:	ed97 0a04 	vldr	s0, [r7, #16]
 80016e4:	480e      	ldr	r0, [pc, #56]	; (8001720 <main+0xac>)
 80016e6:	f000 fac1 	bl	8001c6c <PID_Init>
  DriveSyst_Init (&dsHandle);
 80016ea:	480e      	ldr	r0, [pc, #56]	; (8001724 <main+0xb0>)
 80016ec:	f7ff fc34 	bl	8000f58 <DriveSyst_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f0:	f000 f81a 	bl	8001728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f4:	f7ff febc 	bl	8001470 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016f8:	f000 fde8 	bl	80022cc <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <main+0x88>
 80016fe:	bf00      	nop
 8001700:	3ca3d70a 	.word	0x3ca3d70a
 8001704:	3db851ec 	.word	0x3db851ec
 8001708:	3d23d70a 	.word	0x3d23d70a
 800170c:	3c23d70a 	.word	0x3c23d70a
 8001710:	40c00000 	.word	0x40c00000
 8001714:	3f4ccccd 	.word	0x3f4ccccd
 8001718:	3a03126f 	.word	0x3a03126f
 800171c:	2000027c 	.word	0x2000027c
 8001720:	200002ac 	.word	0x200002ac
 8001724:	200002dc 	.word	0x200002dc

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b094      	sub	sp, #80	; 0x50
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	2230      	movs	r2, #48	; 0x30
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f004 f9a2 	bl	8005a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <SystemClock_Config+0xd0>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <SystemClock_Config+0xd0>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <SystemClock_Config+0xd0>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	4b23      	ldr	r3, [pc, #140]	; (80017fc <SystemClock_Config+0xd4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <SystemClock_Config+0xd4>)
 8001776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <SystemClock_Config+0xd4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001788:	2302      	movs	r3, #2
 800178a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178c:	2301      	movs	r3, #1
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001790:	2310      	movs	r3, #16
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001794:	2302      	movs	r3, #2
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001798:	2300      	movs	r3, #0
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800179c:	2310      	movs	r3, #16
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017a6:	2304      	movs	r3, #4
 80017a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017aa:	2307      	movs	r3, #7
 80017ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 fa18 	bl	8003be8 <HAL_RCC_OscConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017be:	f000 f861 	bl	8001884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c2:	230f      	movs	r3, #15
 80017c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c6:	2302      	movs	r3, #2
 80017c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2102      	movs	r1, #2
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fc72 	bl	80040c8 <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017ea:	f000 f84b 	bl	8001884 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3750      	adds	r7, #80	; 0x50
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000

08001800 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	static uint16_t tempoNms = 500;
	static uint16_t tempoNmsEnc = 40;
	if(tempoNms > 0 ) tempoNms--;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_SYSTICK_Callback+0x50>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_SYSTICK_Callback+0x1a>
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_SYSTICK_Callback+0x50>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	3b01      	subs	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_SYSTICK_Callback+0x50>)
 8001816:	801a      	strh	r2, [r3, #0]
 8001818:	e007      	b.n	800182a <HAL_SYSTICK_Callback+0x2a>
	else    {
		tempoNms = 500;
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_SYSTICK_Callback+0x50>)
 800181c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001820:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001822:	2120      	movs	r1, #32
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <HAL_SYSTICK_Callback+0x54>)
 8001826:	f001 f9e0 	bl	8002bea <HAL_GPIO_TogglePin>

	}
	if(tempoNmsEnc > 0 ) tempoNmsEnc--;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_SYSTICK_Callback+0x58>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_SYSTICK_Callback+0x40>
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_SYSTICK_Callback+0x58>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_SYSTICK_Callback+0x58>)
 800183c:	801a      	strh	r2, [r3, #0]
			pidHandleSpeed.input.feedback = Encoder_Read().d_angle;
			PID_Execute(&pidHandleSpeed);
			Motor_Pwm_Update(pidHandleSpeed.process.output);*/
		}

}
 800183e:	e005      	b.n	800184c <HAL_SYSTICK_Callback+0x4c>
			tempoNmsEnc = 40;
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_SYSTICK_Callback+0x58>)
 8001842:	2228      	movs	r2, #40	; 0x28
 8001844:	801a      	strh	r2, [r3, #0]
			DriveSyst_Loop(&dsHandle);
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <HAL_SYSTICK_Callback+0x5c>)
 8001848:	f7ff fb96 	bl	8000f78 <DriveSyst_Loop>
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000000 	.word	0x20000000
 8001854:	40020000 	.word	0x40020000
 8001858:	20000002 	.word	0x20000002
 800185c:	200002dc 	.word	0x200002dc

08001860 <__io_putchar>:

int __io_putchar(int ch){
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001868:	1d39      	adds	r1, r7, #4
 800186a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186e:	2201      	movs	r2, #1
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <__io_putchar+0x20>)
 8001872:	f003 fc7c 	bl	800516e <HAL_UART_Transmit>
	return ch;
 8001876:	687b      	ldr	r3, [r7, #4]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000390 	.word	0x20000390

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <Motor_Init>:
#include "motor.h"
#include "tim.h"


void Motor_Init(void){
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 8001898:	f000 fbf4 	bl	8002084 <MX_TIM3_Init>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800189c:	2100      	movs	r1, #0
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <Motor_Init+0x1c>)
 80018a0:	f002 fe64 	bl	800456c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018a4:	2104      	movs	r1, #4
 80018a6:	4802      	ldr	r0, [pc, #8]	; (80018b0 <Motor_Init+0x1c>)
 80018a8:	f002 fe60 	bl	800456c <HAL_TIM_PWM_Start>
};
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000310 	.word	0x20000310

080018b4 <Motor_Pwm_Update>:


void Motor_Pwm_Update(float in){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b090      	sub	sp, #64	; 0x40
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	ed87 0a01 	vstr	s0, [r7, #4]

	TIM_OC_InitTypeDef sConfigOC1 = {0};
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	619a      	str	r2, [r3, #24]
	sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 80018d2:	2360      	movs	r3, #96	; 0x60
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC1.Pulse = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC1.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34

	TIM_OC_InitTypeDef sConfigOC2 = {0};
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	619a      	str	r2, [r3, #24]
	sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 80018f6:	2360      	movs	r3, #96	; 0x60
 80018f8:	60bb      	str	r3, [r7, #8]
	sConfigOC2.Pulse = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
	sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
	sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]


	if(in<-1.0){
 8001906:	edd7 7a01 	vldr	s15, [r7, #4]
 800190a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800190e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001916:	d501      	bpl.n	800191c <Motor_Pwm_Update+0x68>
		in=-1.0;
 8001918:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <Motor_Pwm_Update+0x16c>)
 800191a:	607b      	str	r3, [r7, #4]
	}
	if(in>1.0){
 800191c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	dd02      	ble.n	8001934 <Motor_Pwm_Update+0x80>
			in=1.0;
 800192e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001932:	607b      	str	r3, [r7, #4]
		}
	if(in==0.0){
 8001934:	edd7 7a01 	vldr	s15, [r7, #4]
 8001938:	eef5 7a40 	vcmp.f32	s15, #0.0
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	d105      	bne.n	800194e <Motor_Pwm_Update+0x9a>
				sConfigOC1.Pulse = htim3.Init.Period;
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <Motor_Pwm_Update+0x170>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
				sConfigOC2.Pulse = htim3.Init.Period;
 8001948:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <Motor_Pwm_Update+0x170>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60fb      	str	r3, [r7, #12]
				}
	if(in<0.0){
 800194e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001952:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	d51b      	bpl.n	8001994 <Motor_Pwm_Update+0xe0>
		in=-1-in;
 800195c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001960:	edd7 7a01 	vldr	s15, [r7, #4]
 8001964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001968:	edc7 7a01 	vstr	s15, [r7, #4]
		sConfigOC1.Pulse = htim3.Init.Period*-in;
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <Motor_Pwm_Update+0x170>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001978:	edd7 7a01 	vldr	s15, [r7, #4]
 800197c:	eef1 7a67 	vneg.f32	s15, s15
 8001980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001988:	ee17 3a90 	vmov	r3, s15
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
		sConfigOC2.Pulse = htim3.Init.Period;
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <Motor_Pwm_Update+0x170>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	60fb      	str	r3, [r7, #12]
	}
	if(in>0.0){
 8001994:	edd7 7a01 	vldr	s15, [r7, #4]
 8001998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	dd19      	ble.n	80019d6 <Motor_Pwm_Update+0x122>
		in=1-in;
 80019a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ae:	edc7 7a01 	vstr	s15, [r7, #4]
			sConfigOC1.Pulse = htim3.Init.Period;
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <Motor_Pwm_Update+0x170>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
			sConfigOC2.Pulse = htim3.Init.Period*in;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <Motor_Pwm_Update+0x170>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d0:	ee17 3a90 	vmov	r3, s15
 80019d4:	60fb      	str	r3, [r7, #12]
		}


	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	2200      	movs	r2, #0
 80019dc:	4619      	mov	r1, r3
 80019de:	4811      	ldr	r0, [pc, #68]	; (8001a24 <Motor_Pwm_Update+0x170>)
 80019e0:	f002 fec0 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <Motor_Pwm_Update+0x13a>
	  {
	    Error_Handler();
 80019ea:	f7ff ff4b 	bl	8001884 <Error_Handler>
	  }

	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2204      	movs	r2, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	480b      	ldr	r0, [pc, #44]	; (8001a24 <Motor_Pwm_Update+0x170>)
 80019f8:	f002 feb4 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <Motor_Pwm_Update+0x152>
	  {
	    Error_Handler();
 8001a02:	f7ff ff3f 	bl	8001884 <Error_Handler>
	  }
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a06:	2100      	movs	r1, #0
 8001a08:	4806      	ldr	r0, [pc, #24]	; (8001a24 <Motor_Pwm_Update+0x170>)
 8001a0a:	f002 fdaf 	bl	800456c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a0e:	2104      	movs	r1, #4
 8001a10:	4804      	ldr	r0, [pc, #16]	; (8001a24 <Motor_Pwm_Update+0x170>)
 8001a12:	f002 fdab 	bl	800456c <HAL_TIM_PWM_Start>
}
 8001a16:	bf00      	nop
 8001a18:	3740      	adds	r7, #64	; 0x40
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	bf800000 	.word	0xbf800000
 8001a24:	20000310 	.word	0x20000310

08001a28 <MPU6050_Init>:
#define WHO_AM_I_REG 0x75
float Ax_bias = 0;
float Ay_bias = 0;
float Az_bias = 0;
void MPU6050_Init (void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af04      	add	r7, sp, #16
	uint8_t check = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73bb      	strb	r3, [r7, #14]
	uint8_t Data = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	9302      	str	r3, [sp, #8]
 8001a40:	2301      	movs	r3, #1
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	f107 030e 	add.w	r3, r7, #14
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2275      	movs	r2, #117	; 0x75
 8001a4e:	21d0      	movs	r1, #208	; 0xd0
 8001a50:	483a      	ldr	r0, [pc, #232]	; (8001b3c <MPU6050_Init+0x114>)
 8001a52:	f001 fb47 	bl	80030e4 <HAL_I2C_Mem_Read>
 8001a56:	4603      	mov	r3, r0
 8001a58:	73fb      	strb	r3, [r7, #15]
	if(ret != 0)
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <MPU6050_Init+0x44>
	{
		HAL_I2C_DeInit(&hi2c1); // Release IO port as GPIO, reset handle status flag
 8001a60:	4836      	ldr	r0, [pc, #216]	; (8001b3c <MPU6050_Init+0x114>)
 8001a62:	f001 fa15 	bl	8002e90 <HAL_I2C_DeInit>
		HAL_I2C_Init(&hi2c1); //This sentence reinitializes the I2C controller
 8001a66:	4835      	ldr	r0, [pc, #212]	; (8001b3c <MPU6050_Init+0x114>)
 8001a68:	f001 f8da 	bl	8002c20 <HAL_I2C_Init>
	}
	// check device ID WHO_AM_I
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	2301      	movs	r3, #1
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	f107 030e 	add.w	r3, r7, #14
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	2275      	movs	r2, #117	; 0x75
 8001a80:	21d0      	movs	r1, #208	; 0xd0
 8001a82:	482e      	ldr	r0, [pc, #184]	; (8001b3c <MPU6050_Init+0x114>)
 8001a84:	f001 fb2e 	bl	80030e4 <HAL_I2C_Mem_Read>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
	if (check >= 0x68 && check <= 0x73) // values of compatible MPU chips (6050,6500, 9250, 9255, ...)
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	2b67      	cmp	r3, #103	; 0x67
 8001a90:	d94f      	bls.n	8001b32 <MPU6050_Init+0x10a>
 8001a92:	7bbb      	ldrb	r3, [r7, #14]
 8001a94:	2b73      	cmp	r3, #115	; 0x73
 8001a96:	d84c      	bhi.n	8001b32 <MPU6050_Init+0x10a>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa0:	9302      	str	r3, [sp, #8]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	f107 030d 	add.w	r3, r7, #13
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2301      	movs	r3, #1
 8001aae:	226b      	movs	r2, #107	; 0x6b
 8001ab0:	21d0      	movs	r1, #208	; 0xd0
 8001ab2:	4822      	ldr	r0, [pc, #136]	; (8001b3c <MPU6050_Init+0x114>)
 8001ab4:	f001 fa1c 	bl	8002ef0 <HAL_I2C_Mem_Write>
		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000);
 8001abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	f107 030d 	add.w	r3, r7, #13
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2301      	movs	r3, #1
 8001ace:	2219      	movs	r2, #25
 8001ad0:	21d0      	movs	r1, #208	; 0xd0
 8001ad2:	481a      	ldr	r0, [pc, #104]	; (8001b3c <MPU6050_Init+0x114>)
 8001ad4:	f001 fa0c 	bl	8002ef0 <HAL_I2C_Mem_Write>
		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000);
 8001adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	f107 030d 	add.w	r3, r7, #13
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2301      	movs	r3, #1
 8001aee:	221c      	movs	r2, #28
 8001af0:	21d0      	movs	r1, #208	; 0xd0
 8001af2:	4812      	ldr	r0, [pc, #72]	; (8001b3c <MPU6050_Init+0x114>)
 8001af4:	f001 f9fc 	bl	8002ef0 <HAL_I2C_Mem_Write>
		Xyz accel;
		accel = MPU6050_Read_Accel();
 8001af8:	f000 f828 	bl	8001b4c <MPU6050_Read_Accel>
 8001afc:	eef0 6a40 	vmov.f32	s13, s0
 8001b00:	eeb0 7a60 	vmov.f32	s14, s1
 8001b04:	eef0 7a41 	vmov.f32	s15, s2
 8001b08:	edc7 6a00 	vstr	s13, [r7]
 8001b0c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001b10:	edc7 7a02 	vstr	s15, [r7, #8]
		Ax_bias = accel.x - 1;
 8001b14:	edd7 7a00 	vldr	s15, [r7]
 8001b18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <MPU6050_Init+0x118>)
 8001b22:	edc3 7a00 	vstr	s15, [r3]
		Ay_bias = accel.y;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <MPU6050_Init+0x11c>)
 8001b2a:	6013      	str	r3, [r2, #0]
		Az_bias = accel.z;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <MPU6050_Init+0x120>)
 8001b30:	6013      	str	r3, [r2, #0]
	}
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000228 	.word	0x20000228
 8001b40:	20000204 	.word	0x20000204
 8001b44:	20000208 	.word	0x20000208
 8001b48:	2000020c 	.word	0x2000020c

08001b4c <MPU6050_Read_Accel>:

Xyz MPU6050_Read_Accel (void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b092      	sub	sp, #72	; 0x48
 8001b50:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6] = {0, 0, 0, 0, 0, 0};
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	809a      	strh	r2, [r3, #4]
	Xyz accel;
	HAL_StatusTypeDef ret = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int16_t Accel_X_RAW = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	86bb      	strh	r3, [r7, #52]	; 0x34
	int16_t Accel_Y_RAW = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t Accel_Z_RAW = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	863b      	strh	r3, [r7, #48]	; 0x30
	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data,6, 1000);
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	2306      	movs	r3, #6
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	223b      	movs	r2, #59	; 0x3b
 8001b82:	21d0      	movs	r1, #208	; 0xd0
 8001b84:	4834      	ldr	r0, [pc, #208]	; (8001c58 <MPU6050_Read_Accel+0x10c>)
 8001b86:	f001 faad 	bl	80030e4 <HAL_I2C_Mem_Read>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001b90:	7f3b      	ldrb	r3, [r7, #28]
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	7f7b      	ldrb	r3, [r7, #29]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	86bb      	strh	r3, [r7, #52]	; 0x34
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001b9e:	7fbb      	ldrb	r3, [r7, #30]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	7ffb      	ldrb	r3, [r7, #31]
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	867b      	strh	r3, [r7, #50]	; 0x32
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001bac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	863b      	strh	r3, [r7, #48]	; 0x30
	accel.x = ((float)Accel_X_RAW)/16384.0F - Ax_bias;
 8001bbe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bca:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001c5c <MPU6050_Read_Accel+0x110>
 8001bce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <MPU6050_Read_Accel+0x114>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bdc:	edc7 7a04 	vstr	s15, [r7, #16]
	accel.y = ((float)Accel_Y_RAW)/16384.0F - Ay_bias;
 8001be0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bec:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001c5c <MPU6050_Read_Accel+0x110>
 8001bf0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <MPU6050_Read_Accel+0x118>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfe:	edc7 7a05 	vstr	s15, [r7, #20]
	accel.z = ((float)Accel_Z_RAW)/16384.0F - Az_bias;
 8001c02:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001c5c <MPU6050_Read_Accel+0x110>
 8001c12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <MPU6050_Read_Accel+0x11c>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c20:	edc7 7a06 	vstr	s15, [r7, #24]

	return accel;
 8001c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c28:	f107 0210 	add.w	r2, r7, #16
 8001c2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c38:	ee06 1a90 	vmov	s13, r1
 8001c3c:	ee07 2a10 	vmov	s14, r2
 8001c40:	ee07 3a90 	vmov	s15, r3
}
 8001c44:	eeb0 0a66 	vmov.f32	s0, s13
 8001c48:	eef0 0a47 	vmov.f32	s1, s14
 8001c4c:	eeb0 1a67 	vmov.f32	s2, s15
 8001c50:	3738      	adds	r7, #56	; 0x38
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000228 	.word	0x20000228
 8001c5c:	46800000 	.word	0x46800000
 8001c60:	20000204 	.word	0x20000204
 8001c64:	20000208 	.word	0x20000208
 8001c68:	2000020c 	.word	0x2000020c

08001c6c <PID_Init>:



//
void PID_Init(PID_t* pidHandle, float Kp, float Ki, float Kd, float error_stop,float integ_sat)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6178      	str	r0, [r7, #20]
 8001c74:	ed87 0a04 	vstr	s0, [r7, #16]
 8001c78:	edc7 0a03 	vstr	s1, [r7, #12]
 8001c7c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001c80:	edc7 1a01 	vstr	s3, [r7, #4]
 8001c84:	ed87 2a00 	vstr	s4, [r7]
	pidHandle->init.Kd = Kd;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	609a      	str	r2, [r3, #8]
	pidHandle->init.Kp = Kp;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	601a      	str	r2, [r3, #0]
	pidHandle->init.Ki = Ki;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	605a      	str	r2, [r3, #4]
	pidHandle->init.error_stop = error_stop;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	60da      	str	r2, [r3, #12]
	pidHandle->init.integ_sat = integ_sat;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	611a      	str	r2, [r3, #16]
	pidHandle->process.integ = 0;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	629a      	str	r2, [r3, #40]	; 0x28
	pidHandle->process.previous_error = 0;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	621a      	str	r2, [r3, #32]
	pidHandle->process.error = 0;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
	pidHandle->process.deriv = 0;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
	pidHandle->process.output = 0;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
	pidHandle->input.order = 0;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
	pidHandle->input.feedback = 0;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	371c      	adds	r7, #28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <PID_Execute>:

float PID_Execute(PID_t* pidHandle)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 // error
	pidHandle->process.previous_error = pidHandle->process.error;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	621a      	str	r2, [r3, #32]
	pidHandle->process.error = pidHandle->input.order-pidHandle->input.feedback;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	edc3 7a07 	vstr	s15, [r3, #28]

 // derivate
	pidHandle->process.deriv = pidHandle->process.error - pidHandle->process.previous_error;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

 // integer
	if (fabs(pidHandle->process.error) > pidHandle->init.error_stop){
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d2c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	dd0a      	ble.n	8001d56 <PID_Execute+0x6c>
		pidHandle->process.integ = pidHandle->process.integ + pidHandle->process.error;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	}

	if (fabs(pidHandle->process.integ) > pidHandle->init.integ_sat){
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d5c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	dd03      	ble.n	8001d78 <PID_Execute+0x8e>
		pidHandle->process.integ = pidHandle->init.integ_sat;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
	}
//command


pidHandle->process.output = pidHandle->init.Kp * pidHandle->process.error + pidHandle->init.Ki * pidHandle->process.integ + pidHandle->init.Kd * pidHandle->process.deriv;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	ed93 7a00 	vldr	s14, [r3]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

return pidHandle->process.output;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	ee07 3a90 	vmov	s15, r3
}
 8001dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_MspInit+0x4c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <HAL_MspInit+0x4c>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_MspInit+0x4c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_MspInit+0x4c>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <HAL_MspInit+0x4c>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_MspInit+0x4c>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e0a:	2007      	movs	r0, #7
 8001e0c:	f000 fc1e 	bl	800264c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e70:	f000 fb1a 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001e74:	f000 fc1d 	bl	80026b2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e00a      	b.n	8001ea4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e8e:	f3af 8000 	nop.w
 8001e92:	4601      	mov	r1, r0
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	60ba      	str	r2, [r7, #8]
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dbf0      	blt.n	8001e8e <_read+0x12>
	}

return len;
 8001eac:	687b      	ldr	r3, [r7, #4]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e009      	b.n	8001edc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60ba      	str	r2, [r7, #8]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fcc5 	bl	8001860 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf1      	blt.n	8001ec8 <_write+0x12>
	}
	return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_close>:

int _close(int file)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f16:	605a      	str	r2, [r3, #4]
	return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_isatty>:

int _isatty(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
	return 0;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <_sbrk+0x50>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x16>
		heap_end = &end;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <_sbrk+0x50>)
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <_sbrk+0x54>)
 8001f6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <_sbrk+0x50>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <_sbrk+0x50>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	466a      	mov	r2, sp
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d907      	bls.n	8001f92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f82:	f003 fd53 	bl	8005a2c <__errno>
 8001f86:	4602      	mov	r2, r0
 8001f88:	230c      	movs	r3, #12
 8001f8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f90:	e006      	b.n	8001fa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <_sbrk+0x50>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <_sbrk+0x50>)
 8001f9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000210 	.word	0x20000210
 8001fac:	200003d8 	.word	0x200003d8

08001fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <SystemInit+0x28>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <SystemInit+0x28>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SystemInit+0x28>)
 8001fc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fca:	609a      	str	r2, [r3, #8]
#endif
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 fd48 	bl	8005a80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <MX_TIM2_Init+0xa4>)
 8001ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ffe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <MX_TIM2_Init+0xa4>)
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <MX_TIM2_Init+0xa4>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <MX_TIM2_Init+0xa4>)
 800200e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002012:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_TIM2_Init+0xa4>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <MX_TIM2_Init+0xa4>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002020:	2301      	movs	r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002028:	2301      	movs	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002034:	2300      	movs	r3, #0
 8002036:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002038:	2301      	movs	r3, #1
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	4619      	mov	r1, r3
 800204a:	480d      	ldr	r0, [pc, #52]	; (8002080 <MX_TIM2_Init+0xa4>)
 800204c:	f002 fac0 	bl	80045d0 <HAL_TIM_Encoder_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002056:	f7ff fc15 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4806      	ldr	r0, [pc, #24]	; (8002080 <MX_TIM2_Init+0xa4>)
 8002068:	f002 ffc6 	bl	8004ff8 <HAL_TIMEx_MasterConfigSynchronization>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002072:	f7ff fc07 	bl	8001884 <Error_Handler>
  }

}
 8002076:	bf00      	nop
 8002078:	3730      	adds	r7, #48	; 0x30
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000350 	.word	0x20000350

08002084 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	; 0x38
 8002088:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	615a      	str	r2, [r3, #20]
 80020b2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80020b4:	4b32      	ldr	r3, [pc, #200]	; (8002180 <MX_TIM3_Init+0xfc>)
 80020b6:	4a33      	ldr	r2, [pc, #204]	; (8002184 <MX_TIM3_Init+0x100>)
 80020b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <MX_TIM3_Init+0xfc>)
 80020bc:	2200      	movs	r2, #0
 80020be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c0:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <MX_TIM3_Init+0xfc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 80020c6:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <MX_TIM3_Init+0xfc>)
 80020c8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80020cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <MX_TIM3_Init+0xfc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d4:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <MX_TIM3_Init+0xfc>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020da:	4829      	ldr	r0, [pc, #164]	; (8002180 <MX_TIM3_Init+0xfc>)
 80020dc:	f002 f9e6 	bl	80044ac <HAL_TIM_Base_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020e6:	f7ff fbcd 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f4:	4619      	mov	r1, r3
 80020f6:	4822      	ldr	r0, [pc, #136]	; (8002180 <MX_TIM3_Init+0xfc>)
 80020f8:	f002 fbfa 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002102:	f7ff fbbf 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002106:	481e      	ldr	r0, [pc, #120]	; (8002180 <MX_TIM3_Init+0xfc>)
 8002108:	f002 f9fb 	bl	8004502 <HAL_TIM_PWM_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002112:	f7ff fbb7 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	4619      	mov	r1, r3
 8002124:	4816      	ldr	r0, [pc, #88]	; (8002180 <MX_TIM3_Init+0xfc>)
 8002126:	f002 ff67 	bl	8004ff8 <HAL_TIMEx_MasterConfigSynchronization>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002130:	f7ff fba8 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002134:	2360      	movs	r3, #96	; 0x60
 8002136:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2200      	movs	r2, #0
 8002148:	4619      	mov	r1, r3
 800214a:	480d      	ldr	r0, [pc, #52]	; (8002180 <MX_TIM3_Init+0xfc>)
 800214c:	f002 fb0a 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002156:	f7ff fb95 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2204      	movs	r2, #4
 800215e:	4619      	mov	r1, r3
 8002160:	4807      	ldr	r0, [pc, #28]	; (8002180 <MX_TIM3_Init+0xfc>)
 8002162:	f002 faff 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800216c:	f7ff fb8a 	bl	8001884 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <MX_TIM3_Init+0xfc>)
 8002172:	f000 f871 	bl	8002258 <HAL_TIM_MspPostInit>

}
 8002176:	bf00      	nop
 8002178:	3738      	adds	r7, #56	; 0x38
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000310 	.word	0x20000310
 8002184:	40000400 	.word	0x40000400

08002188 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d12b      	bne.n	8002202 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_TIM_Encoder_MspInit+0x84>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_TIM_Encoder_MspInit+0x84>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_TIM_Encoder_MspInit+0x84>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_TIM_Encoder_MspInit+0x84>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a0f      	ldr	r2, [pc, #60]	; (800220c <HAL_TIM_Encoder_MspInit+0x84>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_TIM_Encoder_MspInit+0x84>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021e2:	2303      	movs	r3, #3
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021f2:	2301      	movs	r3, #1
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <HAL_TIM_Encoder_MspInit+0x88>)
 80021fe:	f000 fa5f 	bl	80026c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	; 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	40020000 	.word	0x40020000

08002214 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <HAL_TIM_Base_MspInit+0x3c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d10d      	bne.n	8002242 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_TIM_Base_MspInit+0x40>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_TIM_Base_MspInit+0x40>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_TIM_Base_MspInit+0x40>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40000400 	.word	0x40000400
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_TIM_MspPostInit+0x68>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d11d      	bne.n	80022b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_TIM_MspPostInit+0x6c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_TIM_MspPostInit+0x6c>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_TIM_MspPostInit+0x6c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002296:	23c0      	movs	r3, #192	; 0xc0
 8002298:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <HAL_TIM_MspPostInit+0x70>)
 80022b2:	f000 fa05 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020000 	.word	0x40020000

080022cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_USART2_UART_Init+0x4c>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <MX_USART2_UART_Init+0x50>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <MX_USART2_UART_Init+0x4c>)
 80022d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_USART2_UART_Init+0x4c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_USART2_UART_Init+0x4c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_USART2_UART_Init+0x4c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_USART2_UART_Init+0x4c>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <MX_USART2_UART_Init+0x4c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_USART2_UART_Init+0x4c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_USART2_UART_Init+0x4c>)
 8002304:	f002 fee6 	bl	80050d4 <HAL_UART_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800230e:	f7ff fab9 	bl	8001884 <Error_Handler>
  }

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000390 	.word	0x20000390
 800231c:	40004400 	.word	0x40004400

08002320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_UART_MspInit+0x84>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d12b      	bne.n	800239a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_UART_MspInit+0x88>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <HAL_UART_MspInit+0x88>)
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <HAL_UART_MspInit+0x88>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_UART_MspInit+0x88>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_UART_MspInit+0x88>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_UART_MspInit+0x88>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800237a:	230c      	movs	r3, #12
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800238a:	2307      	movs	r3, #7
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	; (80023ac <HAL_UART_MspInit+0x8c>)
 8002396:	f000 f993 	bl	80026c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800239a:	bf00      	nop
 800239c:	3728      	adds	r7, #40	; 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40004400 	.word	0x40004400
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020000 	.word	0x40020000

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023b6:	e003      	b.n	80023c0 <LoopCopyDataInit>

080023b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023be:	3104      	adds	r1, #4

080023c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023c0:	480b      	ldr	r0, [pc, #44]	; (80023f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023c8:	d3f6      	bcc.n	80023b8 <CopyDataInit>
  ldr  r2, =_sbss
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023cc:	e002      	b.n	80023d4 <LoopFillZerobss>

080023ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023d0:	f842 3b04 	str.w	r3, [r2], #4

080023d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023d8:	d3f9      	bcc.n	80023ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023da:	f7ff fde9 	bl	8001fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f003 fb2b 	bl	8005a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e2:	f7ff f947 	bl	8001674 <main>
  bx  lr    
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80023ec:	08008c68 	.word	0x08008c68
  ldr  r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023f4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80023f8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80023fc:	200003d8 	.word	0x200003d8

08002400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC_IRQHandler>
	...

08002404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <HAL_Init+0x40>)
 800240e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_Init+0x40>)
 800241a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800241e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_Init+0x40>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242c:	2003      	movs	r0, #3
 800242e:	f000 f90d 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002432:	2000      	movs	r0, #0
 8002434:	f000 f808 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002438:	f7ff fcc8 	bl	8001dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f917 	bl	800269a <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 f8ed 	bl	8002662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000004 	.word	0x20000004
 80024a0:	2000000c 	.word	0x2000000c
 80024a4:	20000008 	.word	0x20000008

080024a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_IncTick+0x20>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x24>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_IncTick+0x24>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	2000000c 	.word	0x2000000c
 80024cc:	200003d0 	.word	0x200003d0

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	200003d0 	.word	0x200003d0

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
         );
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002618:	d301      	bcc.n	800261e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261a:	2301      	movs	r3, #1
 800261c:	e00f      	b.n	800263e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <SysTick_Config+0x40>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002626:	210f      	movs	r1, #15
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f7ff ff8e 	bl	800254c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <SysTick_Config+0x40>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SysTick_Config+0x40>)
 8002638:	2207      	movs	r2, #7
 800263a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff47 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff5c 	bl	8002530 <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ff8e 	bl	80025a0 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff5d 	bl	800254c <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffb0 	bl	8002608 <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80026b6:	f7ff f8a3 	bl	8001800 <HAL_SYSTICK_Callback>
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e159      	b.n	8002990 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 8148 	bne.w	800298a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d00b      	beq.n	800271a <HAL_GPIO_Init+0x5a>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d007      	beq.n	800271a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800270e:	2b11      	cmp	r3, #17
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b12      	cmp	r3, #18
 8002718:	d130      	bne.n	800277c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 0201 	and.w	r2, r3, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0xfc>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b12      	cmp	r3, #18
 80027ba:	d123      	bne.n	8002804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	69b9      	ldr	r1, [r7, #24]
 8002800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a2 	beq.w	800298a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b56      	ldr	r3, [pc, #344]	; (80029a4 <HAL_GPIO_Init+0x2e4>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a55      	ldr	r2, [pc, #340]	; (80029a4 <HAL_GPIO_Init+0x2e4>)
 8002850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_GPIO_Init+0x2e4>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002862:	4a51      	ldr	r2, [pc, #324]	; (80029a8 <HAL_GPIO_Init+0x2e8>)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3302      	adds	r3, #2
 800286a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	220f      	movs	r2, #15
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a48      	ldr	r2, [pc, #288]	; (80029ac <HAL_GPIO_Init+0x2ec>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d019      	beq.n	80028c2 <HAL_GPIO_Init+0x202>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a47      	ldr	r2, [pc, #284]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_GPIO_Init+0x1fe>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a46      	ldr	r2, [pc, #280]	; (80029b4 <HAL_GPIO_Init+0x2f4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00d      	beq.n	80028ba <HAL_GPIO_Init+0x1fa>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a45      	ldr	r2, [pc, #276]	; (80029b8 <HAL_GPIO_Init+0x2f8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0x1f6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a44      	ldr	r2, [pc, #272]	; (80029bc <HAL_GPIO_Init+0x2fc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_GPIO_Init+0x1f2>
 80028ae:	2304      	movs	r3, #4
 80028b0:	e008      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e004      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028c2:	2300      	movs	r3, #0
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	f002 0203 	and.w	r2, r2, #3
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	4093      	lsls	r3, r2
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d4:	4934      	ldr	r1, [pc, #208]	; (80029a8 <HAL_GPIO_Init+0x2e8>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_GPIO_Init+0x300>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002906:	4a2e      	ldr	r2, [pc, #184]	; (80029c0 <HAL_GPIO_Init+0x300>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800290c:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <HAL_GPIO_Init+0x300>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002930:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <HAL_GPIO_Init+0x300>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_GPIO_Init+0x300>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295a:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_GPIO_Init+0x300>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_GPIO_Init+0x300>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_GPIO_Init+0x300>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3301      	adds	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b0f      	cmp	r3, #15
 8002994:	f67f aea2 	bls.w	80026dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002998:	bf00      	nop
 800299a:	3724      	adds	r7, #36	; 0x24
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e0bb      	b.n	8002b58 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e0:	2201      	movs	r2, #1
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	f040 80ab 	bne.w	8002b52 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80029fc:	4a5b      	ldr	r2, [pc, #364]	; (8002b6c <HAL_GPIO_DeInit+0x1a8>)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	3302      	adds	r3, #2
 8002a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a08:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a53      	ldr	r2, [pc, #332]	; (8002b70 <HAL_GPIO_DeInit+0x1ac>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d019      	beq.n	8002a5a <HAL_GPIO_DeInit+0x96>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_GPIO_DeInit+0x1b0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_DeInit+0x92>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a51      	ldr	r2, [pc, #324]	; (8002b78 <HAL_GPIO_DeInit+0x1b4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_GPIO_DeInit+0x8e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a50      	ldr	r2, [pc, #320]	; (8002b7c <HAL_GPIO_DeInit+0x1b8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_DeInit+0x8a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4f      	ldr	r2, [pc, #316]	; (8002b80 <HAL_GPIO_DeInit+0x1bc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_DeInit+0x86>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_DeInit+0x98>
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_DeInit+0x98>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_DeInit+0x98>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_DeInit+0x98>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_DeInit+0x98>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d132      	bne.n	8002ad2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a6c:	4b45      	ldr	r3, [pc, #276]	; (8002b84 <HAL_GPIO_DeInit+0x1c0>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	4943      	ldr	r1, [pc, #268]	; (8002b84 <HAL_GPIO_DeInit+0x1c0>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002a7a:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <HAL_GPIO_DeInit+0x1c0>)
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4940      	ldr	r1, [pc, #256]	; (8002b84 <HAL_GPIO_DeInit+0x1c0>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a88:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <HAL_GPIO_DeInit+0x1c0>)
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	493c      	ldr	r1, [pc, #240]	; (8002b84 <HAL_GPIO_DeInit+0x1c0>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_GPIO_DeInit+0x1c0>)
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	4939      	ldr	r1, [pc, #228]	; (8002b84 <HAL_GPIO_DeInit+0x1c0>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ab4:	4a2d      	ldr	r2, [pc, #180]	; (8002b6c <HAL_GPIO_DeInit+0x1a8>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	4829      	ldr	r0, [pc, #164]	; (8002b6c <HAL_GPIO_DeInit+0x1a8>)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	400a      	ands	r2, r1
 8002acc:	3302      	adds	r3, #2
 8002ace:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2103      	movs	r1, #3
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	08da      	lsrs	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3208      	adds	r2, #8
 8002af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	08d2      	lsrs	r2, r2, #3
 8002b08:	4019      	ands	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3208      	adds	r2, #8
 8002b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2103      	movs	r1, #3
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	401a      	ands	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2103      	movs	r1, #3
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3301      	adds	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	f67f af40 	bls.w	80029e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002b60:	bf00      	nop
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40013800 	.word	0x40013800
 8002b70:	40020000 	.word	0x40020000
 8002b74:	40020400 	.word	0x40020400
 8002b78:	40020800 	.word	0x40020800
 8002b7c:	40020c00 	.word	0x40020c00
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40013c00 	.word	0x40013c00

08002b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	e001      	b.n	8002baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd4:	e003      	b.n	8002bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	887b      	ldrh	r3, [r7, #2]
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d104      	bne.n	8002c0e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	041a      	lsls	r2, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	619a      	str	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e11f      	b.n	8002e72 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fcae 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c84:	f001 fbea 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 8002c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a7b      	ldr	r2, [pc, #492]	; (8002e7c <HAL_I2C_Init+0x25c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d807      	bhi.n	8002ca4 <HAL_I2C_Init+0x84>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a7a      	ldr	r2, [pc, #488]	; (8002e80 <HAL_I2C_Init+0x260>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bf94      	ite	ls
 8002c9c:	2301      	movls	r3, #1
 8002c9e:	2300      	movhi	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	e006      	b.n	8002cb2 <HAL_I2C_Init+0x92>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a77      	ldr	r2, [pc, #476]	; (8002e84 <HAL_I2C_Init+0x264>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0db      	b.n	8002e72 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a72      	ldr	r2, [pc, #456]	; (8002e88 <HAL_I2C_Init+0x268>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0c9b      	lsrs	r3, r3, #18
 8002cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a64      	ldr	r2, [pc, #400]	; (8002e7c <HAL_I2C_Init+0x25c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d802      	bhi.n	8002cf4 <HAL_I2C_Init+0xd4>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	e009      	b.n	8002d08 <HAL_I2C_Init+0xe8>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	4a63      	ldr	r2, [pc, #396]	; (8002e8c <HAL_I2C_Init+0x26c>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	3301      	adds	r3, #1
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4956      	ldr	r1, [pc, #344]	; (8002e7c <HAL_I2C_Init+0x25c>)
 8002d24:	428b      	cmp	r3, r1
 8002d26:	d80d      	bhi.n	8002d44 <HAL_I2C_Init+0x124>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e59      	subs	r1, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	bf38      	it	cc
 8002d40:	2304      	movcc	r3, #4
 8002d42:	e04f      	b.n	8002de4 <HAL_I2C_Init+0x1c4>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d111      	bne.n	8002d70 <HAL_I2C_Init+0x150>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e58      	subs	r0, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	440b      	add	r3, r1
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e012      	b.n	8002d96 <HAL_I2C_Init+0x176>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	0099      	lsls	r1, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Init+0x17e>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e022      	b.n	8002de4 <HAL_I2C_Init+0x1c4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10e      	bne.n	8002dc4 <HAL_I2C_Init+0x1a4>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1e58      	subs	r0, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	440b      	add	r3, r1
 8002db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc2:	e00f      	b.n	8002de4 <HAL_I2C_Init+0x1c4>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e58      	subs	r0, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	0099      	lsls	r1, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	6809      	ldr	r1, [r1, #0]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6911      	ldr	r1, [r2, #16]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68d2      	ldr	r2, [r2, #12]
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	000186a0 	.word	0x000186a0
 8002e80:	001e847f 	.word	0x001e847f
 8002e84:	003d08ff 	.word	0x003d08ff
 8002e88:	431bde83 	.word	0x431bde83
 8002e8c:	10624dd3 	.word	0x10624dd3

08002e90 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e021      	b.n	8002ee6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2224      	movs	r2, #36	; 0x24
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe fbbc 	bl	8001638 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	817b      	strh	r3, [r7, #10]
 8002f02:	460b      	mov	r3, r1
 8002f04:	813b      	strh	r3, [r7, #8]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f0a:	f7ff fae1 	bl	80024d0 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	f040 80d9 	bne.w	80030d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2319      	movs	r3, #25
 8002f24:	2201      	movs	r2, #1
 8002f26:	496d      	ldr	r1, [pc, #436]	; (80030dc <HAL_I2C_Mem_Write+0x1ec>)
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fc7f 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
 8002f36:	e0cc      	b.n	80030d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Mem_Write+0x56>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e0c5      	b.n	80030d2 <HAL_I2C_Mem_Write+0x1e2>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d007      	beq.n	8002f6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2221      	movs	r2, #33	; 0x21
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2240      	movs	r2, #64	; 0x40
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a3a      	ldr	r2, [r7, #32]
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a4d      	ldr	r2, [pc, #308]	; (80030e0 <HAL_I2C_Mem_Write+0x1f0>)
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fae:	88f8      	ldrh	r0, [r7, #6]
 8002fb0:	893a      	ldrh	r2, [r7, #8]
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fab6 	bl	8003530 <I2C_RequestMemoryWrite>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d052      	beq.n	8003070 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e081      	b.n	80030d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fd00 	bl	80039d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00d      	beq.n	8002ffa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d107      	bne.n	8002ff6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06b      	b.n	80030d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b04      	cmp	r3, #4
 8003036:	d11b      	bne.n	8003070 <HAL_I2C_Mem_Write+0x180>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d017      	beq.n	8003070 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1aa      	bne.n	8002fce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fcec 	bl	8003a5a <I2C_WaitOnBTFFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	2b04      	cmp	r3, #4
 800308e:	d107      	bne.n	80030a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e016      	b.n	80030d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	00100002 	.word	0x00100002
 80030e0:	ffff0000 	.word	0xffff0000

080030e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08c      	sub	sp, #48	; 0x30
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	817b      	strh	r3, [r7, #10]
 80030f6:	460b      	mov	r3, r1
 80030f8:	813b      	strh	r3, [r7, #8]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030fe:	f7ff f9e7 	bl	80024d0 <HAL_GetTick>
 8003102:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b20      	cmp	r3, #32
 800310e:	f040 8208 	bne.w	8003522 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2319      	movs	r3, #25
 8003118:	2201      	movs	r2, #1
 800311a:	497b      	ldr	r1, [pc, #492]	; (8003308 <HAL_I2C_Mem_Read+0x224>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fb85 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
 800312a:	e1fb      	b.n	8003524 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_I2C_Mem_Read+0x56>
 8003136:	2302      	movs	r3, #2
 8003138:	e1f4      	b.n	8003524 <HAL_I2C_Mem_Read+0x440>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d007      	beq.n	8003160 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2222      	movs	r2, #34	; 0x22
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2240      	movs	r2, #64	; 0x40
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a5b      	ldr	r2, [pc, #364]	; (800330c <HAL_I2C_Mem_Read+0x228>)
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031a2:	88f8      	ldrh	r0, [r7, #6]
 80031a4:	893a      	ldrh	r2, [r7, #8]
 80031a6:	8979      	ldrh	r1, [r7, #10]
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4603      	mov	r3, r0
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fa52 	bl	800365c <I2C_RequestMemoryRead>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e1b0      	b.n	8003524 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d113      	bne.n	80031f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	623b      	str	r3, [r7, #32]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	623b      	str	r3, [r7, #32]
 80031de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e184      	b.n	80034fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d11b      	bne.n	8003232 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e164      	b.n	80034fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003236:	2b02      	cmp	r3, #2
 8003238:	d11b      	bne.n	8003272 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003248:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	e144      	b.n	80034fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003288:	e138      	b.n	80034fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	2b03      	cmp	r3, #3
 8003290:	f200 80f1 	bhi.w	8003476 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	2b01      	cmp	r3, #1
 800329a:	d123      	bne.n	80032e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fc1b 	bl	8003adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e139      	b.n	8003524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e2:	e10b      	b.n	80034fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d14e      	bne.n	800338a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	2200      	movs	r2, #0
 80032f4:	4906      	ldr	r1, [pc, #24]	; (8003310 <HAL_I2C_Mem_Read+0x22c>)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa98 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e10e      	b.n	8003524 <HAL_I2C_Mem_Read+0x440>
 8003306:	bf00      	nop
 8003308:	00100002 	.word	0x00100002
 800330c:	ffff0000 	.word	0xffff0000
 8003310:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003388:	e0b8      	b.n	80034fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2200      	movs	r2, #0
 8003392:	4966      	ldr	r1, [pc, #408]	; (800352c <HAL_I2C_Mem_Read+0x448>)
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fa49 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0bf      	b.n	8003524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	2200      	movs	r2, #0
 80033ee:	494f      	ldr	r1, [pc, #316]	; (800352c <HAL_I2C_Mem_Read+0x448>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fa1b 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e091      	b.n	8003524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003474:	e042      	b.n	80034fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fb2e 	bl	8003adc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e04c      	b.n	8003524 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d118      	bne.n	80034fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	f47f aec2 	bne.w	800328a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3728      	adds	r7, #40	; 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	00010004 	.word	0x00010004

08003530 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	461a      	mov	r2, r3
 800353e:	4603      	mov	r3, r0
 8003540:	817b      	strh	r3, [r7, #10]
 8003542:	460b      	mov	r3, r1
 8003544:	813b      	strh	r3, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003558:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	2200      	movs	r2, #0
 8003562:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f960 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00d      	beq.n	800358e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003580:	d103      	bne.n	800358a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e05f      	b.n	800364e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800358e:	897b      	ldrh	r3, [r7, #10]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800359c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	6a3a      	ldr	r2, [r7, #32]
 80035a2:	492d      	ldr	r1, [pc, #180]	; (8003658 <I2C_RequestMemoryWrite+0x128>)
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f998 	bl	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e04c      	b.n	800364e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	6a39      	ldr	r1, [r7, #32]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fa02 	bl	80039d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00d      	beq.n	80035f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d107      	bne.n	80035f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e02b      	b.n	800364e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035fc:	893b      	ldrh	r3, [r7, #8]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	611a      	str	r2, [r3, #16]
 8003606:	e021      	b.n	800364c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003608:	893b      	ldrh	r3, [r7, #8]
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	b29b      	uxth	r3, r3
 800360e:	b2da      	uxtb	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	6a39      	ldr	r1, [r7, #32]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f9dc 	bl	80039d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b04      	cmp	r3, #4
 800362c:	d107      	bne.n	800363e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e005      	b.n	800364e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003642:	893b      	ldrh	r3, [r7, #8]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	00010002 	.word	0x00010002

0800365c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	817b      	strh	r3, [r7, #10]
 800366e:	460b      	mov	r3, r1
 8003670:	813b      	strh	r3, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003684:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003694:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	2200      	movs	r2, #0
 800369e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f8c2 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00d      	beq.n	80036ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036bc:	d103      	bne.n	80036c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0aa      	b.n	8003820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	4952      	ldr	r1, [pc, #328]	; (8003828 <I2C_RequestMemoryRead+0x1cc>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f8fa 	bl	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e097      	b.n	8003820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003708:	6a39      	ldr	r1, [r7, #32]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f964 	bl	80039d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b04      	cmp	r3, #4
 800371c:	d107      	bne.n	800372e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e076      	b.n	8003820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003738:	893b      	ldrh	r3, [r7, #8]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]
 8003742:	e021      	b.n	8003788 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003744:	893b      	ldrh	r3, [r7, #8]
 8003746:	0a1b      	lsrs	r3, r3, #8
 8003748:	b29b      	uxth	r3, r3
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	6a39      	ldr	r1, [r7, #32]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f93e 	bl	80039d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b04      	cmp	r3, #4
 8003768:	d107      	bne.n	800377a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e050      	b.n	8003820 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800377e:	893b      	ldrh	r3, [r7, #8]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378a:	6a39      	ldr	r1, [r7, #32]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f923 	bl	80039d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	2b04      	cmp	r3, #4
 800379e:	d107      	bne.n	80037b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e035      	b.n	8003820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f82b 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ea:	d103      	bne.n	80037f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e013      	b.n	8003820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037f8:	897b      	ldrh	r3, [r7, #10]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	6a3a      	ldr	r2, [r7, #32]
 800380c:	4906      	ldr	r1, [pc, #24]	; (8003828 <I2C_RequestMemoryRead+0x1cc>)
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f863 	bl	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	00010002 	.word	0x00010002

0800382c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800383c:	e025      	b.n	800388a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d021      	beq.n	800388a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7fe fe43 	bl	80024d0 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d116      	bne.n	800388a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f043 0220 	orr.w	r2, r3, #32
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e023      	b.n	80038d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d10d      	bne.n	80038b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4013      	ands	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	e00c      	b.n	80038ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4013      	ands	r3, r2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d0b6      	beq.n	800383e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038e8:	e051      	b.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f8:	d123      	bne.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003908:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003912:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f043 0204 	orr.w	r2, r3, #4
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e046      	b.n	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d021      	beq.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fe fdc1 	bl	80024d0 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e020      	b.n	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10c      	bne.n	80039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4013      	ands	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf14      	ite	ne
 80039aa:	2301      	movne	r3, #1
 80039ac:	2300      	moveq	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e00b      	b.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d18d      	bne.n	80038ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e4:	e02d      	b.n	8003a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f8ce 	bl	8003b88 <I2C_IsAcknowledgeFailed>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e02d      	b.n	8003a52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fc:	d021      	beq.n	8003a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fe:	f7fe fd67 	bl	80024d0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d116      	bne.n	8003a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e007      	b.n	8003a52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d1ca      	bne.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a66:	e02d      	b.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f88d 	bl	8003b88 <I2C_IsAcknowledgeFailed>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e02d      	b.n	8003ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d021      	beq.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a80:	f7fe fd26 	bl	80024d0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d302      	bcc.n	8003a96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d116      	bne.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f043 0220 	orr.w	r2, r3, #32
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e007      	b.n	8003ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d1ca      	bne.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae8:	e042      	b.n	8003b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d119      	bne.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0210 	mvn.w	r2, #16
 8003b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e029      	b.n	8003b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2c:	f7fe fcd0 	bl	80024d0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d302      	bcc.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d116      	bne.n	8003b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e007      	b.n	8003b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b40      	cmp	r3, #64	; 0x40
 8003b7c:	d1b5      	bne.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9e:	d11b      	bne.n	8003bd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e25b      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d075      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c06:	4ba3      	ldr	r3, [pc, #652]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d00c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4ba0      	ldr	r3, [pc, #640]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d112      	bne.n	8003c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1e:	4b9d      	ldr	r3, [pc, #628]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c2a:	d10b      	bne.n	8003c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	4b99      	ldr	r3, [pc, #612]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d05b      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x108>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d157      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e236      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d106      	bne.n	8003c5c <HAL_RCC_OscConfig+0x74>
 8003c4e:	4b91      	ldr	r3, [pc, #580]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a90      	ldr	r2, [pc, #576]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e01d      	b.n	8003c98 <HAL_RCC_OscConfig+0xb0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x98>
 8003c66:	4b8b      	ldr	r3, [pc, #556]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a8a      	ldr	r2, [pc, #552]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	4b88      	ldr	r3, [pc, #544]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a87      	ldr	r2, [pc, #540]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0xb0>
 8003c80:	4b84      	ldr	r3, [pc, #528]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a83      	ldr	r2, [pc, #524]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4b81      	ldr	r3, [pc, #516]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a80      	ldr	r2, [pc, #512]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fc16 	bl	80024d0 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fe fc12 	bl	80024d0 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1fb      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0xc0>
 8003cc6:	e014      	b.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fc02 	bl	80024d0 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fe fbfe 	bl	80024d0 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e1e7      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce2:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xe8>
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d063      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfe:	4b65      	ldr	r3, [pc, #404]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b62      	ldr	r3, [pc, #392]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d11c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b5f      	ldr	r3, [pc, #380]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d116      	bne.n	8003d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d22:	4b5c      	ldr	r3, [pc, #368]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_RCC_OscConfig+0x152>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d001      	beq.n	8003d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e1bb      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3a:	4b56      	ldr	r3, [pc, #344]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4952      	ldr	r1, [pc, #328]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4e:	e03a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d58:	4b4f      	ldr	r3, [pc, #316]	; (8003e98 <HAL_RCC_OscConfig+0x2b0>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fe fbb7 	bl	80024d0 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d66:	f7fe fbb3 	bl	80024d0 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e19c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d78:	4b46      	ldr	r3, [pc, #280]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d84:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4940      	ldr	r1, [pc, #256]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]
 8003d98:	e015      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <HAL_RCC_OscConfig+0x2b0>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fe fb96 	bl	80024d0 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da8:	f7fe fb92 	bl	80024d0 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e17b      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d030      	beq.n	8003e34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dda:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <HAL_RCC_OscConfig+0x2b4>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fe fb76 	bl	80024d0 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de8:	f7fe fb72 	bl	80024d0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e15b      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfa:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x200>
 8003e06:	e015      	b.n	8003e34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_RCC_OscConfig+0x2b4>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fe fb5f 	bl	80024d0 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e16:	f7fe fb5b 	bl	80024d0 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e144      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a0 	beq.w	8003f82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6413      	str	r3, [r2, #64]	; 0x40
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_OscConfig+0x2b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d121      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7e:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_RCC_OscConfig+0x2b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a07      	ldr	r2, [pc, #28]	; (8003ea0 <HAL_RCC_OscConfig+0x2b8>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8a:	f7fe fb21 	bl	80024d0 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	e011      	b.n	8003eb6 <HAL_RCC_OscConfig+0x2ce>
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	42470000 	.word	0x42470000
 8003e9c:	42470e80 	.word	0x42470e80
 8003ea0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea4:	f7fe fb14 	bl	80024d0 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0fd      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb6:	4b81      	ldr	r3, [pc, #516]	; (80040bc <HAL_RCC_OscConfig+0x4d4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d106      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2f0>
 8003eca:	4b7d      	ldr	r3, [pc, #500]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	4a7c      	ldr	r2, [pc, #496]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed6:	e01c      	b.n	8003f12 <HAL_RCC_OscConfig+0x32a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	d10c      	bne.n	8003efa <HAL_RCC_OscConfig+0x312>
 8003ee0:	4b77      	ldr	r3, [pc, #476]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	4a76      	ldr	r2, [pc, #472]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	6713      	str	r3, [r2, #112]	; 0x70
 8003eec:	4b74      	ldr	r3, [pc, #464]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	4a73      	ldr	r2, [pc, #460]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCC_OscConfig+0x32a>
 8003efa:	4b71      	ldr	r3, [pc, #452]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a70      	ldr	r2, [pc, #448]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	4b6e      	ldr	r3, [pc, #440]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a6d      	ldr	r2, [pc, #436]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d015      	beq.n	8003f46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fe fad9 	bl	80024d0 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fe fad5 	bl	80024d0 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0bc      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	4b61      	ldr	r3, [pc, #388]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ee      	beq.n	8003f22 <HAL_RCC_OscConfig+0x33a>
 8003f44:	e014      	b.n	8003f70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f46:	f7fe fac3 	bl	80024d0 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fe fabf 	bl	80024d0 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0a6      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	4b56      	ldr	r3, [pc, #344]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ee      	bne.n	8003f4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f76:	4b52      	ldr	r3, [pc, #328]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a51      	ldr	r2, [pc, #324]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8092 	beq.w	80040b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f8c:	4b4c      	ldr	r3, [pc, #304]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d05c      	beq.n	8004052 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d141      	bne.n	8004024 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa0:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <HAL_RCC_OscConfig+0x4dc>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fe fa93 	bl	80024d0 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fae:	f7fe fa8f 	bl	80024d0 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e078      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc0:	4b3f      	ldr	r3, [pc, #252]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	019b      	lsls	r3, r3, #6
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	041b      	lsls	r3, r3, #16
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	061b      	lsls	r3, r3, #24
 8003ff0:	4933      	ldr	r1, [pc, #204]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff6:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <HAL_RCC_OscConfig+0x4dc>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fa68 	bl	80024d0 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004004:	f7fe fa64 	bl	80024d0 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e04d      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x41c>
 8004022:	e045      	b.n	80040b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b27      	ldr	r3, [pc, #156]	; (80040c4 <HAL_RCC_OscConfig+0x4dc>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402a:	f7fe fa51 	bl	80024d0 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004032:	f7fe fa4d 	bl	80024d0 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e036      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004044:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x44a>
 8004050:	e02e      	b.n	80040b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e029      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <HAL_RCC_OscConfig+0x4d8>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	429a      	cmp	r2, r3
 8004070:	d11c      	bne.n	80040ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d115      	bne.n	80040ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004086:	4013      	ands	r3, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800408c:	4293      	cmp	r3, r2
 800408e:	d10d      	bne.n	80040ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d106      	bne.n	80040ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40007000 	.word	0x40007000
 80040c0:	40023800 	.word	0x40023800
 80040c4:	42470060 	.word	0x42470060

080040c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0cc      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040dc:	4b68      	ldr	r3, [pc, #416]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d90c      	bls.n	8004104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0b8      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a58      	ldr	r2, [pc, #352]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4a52      	ldr	r2, [pc, #328]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	494d      	ldr	r1, [pc, #308]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d044      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d119      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e07f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d003      	beq.n	8004186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004182:	2b03      	cmp	r3, #3
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e06f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e067      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a6:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f023 0203 	bic.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4934      	ldr	r1, [pc, #208]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b8:	f7fe f98a 	bl	80024d0 <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c0:	f7fe f986 	bl	80024d0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e04f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 020c 	and.w	r2, r3, #12
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d1eb      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d20c      	bcs.n	8004210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e032      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4916      	ldr	r1, [pc, #88]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	490e      	ldr	r1, [pc, #56]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800424e:	f000 f821 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004252:	4601      	mov	r1, r0
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	5cd3      	ldrb	r3, [r2, r3]
 8004262:	fa21 f303 	lsr.w	r3, r1, r3
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1c8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe f8ea 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023c00 	.word	0x40023c00
 8004284:	40023800 	.word	0x40023800
 8004288:	08008924 	.word	0x08008924
 800428c:	20000004 	.word	0x20000004
 8004290:	20000008 	.word	0x20000008

08004294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	2300      	movs	r3, #0
 80042a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042aa:	4b63      	ldr	r3, [pc, #396]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d007      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x32>
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d008      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x38>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 80b4 	bne.w	8004428 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b5e      	ldr	r3, [pc, #376]	; (800443c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042c2:	60bb      	str	r3, [r7, #8]
       break;
 80042c4:	e0b3      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042c6:	4b5e      	ldr	r3, [pc, #376]	; (8004440 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042c8:	60bb      	str	r3, [r7, #8]
      break;
 80042ca:	e0b0      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042cc:	4b5a      	ldr	r3, [pc, #360]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d6:	4b58      	ldr	r3, [pc, #352]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d04a      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e2:	4b55      	ldr	r3, [pc, #340]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	f04f 0400 	mov.w	r4, #0
 80042ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	ea03 0501 	and.w	r5, r3, r1
 80042f8:	ea04 0602 	and.w	r6, r4, r2
 80042fc:	4629      	mov	r1, r5
 80042fe:	4632      	mov	r2, r6
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	f04f 0400 	mov.w	r4, #0
 8004308:	0154      	lsls	r4, r2, #5
 800430a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800430e:	014b      	lsls	r3, r1, #5
 8004310:	4619      	mov	r1, r3
 8004312:	4622      	mov	r2, r4
 8004314:	1b49      	subs	r1, r1, r5
 8004316:	eb62 0206 	sbc.w	r2, r2, r6
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	f04f 0400 	mov.w	r4, #0
 8004322:	0194      	lsls	r4, r2, #6
 8004324:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004328:	018b      	lsls	r3, r1, #6
 800432a:	1a5b      	subs	r3, r3, r1
 800432c:	eb64 0402 	sbc.w	r4, r4, r2
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	00e2      	lsls	r2, r4, #3
 800433a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800433e:	00d9      	lsls	r1, r3, #3
 8004340:	460b      	mov	r3, r1
 8004342:	4614      	mov	r4, r2
 8004344:	195b      	adds	r3, r3, r5
 8004346:	eb44 0406 	adc.w	r4, r4, r6
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	0262      	lsls	r2, r4, #9
 8004354:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004358:	0259      	lsls	r1, r3, #9
 800435a:	460b      	mov	r3, r1
 800435c:	4614      	mov	r4, r2
 800435e:	4618      	mov	r0, r3
 8004360:	4621      	mov	r1, r4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	461a      	mov	r2, r3
 800436a:	4623      	mov	r3, r4
 800436c:	f7fc fc74 	bl	8000c58 <__aeabi_uldivmod>
 8004370:	4603      	mov	r3, r0
 8004372:	460c      	mov	r4, r1
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e049      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004378:	4b2f      	ldr	r3, [pc, #188]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	099b      	lsrs	r3, r3, #6
 800437e:	f04f 0400 	mov.w	r4, #0
 8004382:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	ea03 0501 	and.w	r5, r3, r1
 800438e:	ea04 0602 	and.w	r6, r4, r2
 8004392:	4629      	mov	r1, r5
 8004394:	4632      	mov	r2, r6
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	f04f 0400 	mov.w	r4, #0
 800439e:	0154      	lsls	r4, r2, #5
 80043a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043a4:	014b      	lsls	r3, r1, #5
 80043a6:	4619      	mov	r1, r3
 80043a8:	4622      	mov	r2, r4
 80043aa:	1b49      	subs	r1, r1, r5
 80043ac:	eb62 0206 	sbc.w	r2, r2, r6
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	f04f 0400 	mov.w	r4, #0
 80043b8:	0194      	lsls	r4, r2, #6
 80043ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043be:	018b      	lsls	r3, r1, #6
 80043c0:	1a5b      	subs	r3, r3, r1
 80043c2:	eb64 0402 	sbc.w	r4, r4, r2
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	00e2      	lsls	r2, r4, #3
 80043d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043d4:	00d9      	lsls	r1, r3, #3
 80043d6:	460b      	mov	r3, r1
 80043d8:	4614      	mov	r4, r2
 80043da:	195b      	adds	r3, r3, r5
 80043dc:	eb44 0406 	adc.w	r4, r4, r6
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	02a2      	lsls	r2, r4, #10
 80043ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043ee:	0299      	lsls	r1, r3, #10
 80043f0:	460b      	mov	r3, r1
 80043f2:	4614      	mov	r4, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	4621      	mov	r1, r4
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f04f 0400 	mov.w	r4, #0
 80043fe:	461a      	mov	r2, r3
 8004400:	4623      	mov	r3, r4
 8004402:	f7fc fc29 	bl	8000c58 <__aeabi_uldivmod>
 8004406:	4603      	mov	r3, r0
 8004408:	460c      	mov	r4, r1
 800440a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	3301      	adds	r3, #1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	60bb      	str	r3, [r7, #8]
      break;
 8004426:	e002      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004428:	4b04      	ldr	r3, [pc, #16]	; (800443c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800442a:	60bb      	str	r3, [r7, #8]
      break;
 800442c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442e:	68bb      	ldr	r3, [r7, #8]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004438:	40023800 	.word	0x40023800
 800443c:	00f42400 	.word	0x00f42400
 8004440:	007a1200 	.word	0x007a1200

08004444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_RCC_GetHCLKFreq+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000004 	.word	0x20000004

0800445c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004460:	f7ff fff0 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8004464:	4601      	mov	r1, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0a9b      	lsrs	r3, r3, #10
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4a03      	ldr	r2, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004472:	5cd3      	ldrb	r3, [r2, r3]
 8004474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	08008934 	.word	0x08008934

08004484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004488:	f7ff ffdc 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 800448c:	4601      	mov	r1, r0
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	0b5b      	lsrs	r3, r3, #13
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4a03      	ldr	r2, [pc, #12]	; (80044a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800449a:	5cd3      	ldrb	r3, [r2, r3]
 800449c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	08008934 	.word	0x08008934

080044ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e01d      	b.n	80044fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fd fe9e 	bl	8002214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f000 fab8 	bl	8004a60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e01d      	b.n	8004550 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f815 	bl	8004558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f000 fa8d 	bl	8004a60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2201      	movs	r2, #1
 800457c:	6839      	ldr	r1, [r7, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fd14 	bl	8004fac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a10      	ldr	r2, [pc, #64]	; (80045cc <HAL_TIM_PWM_Start+0x60>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d107      	bne.n	800459e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b06      	cmp	r3, #6
 80045ae:	d007      	beq.n	80045c0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000

080045d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e083      	b.n	80046ec <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7fd fdc5 	bl	8002188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2202      	movs	r2, #2
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004614:	f023 0307 	bic.w	r3, r3, #7
 8004618:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 fa1b 	bl	8004a60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	4313      	orrs	r3, r2
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004670:	f023 030c 	bic.w	r3, r3, #12
 8004674:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800467c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	4313      	orrs	r3, r2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	011a      	lsls	r2, r3, #4
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	031b      	lsls	r3, r3, #12
 80046a0:	4313      	orrs	r3, r2
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	4313      	orrs	r3, r2
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_TIM_Encoder_Start+0x16>
 8004704:	2b04      	cmp	r3, #4
 8004706:	d008      	beq.n	800471a <HAL_TIM_Encoder_Start+0x26>
 8004708:	e00f      	b.n	800472a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2201      	movs	r2, #1
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fc4a 	bl	8004fac <TIM_CCxChannelCmd>
      break;
 8004718:	e016      	b.n	8004748 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2201      	movs	r2, #1
 8004720:	2104      	movs	r1, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fc42 	bl	8004fac <TIM_CCxChannelCmd>
      break;
 8004728:	e00e      	b.n	8004748 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2201      	movs	r2, #1
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fc3a 	bl	8004fac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	2104      	movs	r1, #4
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fc33 	bl	8004fac <TIM_CCxChannelCmd>
      break;
 8004746:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800477a:	2302      	movs	r3, #2
 800477c:	e0b4      	b.n	80048e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b0c      	cmp	r3, #12
 8004792:	f200 809f 	bhi.w	80048d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047d1 	.word	0x080047d1
 80047a0:	080048d5 	.word	0x080048d5
 80047a4:	080048d5 	.word	0x080048d5
 80047a8:	080048d5 	.word	0x080048d5
 80047ac:	08004811 	.word	0x08004811
 80047b0:	080048d5 	.word	0x080048d5
 80047b4:	080048d5 	.word	0x080048d5
 80047b8:	080048d5 	.word	0x080048d5
 80047bc:	08004853 	.word	0x08004853
 80047c0:	080048d5 	.word	0x080048d5
 80047c4:	080048d5 	.word	0x080048d5
 80047c8:	080048d5 	.word	0x080048d5
 80047cc:	08004893 	.word	0x08004893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f9c2 	bl	8004b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0208 	orr.w	r2, r2, #8
 80047ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6999      	ldr	r1, [r3, #24]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	619a      	str	r2, [r3, #24]
      break;
 800480e:	e062      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fa08 	bl	8004c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6999      	ldr	r1, [r3, #24]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	619a      	str	r2, [r3, #24]
      break;
 8004850:	e041      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fa53 	bl	8004d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0208 	orr.w	r2, r2, #8
 800486c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0204 	bic.w	r2, r2, #4
 800487c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	61da      	str	r2, [r3, #28]
      break;
 8004890:	e021      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fa9d 	bl	8004dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69d9      	ldr	r1, [r3, #28]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	021a      	lsls	r2, r3, #8
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	61da      	str	r2, [r3, #28]
      break;
 80048d2:	e000      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80048d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_TIM_ConfigClockSource+0x18>
 8004904:	2302      	movs	r3, #2
 8004906:	e0a6      	b.n	8004a56 <HAL_TIM_ConfigClockSource+0x166>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004926:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800492e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d067      	beq.n	8004a10 <HAL_TIM_ConfigClockSource+0x120>
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d80b      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x6c>
 8004944:	2b10      	cmp	r3, #16
 8004946:	d073      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x140>
 8004948:	2b10      	cmp	r3, #16
 800494a:	d802      	bhi.n	8004952 <HAL_TIM_ConfigClockSource+0x62>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d06f      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004950:	e078      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004952:	2b20      	cmp	r3, #32
 8004954:	d06c      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x140>
 8004956:	2b30      	cmp	r3, #48	; 0x30
 8004958:	d06a      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800495a:	e073      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800495c:	2b70      	cmp	r3, #112	; 0x70
 800495e:	d00d      	beq.n	800497c <HAL_TIM_ConfigClockSource+0x8c>
 8004960:	2b70      	cmp	r3, #112	; 0x70
 8004962:	d804      	bhi.n	800496e <HAL_TIM_ConfigClockSource+0x7e>
 8004964:	2b50      	cmp	r3, #80	; 0x50
 8004966:	d033      	beq.n	80049d0 <HAL_TIM_ConfigClockSource+0xe0>
 8004968:	2b60      	cmp	r3, #96	; 0x60
 800496a:	d041      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800496c:	e06a      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800496e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004972:	d066      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0x152>
 8004974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004978:	d017      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800497a:	e063      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6899      	ldr	r1, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f000 faee 	bl	8004f6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800499e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	609a      	str	r2, [r3, #8]
      break;
 80049a8:	e04c      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f000 fad7 	bl	8004f6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049cc:	609a      	str	r2, [r3, #8]
      break;
 80049ce:	e039      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	461a      	mov	r2, r3
 80049de:	f000 fa4b 	bl	8004e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2150      	movs	r1, #80	; 0x50
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 faa4 	bl	8004f36 <TIM_ITRx_SetConfig>
      break;
 80049ee:	e029      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	461a      	mov	r2, r3
 80049fe:	f000 fa6a 	bl	8004ed6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2160      	movs	r1, #96	; 0x60
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fa94 	bl	8004f36 <TIM_ITRx_SetConfig>
      break;
 8004a0e:	e019      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6859      	ldr	r1, [r3, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f000 fa2b 	bl	8004e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2140      	movs	r1, #64	; 0x40
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fa84 	bl	8004f36 <TIM_ITRx_SetConfig>
      break;
 8004a2e:	e009      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f000 fa7b 	bl	8004f36 <TIM_ITRx_SetConfig>
      break;
 8004a40:	e000      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a34      	ldr	r2, [pc, #208]	; (8004b44 <TIM_Base_SetConfig+0xe4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00f      	beq.n	8004a98 <TIM_Base_SetConfig+0x38>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7e:	d00b      	beq.n	8004a98 <TIM_Base_SetConfig+0x38>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a31      	ldr	r2, [pc, #196]	; (8004b48 <TIM_Base_SetConfig+0xe8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <TIM_Base_SetConfig+0x38>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <TIM_Base_SetConfig+0xec>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_Base_SetConfig+0x38>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a2f      	ldr	r2, [pc, #188]	; (8004b50 <TIM_Base_SetConfig+0xf0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d108      	bne.n	8004aaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <TIM_Base_SetConfig+0xe4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01b      	beq.n	8004aea <TIM_Base_SetConfig+0x8a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab8:	d017      	beq.n	8004aea <TIM_Base_SetConfig+0x8a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a22      	ldr	r2, [pc, #136]	; (8004b48 <TIM_Base_SetConfig+0xe8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <TIM_Base_SetConfig+0x8a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a21      	ldr	r2, [pc, #132]	; (8004b4c <TIM_Base_SetConfig+0xec>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00f      	beq.n	8004aea <TIM_Base_SetConfig+0x8a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a20      	ldr	r2, [pc, #128]	; (8004b50 <TIM_Base_SetConfig+0xf0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00b      	beq.n	8004aea <TIM_Base_SetConfig+0x8a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <TIM_Base_SetConfig+0xf4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <TIM_Base_SetConfig+0x8a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <TIM_Base_SetConfig+0xf8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_Base_SetConfig+0x8a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <TIM_Base_SetConfig+0xfc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d108      	bne.n	8004afc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <TIM_Base_SetConfig+0xe4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d103      	bne.n	8004b30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	615a      	str	r2, [r3, #20]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800

08004b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f023 0201 	bic.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0302 	bic.w	r3, r3, #2
 8004ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <TIM_OC1_SetConfig+0xc8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d10c      	bne.n	8004bd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0308 	bic.w	r3, r3, #8
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f023 0304 	bic.w	r3, r3, #4
 8004bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <TIM_OC1_SetConfig+0xc8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d111      	bne.n	8004c02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40010000 	.word	0x40010000

08004c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f023 0210 	bic.w	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0320 	bic.w	r3, r3, #32
 8004c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <TIM_OC2_SetConfig+0xd4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d10d      	bne.n	8004ca8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a15      	ldr	r2, [pc, #84]	; (8004d00 <TIM_OC2_SetConfig+0xd4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d113      	bne.n	8004cd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000

08004d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <TIM_OC3_SetConfig+0xd0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10d      	bne.n	8004d7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <TIM_OC3_SetConfig+0xd0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d113      	bne.n	8004dae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	621a      	str	r2, [r3, #32]
}
 8004dc8:	bf00      	nop
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40010000 	.word	0x40010000

08004dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	031b      	lsls	r3, r3, #12
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a10      	ldr	r2, [pc, #64]	; (8004e74 <TIM_OC4_SetConfig+0x9c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d109      	bne.n	8004e4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	019b      	lsls	r3, r3, #6
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000

08004e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0201 	bic.w	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f023 030a 	bic.w	r3, r3, #10
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b087      	sub	sp, #28
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f023 0210 	bic.w	r2, r3, #16
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	031b      	lsls	r3, r3, #12
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	621a      	str	r2, [r3, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f043 0307 	orr.w	r3, r3, #7
 8004f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	609a      	str	r2, [r3, #8]
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	021a      	lsls	r2, r3, #8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	609a      	str	r2, [r3, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1a      	ldr	r2, [r3, #32]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	401a      	ands	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1a      	ldr	r2, [r3, #32]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800500c:	2302      	movs	r3, #2
 800500e:	e050      	b.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1c      	ldr	r2, [pc, #112]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d018      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505c:	d013      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00e      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a16      	ldr	r2, [pc, #88]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d009      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a15      	ldr	r2, [pc, #84]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d10c      	bne.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	4313      	orrs	r3, r2
 8005096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40014000 	.word	0x40014000

080050d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e03f      	b.n	8005166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fd f910 	bl	8002320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2224      	movs	r2, #36	; 0x24
 8005104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f90b 	bl	8005334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800512c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695a      	ldr	r2, [r3, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800513c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800514c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b088      	sub	sp, #32
 8005172:	af02      	add	r7, sp, #8
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	4613      	mov	r3, r2
 800517c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b20      	cmp	r3, #32
 800518c:	f040 8083 	bne.w	8005296 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_UART_Transmit+0x2e>
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e07b      	b.n	8005298 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_UART_Transmit+0x40>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e074      	b.n	8005298 <HAL_UART_Transmit+0x12a>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2221      	movs	r2, #33	; 0x21
 80051c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80051c4:	f7fd f984 	bl	80024d0 <HAL_GetTick>
 80051c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80051de:	e042      	b.n	8005266 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f6:	d122      	bne.n	800523e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2200      	movs	r2, #0
 8005200:	2180      	movs	r1, #128	; 0x80
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f84c 	bl	80052a0 <UART_WaitOnFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e042      	b.n	8005298 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005224:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	3302      	adds	r3, #2
 8005232:	60bb      	str	r3, [r7, #8]
 8005234:	e017      	b.n	8005266 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	3301      	adds	r3, #1
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	e013      	b.n	8005266 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2200      	movs	r2, #0
 8005246:	2180      	movs	r1, #128	; 0x80
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f829 	bl	80052a0 <UART_WaitOnFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e01f      	b.n	8005298 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	60ba      	str	r2, [r7, #8]
 800525e:	781a      	ldrb	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1b7      	bne.n	80051e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2200      	movs	r2, #0
 8005278:	2140      	movs	r1, #64	; 0x40
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f810 	bl	80052a0 <UART_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e006      	b.n	8005298 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e000      	b.n	8005298 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005296:	2302      	movs	r3, #2
  }
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	4613      	mov	r3, r2
 80052ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b0:	e02c      	b.n	800530c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d028      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80052c0:	f7fd f906 	bl	80024d0 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d21d      	bcs.n	800530c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e00f      	b.n	800532c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	429a      	cmp	r2, r3
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	429a      	cmp	r2, r3
 8005328:	d0c3      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005376:	f023 030c 	bic.w	r3, r3, #12
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	68f9      	ldr	r1, [r7, #12]
 8005380:	430b      	orrs	r3, r1
 8005382:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a2:	f040 818b 	bne.w	80056bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4ac1      	ldr	r2, [pc, #772]	; (80056b0 <UART_SetConfig+0x37c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d005      	beq.n	80053bc <UART_SetConfig+0x88>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4abf      	ldr	r2, [pc, #764]	; (80056b4 <UART_SetConfig+0x380>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	f040 80bd 	bne.w	8005536 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7ff f862 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 80053c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	461d      	mov	r5, r3
 80053c6:	f04f 0600 	mov.w	r6, #0
 80053ca:	46a8      	mov	r8, r5
 80053cc:	46b1      	mov	r9, r6
 80053ce:	eb18 0308 	adds.w	r3, r8, r8
 80053d2:	eb49 0409 	adc.w	r4, r9, r9
 80053d6:	4698      	mov	r8, r3
 80053d8:	46a1      	mov	r9, r4
 80053da:	eb18 0805 	adds.w	r8, r8, r5
 80053de:	eb49 0906 	adc.w	r9, r9, r6
 80053e2:	f04f 0100 	mov.w	r1, #0
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053f6:	4688      	mov	r8, r1
 80053f8:	4691      	mov	r9, r2
 80053fa:	eb18 0005 	adds.w	r0, r8, r5
 80053fe:	eb49 0106 	adc.w	r1, r9, r6
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	461d      	mov	r5, r3
 8005408:	f04f 0600 	mov.w	r6, #0
 800540c:	196b      	adds	r3, r5, r5
 800540e:	eb46 0406 	adc.w	r4, r6, r6
 8005412:	461a      	mov	r2, r3
 8005414:	4623      	mov	r3, r4
 8005416:	f7fb fc1f 	bl	8000c58 <__aeabi_uldivmod>
 800541a:	4603      	mov	r3, r0
 800541c:	460c      	mov	r4, r1
 800541e:	461a      	mov	r2, r3
 8005420:	4ba5      	ldr	r3, [pc, #660]	; (80056b8 <UART_SetConfig+0x384>)
 8005422:	fba3 2302 	umull	r2, r3, r3, r2
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	461d      	mov	r5, r3
 8005430:	f04f 0600 	mov.w	r6, #0
 8005434:	46a9      	mov	r9, r5
 8005436:	46b2      	mov	sl, r6
 8005438:	eb19 0309 	adds.w	r3, r9, r9
 800543c:	eb4a 040a 	adc.w	r4, sl, sl
 8005440:	4699      	mov	r9, r3
 8005442:	46a2      	mov	sl, r4
 8005444:	eb19 0905 	adds.w	r9, r9, r5
 8005448:	eb4a 0a06 	adc.w	sl, sl, r6
 800544c:	f04f 0100 	mov.w	r1, #0
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005458:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800545c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005460:	4689      	mov	r9, r1
 8005462:	4692      	mov	sl, r2
 8005464:	eb19 0005 	adds.w	r0, r9, r5
 8005468:	eb4a 0106 	adc.w	r1, sl, r6
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	461d      	mov	r5, r3
 8005472:	f04f 0600 	mov.w	r6, #0
 8005476:	196b      	adds	r3, r5, r5
 8005478:	eb46 0406 	adc.w	r4, r6, r6
 800547c:	461a      	mov	r2, r3
 800547e:	4623      	mov	r3, r4
 8005480:	f7fb fbea 	bl	8000c58 <__aeabi_uldivmod>
 8005484:	4603      	mov	r3, r0
 8005486:	460c      	mov	r4, r1
 8005488:	461a      	mov	r2, r3
 800548a:	4b8b      	ldr	r3, [pc, #556]	; (80056b8 <UART_SetConfig+0x384>)
 800548c:	fba3 1302 	umull	r1, r3, r3, r2
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	2164      	movs	r1, #100	; 0x64
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	3332      	adds	r3, #50	; 0x32
 800549e:	4a86      	ldr	r2, [pc, #536]	; (80056b8 <UART_SetConfig+0x384>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054ac:	4498      	add	r8, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	461d      	mov	r5, r3
 80054b2:	f04f 0600 	mov.w	r6, #0
 80054b6:	46a9      	mov	r9, r5
 80054b8:	46b2      	mov	sl, r6
 80054ba:	eb19 0309 	adds.w	r3, r9, r9
 80054be:	eb4a 040a 	adc.w	r4, sl, sl
 80054c2:	4699      	mov	r9, r3
 80054c4:	46a2      	mov	sl, r4
 80054c6:	eb19 0905 	adds.w	r9, r9, r5
 80054ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80054ce:	f04f 0100 	mov.w	r1, #0
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054e2:	4689      	mov	r9, r1
 80054e4:	4692      	mov	sl, r2
 80054e6:	eb19 0005 	adds.w	r0, r9, r5
 80054ea:	eb4a 0106 	adc.w	r1, sl, r6
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	461d      	mov	r5, r3
 80054f4:	f04f 0600 	mov.w	r6, #0
 80054f8:	196b      	adds	r3, r5, r5
 80054fa:	eb46 0406 	adc.w	r4, r6, r6
 80054fe:	461a      	mov	r2, r3
 8005500:	4623      	mov	r3, r4
 8005502:	f7fb fba9 	bl	8000c58 <__aeabi_uldivmod>
 8005506:	4603      	mov	r3, r0
 8005508:	460c      	mov	r4, r1
 800550a:	461a      	mov	r2, r3
 800550c:	4b6a      	ldr	r3, [pc, #424]	; (80056b8 <UART_SetConfig+0x384>)
 800550e:	fba3 1302 	umull	r1, r3, r3, r2
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2164      	movs	r1, #100	; 0x64
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	3332      	adds	r3, #50	; 0x32
 8005520:	4a65      	ldr	r2, [pc, #404]	; (80056b8 <UART_SetConfig+0x384>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	f003 0207 	and.w	r2, r3, #7
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4442      	add	r2, r8
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	e26f      	b.n	8005a16 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005536:	f7fe ff91 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 800553a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	461d      	mov	r5, r3
 8005540:	f04f 0600 	mov.w	r6, #0
 8005544:	46a8      	mov	r8, r5
 8005546:	46b1      	mov	r9, r6
 8005548:	eb18 0308 	adds.w	r3, r8, r8
 800554c:	eb49 0409 	adc.w	r4, r9, r9
 8005550:	4698      	mov	r8, r3
 8005552:	46a1      	mov	r9, r4
 8005554:	eb18 0805 	adds.w	r8, r8, r5
 8005558:	eb49 0906 	adc.w	r9, r9, r6
 800555c:	f04f 0100 	mov.w	r1, #0
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005568:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800556c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005570:	4688      	mov	r8, r1
 8005572:	4691      	mov	r9, r2
 8005574:	eb18 0005 	adds.w	r0, r8, r5
 8005578:	eb49 0106 	adc.w	r1, r9, r6
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	461d      	mov	r5, r3
 8005582:	f04f 0600 	mov.w	r6, #0
 8005586:	196b      	adds	r3, r5, r5
 8005588:	eb46 0406 	adc.w	r4, r6, r6
 800558c:	461a      	mov	r2, r3
 800558e:	4623      	mov	r3, r4
 8005590:	f7fb fb62 	bl	8000c58 <__aeabi_uldivmod>
 8005594:	4603      	mov	r3, r0
 8005596:	460c      	mov	r4, r1
 8005598:	461a      	mov	r2, r3
 800559a:	4b47      	ldr	r3, [pc, #284]	; (80056b8 <UART_SetConfig+0x384>)
 800559c:	fba3 2302 	umull	r2, r3, r3, r2
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	461d      	mov	r5, r3
 80055aa:	f04f 0600 	mov.w	r6, #0
 80055ae:	46a9      	mov	r9, r5
 80055b0:	46b2      	mov	sl, r6
 80055b2:	eb19 0309 	adds.w	r3, r9, r9
 80055b6:	eb4a 040a 	adc.w	r4, sl, sl
 80055ba:	4699      	mov	r9, r3
 80055bc:	46a2      	mov	sl, r4
 80055be:	eb19 0905 	adds.w	r9, r9, r5
 80055c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055da:	4689      	mov	r9, r1
 80055dc:	4692      	mov	sl, r2
 80055de:	eb19 0005 	adds.w	r0, r9, r5
 80055e2:	eb4a 0106 	adc.w	r1, sl, r6
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	461d      	mov	r5, r3
 80055ec:	f04f 0600 	mov.w	r6, #0
 80055f0:	196b      	adds	r3, r5, r5
 80055f2:	eb46 0406 	adc.w	r4, r6, r6
 80055f6:	461a      	mov	r2, r3
 80055f8:	4623      	mov	r3, r4
 80055fa:	f7fb fb2d 	bl	8000c58 <__aeabi_uldivmod>
 80055fe:	4603      	mov	r3, r0
 8005600:	460c      	mov	r4, r1
 8005602:	461a      	mov	r2, r3
 8005604:	4b2c      	ldr	r3, [pc, #176]	; (80056b8 <UART_SetConfig+0x384>)
 8005606:	fba3 1302 	umull	r1, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2164      	movs	r1, #100	; 0x64
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	3332      	adds	r3, #50	; 0x32
 8005618:	4a27      	ldr	r2, [pc, #156]	; (80056b8 <UART_SetConfig+0x384>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005626:	4498      	add	r8, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	461d      	mov	r5, r3
 800562c:	f04f 0600 	mov.w	r6, #0
 8005630:	46a9      	mov	r9, r5
 8005632:	46b2      	mov	sl, r6
 8005634:	eb19 0309 	adds.w	r3, r9, r9
 8005638:	eb4a 040a 	adc.w	r4, sl, sl
 800563c:	4699      	mov	r9, r3
 800563e:	46a2      	mov	sl, r4
 8005640:	eb19 0905 	adds.w	r9, r9, r5
 8005644:	eb4a 0a06 	adc.w	sl, sl, r6
 8005648:	f04f 0100 	mov.w	r1, #0
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005654:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005658:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800565c:	4689      	mov	r9, r1
 800565e:	4692      	mov	sl, r2
 8005660:	eb19 0005 	adds.w	r0, r9, r5
 8005664:	eb4a 0106 	adc.w	r1, sl, r6
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	461d      	mov	r5, r3
 800566e:	f04f 0600 	mov.w	r6, #0
 8005672:	196b      	adds	r3, r5, r5
 8005674:	eb46 0406 	adc.w	r4, r6, r6
 8005678:	461a      	mov	r2, r3
 800567a:	4623      	mov	r3, r4
 800567c:	f7fb faec 	bl	8000c58 <__aeabi_uldivmod>
 8005680:	4603      	mov	r3, r0
 8005682:	460c      	mov	r4, r1
 8005684:	461a      	mov	r2, r3
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <UART_SetConfig+0x384>)
 8005688:	fba3 1302 	umull	r1, r3, r3, r2
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	2164      	movs	r1, #100	; 0x64
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	3332      	adds	r3, #50	; 0x32
 800569a:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <UART_SetConfig+0x384>)
 800569c:	fba2 2303 	umull	r2, r3, r2, r3
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	f003 0207 	and.w	r2, r3, #7
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4442      	add	r2, r8
 80056ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80056ae:	e1b2      	b.n	8005a16 <UART_SetConfig+0x6e2>
 80056b0:	40011000 	.word	0x40011000
 80056b4:	40011400 	.word	0x40011400
 80056b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4ad7      	ldr	r2, [pc, #860]	; (8005a20 <UART_SetConfig+0x6ec>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d005      	beq.n	80056d2 <UART_SetConfig+0x39e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4ad6      	ldr	r2, [pc, #856]	; (8005a24 <UART_SetConfig+0x6f0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	f040 80d1 	bne.w	8005874 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d2:	f7fe fed7 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 80056d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	469a      	mov	sl, r3
 80056dc:	f04f 0b00 	mov.w	fp, #0
 80056e0:	46d0      	mov	r8, sl
 80056e2:	46d9      	mov	r9, fp
 80056e4:	eb18 0308 	adds.w	r3, r8, r8
 80056e8:	eb49 0409 	adc.w	r4, r9, r9
 80056ec:	4698      	mov	r8, r3
 80056ee:	46a1      	mov	r9, r4
 80056f0:	eb18 080a 	adds.w	r8, r8, sl
 80056f4:	eb49 090b 	adc.w	r9, r9, fp
 80056f8:	f04f 0100 	mov.w	r1, #0
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005704:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005708:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800570c:	4688      	mov	r8, r1
 800570e:	4691      	mov	r9, r2
 8005710:	eb1a 0508 	adds.w	r5, sl, r8
 8005714:	eb4b 0609 	adc.w	r6, fp, r9
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4619      	mov	r1, r3
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	f04f 0400 	mov.w	r4, #0
 800572a:	0094      	lsls	r4, r2, #2
 800572c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005730:	008b      	lsls	r3, r1, #2
 8005732:	461a      	mov	r2, r3
 8005734:	4623      	mov	r3, r4
 8005736:	4628      	mov	r0, r5
 8005738:	4631      	mov	r1, r6
 800573a:	f7fb fa8d 	bl	8000c58 <__aeabi_uldivmod>
 800573e:	4603      	mov	r3, r0
 8005740:	460c      	mov	r4, r1
 8005742:	461a      	mov	r2, r3
 8005744:	4bb8      	ldr	r3, [pc, #736]	; (8005a28 <UART_SetConfig+0x6f4>)
 8005746:	fba3 2302 	umull	r2, r3, r3, r2
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	469b      	mov	fp, r3
 8005754:	f04f 0c00 	mov.w	ip, #0
 8005758:	46d9      	mov	r9, fp
 800575a:	46e2      	mov	sl, ip
 800575c:	eb19 0309 	adds.w	r3, r9, r9
 8005760:	eb4a 040a 	adc.w	r4, sl, sl
 8005764:	4699      	mov	r9, r3
 8005766:	46a2      	mov	sl, r4
 8005768:	eb19 090b 	adds.w	r9, r9, fp
 800576c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005770:	f04f 0100 	mov.w	r1, #0
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800577c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005780:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005784:	4689      	mov	r9, r1
 8005786:	4692      	mov	sl, r2
 8005788:	eb1b 0509 	adds.w	r5, fp, r9
 800578c:	eb4c 060a 	adc.w	r6, ip, sl
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4619      	mov	r1, r3
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	f04f 0400 	mov.w	r4, #0
 80057a2:	0094      	lsls	r4, r2, #2
 80057a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057a8:	008b      	lsls	r3, r1, #2
 80057aa:	461a      	mov	r2, r3
 80057ac:	4623      	mov	r3, r4
 80057ae:	4628      	mov	r0, r5
 80057b0:	4631      	mov	r1, r6
 80057b2:	f7fb fa51 	bl	8000c58 <__aeabi_uldivmod>
 80057b6:	4603      	mov	r3, r0
 80057b8:	460c      	mov	r4, r1
 80057ba:	461a      	mov	r2, r3
 80057bc:	4b9a      	ldr	r3, [pc, #616]	; (8005a28 <UART_SetConfig+0x6f4>)
 80057be:	fba3 1302 	umull	r1, r3, r3, r2
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	2164      	movs	r1, #100	; 0x64
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	3332      	adds	r3, #50	; 0x32
 80057d0:	4a95      	ldr	r2, [pc, #596]	; (8005a28 <UART_SetConfig+0x6f4>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057dc:	4498      	add	r8, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	469b      	mov	fp, r3
 80057e2:	f04f 0c00 	mov.w	ip, #0
 80057e6:	46d9      	mov	r9, fp
 80057e8:	46e2      	mov	sl, ip
 80057ea:	eb19 0309 	adds.w	r3, r9, r9
 80057ee:	eb4a 040a 	adc.w	r4, sl, sl
 80057f2:	4699      	mov	r9, r3
 80057f4:	46a2      	mov	sl, r4
 80057f6:	eb19 090b 	adds.w	r9, r9, fp
 80057fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057fe:	f04f 0100 	mov.w	r1, #0
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800580a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800580e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005812:	4689      	mov	r9, r1
 8005814:	4692      	mov	sl, r2
 8005816:	eb1b 0509 	adds.w	r5, fp, r9
 800581a:	eb4c 060a 	adc.w	r6, ip, sl
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4619      	mov	r1, r3
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	f04f 0400 	mov.w	r4, #0
 8005830:	0094      	lsls	r4, r2, #2
 8005832:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005836:	008b      	lsls	r3, r1, #2
 8005838:	461a      	mov	r2, r3
 800583a:	4623      	mov	r3, r4
 800583c:	4628      	mov	r0, r5
 800583e:	4631      	mov	r1, r6
 8005840:	f7fb fa0a 	bl	8000c58 <__aeabi_uldivmod>
 8005844:	4603      	mov	r3, r0
 8005846:	460c      	mov	r4, r1
 8005848:	461a      	mov	r2, r3
 800584a:	4b77      	ldr	r3, [pc, #476]	; (8005a28 <UART_SetConfig+0x6f4>)
 800584c:	fba3 1302 	umull	r1, r3, r3, r2
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	2164      	movs	r1, #100	; 0x64
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	3332      	adds	r3, #50	; 0x32
 800585e:	4a72      	ldr	r2, [pc, #456]	; (8005a28 <UART_SetConfig+0x6f4>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	f003 020f 	and.w	r2, r3, #15
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4442      	add	r2, r8
 8005870:	609a      	str	r2, [r3, #8]
 8005872:	e0d0      	b.n	8005a16 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005874:	f7fe fdf2 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 8005878:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	469a      	mov	sl, r3
 800587e:	f04f 0b00 	mov.w	fp, #0
 8005882:	46d0      	mov	r8, sl
 8005884:	46d9      	mov	r9, fp
 8005886:	eb18 0308 	adds.w	r3, r8, r8
 800588a:	eb49 0409 	adc.w	r4, r9, r9
 800588e:	4698      	mov	r8, r3
 8005890:	46a1      	mov	r9, r4
 8005892:	eb18 080a 	adds.w	r8, r8, sl
 8005896:	eb49 090b 	adc.w	r9, r9, fp
 800589a:	f04f 0100 	mov.w	r1, #0
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058ae:	4688      	mov	r8, r1
 80058b0:	4691      	mov	r9, r2
 80058b2:	eb1a 0508 	adds.w	r5, sl, r8
 80058b6:	eb4b 0609 	adc.w	r6, fp, r9
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4619      	mov	r1, r3
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	f04f 0400 	mov.w	r4, #0
 80058cc:	0094      	lsls	r4, r2, #2
 80058ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058d2:	008b      	lsls	r3, r1, #2
 80058d4:	461a      	mov	r2, r3
 80058d6:	4623      	mov	r3, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	4631      	mov	r1, r6
 80058dc:	f7fb f9bc 	bl	8000c58 <__aeabi_uldivmod>
 80058e0:	4603      	mov	r3, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	461a      	mov	r2, r3
 80058e6:	4b50      	ldr	r3, [pc, #320]	; (8005a28 <UART_SetConfig+0x6f4>)
 80058e8:	fba3 2302 	umull	r2, r3, r3, r2
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	469b      	mov	fp, r3
 80058f6:	f04f 0c00 	mov.w	ip, #0
 80058fa:	46d9      	mov	r9, fp
 80058fc:	46e2      	mov	sl, ip
 80058fe:	eb19 0309 	adds.w	r3, r9, r9
 8005902:	eb4a 040a 	adc.w	r4, sl, sl
 8005906:	4699      	mov	r9, r3
 8005908:	46a2      	mov	sl, r4
 800590a:	eb19 090b 	adds.w	r9, r9, fp
 800590e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005912:	f04f 0100 	mov.w	r1, #0
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800591e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005922:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005926:	4689      	mov	r9, r1
 8005928:	4692      	mov	sl, r2
 800592a:	eb1b 0509 	adds.w	r5, fp, r9
 800592e:	eb4c 060a 	adc.w	r6, ip, sl
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4619      	mov	r1, r3
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	f04f 0400 	mov.w	r4, #0
 8005944:	0094      	lsls	r4, r2, #2
 8005946:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800594a:	008b      	lsls	r3, r1, #2
 800594c:	461a      	mov	r2, r3
 800594e:	4623      	mov	r3, r4
 8005950:	4628      	mov	r0, r5
 8005952:	4631      	mov	r1, r6
 8005954:	f7fb f980 	bl	8000c58 <__aeabi_uldivmod>
 8005958:	4603      	mov	r3, r0
 800595a:	460c      	mov	r4, r1
 800595c:	461a      	mov	r2, r3
 800595e:	4b32      	ldr	r3, [pc, #200]	; (8005a28 <UART_SetConfig+0x6f4>)
 8005960:	fba3 1302 	umull	r1, r3, r3, r2
 8005964:	095b      	lsrs	r3, r3, #5
 8005966:	2164      	movs	r1, #100	; 0x64
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	3332      	adds	r3, #50	; 0x32
 8005972:	4a2d      	ldr	r2, [pc, #180]	; (8005a28 <UART_SetConfig+0x6f4>)
 8005974:	fba2 2303 	umull	r2, r3, r2, r3
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800597e:	4498      	add	r8, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	469b      	mov	fp, r3
 8005984:	f04f 0c00 	mov.w	ip, #0
 8005988:	46d9      	mov	r9, fp
 800598a:	46e2      	mov	sl, ip
 800598c:	eb19 0309 	adds.w	r3, r9, r9
 8005990:	eb4a 040a 	adc.w	r4, sl, sl
 8005994:	4699      	mov	r9, r3
 8005996:	46a2      	mov	sl, r4
 8005998:	eb19 090b 	adds.w	r9, r9, fp
 800599c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059a0:	f04f 0100 	mov.w	r1, #0
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059b4:	4689      	mov	r9, r1
 80059b6:	4692      	mov	sl, r2
 80059b8:	eb1b 0509 	adds.w	r5, fp, r9
 80059bc:	eb4c 060a 	adc.w	r6, ip, sl
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4619      	mov	r1, r3
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	f04f 0400 	mov.w	r4, #0
 80059d2:	0094      	lsls	r4, r2, #2
 80059d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059d8:	008b      	lsls	r3, r1, #2
 80059da:	461a      	mov	r2, r3
 80059dc:	4623      	mov	r3, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	4631      	mov	r1, r6
 80059e2:	f7fb f939 	bl	8000c58 <__aeabi_uldivmod>
 80059e6:	4603      	mov	r3, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	461a      	mov	r2, r3
 80059ec:	4b0e      	ldr	r3, [pc, #56]	; (8005a28 <UART_SetConfig+0x6f4>)
 80059ee:	fba3 1302 	umull	r1, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2164      	movs	r1, #100	; 0x64
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	3332      	adds	r3, #50	; 0x32
 8005a00:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <UART_SetConfig+0x6f4>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 020f 	and.w	r2, r3, #15
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4442      	add	r2, r8
 8005a12:	609a      	str	r2, [r3, #8]
}
 8005a14:	e7ff      	b.n	8005a16 <UART_SetConfig+0x6e2>
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a20:	40011000 	.word	0x40011000
 8005a24:	40011400 	.word	0x40011400
 8005a28:	51eb851f 	.word	0x51eb851f

08005a2c <__errno>:
 8005a2c:	4b01      	ldr	r3, [pc, #4]	; (8005a34 <__errno+0x8>)
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000010 	.word	0x20000010

08005a38 <__libc_init_array>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	4e0d      	ldr	r6, [pc, #52]	; (8005a70 <__libc_init_array+0x38>)
 8005a3c:	4c0d      	ldr	r4, [pc, #52]	; (8005a74 <__libc_init_array+0x3c>)
 8005a3e:	1ba4      	subs	r4, r4, r6
 8005a40:	10a4      	asrs	r4, r4, #2
 8005a42:	2500      	movs	r5, #0
 8005a44:	42a5      	cmp	r5, r4
 8005a46:	d109      	bne.n	8005a5c <__libc_init_array+0x24>
 8005a48:	4e0b      	ldr	r6, [pc, #44]	; (8005a78 <__libc_init_array+0x40>)
 8005a4a:	4c0c      	ldr	r4, [pc, #48]	; (8005a7c <__libc_init_array+0x44>)
 8005a4c:	f002 ff48 	bl	80088e0 <_init>
 8005a50:	1ba4      	subs	r4, r4, r6
 8005a52:	10a4      	asrs	r4, r4, #2
 8005a54:	2500      	movs	r5, #0
 8005a56:	42a5      	cmp	r5, r4
 8005a58:	d105      	bne.n	8005a66 <__libc_init_array+0x2e>
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}
 8005a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a60:	4798      	blx	r3
 8005a62:	3501      	adds	r5, #1
 8005a64:	e7ee      	b.n	8005a44 <__libc_init_array+0xc>
 8005a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a6a:	4798      	blx	r3
 8005a6c:	3501      	adds	r5, #1
 8005a6e:	e7f2      	b.n	8005a56 <__libc_init_array+0x1e>
 8005a70:	08008c60 	.word	0x08008c60
 8005a74:	08008c60 	.word	0x08008c60
 8005a78:	08008c60 	.word	0x08008c60
 8005a7c:	08008c64 	.word	0x08008c64

08005a80 <memset>:
 8005a80:	4402      	add	r2, r0
 8005a82:	4603      	mov	r3, r0
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d100      	bne.n	8005a8a <memset+0xa>
 8005a88:	4770      	bx	lr
 8005a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a8e:	e7f9      	b.n	8005a84 <memset+0x4>

08005a90 <__cvt>:
 8005a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a94:	ec55 4b10 	vmov	r4, r5, d0
 8005a98:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005a9a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	460e      	mov	r6, r1
 8005aa2:	4691      	mov	r9, r2
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	bfb8      	it	lt
 8005aa8:	4622      	movlt	r2, r4
 8005aaa:	462b      	mov	r3, r5
 8005aac:	f027 0720 	bic.w	r7, r7, #32
 8005ab0:	bfbb      	ittet	lt
 8005ab2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ab6:	461d      	movlt	r5, r3
 8005ab8:	2300      	movge	r3, #0
 8005aba:	232d      	movlt	r3, #45	; 0x2d
 8005abc:	bfb8      	it	lt
 8005abe:	4614      	movlt	r4, r2
 8005ac0:	2f46      	cmp	r7, #70	; 0x46
 8005ac2:	700b      	strb	r3, [r1, #0]
 8005ac4:	d004      	beq.n	8005ad0 <__cvt+0x40>
 8005ac6:	2f45      	cmp	r7, #69	; 0x45
 8005ac8:	d100      	bne.n	8005acc <__cvt+0x3c>
 8005aca:	3601      	adds	r6, #1
 8005acc:	2102      	movs	r1, #2
 8005ace:	e000      	b.n	8005ad2 <__cvt+0x42>
 8005ad0:	2103      	movs	r1, #3
 8005ad2:	ab03      	add	r3, sp, #12
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	ab02      	add	r3, sp, #8
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	4632      	mov	r2, r6
 8005adc:	4653      	mov	r3, sl
 8005ade:	ec45 4b10 	vmov	d0, r4, r5
 8005ae2:	f000 fcd5 	bl	8006490 <_dtoa_r>
 8005ae6:	2f47      	cmp	r7, #71	; 0x47
 8005ae8:	4680      	mov	r8, r0
 8005aea:	d102      	bne.n	8005af2 <__cvt+0x62>
 8005aec:	f019 0f01 	tst.w	r9, #1
 8005af0:	d026      	beq.n	8005b40 <__cvt+0xb0>
 8005af2:	2f46      	cmp	r7, #70	; 0x46
 8005af4:	eb08 0906 	add.w	r9, r8, r6
 8005af8:	d111      	bne.n	8005b1e <__cvt+0x8e>
 8005afa:	f898 3000 	ldrb.w	r3, [r8]
 8005afe:	2b30      	cmp	r3, #48	; 0x30
 8005b00:	d10a      	bne.n	8005b18 <__cvt+0x88>
 8005b02:	2200      	movs	r2, #0
 8005b04:	2300      	movs	r3, #0
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa ffe5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b0e:	b918      	cbnz	r0, 8005b18 <__cvt+0x88>
 8005b10:	f1c6 0601 	rsb	r6, r6, #1
 8005b14:	f8ca 6000 	str.w	r6, [sl]
 8005b18:	f8da 3000 	ldr.w	r3, [sl]
 8005b1c:	4499      	add	r9, r3
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2300      	movs	r3, #0
 8005b22:	4620      	mov	r0, r4
 8005b24:	4629      	mov	r1, r5
 8005b26:	f7fa ffd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b2a:	b938      	cbnz	r0, 8005b3c <__cvt+0xac>
 8005b2c:	2230      	movs	r2, #48	; 0x30
 8005b2e:	9b03      	ldr	r3, [sp, #12]
 8005b30:	454b      	cmp	r3, r9
 8005b32:	d205      	bcs.n	8005b40 <__cvt+0xb0>
 8005b34:	1c59      	adds	r1, r3, #1
 8005b36:	9103      	str	r1, [sp, #12]
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	e7f8      	b.n	8005b2e <__cvt+0x9e>
 8005b3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b40:	9b03      	ldr	r3, [sp, #12]
 8005b42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b44:	eba3 0308 	sub.w	r3, r3, r8
 8005b48:	4640      	mov	r0, r8
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	b004      	add	sp, #16
 8005b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005b52 <__exponent>:
 8005b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b54:	2900      	cmp	r1, #0
 8005b56:	4604      	mov	r4, r0
 8005b58:	bfba      	itte	lt
 8005b5a:	4249      	neglt	r1, r1
 8005b5c:	232d      	movlt	r3, #45	; 0x2d
 8005b5e:	232b      	movge	r3, #43	; 0x2b
 8005b60:	2909      	cmp	r1, #9
 8005b62:	f804 2b02 	strb.w	r2, [r4], #2
 8005b66:	7043      	strb	r3, [r0, #1]
 8005b68:	dd20      	ble.n	8005bac <__exponent+0x5a>
 8005b6a:	f10d 0307 	add.w	r3, sp, #7
 8005b6e:	461f      	mov	r7, r3
 8005b70:	260a      	movs	r6, #10
 8005b72:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b76:	fb06 1115 	mls	r1, r6, r5, r1
 8005b7a:	3130      	adds	r1, #48	; 0x30
 8005b7c:	2d09      	cmp	r5, #9
 8005b7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b82:	f103 32ff 	add.w	r2, r3, #4294967295
 8005b86:	4629      	mov	r1, r5
 8005b88:	dc09      	bgt.n	8005b9e <__exponent+0x4c>
 8005b8a:	3130      	adds	r1, #48	; 0x30
 8005b8c:	3b02      	subs	r3, #2
 8005b8e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b92:	42bb      	cmp	r3, r7
 8005b94:	4622      	mov	r2, r4
 8005b96:	d304      	bcc.n	8005ba2 <__exponent+0x50>
 8005b98:	1a10      	subs	r0, r2, r0
 8005b9a:	b003      	add	sp, #12
 8005b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	e7e7      	b.n	8005b72 <__exponent+0x20>
 8005ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ba6:	f804 2b01 	strb.w	r2, [r4], #1
 8005baa:	e7f2      	b.n	8005b92 <__exponent+0x40>
 8005bac:	2330      	movs	r3, #48	; 0x30
 8005bae:	4419      	add	r1, r3
 8005bb0:	7083      	strb	r3, [r0, #2]
 8005bb2:	1d02      	adds	r2, r0, #4
 8005bb4:	70c1      	strb	r1, [r0, #3]
 8005bb6:	e7ef      	b.n	8005b98 <__exponent+0x46>

08005bb8 <_printf_float>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	b08d      	sub	sp, #52	; 0x34
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005bc4:	4616      	mov	r6, r2
 8005bc6:	461f      	mov	r7, r3
 8005bc8:	4605      	mov	r5, r0
 8005bca:	f001 fae3 	bl	8007194 <_localeconv_r>
 8005bce:	6803      	ldr	r3, [r0, #0]
 8005bd0:	9304      	str	r3, [sp, #16]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fa fb04 	bl	80001e0 <strlen>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	930a      	str	r3, [sp, #40]	; 0x28
 8005bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8005be0:	9005      	str	r0, [sp, #20]
 8005be2:	3307      	adds	r3, #7
 8005be4:	f023 0307 	bic.w	r3, r3, #7
 8005be8:	f103 0208 	add.w	r2, r3, #8
 8005bec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bf0:	f8d4 b000 	ldr.w	fp, [r4]
 8005bf4:	f8c8 2000 	str.w	r2, [r8]
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c00:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c04:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c08:	9307      	str	r3, [sp, #28]
 8005c0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c12:	4ba7      	ldr	r3, [pc, #668]	; (8005eb0 <_printf_float+0x2f8>)
 8005c14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c18:	f7fa ff90 	bl	8000b3c <__aeabi_dcmpun>
 8005c1c:	bb70      	cbnz	r0, 8005c7c <_printf_float+0xc4>
 8005c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c22:	4ba3      	ldr	r3, [pc, #652]	; (8005eb0 <_printf_float+0x2f8>)
 8005c24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c28:	f7fa ff6a 	bl	8000b00 <__aeabi_dcmple>
 8005c2c:	bb30      	cbnz	r0, 8005c7c <_printf_float+0xc4>
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2300      	movs	r3, #0
 8005c32:	4640      	mov	r0, r8
 8005c34:	4649      	mov	r1, r9
 8005c36:	f7fa ff59 	bl	8000aec <__aeabi_dcmplt>
 8005c3a:	b110      	cbz	r0, 8005c42 <_printf_float+0x8a>
 8005c3c:	232d      	movs	r3, #45	; 0x2d
 8005c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c42:	4a9c      	ldr	r2, [pc, #624]	; (8005eb4 <_printf_float+0x2fc>)
 8005c44:	4b9c      	ldr	r3, [pc, #624]	; (8005eb8 <_printf_float+0x300>)
 8005c46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005c4a:	bf8c      	ite	hi
 8005c4c:	4690      	movhi	r8, r2
 8005c4e:	4698      	movls	r8, r3
 8005c50:	2303      	movs	r3, #3
 8005c52:	f02b 0204 	bic.w	r2, fp, #4
 8005c56:	6123      	str	r3, [r4, #16]
 8005c58:	6022      	str	r2, [r4, #0]
 8005c5a:	f04f 0900 	mov.w	r9, #0
 8005c5e:	9700      	str	r7, [sp, #0]
 8005c60:	4633      	mov	r3, r6
 8005c62:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c64:	4621      	mov	r1, r4
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 f9e6 	bl	8006038 <_printf_common>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f040 808d 	bne.w	8005d8c <_printf_float+0x1d4>
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	b00d      	add	sp, #52	; 0x34
 8005c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	464b      	mov	r3, r9
 8005c80:	4640      	mov	r0, r8
 8005c82:	4649      	mov	r1, r9
 8005c84:	f7fa ff5a 	bl	8000b3c <__aeabi_dcmpun>
 8005c88:	b110      	cbz	r0, 8005c90 <_printf_float+0xd8>
 8005c8a:	4a8c      	ldr	r2, [pc, #560]	; (8005ebc <_printf_float+0x304>)
 8005c8c:	4b8c      	ldr	r3, [pc, #560]	; (8005ec0 <_printf_float+0x308>)
 8005c8e:	e7da      	b.n	8005c46 <_printf_float+0x8e>
 8005c90:	6861      	ldr	r1, [r4, #4]
 8005c92:	1c4b      	adds	r3, r1, #1
 8005c94:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005c98:	a80a      	add	r0, sp, #40	; 0x28
 8005c9a:	d13e      	bne.n	8005d1a <_printf_float+0x162>
 8005c9c:	2306      	movs	r3, #6
 8005c9e:	6063      	str	r3, [r4, #4]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005ca6:	ab09      	add	r3, sp, #36	; 0x24
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	ec49 8b10 	vmov	d0, r8, r9
 8005cae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cb2:	6022      	str	r2, [r4, #0]
 8005cb4:	f8cd a004 	str.w	sl, [sp, #4]
 8005cb8:	6861      	ldr	r1, [r4, #4]
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f7ff fee8 	bl	8005a90 <__cvt>
 8005cc0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005cc4:	2b47      	cmp	r3, #71	; 0x47
 8005cc6:	4680      	mov	r8, r0
 8005cc8:	d109      	bne.n	8005cde <_printf_float+0x126>
 8005cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ccc:	1cd8      	adds	r0, r3, #3
 8005cce:	db02      	blt.n	8005cd6 <_printf_float+0x11e>
 8005cd0:	6862      	ldr	r2, [r4, #4]
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	dd47      	ble.n	8005d66 <_printf_float+0x1ae>
 8005cd6:	f1aa 0a02 	sub.w	sl, sl, #2
 8005cda:	fa5f fa8a 	uxtb.w	sl, sl
 8005cde:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ce4:	d824      	bhi.n	8005d30 <_printf_float+0x178>
 8005ce6:	3901      	subs	r1, #1
 8005ce8:	4652      	mov	r2, sl
 8005cea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cee:	9109      	str	r1, [sp, #36]	; 0x24
 8005cf0:	f7ff ff2f 	bl	8005b52 <__exponent>
 8005cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cf6:	1813      	adds	r3, r2, r0
 8005cf8:	2a01      	cmp	r2, #1
 8005cfa:	4681      	mov	r9, r0
 8005cfc:	6123      	str	r3, [r4, #16]
 8005cfe:	dc02      	bgt.n	8005d06 <_printf_float+0x14e>
 8005d00:	6822      	ldr	r2, [r4, #0]
 8005d02:	07d1      	lsls	r1, r2, #31
 8005d04:	d501      	bpl.n	8005d0a <_printf_float+0x152>
 8005d06:	3301      	adds	r3, #1
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0a5      	beq.n	8005c5e <_printf_float+0xa6>
 8005d12:	232d      	movs	r3, #45	; 0x2d
 8005d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d18:	e7a1      	b.n	8005c5e <_printf_float+0xa6>
 8005d1a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005d1e:	f000 8177 	beq.w	8006010 <_printf_float+0x458>
 8005d22:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005d26:	d1bb      	bne.n	8005ca0 <_printf_float+0xe8>
 8005d28:	2900      	cmp	r1, #0
 8005d2a:	d1b9      	bne.n	8005ca0 <_printf_float+0xe8>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e7b6      	b.n	8005c9e <_printf_float+0xe6>
 8005d30:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005d34:	d119      	bne.n	8005d6a <_printf_float+0x1b2>
 8005d36:	2900      	cmp	r1, #0
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	dd0c      	ble.n	8005d56 <_printf_float+0x19e>
 8005d3c:	6121      	str	r1, [r4, #16]
 8005d3e:	b913      	cbnz	r3, 8005d46 <_printf_float+0x18e>
 8005d40:	6822      	ldr	r2, [r4, #0]
 8005d42:	07d2      	lsls	r2, r2, #31
 8005d44:	d502      	bpl.n	8005d4c <_printf_float+0x194>
 8005d46:	3301      	adds	r3, #1
 8005d48:	440b      	add	r3, r1
 8005d4a:	6123      	str	r3, [r4, #16]
 8005d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d50:	f04f 0900 	mov.w	r9, #0
 8005d54:	e7d9      	b.n	8005d0a <_printf_float+0x152>
 8005d56:	b913      	cbnz	r3, 8005d5e <_printf_float+0x1a6>
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	07d0      	lsls	r0, r2, #31
 8005d5c:	d501      	bpl.n	8005d62 <_printf_float+0x1aa>
 8005d5e:	3302      	adds	r3, #2
 8005d60:	e7f3      	b.n	8005d4a <_printf_float+0x192>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e7f1      	b.n	8005d4a <_printf_float+0x192>
 8005d66:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005d6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	db05      	blt.n	8005d7e <_printf_float+0x1c6>
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	6123      	str	r3, [r4, #16]
 8005d76:	07d1      	lsls	r1, r2, #31
 8005d78:	d5e8      	bpl.n	8005d4c <_printf_float+0x194>
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	e7e5      	b.n	8005d4a <_printf_float+0x192>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bfd4      	ite	le
 8005d82:	f1c3 0302 	rsble	r3, r3, #2
 8005d86:	2301      	movgt	r3, #1
 8005d88:	4413      	add	r3, r2
 8005d8a:	e7de      	b.n	8005d4a <_printf_float+0x192>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	055a      	lsls	r2, r3, #21
 8005d90:	d407      	bmi.n	8005da2 <_printf_float+0x1ea>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	4642      	mov	r2, r8
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b8      	blx	r7
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d12b      	bne.n	8005df8 <_printf_float+0x240>
 8005da0:	e767      	b.n	8005c72 <_printf_float+0xba>
 8005da2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005da6:	f240 80dc 	bls.w	8005f62 <_printf_float+0x3aa>
 8005daa:	2200      	movs	r2, #0
 8005dac:	2300      	movs	r3, #0
 8005dae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005db2:	f7fa fe91 	bl	8000ad8 <__aeabi_dcmpeq>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d033      	beq.n	8005e22 <_printf_float+0x26a>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4a41      	ldr	r2, [pc, #260]	; (8005ec4 <_printf_float+0x30c>)
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	47b8      	blx	r7
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	f43f af54 	beq.w	8005c72 <_printf_float+0xba>
 8005dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	db02      	blt.n	8005dd8 <_printf_float+0x220>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	07d8      	lsls	r0, r3, #31
 8005dd6:	d50f      	bpl.n	8005df8 <_printf_float+0x240>
 8005dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	f43f af45 	beq.w	8005c72 <_printf_float+0xba>
 8005de8:	f04f 0800 	mov.w	r8, #0
 8005dec:	f104 091a 	add.w	r9, r4, #26
 8005df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df2:	3b01      	subs	r3, #1
 8005df4:	4543      	cmp	r3, r8
 8005df6:	dc09      	bgt.n	8005e0c <_printf_float+0x254>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	079b      	lsls	r3, r3, #30
 8005dfc:	f100 8103 	bmi.w	8006006 <_printf_float+0x44e>
 8005e00:	68e0      	ldr	r0, [r4, #12]
 8005e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e04:	4298      	cmp	r0, r3
 8005e06:	bfb8      	it	lt
 8005e08:	4618      	movlt	r0, r3
 8005e0a:	e734      	b.n	8005c76 <_printf_float+0xbe>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	464a      	mov	r2, r9
 8005e10:	4631      	mov	r1, r6
 8005e12:	4628      	mov	r0, r5
 8005e14:	47b8      	blx	r7
 8005e16:	3001      	adds	r0, #1
 8005e18:	f43f af2b 	beq.w	8005c72 <_printf_float+0xba>
 8005e1c:	f108 0801 	add.w	r8, r8, #1
 8005e20:	e7e6      	b.n	8005df0 <_printf_float+0x238>
 8005e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dc2b      	bgt.n	8005e80 <_printf_float+0x2c8>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4a26      	ldr	r2, [pc, #152]	; (8005ec4 <_printf_float+0x30c>)
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	4628      	mov	r0, r5
 8005e30:	47b8      	blx	r7
 8005e32:	3001      	adds	r0, #1
 8005e34:	f43f af1d 	beq.w	8005c72 <_printf_float+0xba>
 8005e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3a:	b923      	cbnz	r3, 8005e46 <_printf_float+0x28e>
 8005e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3e:	b913      	cbnz	r3, 8005e46 <_printf_float+0x28e>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	07d9      	lsls	r1, r3, #31
 8005e44:	d5d8      	bpl.n	8005df8 <_printf_float+0x240>
 8005e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	f43f af0e 	beq.w	8005c72 <_printf_float+0xba>
 8005e56:	f04f 0900 	mov.w	r9, #0
 8005e5a:	f104 0a1a 	add.w	sl, r4, #26
 8005e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e60:	425b      	negs	r3, r3
 8005e62:	454b      	cmp	r3, r9
 8005e64:	dc01      	bgt.n	8005e6a <_printf_float+0x2b2>
 8005e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e68:	e794      	b.n	8005d94 <_printf_float+0x1dc>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4652      	mov	r2, sl
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b8      	blx	r7
 8005e74:	3001      	adds	r0, #1
 8005e76:	f43f aefc 	beq.w	8005c72 <_printf_float+0xba>
 8005e7a:	f109 0901 	add.w	r9, r9, #1
 8005e7e:	e7ee      	b.n	8005e5e <_printf_float+0x2a6>
 8005e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e84:	429a      	cmp	r2, r3
 8005e86:	bfa8      	it	ge
 8005e88:	461a      	movge	r2, r3
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	4691      	mov	r9, r2
 8005e8e:	dd07      	ble.n	8005ea0 <_printf_float+0x2e8>
 8005e90:	4613      	mov	r3, r2
 8005e92:	4631      	mov	r1, r6
 8005e94:	4642      	mov	r2, r8
 8005e96:	4628      	mov	r0, r5
 8005e98:	47b8      	blx	r7
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	f43f aee9 	beq.w	8005c72 <_printf_float+0xba>
 8005ea0:	f104 031a 	add.w	r3, r4, #26
 8005ea4:	f04f 0b00 	mov.w	fp, #0
 8005ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eac:	9306      	str	r3, [sp, #24]
 8005eae:	e015      	b.n	8005edc <_printf_float+0x324>
 8005eb0:	7fefffff 	.word	0x7fefffff
 8005eb4:	08008944 	.word	0x08008944
 8005eb8:	08008940 	.word	0x08008940
 8005ebc:	0800894c 	.word	0x0800894c
 8005ec0:	08008948 	.word	0x08008948
 8005ec4:	08008950 	.word	0x08008950
 8005ec8:	2301      	movs	r3, #1
 8005eca:	9a06      	ldr	r2, [sp, #24]
 8005ecc:	4631      	mov	r1, r6
 8005ece:	4628      	mov	r0, r5
 8005ed0:	47b8      	blx	r7
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	f43f aecd 	beq.w	8005c72 <_printf_float+0xba>
 8005ed8:	f10b 0b01 	add.w	fp, fp, #1
 8005edc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ee0:	ebaa 0309 	sub.w	r3, sl, r9
 8005ee4:	455b      	cmp	r3, fp
 8005ee6:	dcef      	bgt.n	8005ec8 <_printf_float+0x310>
 8005ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eec:	429a      	cmp	r2, r3
 8005eee:	44d0      	add	r8, sl
 8005ef0:	db15      	blt.n	8005f1e <_printf_float+0x366>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	07da      	lsls	r2, r3, #31
 8005ef6:	d412      	bmi.n	8005f1e <_printf_float+0x366>
 8005ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005efc:	eba3 020a 	sub.w	r2, r3, sl
 8005f00:	eba3 0a01 	sub.w	sl, r3, r1
 8005f04:	4592      	cmp	sl, r2
 8005f06:	bfa8      	it	ge
 8005f08:	4692      	movge	sl, r2
 8005f0a:	f1ba 0f00 	cmp.w	sl, #0
 8005f0e:	dc0e      	bgt.n	8005f2e <_printf_float+0x376>
 8005f10:	f04f 0800 	mov.w	r8, #0
 8005f14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f18:	f104 091a 	add.w	r9, r4, #26
 8005f1c:	e019      	b.n	8005f52 <_printf_float+0x39a>
 8005f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d1e5      	bne.n	8005ef8 <_printf_float+0x340>
 8005f2c:	e6a1      	b.n	8005c72 <_printf_float+0xba>
 8005f2e:	4653      	mov	r3, sl
 8005f30:	4642      	mov	r2, r8
 8005f32:	4631      	mov	r1, r6
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b8      	blx	r7
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d1e9      	bne.n	8005f10 <_printf_float+0x358>
 8005f3c:	e699      	b.n	8005c72 <_printf_float+0xba>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	464a      	mov	r2, r9
 8005f42:	4631      	mov	r1, r6
 8005f44:	4628      	mov	r0, r5
 8005f46:	47b8      	blx	r7
 8005f48:	3001      	adds	r0, #1
 8005f4a:	f43f ae92 	beq.w	8005c72 <_printf_float+0xba>
 8005f4e:	f108 0801 	add.w	r8, r8, #1
 8005f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f56:	1a9b      	subs	r3, r3, r2
 8005f58:	eba3 030a 	sub.w	r3, r3, sl
 8005f5c:	4543      	cmp	r3, r8
 8005f5e:	dcee      	bgt.n	8005f3e <_printf_float+0x386>
 8005f60:	e74a      	b.n	8005df8 <_printf_float+0x240>
 8005f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f64:	2a01      	cmp	r2, #1
 8005f66:	dc01      	bgt.n	8005f6c <_printf_float+0x3b4>
 8005f68:	07db      	lsls	r3, r3, #31
 8005f6a:	d53a      	bpl.n	8005fe2 <_printf_float+0x42a>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4642      	mov	r2, r8
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	f43f ae7b 	beq.w	8005c72 <_printf_float+0xba>
 8005f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	f108 0801 	add.w	r8, r8, #1
 8005f8c:	f43f ae71 	beq.w	8005c72 <_printf_float+0xba>
 8005f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f92:	2200      	movs	r2, #0
 8005f94:	f103 3aff 	add.w	sl, r3, #4294967295
 8005f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f7fa fd9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fa2:	b9c8      	cbnz	r0, 8005fd8 <_printf_float+0x420>
 8005fa4:	4653      	mov	r3, sl
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d10e      	bne.n	8005fd0 <_printf_float+0x418>
 8005fb2:	e65e      	b.n	8005c72 <_printf_float+0xba>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4652      	mov	r2, sl
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f ae57 	beq.w	8005c72 <_printf_float+0xba>
 8005fc4:	f108 0801 	add.w	r8, r8, #1
 8005fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	4543      	cmp	r3, r8
 8005fce:	dcf1      	bgt.n	8005fb4 <_printf_float+0x3fc>
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fd6:	e6de      	b.n	8005d96 <_printf_float+0x1de>
 8005fd8:	f04f 0800 	mov.w	r8, #0
 8005fdc:	f104 0a1a 	add.w	sl, r4, #26
 8005fe0:	e7f2      	b.n	8005fc8 <_printf_float+0x410>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e7df      	b.n	8005fa6 <_printf_float+0x3ee>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	464a      	mov	r2, r9
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	f43f ae3e 	beq.w	8005c72 <_printf_float+0xba>
 8005ff6:	f108 0801 	add.w	r8, r8, #1
 8005ffa:	68e3      	ldr	r3, [r4, #12]
 8005ffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	4543      	cmp	r3, r8
 8006002:	dcf0      	bgt.n	8005fe6 <_printf_float+0x42e>
 8006004:	e6fc      	b.n	8005e00 <_printf_float+0x248>
 8006006:	f04f 0800 	mov.w	r8, #0
 800600a:	f104 0919 	add.w	r9, r4, #25
 800600e:	e7f4      	b.n	8005ffa <_printf_float+0x442>
 8006010:	2900      	cmp	r1, #0
 8006012:	f43f ae8b 	beq.w	8005d2c <_printf_float+0x174>
 8006016:	2300      	movs	r3, #0
 8006018:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800601c:	ab09      	add	r3, sp, #36	; 0x24
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	ec49 8b10 	vmov	d0, r8, r9
 8006024:	6022      	str	r2, [r4, #0]
 8006026:	f8cd a004 	str.w	sl, [sp, #4]
 800602a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800602e:	4628      	mov	r0, r5
 8006030:	f7ff fd2e 	bl	8005a90 <__cvt>
 8006034:	4680      	mov	r8, r0
 8006036:	e648      	b.n	8005cca <_printf_float+0x112>

08006038 <_printf_common>:
 8006038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800603c:	4691      	mov	r9, r2
 800603e:	461f      	mov	r7, r3
 8006040:	688a      	ldr	r2, [r1, #8]
 8006042:	690b      	ldr	r3, [r1, #16]
 8006044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006048:	4293      	cmp	r3, r2
 800604a:	bfb8      	it	lt
 800604c:	4613      	movlt	r3, r2
 800604e:	f8c9 3000 	str.w	r3, [r9]
 8006052:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006056:	4606      	mov	r6, r0
 8006058:	460c      	mov	r4, r1
 800605a:	b112      	cbz	r2, 8006062 <_printf_common+0x2a>
 800605c:	3301      	adds	r3, #1
 800605e:	f8c9 3000 	str.w	r3, [r9]
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	0699      	lsls	r1, r3, #26
 8006066:	bf42      	ittt	mi
 8006068:	f8d9 3000 	ldrmi.w	r3, [r9]
 800606c:	3302      	addmi	r3, #2
 800606e:	f8c9 3000 	strmi.w	r3, [r9]
 8006072:	6825      	ldr	r5, [r4, #0]
 8006074:	f015 0506 	ands.w	r5, r5, #6
 8006078:	d107      	bne.n	800608a <_printf_common+0x52>
 800607a:	f104 0a19 	add.w	sl, r4, #25
 800607e:	68e3      	ldr	r3, [r4, #12]
 8006080:	f8d9 2000 	ldr.w	r2, [r9]
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	42ab      	cmp	r3, r5
 8006088:	dc28      	bgt.n	80060dc <_printf_common+0xa4>
 800608a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	3300      	adds	r3, #0
 8006092:	bf18      	it	ne
 8006094:	2301      	movne	r3, #1
 8006096:	0692      	lsls	r2, r2, #26
 8006098:	d42d      	bmi.n	80060f6 <_printf_common+0xbe>
 800609a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800609e:	4639      	mov	r1, r7
 80060a0:	4630      	mov	r0, r6
 80060a2:	47c0      	blx	r8
 80060a4:	3001      	adds	r0, #1
 80060a6:	d020      	beq.n	80060ea <_printf_common+0xb2>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	68e5      	ldr	r5, [r4, #12]
 80060ac:	f8d9 2000 	ldr.w	r2, [r9]
 80060b0:	f003 0306 	and.w	r3, r3, #6
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	bf08      	it	eq
 80060b8:	1aad      	subeq	r5, r5, r2
 80060ba:	68a3      	ldr	r3, [r4, #8]
 80060bc:	6922      	ldr	r2, [r4, #16]
 80060be:	bf0c      	ite	eq
 80060c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060c4:	2500      	movne	r5, #0
 80060c6:	4293      	cmp	r3, r2
 80060c8:	bfc4      	itt	gt
 80060ca:	1a9b      	subgt	r3, r3, r2
 80060cc:	18ed      	addgt	r5, r5, r3
 80060ce:	f04f 0900 	mov.w	r9, #0
 80060d2:	341a      	adds	r4, #26
 80060d4:	454d      	cmp	r5, r9
 80060d6:	d11a      	bne.n	800610e <_printf_common+0xd6>
 80060d8:	2000      	movs	r0, #0
 80060da:	e008      	b.n	80060ee <_printf_common+0xb6>
 80060dc:	2301      	movs	r3, #1
 80060de:	4652      	mov	r2, sl
 80060e0:	4639      	mov	r1, r7
 80060e2:	4630      	mov	r0, r6
 80060e4:	47c0      	blx	r8
 80060e6:	3001      	adds	r0, #1
 80060e8:	d103      	bne.n	80060f2 <_printf_common+0xba>
 80060ea:	f04f 30ff 	mov.w	r0, #4294967295
 80060ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f2:	3501      	adds	r5, #1
 80060f4:	e7c3      	b.n	800607e <_printf_common+0x46>
 80060f6:	18e1      	adds	r1, r4, r3
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	2030      	movs	r0, #48	; 0x30
 80060fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006100:	4422      	add	r2, r4
 8006102:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006106:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800610a:	3302      	adds	r3, #2
 800610c:	e7c5      	b.n	800609a <_printf_common+0x62>
 800610e:	2301      	movs	r3, #1
 8006110:	4622      	mov	r2, r4
 8006112:	4639      	mov	r1, r7
 8006114:	4630      	mov	r0, r6
 8006116:	47c0      	blx	r8
 8006118:	3001      	adds	r0, #1
 800611a:	d0e6      	beq.n	80060ea <_printf_common+0xb2>
 800611c:	f109 0901 	add.w	r9, r9, #1
 8006120:	e7d8      	b.n	80060d4 <_printf_common+0x9c>
	...

08006124 <_printf_i>:
 8006124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006128:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800612c:	460c      	mov	r4, r1
 800612e:	7e09      	ldrb	r1, [r1, #24]
 8006130:	b085      	sub	sp, #20
 8006132:	296e      	cmp	r1, #110	; 0x6e
 8006134:	4617      	mov	r7, r2
 8006136:	4606      	mov	r6, r0
 8006138:	4698      	mov	r8, r3
 800613a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800613c:	f000 80b3 	beq.w	80062a6 <_printf_i+0x182>
 8006140:	d822      	bhi.n	8006188 <_printf_i+0x64>
 8006142:	2963      	cmp	r1, #99	; 0x63
 8006144:	d036      	beq.n	80061b4 <_printf_i+0x90>
 8006146:	d80a      	bhi.n	800615e <_printf_i+0x3a>
 8006148:	2900      	cmp	r1, #0
 800614a:	f000 80b9 	beq.w	80062c0 <_printf_i+0x19c>
 800614e:	2958      	cmp	r1, #88	; 0x58
 8006150:	f000 8083 	beq.w	800625a <_printf_i+0x136>
 8006154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006158:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800615c:	e032      	b.n	80061c4 <_printf_i+0xa0>
 800615e:	2964      	cmp	r1, #100	; 0x64
 8006160:	d001      	beq.n	8006166 <_printf_i+0x42>
 8006162:	2969      	cmp	r1, #105	; 0x69
 8006164:	d1f6      	bne.n	8006154 <_printf_i+0x30>
 8006166:	6820      	ldr	r0, [r4, #0]
 8006168:	6813      	ldr	r3, [r2, #0]
 800616a:	0605      	lsls	r5, r0, #24
 800616c:	f103 0104 	add.w	r1, r3, #4
 8006170:	d52a      	bpl.n	80061c8 <_printf_i+0xa4>
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6011      	str	r1, [r2, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	da03      	bge.n	8006182 <_printf_i+0x5e>
 800617a:	222d      	movs	r2, #45	; 0x2d
 800617c:	425b      	negs	r3, r3
 800617e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006182:	486f      	ldr	r0, [pc, #444]	; (8006340 <_printf_i+0x21c>)
 8006184:	220a      	movs	r2, #10
 8006186:	e039      	b.n	80061fc <_printf_i+0xd8>
 8006188:	2973      	cmp	r1, #115	; 0x73
 800618a:	f000 809d 	beq.w	80062c8 <_printf_i+0x1a4>
 800618e:	d808      	bhi.n	80061a2 <_printf_i+0x7e>
 8006190:	296f      	cmp	r1, #111	; 0x6f
 8006192:	d020      	beq.n	80061d6 <_printf_i+0xb2>
 8006194:	2970      	cmp	r1, #112	; 0x70
 8006196:	d1dd      	bne.n	8006154 <_printf_i+0x30>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	f043 0320 	orr.w	r3, r3, #32
 800619e:	6023      	str	r3, [r4, #0]
 80061a0:	e003      	b.n	80061aa <_printf_i+0x86>
 80061a2:	2975      	cmp	r1, #117	; 0x75
 80061a4:	d017      	beq.n	80061d6 <_printf_i+0xb2>
 80061a6:	2978      	cmp	r1, #120	; 0x78
 80061a8:	d1d4      	bne.n	8006154 <_printf_i+0x30>
 80061aa:	2378      	movs	r3, #120	; 0x78
 80061ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061b0:	4864      	ldr	r0, [pc, #400]	; (8006344 <_printf_i+0x220>)
 80061b2:	e055      	b.n	8006260 <_printf_i+0x13c>
 80061b4:	6813      	ldr	r3, [r2, #0]
 80061b6:	1d19      	adds	r1, r3, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6011      	str	r1, [r2, #0]
 80061bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061c4:	2301      	movs	r3, #1
 80061c6:	e08c      	b.n	80062e2 <_printf_i+0x1be>
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6011      	str	r1, [r2, #0]
 80061cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061d0:	bf18      	it	ne
 80061d2:	b21b      	sxthne	r3, r3
 80061d4:	e7cf      	b.n	8006176 <_printf_i+0x52>
 80061d6:	6813      	ldr	r3, [r2, #0]
 80061d8:	6825      	ldr	r5, [r4, #0]
 80061da:	1d18      	adds	r0, r3, #4
 80061dc:	6010      	str	r0, [r2, #0]
 80061de:	0628      	lsls	r0, r5, #24
 80061e0:	d501      	bpl.n	80061e6 <_printf_i+0xc2>
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	e002      	b.n	80061ec <_printf_i+0xc8>
 80061e6:	0668      	lsls	r0, r5, #25
 80061e8:	d5fb      	bpl.n	80061e2 <_printf_i+0xbe>
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	4854      	ldr	r0, [pc, #336]	; (8006340 <_printf_i+0x21c>)
 80061ee:	296f      	cmp	r1, #111	; 0x6f
 80061f0:	bf14      	ite	ne
 80061f2:	220a      	movne	r2, #10
 80061f4:	2208      	moveq	r2, #8
 80061f6:	2100      	movs	r1, #0
 80061f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061fc:	6865      	ldr	r5, [r4, #4]
 80061fe:	60a5      	str	r5, [r4, #8]
 8006200:	2d00      	cmp	r5, #0
 8006202:	f2c0 8095 	blt.w	8006330 <_printf_i+0x20c>
 8006206:	6821      	ldr	r1, [r4, #0]
 8006208:	f021 0104 	bic.w	r1, r1, #4
 800620c:	6021      	str	r1, [r4, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d13d      	bne.n	800628e <_printf_i+0x16a>
 8006212:	2d00      	cmp	r5, #0
 8006214:	f040 808e 	bne.w	8006334 <_printf_i+0x210>
 8006218:	4665      	mov	r5, ip
 800621a:	2a08      	cmp	r2, #8
 800621c:	d10b      	bne.n	8006236 <_printf_i+0x112>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	07db      	lsls	r3, r3, #31
 8006222:	d508      	bpl.n	8006236 <_printf_i+0x112>
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	6862      	ldr	r2, [r4, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	bfde      	ittt	le
 800622c:	2330      	movle	r3, #48	; 0x30
 800622e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006232:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006236:	ebac 0305 	sub.w	r3, ip, r5
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	f8cd 8000 	str.w	r8, [sp]
 8006240:	463b      	mov	r3, r7
 8006242:	aa03      	add	r2, sp, #12
 8006244:	4621      	mov	r1, r4
 8006246:	4630      	mov	r0, r6
 8006248:	f7ff fef6 	bl	8006038 <_printf_common>
 800624c:	3001      	adds	r0, #1
 800624e:	d14d      	bne.n	80062ec <_printf_i+0x1c8>
 8006250:	f04f 30ff 	mov.w	r0, #4294967295
 8006254:	b005      	add	sp, #20
 8006256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800625a:	4839      	ldr	r0, [pc, #228]	; (8006340 <_printf_i+0x21c>)
 800625c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006260:	6813      	ldr	r3, [r2, #0]
 8006262:	6821      	ldr	r1, [r4, #0]
 8006264:	1d1d      	adds	r5, r3, #4
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6015      	str	r5, [r2, #0]
 800626a:	060a      	lsls	r2, r1, #24
 800626c:	d50b      	bpl.n	8006286 <_printf_i+0x162>
 800626e:	07ca      	lsls	r2, r1, #31
 8006270:	bf44      	itt	mi
 8006272:	f041 0120 	orrmi.w	r1, r1, #32
 8006276:	6021      	strmi	r1, [r4, #0]
 8006278:	b91b      	cbnz	r3, 8006282 <_printf_i+0x15e>
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	f022 0220 	bic.w	r2, r2, #32
 8006280:	6022      	str	r2, [r4, #0]
 8006282:	2210      	movs	r2, #16
 8006284:	e7b7      	b.n	80061f6 <_printf_i+0xd2>
 8006286:	064d      	lsls	r5, r1, #25
 8006288:	bf48      	it	mi
 800628a:	b29b      	uxthmi	r3, r3
 800628c:	e7ef      	b.n	800626e <_printf_i+0x14a>
 800628e:	4665      	mov	r5, ip
 8006290:	fbb3 f1f2 	udiv	r1, r3, r2
 8006294:	fb02 3311 	mls	r3, r2, r1, r3
 8006298:	5cc3      	ldrb	r3, [r0, r3]
 800629a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800629e:	460b      	mov	r3, r1
 80062a0:	2900      	cmp	r1, #0
 80062a2:	d1f5      	bne.n	8006290 <_printf_i+0x16c>
 80062a4:	e7b9      	b.n	800621a <_printf_i+0xf6>
 80062a6:	6813      	ldr	r3, [r2, #0]
 80062a8:	6825      	ldr	r5, [r4, #0]
 80062aa:	6961      	ldr	r1, [r4, #20]
 80062ac:	1d18      	adds	r0, r3, #4
 80062ae:	6010      	str	r0, [r2, #0]
 80062b0:	0628      	lsls	r0, r5, #24
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	d501      	bpl.n	80062ba <_printf_i+0x196>
 80062b6:	6019      	str	r1, [r3, #0]
 80062b8:	e002      	b.n	80062c0 <_printf_i+0x19c>
 80062ba:	066a      	lsls	r2, r5, #25
 80062bc:	d5fb      	bpl.n	80062b6 <_printf_i+0x192>
 80062be:	8019      	strh	r1, [r3, #0]
 80062c0:	2300      	movs	r3, #0
 80062c2:	6123      	str	r3, [r4, #16]
 80062c4:	4665      	mov	r5, ip
 80062c6:	e7b9      	b.n	800623c <_printf_i+0x118>
 80062c8:	6813      	ldr	r3, [r2, #0]
 80062ca:	1d19      	adds	r1, r3, #4
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	681d      	ldr	r5, [r3, #0]
 80062d0:	6862      	ldr	r2, [r4, #4]
 80062d2:	2100      	movs	r1, #0
 80062d4:	4628      	mov	r0, r5
 80062d6:	f7f9 ff8b 	bl	80001f0 <memchr>
 80062da:	b108      	cbz	r0, 80062e0 <_printf_i+0x1bc>
 80062dc:	1b40      	subs	r0, r0, r5
 80062de:	6060      	str	r0, [r4, #4]
 80062e0:	6863      	ldr	r3, [r4, #4]
 80062e2:	6123      	str	r3, [r4, #16]
 80062e4:	2300      	movs	r3, #0
 80062e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ea:	e7a7      	b.n	800623c <_printf_i+0x118>
 80062ec:	6923      	ldr	r3, [r4, #16]
 80062ee:	462a      	mov	r2, r5
 80062f0:	4639      	mov	r1, r7
 80062f2:	4630      	mov	r0, r6
 80062f4:	47c0      	blx	r8
 80062f6:	3001      	adds	r0, #1
 80062f8:	d0aa      	beq.n	8006250 <_printf_i+0x12c>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	079b      	lsls	r3, r3, #30
 80062fe:	d413      	bmi.n	8006328 <_printf_i+0x204>
 8006300:	68e0      	ldr	r0, [r4, #12]
 8006302:	9b03      	ldr	r3, [sp, #12]
 8006304:	4298      	cmp	r0, r3
 8006306:	bfb8      	it	lt
 8006308:	4618      	movlt	r0, r3
 800630a:	e7a3      	b.n	8006254 <_printf_i+0x130>
 800630c:	2301      	movs	r3, #1
 800630e:	464a      	mov	r2, r9
 8006310:	4639      	mov	r1, r7
 8006312:	4630      	mov	r0, r6
 8006314:	47c0      	blx	r8
 8006316:	3001      	adds	r0, #1
 8006318:	d09a      	beq.n	8006250 <_printf_i+0x12c>
 800631a:	3501      	adds	r5, #1
 800631c:	68e3      	ldr	r3, [r4, #12]
 800631e:	9a03      	ldr	r2, [sp, #12]
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	42ab      	cmp	r3, r5
 8006324:	dcf2      	bgt.n	800630c <_printf_i+0x1e8>
 8006326:	e7eb      	b.n	8006300 <_printf_i+0x1dc>
 8006328:	2500      	movs	r5, #0
 800632a:	f104 0919 	add.w	r9, r4, #25
 800632e:	e7f5      	b.n	800631c <_printf_i+0x1f8>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1ac      	bne.n	800628e <_printf_i+0x16a>
 8006334:	7803      	ldrb	r3, [r0, #0]
 8006336:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800633a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800633e:	e76c      	b.n	800621a <_printf_i+0xf6>
 8006340:	08008952 	.word	0x08008952
 8006344:	08008963 	.word	0x08008963

08006348 <iprintf>:
 8006348:	b40f      	push	{r0, r1, r2, r3}
 800634a:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <iprintf+0x2c>)
 800634c:	b513      	push	{r0, r1, r4, lr}
 800634e:	681c      	ldr	r4, [r3, #0]
 8006350:	b124      	cbz	r4, 800635c <iprintf+0x14>
 8006352:	69a3      	ldr	r3, [r4, #24]
 8006354:	b913      	cbnz	r3, 800635c <iprintf+0x14>
 8006356:	4620      	mov	r0, r4
 8006358:	f000 fe92 	bl	8007080 <__sinit>
 800635c:	ab05      	add	r3, sp, #20
 800635e:	9a04      	ldr	r2, [sp, #16]
 8006360:	68a1      	ldr	r1, [r4, #8]
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	4620      	mov	r0, r4
 8006366:	f001 faf1 	bl	800794c <_vfiprintf_r>
 800636a:	b002      	add	sp, #8
 800636c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006370:	b004      	add	sp, #16
 8006372:	4770      	bx	lr
 8006374:	20000010 	.word	0x20000010

08006378 <quorem>:
 8006378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	6903      	ldr	r3, [r0, #16]
 800637e:	690c      	ldr	r4, [r1, #16]
 8006380:	42a3      	cmp	r3, r4
 8006382:	4680      	mov	r8, r0
 8006384:	f2c0 8082 	blt.w	800648c <quorem+0x114>
 8006388:	3c01      	subs	r4, #1
 800638a:	f101 0714 	add.w	r7, r1, #20
 800638e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006392:	f100 0614 	add.w	r6, r0, #20
 8006396:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800639a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800639e:	eb06 030c 	add.w	r3, r6, ip
 80063a2:	3501      	adds	r5, #1
 80063a4:	eb07 090c 	add.w	r9, r7, ip
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	fbb0 f5f5 	udiv	r5, r0, r5
 80063ae:	b395      	cbz	r5, 8006416 <quorem+0x9e>
 80063b0:	f04f 0a00 	mov.w	sl, #0
 80063b4:	4638      	mov	r0, r7
 80063b6:	46b6      	mov	lr, r6
 80063b8:	46d3      	mov	fp, sl
 80063ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80063be:	b293      	uxth	r3, r2
 80063c0:	fb05 a303 	mla	r3, r5, r3, sl
 80063c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	ebab 0303 	sub.w	r3, fp, r3
 80063ce:	0c12      	lsrs	r2, r2, #16
 80063d0:	f8de b000 	ldr.w	fp, [lr]
 80063d4:	fb05 a202 	mla	r2, r5, r2, sl
 80063d8:	fa13 f38b 	uxtah	r3, r3, fp
 80063dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80063e0:	fa1f fb82 	uxth.w	fp, r2
 80063e4:	f8de 2000 	ldr.w	r2, [lr]
 80063e8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80063ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063f6:	4581      	cmp	r9, r0
 80063f8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80063fc:	f84e 3b04 	str.w	r3, [lr], #4
 8006400:	d2db      	bcs.n	80063ba <quorem+0x42>
 8006402:	f856 300c 	ldr.w	r3, [r6, ip]
 8006406:	b933      	cbnz	r3, 8006416 <quorem+0x9e>
 8006408:	9b01      	ldr	r3, [sp, #4]
 800640a:	3b04      	subs	r3, #4
 800640c:	429e      	cmp	r6, r3
 800640e:	461a      	mov	r2, r3
 8006410:	d330      	bcc.n	8006474 <quorem+0xfc>
 8006412:	f8c8 4010 	str.w	r4, [r8, #16]
 8006416:	4640      	mov	r0, r8
 8006418:	f001 f8f2 	bl	8007600 <__mcmp>
 800641c:	2800      	cmp	r0, #0
 800641e:	db25      	blt.n	800646c <quorem+0xf4>
 8006420:	3501      	adds	r5, #1
 8006422:	4630      	mov	r0, r6
 8006424:	f04f 0c00 	mov.w	ip, #0
 8006428:	f857 2b04 	ldr.w	r2, [r7], #4
 800642c:	f8d0 e000 	ldr.w	lr, [r0]
 8006430:	b293      	uxth	r3, r2
 8006432:	ebac 0303 	sub.w	r3, ip, r3
 8006436:	0c12      	lsrs	r2, r2, #16
 8006438:	fa13 f38e 	uxtah	r3, r3, lr
 800643c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006444:	b29b      	uxth	r3, r3
 8006446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800644a:	45b9      	cmp	r9, r7
 800644c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006450:	f840 3b04 	str.w	r3, [r0], #4
 8006454:	d2e8      	bcs.n	8006428 <quorem+0xb0>
 8006456:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800645a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800645e:	b92a      	cbnz	r2, 800646c <quorem+0xf4>
 8006460:	3b04      	subs	r3, #4
 8006462:	429e      	cmp	r6, r3
 8006464:	461a      	mov	r2, r3
 8006466:	d30b      	bcc.n	8006480 <quorem+0x108>
 8006468:	f8c8 4010 	str.w	r4, [r8, #16]
 800646c:	4628      	mov	r0, r5
 800646e:	b003      	add	sp, #12
 8006470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	3b04      	subs	r3, #4
 8006478:	2a00      	cmp	r2, #0
 800647a:	d1ca      	bne.n	8006412 <quorem+0x9a>
 800647c:	3c01      	subs	r4, #1
 800647e:	e7c5      	b.n	800640c <quorem+0x94>
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	3b04      	subs	r3, #4
 8006484:	2a00      	cmp	r2, #0
 8006486:	d1ef      	bne.n	8006468 <quorem+0xf0>
 8006488:	3c01      	subs	r4, #1
 800648a:	e7ea      	b.n	8006462 <quorem+0xea>
 800648c:	2000      	movs	r0, #0
 800648e:	e7ee      	b.n	800646e <quorem+0xf6>

08006490 <_dtoa_r>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	ec57 6b10 	vmov	r6, r7, d0
 8006498:	b097      	sub	sp, #92	; 0x5c
 800649a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800649c:	9106      	str	r1, [sp, #24]
 800649e:	4604      	mov	r4, r0
 80064a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80064a2:	9312      	str	r3, [sp, #72]	; 0x48
 80064a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064a8:	e9cd 6700 	strd	r6, r7, [sp]
 80064ac:	b93d      	cbnz	r5, 80064be <_dtoa_r+0x2e>
 80064ae:	2010      	movs	r0, #16
 80064b0:	f000 fe7e 	bl	80071b0 <malloc>
 80064b4:	6260      	str	r0, [r4, #36]	; 0x24
 80064b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064ba:	6005      	str	r5, [r0, #0]
 80064bc:	60c5      	str	r5, [r0, #12]
 80064be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064c0:	6819      	ldr	r1, [r3, #0]
 80064c2:	b151      	cbz	r1, 80064da <_dtoa_r+0x4a>
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	604a      	str	r2, [r1, #4]
 80064c8:	2301      	movs	r3, #1
 80064ca:	4093      	lsls	r3, r2
 80064cc:	608b      	str	r3, [r1, #8]
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 feb5 	bl	800723e <_Bfree>
 80064d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	1e3b      	subs	r3, r7, #0
 80064dc:	bfbb      	ittet	lt
 80064de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064e2:	9301      	strlt	r3, [sp, #4]
 80064e4:	2300      	movge	r3, #0
 80064e6:	2201      	movlt	r2, #1
 80064e8:	bfac      	ite	ge
 80064ea:	f8c8 3000 	strge.w	r3, [r8]
 80064ee:	f8c8 2000 	strlt.w	r2, [r8]
 80064f2:	4baf      	ldr	r3, [pc, #700]	; (80067b0 <_dtoa_r+0x320>)
 80064f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80064f8:	ea33 0308 	bics.w	r3, r3, r8
 80064fc:	d114      	bne.n	8006528 <_dtoa_r+0x98>
 80064fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006500:	f242 730f 	movw	r3, #9999	; 0x270f
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	9b00      	ldr	r3, [sp, #0]
 8006508:	b923      	cbnz	r3, 8006514 <_dtoa_r+0x84>
 800650a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800650e:	2800      	cmp	r0, #0
 8006510:	f000 8542 	beq.w	8006f98 <_dtoa_r+0xb08>
 8006514:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006516:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80067c4 <_dtoa_r+0x334>
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8544 	beq.w	8006fa8 <_dtoa_r+0xb18>
 8006520:	f10b 0303 	add.w	r3, fp, #3
 8006524:	f000 bd3e 	b.w	8006fa4 <_dtoa_r+0xb14>
 8006528:	e9dd 6700 	ldrd	r6, r7, [sp]
 800652c:	2200      	movs	r2, #0
 800652e:	2300      	movs	r3, #0
 8006530:	4630      	mov	r0, r6
 8006532:	4639      	mov	r1, r7
 8006534:	f7fa fad0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006538:	4681      	mov	r9, r0
 800653a:	b168      	cbz	r0, 8006558 <_dtoa_r+0xc8>
 800653c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800653e:	2301      	movs	r3, #1
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 8524 	beq.w	8006f92 <_dtoa_r+0xb02>
 800654a:	4b9a      	ldr	r3, [pc, #616]	; (80067b4 <_dtoa_r+0x324>)
 800654c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800654e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	f000 bd28 	b.w	8006fa8 <_dtoa_r+0xb18>
 8006558:	aa14      	add	r2, sp, #80	; 0x50
 800655a:	a915      	add	r1, sp, #84	; 0x54
 800655c:	ec47 6b10 	vmov	d0, r6, r7
 8006560:	4620      	mov	r0, r4
 8006562:	f001 f8c4 	bl	80076ee <__d2b>
 8006566:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800656a:	9004      	str	r0, [sp, #16]
 800656c:	2d00      	cmp	r5, #0
 800656e:	d07c      	beq.n	800666a <_dtoa_r+0x1da>
 8006570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006574:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006578:	46b2      	mov	sl, r6
 800657a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800657e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006582:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006586:	2200      	movs	r2, #0
 8006588:	4b8b      	ldr	r3, [pc, #556]	; (80067b8 <_dtoa_r+0x328>)
 800658a:	4650      	mov	r0, sl
 800658c:	4659      	mov	r1, fp
 800658e:	f7f9 fe83 	bl	8000298 <__aeabi_dsub>
 8006592:	a381      	add	r3, pc, #516	; (adr r3, 8006798 <_dtoa_r+0x308>)
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f7fa f836 	bl	8000608 <__aeabi_dmul>
 800659c:	a380      	add	r3, pc, #512	; (adr r3, 80067a0 <_dtoa_r+0x310>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fe7b 	bl	800029c <__adddf3>
 80065a6:	4606      	mov	r6, r0
 80065a8:	4628      	mov	r0, r5
 80065aa:	460f      	mov	r7, r1
 80065ac:	f7f9 ffc2 	bl	8000534 <__aeabi_i2d>
 80065b0:	a37d      	add	r3, pc, #500	; (adr r3, 80067a8 <_dtoa_r+0x318>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7fa f827 	bl	8000608 <__aeabi_dmul>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4630      	mov	r0, r6
 80065c0:	4639      	mov	r1, r7
 80065c2:	f7f9 fe6b 	bl	800029c <__adddf3>
 80065c6:	4606      	mov	r6, r0
 80065c8:	460f      	mov	r7, r1
 80065ca:	f7fa facd 	bl	8000b68 <__aeabi_d2iz>
 80065ce:	2200      	movs	r2, #0
 80065d0:	4682      	mov	sl, r0
 80065d2:	2300      	movs	r3, #0
 80065d4:	4630      	mov	r0, r6
 80065d6:	4639      	mov	r1, r7
 80065d8:	f7fa fa88 	bl	8000aec <__aeabi_dcmplt>
 80065dc:	b148      	cbz	r0, 80065f2 <_dtoa_r+0x162>
 80065de:	4650      	mov	r0, sl
 80065e0:	f7f9 ffa8 	bl	8000534 <__aeabi_i2d>
 80065e4:	4632      	mov	r2, r6
 80065e6:	463b      	mov	r3, r7
 80065e8:	f7fa fa76 	bl	8000ad8 <__aeabi_dcmpeq>
 80065ec:	b908      	cbnz	r0, 80065f2 <_dtoa_r+0x162>
 80065ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065f2:	f1ba 0f16 	cmp.w	sl, #22
 80065f6:	d859      	bhi.n	80066ac <_dtoa_r+0x21c>
 80065f8:	4970      	ldr	r1, [pc, #448]	; (80067bc <_dtoa_r+0x32c>)
 80065fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80065fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006606:	f7fa fa8f 	bl	8000b28 <__aeabi_dcmpgt>
 800660a:	2800      	cmp	r0, #0
 800660c:	d050      	beq.n	80066b0 <_dtoa_r+0x220>
 800660e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006612:	2300      	movs	r3, #0
 8006614:	930f      	str	r3, [sp, #60]	; 0x3c
 8006616:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006618:	1b5d      	subs	r5, r3, r5
 800661a:	f1b5 0801 	subs.w	r8, r5, #1
 800661e:	bf49      	itett	mi
 8006620:	f1c5 0301 	rsbmi	r3, r5, #1
 8006624:	2300      	movpl	r3, #0
 8006626:	9305      	strmi	r3, [sp, #20]
 8006628:	f04f 0800 	movmi.w	r8, #0
 800662c:	bf58      	it	pl
 800662e:	9305      	strpl	r3, [sp, #20]
 8006630:	f1ba 0f00 	cmp.w	sl, #0
 8006634:	db3e      	blt.n	80066b4 <_dtoa_r+0x224>
 8006636:	2300      	movs	r3, #0
 8006638:	44d0      	add	r8, sl
 800663a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800663e:	9307      	str	r3, [sp, #28]
 8006640:	9b06      	ldr	r3, [sp, #24]
 8006642:	2b09      	cmp	r3, #9
 8006644:	f200 8090 	bhi.w	8006768 <_dtoa_r+0x2d8>
 8006648:	2b05      	cmp	r3, #5
 800664a:	bfc4      	itt	gt
 800664c:	3b04      	subgt	r3, #4
 800664e:	9306      	strgt	r3, [sp, #24]
 8006650:	9b06      	ldr	r3, [sp, #24]
 8006652:	f1a3 0302 	sub.w	r3, r3, #2
 8006656:	bfcc      	ite	gt
 8006658:	2500      	movgt	r5, #0
 800665a:	2501      	movle	r5, #1
 800665c:	2b03      	cmp	r3, #3
 800665e:	f200 808f 	bhi.w	8006780 <_dtoa_r+0x2f0>
 8006662:	e8df f003 	tbb	[pc, r3]
 8006666:	7f7d      	.short	0x7f7d
 8006668:	7131      	.short	0x7131
 800666a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800666e:	441d      	add	r5, r3
 8006670:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006674:	2820      	cmp	r0, #32
 8006676:	dd13      	ble.n	80066a0 <_dtoa_r+0x210>
 8006678:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800667c:	9b00      	ldr	r3, [sp, #0]
 800667e:	fa08 f800 	lsl.w	r8, r8, r0
 8006682:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006686:	fa23 f000 	lsr.w	r0, r3, r0
 800668a:	ea48 0000 	orr.w	r0, r8, r0
 800668e:	f7f9 ff41 	bl	8000514 <__aeabi_ui2d>
 8006692:	2301      	movs	r3, #1
 8006694:	4682      	mov	sl, r0
 8006696:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800669a:	3d01      	subs	r5, #1
 800669c:	9313      	str	r3, [sp, #76]	; 0x4c
 800669e:	e772      	b.n	8006586 <_dtoa_r+0xf6>
 80066a0:	9b00      	ldr	r3, [sp, #0]
 80066a2:	f1c0 0020 	rsb	r0, r0, #32
 80066a6:	fa03 f000 	lsl.w	r0, r3, r0
 80066aa:	e7f0      	b.n	800668e <_dtoa_r+0x1fe>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e7b1      	b.n	8006614 <_dtoa_r+0x184>
 80066b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80066b2:	e7b0      	b.n	8006616 <_dtoa_r+0x186>
 80066b4:	9b05      	ldr	r3, [sp, #20]
 80066b6:	eba3 030a 	sub.w	r3, r3, sl
 80066ba:	9305      	str	r3, [sp, #20]
 80066bc:	f1ca 0300 	rsb	r3, sl, #0
 80066c0:	9307      	str	r3, [sp, #28]
 80066c2:	2300      	movs	r3, #0
 80066c4:	930e      	str	r3, [sp, #56]	; 0x38
 80066c6:	e7bb      	b.n	8006640 <_dtoa_r+0x1b0>
 80066c8:	2301      	movs	r3, #1
 80066ca:	930a      	str	r3, [sp, #40]	; 0x28
 80066cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	dd59      	ble.n	8006786 <_dtoa_r+0x2f6>
 80066d2:	9302      	str	r3, [sp, #8]
 80066d4:	4699      	mov	r9, r3
 80066d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066d8:	2200      	movs	r2, #0
 80066da:	6072      	str	r2, [r6, #4]
 80066dc:	2204      	movs	r2, #4
 80066de:	f102 0014 	add.w	r0, r2, #20
 80066e2:	4298      	cmp	r0, r3
 80066e4:	6871      	ldr	r1, [r6, #4]
 80066e6:	d953      	bls.n	8006790 <_dtoa_r+0x300>
 80066e8:	4620      	mov	r0, r4
 80066ea:	f000 fd74 	bl	80071d6 <_Balloc>
 80066ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066f0:	6030      	str	r0, [r6, #0]
 80066f2:	f1b9 0f0e 	cmp.w	r9, #14
 80066f6:	f8d3 b000 	ldr.w	fp, [r3]
 80066fa:	f200 80e6 	bhi.w	80068ca <_dtoa_r+0x43a>
 80066fe:	2d00      	cmp	r5, #0
 8006700:	f000 80e3 	beq.w	80068ca <_dtoa_r+0x43a>
 8006704:	ed9d 7b00 	vldr	d7, [sp]
 8006708:	f1ba 0f00 	cmp.w	sl, #0
 800670c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006710:	dd74      	ble.n	80067fc <_dtoa_r+0x36c>
 8006712:	4a2a      	ldr	r2, [pc, #168]	; (80067bc <_dtoa_r+0x32c>)
 8006714:	f00a 030f 	and.w	r3, sl, #15
 8006718:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800671c:	ed93 7b00 	vldr	d7, [r3]
 8006720:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006724:	06f0      	lsls	r0, r6, #27
 8006726:	ed8d 7b08 	vstr	d7, [sp, #32]
 800672a:	d565      	bpl.n	80067f8 <_dtoa_r+0x368>
 800672c:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <_dtoa_r+0x330>)
 800672e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006732:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006736:	f7fa f891 	bl	800085c <__aeabi_ddiv>
 800673a:	e9cd 0100 	strd	r0, r1, [sp]
 800673e:	f006 060f 	and.w	r6, r6, #15
 8006742:	2503      	movs	r5, #3
 8006744:	4f1e      	ldr	r7, [pc, #120]	; (80067c0 <_dtoa_r+0x330>)
 8006746:	e04c      	b.n	80067e2 <_dtoa_r+0x352>
 8006748:	2301      	movs	r3, #1
 800674a:	930a      	str	r3, [sp, #40]	; 0x28
 800674c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674e:	4453      	add	r3, sl
 8006750:	f103 0901 	add.w	r9, r3, #1
 8006754:	9302      	str	r3, [sp, #8]
 8006756:	464b      	mov	r3, r9
 8006758:	2b01      	cmp	r3, #1
 800675a:	bfb8      	it	lt
 800675c:	2301      	movlt	r3, #1
 800675e:	e7ba      	b.n	80066d6 <_dtoa_r+0x246>
 8006760:	2300      	movs	r3, #0
 8006762:	e7b2      	b.n	80066ca <_dtoa_r+0x23a>
 8006764:	2300      	movs	r3, #0
 8006766:	e7f0      	b.n	800674a <_dtoa_r+0x2ba>
 8006768:	2501      	movs	r5, #1
 800676a:	2300      	movs	r3, #0
 800676c:	9306      	str	r3, [sp, #24]
 800676e:	950a      	str	r5, [sp, #40]	; 0x28
 8006770:	f04f 33ff 	mov.w	r3, #4294967295
 8006774:	9302      	str	r3, [sp, #8]
 8006776:	4699      	mov	r9, r3
 8006778:	2200      	movs	r2, #0
 800677a:	2312      	movs	r3, #18
 800677c:	920b      	str	r2, [sp, #44]	; 0x2c
 800677e:	e7aa      	b.n	80066d6 <_dtoa_r+0x246>
 8006780:	2301      	movs	r3, #1
 8006782:	930a      	str	r3, [sp, #40]	; 0x28
 8006784:	e7f4      	b.n	8006770 <_dtoa_r+0x2e0>
 8006786:	2301      	movs	r3, #1
 8006788:	9302      	str	r3, [sp, #8]
 800678a:	4699      	mov	r9, r3
 800678c:	461a      	mov	r2, r3
 800678e:	e7f5      	b.n	800677c <_dtoa_r+0x2ec>
 8006790:	3101      	adds	r1, #1
 8006792:	6071      	str	r1, [r6, #4]
 8006794:	0052      	lsls	r2, r2, #1
 8006796:	e7a2      	b.n	80066de <_dtoa_r+0x24e>
 8006798:	636f4361 	.word	0x636f4361
 800679c:	3fd287a7 	.word	0x3fd287a7
 80067a0:	8b60c8b3 	.word	0x8b60c8b3
 80067a4:	3fc68a28 	.word	0x3fc68a28
 80067a8:	509f79fb 	.word	0x509f79fb
 80067ac:	3fd34413 	.word	0x3fd34413
 80067b0:	7ff00000 	.word	0x7ff00000
 80067b4:	08008951 	.word	0x08008951
 80067b8:	3ff80000 	.word	0x3ff80000
 80067bc:	08008a10 	.word	0x08008a10
 80067c0:	080089e8 	.word	0x080089e8
 80067c4:	0800897d 	.word	0x0800897d
 80067c8:	07f1      	lsls	r1, r6, #31
 80067ca:	d508      	bpl.n	80067de <_dtoa_r+0x34e>
 80067cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d4:	f7f9 ff18 	bl	8000608 <__aeabi_dmul>
 80067d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067dc:	3501      	adds	r5, #1
 80067de:	1076      	asrs	r6, r6, #1
 80067e0:	3708      	adds	r7, #8
 80067e2:	2e00      	cmp	r6, #0
 80067e4:	d1f0      	bne.n	80067c8 <_dtoa_r+0x338>
 80067e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067ee:	f7fa f835 	bl	800085c <__aeabi_ddiv>
 80067f2:	e9cd 0100 	strd	r0, r1, [sp]
 80067f6:	e01a      	b.n	800682e <_dtoa_r+0x39e>
 80067f8:	2502      	movs	r5, #2
 80067fa:	e7a3      	b.n	8006744 <_dtoa_r+0x2b4>
 80067fc:	f000 80a0 	beq.w	8006940 <_dtoa_r+0x4b0>
 8006800:	f1ca 0600 	rsb	r6, sl, #0
 8006804:	4b9f      	ldr	r3, [pc, #636]	; (8006a84 <_dtoa_r+0x5f4>)
 8006806:	4fa0      	ldr	r7, [pc, #640]	; (8006a88 <_dtoa_r+0x5f8>)
 8006808:	f006 020f 	and.w	r2, r6, #15
 800680c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006818:	f7f9 fef6 	bl	8000608 <__aeabi_dmul>
 800681c:	e9cd 0100 	strd	r0, r1, [sp]
 8006820:	1136      	asrs	r6, r6, #4
 8006822:	2300      	movs	r3, #0
 8006824:	2502      	movs	r5, #2
 8006826:	2e00      	cmp	r6, #0
 8006828:	d17f      	bne.n	800692a <_dtoa_r+0x49a>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e1      	bne.n	80067f2 <_dtoa_r+0x362>
 800682e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8087 	beq.w	8006944 <_dtoa_r+0x4b4>
 8006836:	e9dd 6700 	ldrd	r6, r7, [sp]
 800683a:	2200      	movs	r2, #0
 800683c:	4b93      	ldr	r3, [pc, #588]	; (8006a8c <_dtoa_r+0x5fc>)
 800683e:	4630      	mov	r0, r6
 8006840:	4639      	mov	r1, r7
 8006842:	f7fa f953 	bl	8000aec <__aeabi_dcmplt>
 8006846:	2800      	cmp	r0, #0
 8006848:	d07c      	beq.n	8006944 <_dtoa_r+0x4b4>
 800684a:	f1b9 0f00 	cmp.w	r9, #0
 800684e:	d079      	beq.n	8006944 <_dtoa_r+0x4b4>
 8006850:	9b02      	ldr	r3, [sp, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	dd35      	ble.n	80068c2 <_dtoa_r+0x432>
 8006856:	f10a 33ff 	add.w	r3, sl, #4294967295
 800685a:	9308      	str	r3, [sp, #32]
 800685c:	4639      	mov	r1, r7
 800685e:	2200      	movs	r2, #0
 8006860:	4b8b      	ldr	r3, [pc, #556]	; (8006a90 <_dtoa_r+0x600>)
 8006862:	4630      	mov	r0, r6
 8006864:	f7f9 fed0 	bl	8000608 <__aeabi_dmul>
 8006868:	e9cd 0100 	strd	r0, r1, [sp]
 800686c:	9f02      	ldr	r7, [sp, #8]
 800686e:	3501      	adds	r5, #1
 8006870:	4628      	mov	r0, r5
 8006872:	f7f9 fe5f 	bl	8000534 <__aeabi_i2d>
 8006876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800687a:	f7f9 fec5 	bl	8000608 <__aeabi_dmul>
 800687e:	2200      	movs	r2, #0
 8006880:	4b84      	ldr	r3, [pc, #528]	; (8006a94 <_dtoa_r+0x604>)
 8006882:	f7f9 fd0b 	bl	800029c <__adddf3>
 8006886:	4605      	mov	r5, r0
 8006888:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800688c:	2f00      	cmp	r7, #0
 800688e:	d15d      	bne.n	800694c <_dtoa_r+0x4bc>
 8006890:	2200      	movs	r2, #0
 8006892:	4b81      	ldr	r3, [pc, #516]	; (8006a98 <_dtoa_r+0x608>)
 8006894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006898:	f7f9 fcfe 	bl	8000298 <__aeabi_dsub>
 800689c:	462a      	mov	r2, r5
 800689e:	4633      	mov	r3, r6
 80068a0:	e9cd 0100 	strd	r0, r1, [sp]
 80068a4:	f7fa f940 	bl	8000b28 <__aeabi_dcmpgt>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	f040 8288 	bne.w	8006dbe <_dtoa_r+0x92e>
 80068ae:	462a      	mov	r2, r5
 80068b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80068b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068b8:	f7fa f918 	bl	8000aec <__aeabi_dcmplt>
 80068bc:	2800      	cmp	r0, #0
 80068be:	f040 827c 	bne.w	8006dba <_dtoa_r+0x92a>
 80068c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068c6:	e9cd 2300 	strd	r2, r3, [sp]
 80068ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f2c0 8150 	blt.w	8006b72 <_dtoa_r+0x6e2>
 80068d2:	f1ba 0f0e 	cmp.w	sl, #14
 80068d6:	f300 814c 	bgt.w	8006b72 <_dtoa_r+0x6e2>
 80068da:	4b6a      	ldr	r3, [pc, #424]	; (8006a84 <_dtoa_r+0x5f4>)
 80068dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068e0:	ed93 7b00 	vldr	d7, [r3]
 80068e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80068ec:	f280 80d8 	bge.w	8006aa0 <_dtoa_r+0x610>
 80068f0:	f1b9 0f00 	cmp.w	r9, #0
 80068f4:	f300 80d4 	bgt.w	8006aa0 <_dtoa_r+0x610>
 80068f8:	f040 825e 	bne.w	8006db8 <_dtoa_r+0x928>
 80068fc:	2200      	movs	r2, #0
 80068fe:	4b66      	ldr	r3, [pc, #408]	; (8006a98 <_dtoa_r+0x608>)
 8006900:	ec51 0b17 	vmov	r0, r1, d7
 8006904:	f7f9 fe80 	bl	8000608 <__aeabi_dmul>
 8006908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800690c:	f7fa f902 	bl	8000b14 <__aeabi_dcmpge>
 8006910:	464f      	mov	r7, r9
 8006912:	464e      	mov	r6, r9
 8006914:	2800      	cmp	r0, #0
 8006916:	f040 8234 	bne.w	8006d82 <_dtoa_r+0x8f2>
 800691a:	2331      	movs	r3, #49	; 0x31
 800691c:	f10b 0501 	add.w	r5, fp, #1
 8006920:	f88b 3000 	strb.w	r3, [fp]
 8006924:	f10a 0a01 	add.w	sl, sl, #1
 8006928:	e22f      	b.n	8006d8a <_dtoa_r+0x8fa>
 800692a:	07f2      	lsls	r2, r6, #31
 800692c:	d505      	bpl.n	800693a <_dtoa_r+0x4aa>
 800692e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006932:	f7f9 fe69 	bl	8000608 <__aeabi_dmul>
 8006936:	3501      	adds	r5, #1
 8006938:	2301      	movs	r3, #1
 800693a:	1076      	asrs	r6, r6, #1
 800693c:	3708      	adds	r7, #8
 800693e:	e772      	b.n	8006826 <_dtoa_r+0x396>
 8006940:	2502      	movs	r5, #2
 8006942:	e774      	b.n	800682e <_dtoa_r+0x39e>
 8006944:	f8cd a020 	str.w	sl, [sp, #32]
 8006948:	464f      	mov	r7, r9
 800694a:	e791      	b.n	8006870 <_dtoa_r+0x3e0>
 800694c:	4b4d      	ldr	r3, [pc, #308]	; (8006a84 <_dtoa_r+0x5f4>)
 800694e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006952:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006958:	2b00      	cmp	r3, #0
 800695a:	d047      	beq.n	80069ec <_dtoa_r+0x55c>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	2000      	movs	r0, #0
 8006962:	494e      	ldr	r1, [pc, #312]	; (8006a9c <_dtoa_r+0x60c>)
 8006964:	f7f9 ff7a 	bl	800085c <__aeabi_ddiv>
 8006968:	462a      	mov	r2, r5
 800696a:	4633      	mov	r3, r6
 800696c:	f7f9 fc94 	bl	8000298 <__aeabi_dsub>
 8006970:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006974:	465d      	mov	r5, fp
 8006976:	e9dd 0100 	ldrd	r0, r1, [sp]
 800697a:	f7fa f8f5 	bl	8000b68 <__aeabi_d2iz>
 800697e:	4606      	mov	r6, r0
 8006980:	f7f9 fdd8 	bl	8000534 <__aeabi_i2d>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	e9dd 0100 	ldrd	r0, r1, [sp]
 800698c:	f7f9 fc84 	bl	8000298 <__aeabi_dsub>
 8006990:	3630      	adds	r6, #48	; 0x30
 8006992:	f805 6b01 	strb.w	r6, [r5], #1
 8006996:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800699a:	e9cd 0100 	strd	r0, r1, [sp]
 800699e:	f7fa f8a5 	bl	8000aec <__aeabi_dcmplt>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d163      	bne.n	8006a6e <_dtoa_r+0x5de>
 80069a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069aa:	2000      	movs	r0, #0
 80069ac:	4937      	ldr	r1, [pc, #220]	; (8006a8c <_dtoa_r+0x5fc>)
 80069ae:	f7f9 fc73 	bl	8000298 <__aeabi_dsub>
 80069b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80069b6:	f7fa f899 	bl	8000aec <__aeabi_dcmplt>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f040 80b7 	bne.w	8006b2e <_dtoa_r+0x69e>
 80069c0:	eba5 030b 	sub.w	r3, r5, fp
 80069c4:	429f      	cmp	r7, r3
 80069c6:	f77f af7c 	ble.w	80068c2 <_dtoa_r+0x432>
 80069ca:	2200      	movs	r2, #0
 80069cc:	4b30      	ldr	r3, [pc, #192]	; (8006a90 <_dtoa_r+0x600>)
 80069ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069d2:	f7f9 fe19 	bl	8000608 <__aeabi_dmul>
 80069d6:	2200      	movs	r2, #0
 80069d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80069dc:	4b2c      	ldr	r3, [pc, #176]	; (8006a90 <_dtoa_r+0x600>)
 80069de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069e2:	f7f9 fe11 	bl	8000608 <__aeabi_dmul>
 80069e6:	e9cd 0100 	strd	r0, r1, [sp]
 80069ea:	e7c4      	b.n	8006976 <_dtoa_r+0x4e6>
 80069ec:	462a      	mov	r2, r5
 80069ee:	4633      	mov	r3, r6
 80069f0:	f7f9 fe0a 	bl	8000608 <__aeabi_dmul>
 80069f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80069f8:	eb0b 0507 	add.w	r5, fp, r7
 80069fc:	465e      	mov	r6, fp
 80069fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a02:	f7fa f8b1 	bl	8000b68 <__aeabi_d2iz>
 8006a06:	4607      	mov	r7, r0
 8006a08:	f7f9 fd94 	bl	8000534 <__aeabi_i2d>
 8006a0c:	3730      	adds	r7, #48	; 0x30
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a16:	f7f9 fc3f 	bl	8000298 <__aeabi_dsub>
 8006a1a:	f806 7b01 	strb.w	r7, [r6], #1
 8006a1e:	42ae      	cmp	r6, r5
 8006a20:	e9cd 0100 	strd	r0, r1, [sp]
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	d126      	bne.n	8006a78 <_dtoa_r+0x5e8>
 8006a2a:	4b1c      	ldr	r3, [pc, #112]	; (8006a9c <_dtoa_r+0x60c>)
 8006a2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a30:	f7f9 fc34 	bl	800029c <__adddf3>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a3c:	f7fa f874 	bl	8000b28 <__aeabi_dcmpgt>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d174      	bne.n	8006b2e <_dtoa_r+0x69e>
 8006a44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a48:	2000      	movs	r0, #0
 8006a4a:	4914      	ldr	r1, [pc, #80]	; (8006a9c <_dtoa_r+0x60c>)
 8006a4c:	f7f9 fc24 	bl	8000298 <__aeabi_dsub>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a58:	f7fa f848 	bl	8000aec <__aeabi_dcmplt>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	f43f af30 	beq.w	80068c2 <_dtoa_r+0x432>
 8006a62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a66:	2b30      	cmp	r3, #48	; 0x30
 8006a68:	f105 32ff 	add.w	r2, r5, #4294967295
 8006a6c:	d002      	beq.n	8006a74 <_dtoa_r+0x5e4>
 8006a6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a72:	e04a      	b.n	8006b0a <_dtoa_r+0x67a>
 8006a74:	4615      	mov	r5, r2
 8006a76:	e7f4      	b.n	8006a62 <_dtoa_r+0x5d2>
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <_dtoa_r+0x600>)
 8006a7a:	f7f9 fdc5 	bl	8000608 <__aeabi_dmul>
 8006a7e:	e9cd 0100 	strd	r0, r1, [sp]
 8006a82:	e7bc      	b.n	80069fe <_dtoa_r+0x56e>
 8006a84:	08008a10 	.word	0x08008a10
 8006a88:	080089e8 	.word	0x080089e8
 8006a8c:	3ff00000 	.word	0x3ff00000
 8006a90:	40240000 	.word	0x40240000
 8006a94:	401c0000 	.word	0x401c0000
 8006a98:	40140000 	.word	0x40140000
 8006a9c:	3fe00000 	.word	0x3fe00000
 8006aa0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006aa4:	465d      	mov	r5, fp
 8006aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aaa:	4630      	mov	r0, r6
 8006aac:	4639      	mov	r1, r7
 8006aae:	f7f9 fed5 	bl	800085c <__aeabi_ddiv>
 8006ab2:	f7fa f859 	bl	8000b68 <__aeabi_d2iz>
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	f7f9 fd3c 	bl	8000534 <__aeabi_i2d>
 8006abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ac0:	f7f9 fda2 	bl	8000608 <__aeabi_dmul>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006ad0:	f7f9 fbe2 	bl	8000298 <__aeabi_dsub>
 8006ad4:	f805 6b01 	strb.w	r6, [r5], #1
 8006ad8:	eba5 060b 	sub.w	r6, r5, fp
 8006adc:	45b1      	cmp	r9, r6
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	d139      	bne.n	8006b58 <_dtoa_r+0x6c8>
 8006ae4:	f7f9 fbda 	bl	800029c <__adddf3>
 8006ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aec:	4606      	mov	r6, r0
 8006aee:	460f      	mov	r7, r1
 8006af0:	f7fa f81a 	bl	8000b28 <__aeabi_dcmpgt>
 8006af4:	b9c8      	cbnz	r0, 8006b2a <_dtoa_r+0x69a>
 8006af6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006afa:	4630      	mov	r0, r6
 8006afc:	4639      	mov	r1, r7
 8006afe:	f7f9 ffeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b02:	b110      	cbz	r0, 8006b0a <_dtoa_r+0x67a>
 8006b04:	f018 0f01 	tst.w	r8, #1
 8006b08:	d10f      	bne.n	8006b2a <_dtoa_r+0x69a>
 8006b0a:	9904      	ldr	r1, [sp, #16]
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 fb96 	bl	800723e <_Bfree>
 8006b12:	2300      	movs	r3, #0
 8006b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b16:	702b      	strb	r3, [r5, #0]
 8006b18:	f10a 0301 	add.w	r3, sl, #1
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8241 	beq.w	8006fa8 <_dtoa_r+0xb18>
 8006b26:	601d      	str	r5, [r3, #0]
 8006b28:	e23e      	b.n	8006fa8 <_dtoa_r+0xb18>
 8006b2a:	f8cd a020 	str.w	sl, [sp, #32]
 8006b2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b32:	2a39      	cmp	r2, #57	; 0x39
 8006b34:	f105 33ff 	add.w	r3, r5, #4294967295
 8006b38:	d108      	bne.n	8006b4c <_dtoa_r+0x6bc>
 8006b3a:	459b      	cmp	fp, r3
 8006b3c:	d10a      	bne.n	8006b54 <_dtoa_r+0x6c4>
 8006b3e:	9b08      	ldr	r3, [sp, #32]
 8006b40:	3301      	adds	r3, #1
 8006b42:	9308      	str	r3, [sp, #32]
 8006b44:	2330      	movs	r3, #48	; 0x30
 8006b46:	f88b 3000 	strb.w	r3, [fp]
 8006b4a:	465b      	mov	r3, fp
 8006b4c:	781a      	ldrb	r2, [r3, #0]
 8006b4e:	3201      	adds	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	e78c      	b.n	8006a6e <_dtoa_r+0x5de>
 8006b54:	461d      	mov	r5, r3
 8006b56:	e7ea      	b.n	8006b2e <_dtoa_r+0x69e>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4b9b      	ldr	r3, [pc, #620]	; (8006dc8 <_dtoa_r+0x938>)
 8006b5c:	f7f9 fd54 	bl	8000608 <__aeabi_dmul>
 8006b60:	2200      	movs	r2, #0
 8006b62:	2300      	movs	r3, #0
 8006b64:	4606      	mov	r6, r0
 8006b66:	460f      	mov	r7, r1
 8006b68:	f7f9 ffb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d09a      	beq.n	8006aa6 <_dtoa_r+0x616>
 8006b70:	e7cb      	b.n	8006b0a <_dtoa_r+0x67a>
 8006b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b74:	2a00      	cmp	r2, #0
 8006b76:	f000 808b 	beq.w	8006c90 <_dtoa_r+0x800>
 8006b7a:	9a06      	ldr	r2, [sp, #24]
 8006b7c:	2a01      	cmp	r2, #1
 8006b7e:	dc6e      	bgt.n	8006c5e <_dtoa_r+0x7ce>
 8006b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	d067      	beq.n	8006c56 <_dtoa_r+0x7c6>
 8006b86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b8a:	9f07      	ldr	r7, [sp, #28]
 8006b8c:	9d05      	ldr	r5, [sp, #20]
 8006b8e:	9a05      	ldr	r2, [sp, #20]
 8006b90:	2101      	movs	r1, #1
 8006b92:	441a      	add	r2, r3
 8006b94:	4620      	mov	r0, r4
 8006b96:	9205      	str	r2, [sp, #20]
 8006b98:	4498      	add	r8, r3
 8006b9a:	f000 fbf0 	bl	800737e <__i2b>
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	2d00      	cmp	r5, #0
 8006ba2:	dd0c      	ble.n	8006bbe <_dtoa_r+0x72e>
 8006ba4:	f1b8 0f00 	cmp.w	r8, #0
 8006ba8:	dd09      	ble.n	8006bbe <_dtoa_r+0x72e>
 8006baa:	4545      	cmp	r5, r8
 8006bac:	9a05      	ldr	r2, [sp, #20]
 8006bae:	462b      	mov	r3, r5
 8006bb0:	bfa8      	it	ge
 8006bb2:	4643      	movge	r3, r8
 8006bb4:	1ad2      	subs	r2, r2, r3
 8006bb6:	9205      	str	r2, [sp, #20]
 8006bb8:	1aed      	subs	r5, r5, r3
 8006bba:	eba8 0803 	sub.w	r8, r8, r3
 8006bbe:	9b07      	ldr	r3, [sp, #28]
 8006bc0:	b1eb      	cbz	r3, 8006bfe <_dtoa_r+0x76e>
 8006bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d067      	beq.n	8006c98 <_dtoa_r+0x808>
 8006bc8:	b18f      	cbz	r7, 8006bee <_dtoa_r+0x75e>
 8006bca:	4631      	mov	r1, r6
 8006bcc:	463a      	mov	r2, r7
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 fc74 	bl	80074bc <__pow5mult>
 8006bd4:	9a04      	ldr	r2, [sp, #16]
 8006bd6:	4601      	mov	r1, r0
 8006bd8:	4606      	mov	r6, r0
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 fbd8 	bl	8007390 <__multiply>
 8006be0:	9904      	ldr	r1, [sp, #16]
 8006be2:	9008      	str	r0, [sp, #32]
 8006be4:	4620      	mov	r0, r4
 8006be6:	f000 fb2a 	bl	800723e <_Bfree>
 8006bea:	9b08      	ldr	r3, [sp, #32]
 8006bec:	9304      	str	r3, [sp, #16]
 8006bee:	9b07      	ldr	r3, [sp, #28]
 8006bf0:	1bda      	subs	r2, r3, r7
 8006bf2:	d004      	beq.n	8006bfe <_dtoa_r+0x76e>
 8006bf4:	9904      	ldr	r1, [sp, #16]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 fc60 	bl	80074bc <__pow5mult>
 8006bfc:	9004      	str	r0, [sp, #16]
 8006bfe:	2101      	movs	r1, #1
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fbbc 	bl	800737e <__i2b>
 8006c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c08:	4607      	mov	r7, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 81d0 	beq.w	8006fb0 <_dtoa_r+0xb20>
 8006c10:	461a      	mov	r2, r3
 8006c12:	4601      	mov	r1, r0
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fc51 	bl	80074bc <__pow5mult>
 8006c1a:	9b06      	ldr	r3, [sp, #24]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	4607      	mov	r7, r0
 8006c20:	dc40      	bgt.n	8006ca4 <_dtoa_r+0x814>
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d139      	bne.n	8006c9c <_dtoa_r+0x80c>
 8006c28:	9b01      	ldr	r3, [sp, #4]
 8006c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d136      	bne.n	8006ca0 <_dtoa_r+0x810>
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c38:	0d1b      	lsrs	r3, r3, #20
 8006c3a:	051b      	lsls	r3, r3, #20
 8006c3c:	b12b      	cbz	r3, 8006c4a <_dtoa_r+0x7ba>
 8006c3e:	9b05      	ldr	r3, [sp, #20]
 8006c40:	3301      	adds	r3, #1
 8006c42:	9305      	str	r3, [sp, #20]
 8006c44:	f108 0801 	add.w	r8, r8, #1
 8006c48:	2301      	movs	r3, #1
 8006c4a:	9307      	str	r3, [sp, #28]
 8006c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d12a      	bne.n	8006ca8 <_dtoa_r+0x818>
 8006c52:	2001      	movs	r0, #1
 8006c54:	e030      	b.n	8006cb8 <_dtoa_r+0x828>
 8006c56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c5c:	e795      	b.n	8006b8a <_dtoa_r+0x6fa>
 8006c5e:	9b07      	ldr	r3, [sp, #28]
 8006c60:	f109 37ff 	add.w	r7, r9, #4294967295
 8006c64:	42bb      	cmp	r3, r7
 8006c66:	bfbf      	itttt	lt
 8006c68:	9b07      	ldrlt	r3, [sp, #28]
 8006c6a:	9707      	strlt	r7, [sp, #28]
 8006c6c:	1afa      	sublt	r2, r7, r3
 8006c6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006c70:	bfbb      	ittet	lt
 8006c72:	189b      	addlt	r3, r3, r2
 8006c74:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006c76:	1bdf      	subge	r7, r3, r7
 8006c78:	2700      	movlt	r7, #0
 8006c7a:	f1b9 0f00 	cmp.w	r9, #0
 8006c7e:	bfb5      	itete	lt
 8006c80:	9b05      	ldrlt	r3, [sp, #20]
 8006c82:	9d05      	ldrge	r5, [sp, #20]
 8006c84:	eba3 0509 	sublt.w	r5, r3, r9
 8006c88:	464b      	movge	r3, r9
 8006c8a:	bfb8      	it	lt
 8006c8c:	2300      	movlt	r3, #0
 8006c8e:	e77e      	b.n	8006b8e <_dtoa_r+0x6fe>
 8006c90:	9f07      	ldr	r7, [sp, #28]
 8006c92:	9d05      	ldr	r5, [sp, #20]
 8006c94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006c96:	e783      	b.n	8006ba0 <_dtoa_r+0x710>
 8006c98:	9a07      	ldr	r2, [sp, #28]
 8006c9a:	e7ab      	b.n	8006bf4 <_dtoa_r+0x764>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e7d4      	b.n	8006c4a <_dtoa_r+0x7ba>
 8006ca0:	9b00      	ldr	r3, [sp, #0]
 8006ca2:	e7d2      	b.n	8006c4a <_dtoa_r+0x7ba>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006cae:	6918      	ldr	r0, [r3, #16]
 8006cb0:	f000 fb17 	bl	80072e2 <__hi0bits>
 8006cb4:	f1c0 0020 	rsb	r0, r0, #32
 8006cb8:	4440      	add	r0, r8
 8006cba:	f010 001f 	ands.w	r0, r0, #31
 8006cbe:	d047      	beq.n	8006d50 <_dtoa_r+0x8c0>
 8006cc0:	f1c0 0320 	rsb	r3, r0, #32
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	dd3b      	ble.n	8006d40 <_dtoa_r+0x8b0>
 8006cc8:	9b05      	ldr	r3, [sp, #20]
 8006cca:	f1c0 001c 	rsb	r0, r0, #28
 8006cce:	4403      	add	r3, r0
 8006cd0:	9305      	str	r3, [sp, #20]
 8006cd2:	4405      	add	r5, r0
 8006cd4:	4480      	add	r8, r0
 8006cd6:	9b05      	ldr	r3, [sp, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	dd05      	ble.n	8006ce8 <_dtoa_r+0x858>
 8006cdc:	461a      	mov	r2, r3
 8006cde:	9904      	ldr	r1, [sp, #16]
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fc39 	bl	8007558 <__lshift>
 8006ce6:	9004      	str	r0, [sp, #16]
 8006ce8:	f1b8 0f00 	cmp.w	r8, #0
 8006cec:	dd05      	ble.n	8006cfa <_dtoa_r+0x86a>
 8006cee:	4639      	mov	r1, r7
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 fc30 	bl	8007558 <__lshift>
 8006cf8:	4607      	mov	r7, r0
 8006cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cfc:	b353      	cbz	r3, 8006d54 <_dtoa_r+0x8c4>
 8006cfe:	4639      	mov	r1, r7
 8006d00:	9804      	ldr	r0, [sp, #16]
 8006d02:	f000 fc7d 	bl	8007600 <__mcmp>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	da24      	bge.n	8006d54 <_dtoa_r+0x8c4>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	220a      	movs	r2, #10
 8006d0e:	9904      	ldr	r1, [sp, #16]
 8006d10:	4620      	mov	r0, r4
 8006d12:	f000 faab 	bl	800726c <__multadd>
 8006d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d18:	9004      	str	r0, [sp, #16]
 8006d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 814d 	beq.w	8006fbe <_dtoa_r+0xb2e>
 8006d24:	2300      	movs	r3, #0
 8006d26:	4631      	mov	r1, r6
 8006d28:	220a      	movs	r2, #10
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 fa9e 	bl	800726c <__multadd>
 8006d30:	9b02      	ldr	r3, [sp, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	4606      	mov	r6, r0
 8006d36:	dc4f      	bgt.n	8006dd8 <_dtoa_r+0x948>
 8006d38:	9b06      	ldr	r3, [sp, #24]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	dd4c      	ble.n	8006dd8 <_dtoa_r+0x948>
 8006d3e:	e011      	b.n	8006d64 <_dtoa_r+0x8d4>
 8006d40:	d0c9      	beq.n	8006cd6 <_dtoa_r+0x846>
 8006d42:	9a05      	ldr	r2, [sp, #20]
 8006d44:	331c      	adds	r3, #28
 8006d46:	441a      	add	r2, r3
 8006d48:	9205      	str	r2, [sp, #20]
 8006d4a:	441d      	add	r5, r3
 8006d4c:	4498      	add	r8, r3
 8006d4e:	e7c2      	b.n	8006cd6 <_dtoa_r+0x846>
 8006d50:	4603      	mov	r3, r0
 8006d52:	e7f6      	b.n	8006d42 <_dtoa_r+0x8b2>
 8006d54:	f1b9 0f00 	cmp.w	r9, #0
 8006d58:	dc38      	bgt.n	8006dcc <_dtoa_r+0x93c>
 8006d5a:	9b06      	ldr	r3, [sp, #24]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	dd35      	ble.n	8006dcc <_dtoa_r+0x93c>
 8006d60:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d64:	9b02      	ldr	r3, [sp, #8]
 8006d66:	b963      	cbnz	r3, 8006d82 <_dtoa_r+0x8f2>
 8006d68:	4639      	mov	r1, r7
 8006d6a:	2205      	movs	r2, #5
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 fa7d 	bl	800726c <__multadd>
 8006d72:	4601      	mov	r1, r0
 8006d74:	4607      	mov	r7, r0
 8006d76:	9804      	ldr	r0, [sp, #16]
 8006d78:	f000 fc42 	bl	8007600 <__mcmp>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	f73f adcc 	bgt.w	800691a <_dtoa_r+0x48a>
 8006d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d84:	465d      	mov	r5, fp
 8006d86:	ea6f 0a03 	mvn.w	sl, r3
 8006d8a:	f04f 0900 	mov.w	r9, #0
 8006d8e:	4639      	mov	r1, r7
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fa54 	bl	800723e <_Bfree>
 8006d96:	2e00      	cmp	r6, #0
 8006d98:	f43f aeb7 	beq.w	8006b0a <_dtoa_r+0x67a>
 8006d9c:	f1b9 0f00 	cmp.w	r9, #0
 8006da0:	d005      	beq.n	8006dae <_dtoa_r+0x91e>
 8006da2:	45b1      	cmp	r9, r6
 8006da4:	d003      	beq.n	8006dae <_dtoa_r+0x91e>
 8006da6:	4649      	mov	r1, r9
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fa48 	bl	800723e <_Bfree>
 8006dae:	4631      	mov	r1, r6
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 fa44 	bl	800723e <_Bfree>
 8006db6:	e6a8      	b.n	8006b0a <_dtoa_r+0x67a>
 8006db8:	2700      	movs	r7, #0
 8006dba:	463e      	mov	r6, r7
 8006dbc:	e7e1      	b.n	8006d82 <_dtoa_r+0x8f2>
 8006dbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006dc2:	463e      	mov	r6, r7
 8006dc4:	e5a9      	b.n	800691a <_dtoa_r+0x48a>
 8006dc6:	bf00      	nop
 8006dc8:	40240000 	.word	0x40240000
 8006dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dce:	f8cd 9008 	str.w	r9, [sp, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 80fa 	beq.w	8006fcc <_dtoa_r+0xb3c>
 8006dd8:	2d00      	cmp	r5, #0
 8006dda:	dd05      	ble.n	8006de8 <_dtoa_r+0x958>
 8006ddc:	4631      	mov	r1, r6
 8006dde:	462a      	mov	r2, r5
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fbb9 	bl	8007558 <__lshift>
 8006de6:	4606      	mov	r6, r0
 8006de8:	9b07      	ldr	r3, [sp, #28]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d04c      	beq.n	8006e88 <_dtoa_r+0x9f8>
 8006dee:	6871      	ldr	r1, [r6, #4]
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 f9f0 	bl	80071d6 <_Balloc>
 8006df6:	6932      	ldr	r2, [r6, #16]
 8006df8:	3202      	adds	r2, #2
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	0092      	lsls	r2, r2, #2
 8006dfe:	f106 010c 	add.w	r1, r6, #12
 8006e02:	300c      	adds	r0, #12
 8006e04:	f000 f9dc 	bl	80071c0 <memcpy>
 8006e08:	2201      	movs	r2, #1
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fba3 	bl	8007558 <__lshift>
 8006e12:	9b00      	ldr	r3, [sp, #0]
 8006e14:	f8cd b014 	str.w	fp, [sp, #20]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	46b1      	mov	r9, r6
 8006e1e:	9307      	str	r3, [sp, #28]
 8006e20:	4606      	mov	r6, r0
 8006e22:	4639      	mov	r1, r7
 8006e24:	9804      	ldr	r0, [sp, #16]
 8006e26:	f7ff faa7 	bl	8006378 <quorem>
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e32:	9804      	ldr	r0, [sp, #16]
 8006e34:	f000 fbe4 	bl	8007600 <__mcmp>
 8006e38:	4632      	mov	r2, r6
 8006e3a:	9000      	str	r0, [sp, #0]
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f000 fbf8 	bl	8007634 <__mdiff>
 8006e44:	68c3      	ldr	r3, [r0, #12]
 8006e46:	4602      	mov	r2, r0
 8006e48:	bb03      	cbnz	r3, 8006e8c <_dtoa_r+0x9fc>
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	9008      	str	r0, [sp, #32]
 8006e4e:	9804      	ldr	r0, [sp, #16]
 8006e50:	f000 fbd6 	bl	8007600 <__mcmp>
 8006e54:	9a08      	ldr	r2, [sp, #32]
 8006e56:	4603      	mov	r3, r0
 8006e58:	4611      	mov	r1, r2
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	9308      	str	r3, [sp, #32]
 8006e5e:	f000 f9ee 	bl	800723e <_Bfree>
 8006e62:	9b08      	ldr	r3, [sp, #32]
 8006e64:	b9a3      	cbnz	r3, 8006e90 <_dtoa_r+0xa00>
 8006e66:	9a06      	ldr	r2, [sp, #24]
 8006e68:	b992      	cbnz	r2, 8006e90 <_dtoa_r+0xa00>
 8006e6a:	9a07      	ldr	r2, [sp, #28]
 8006e6c:	b982      	cbnz	r2, 8006e90 <_dtoa_r+0xa00>
 8006e6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e72:	d029      	beq.n	8006ec8 <_dtoa_r+0xa38>
 8006e74:	9b00      	ldr	r3, [sp, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	dd01      	ble.n	8006e7e <_dtoa_r+0x9ee>
 8006e7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006e7e:	9b05      	ldr	r3, [sp, #20]
 8006e80:	1c5d      	adds	r5, r3, #1
 8006e82:	f883 8000 	strb.w	r8, [r3]
 8006e86:	e782      	b.n	8006d8e <_dtoa_r+0x8fe>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	e7c2      	b.n	8006e12 <_dtoa_r+0x982>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e7e3      	b.n	8006e58 <_dtoa_r+0x9c8>
 8006e90:	9a00      	ldr	r2, [sp, #0]
 8006e92:	2a00      	cmp	r2, #0
 8006e94:	db04      	blt.n	8006ea0 <_dtoa_r+0xa10>
 8006e96:	d125      	bne.n	8006ee4 <_dtoa_r+0xa54>
 8006e98:	9a06      	ldr	r2, [sp, #24]
 8006e9a:	bb1a      	cbnz	r2, 8006ee4 <_dtoa_r+0xa54>
 8006e9c:	9a07      	ldr	r2, [sp, #28]
 8006e9e:	bb0a      	cbnz	r2, 8006ee4 <_dtoa_r+0xa54>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	ddec      	ble.n	8006e7e <_dtoa_r+0x9ee>
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	9904      	ldr	r1, [sp, #16]
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 fb55 	bl	8007558 <__lshift>
 8006eae:	4639      	mov	r1, r7
 8006eb0:	9004      	str	r0, [sp, #16]
 8006eb2:	f000 fba5 	bl	8007600 <__mcmp>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	dc03      	bgt.n	8006ec2 <_dtoa_r+0xa32>
 8006eba:	d1e0      	bne.n	8006e7e <_dtoa_r+0x9ee>
 8006ebc:	f018 0f01 	tst.w	r8, #1
 8006ec0:	d0dd      	beq.n	8006e7e <_dtoa_r+0x9ee>
 8006ec2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ec6:	d1d8      	bne.n	8006e7a <_dtoa_r+0x9ea>
 8006ec8:	9b05      	ldr	r3, [sp, #20]
 8006eca:	9a05      	ldr	r2, [sp, #20]
 8006ecc:	1c5d      	adds	r5, r3, #1
 8006ece:	2339      	movs	r3, #57	; 0x39
 8006ed0:	7013      	strb	r3, [r2, #0]
 8006ed2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ed6:	2b39      	cmp	r3, #57	; 0x39
 8006ed8:	f105 32ff 	add.w	r2, r5, #4294967295
 8006edc:	d04f      	beq.n	8006f7e <_dtoa_r+0xaee>
 8006ede:	3301      	adds	r3, #1
 8006ee0:	7013      	strb	r3, [r2, #0]
 8006ee2:	e754      	b.n	8006d8e <_dtoa_r+0x8fe>
 8006ee4:	9a05      	ldr	r2, [sp, #20]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f102 0501 	add.w	r5, r2, #1
 8006eec:	dd06      	ble.n	8006efc <_dtoa_r+0xa6c>
 8006eee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ef2:	d0e9      	beq.n	8006ec8 <_dtoa_r+0xa38>
 8006ef4:	f108 0801 	add.w	r8, r8, #1
 8006ef8:	9b05      	ldr	r3, [sp, #20]
 8006efa:	e7c2      	b.n	8006e82 <_dtoa_r+0x9f2>
 8006efc:	9a02      	ldr	r2, [sp, #8]
 8006efe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006f02:	eba5 030b 	sub.w	r3, r5, fp
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d021      	beq.n	8006f4e <_dtoa_r+0xabe>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	220a      	movs	r2, #10
 8006f0e:	9904      	ldr	r1, [sp, #16]
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 f9ab 	bl	800726c <__multadd>
 8006f16:	45b1      	cmp	r9, r6
 8006f18:	9004      	str	r0, [sp, #16]
 8006f1a:	f04f 0300 	mov.w	r3, #0
 8006f1e:	f04f 020a 	mov.w	r2, #10
 8006f22:	4649      	mov	r1, r9
 8006f24:	4620      	mov	r0, r4
 8006f26:	d105      	bne.n	8006f34 <_dtoa_r+0xaa4>
 8006f28:	f000 f9a0 	bl	800726c <__multadd>
 8006f2c:	4681      	mov	r9, r0
 8006f2e:	4606      	mov	r6, r0
 8006f30:	9505      	str	r5, [sp, #20]
 8006f32:	e776      	b.n	8006e22 <_dtoa_r+0x992>
 8006f34:	f000 f99a 	bl	800726c <__multadd>
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4681      	mov	r9, r0
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	220a      	movs	r2, #10
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 f993 	bl	800726c <__multadd>
 8006f46:	4606      	mov	r6, r0
 8006f48:	e7f2      	b.n	8006f30 <_dtoa_r+0xaa0>
 8006f4a:	f04f 0900 	mov.w	r9, #0
 8006f4e:	2201      	movs	r2, #1
 8006f50:	9904      	ldr	r1, [sp, #16]
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 fb00 	bl	8007558 <__lshift>
 8006f58:	4639      	mov	r1, r7
 8006f5a:	9004      	str	r0, [sp, #16]
 8006f5c:	f000 fb50 	bl	8007600 <__mcmp>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	dcb6      	bgt.n	8006ed2 <_dtoa_r+0xa42>
 8006f64:	d102      	bne.n	8006f6c <_dtoa_r+0xadc>
 8006f66:	f018 0f01 	tst.w	r8, #1
 8006f6a:	d1b2      	bne.n	8006ed2 <_dtoa_r+0xa42>
 8006f6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f70:	2b30      	cmp	r3, #48	; 0x30
 8006f72:	f105 32ff 	add.w	r2, r5, #4294967295
 8006f76:	f47f af0a 	bne.w	8006d8e <_dtoa_r+0x8fe>
 8006f7a:	4615      	mov	r5, r2
 8006f7c:	e7f6      	b.n	8006f6c <_dtoa_r+0xadc>
 8006f7e:	4593      	cmp	fp, r2
 8006f80:	d105      	bne.n	8006f8e <_dtoa_r+0xafe>
 8006f82:	2331      	movs	r3, #49	; 0x31
 8006f84:	f10a 0a01 	add.w	sl, sl, #1
 8006f88:	f88b 3000 	strb.w	r3, [fp]
 8006f8c:	e6ff      	b.n	8006d8e <_dtoa_r+0x8fe>
 8006f8e:	4615      	mov	r5, r2
 8006f90:	e79f      	b.n	8006ed2 <_dtoa_r+0xa42>
 8006f92:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006ff8 <_dtoa_r+0xb68>
 8006f96:	e007      	b.n	8006fa8 <_dtoa_r+0xb18>
 8006f98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f9a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006ffc <_dtoa_r+0xb6c>
 8006f9e:	b11b      	cbz	r3, 8006fa8 <_dtoa_r+0xb18>
 8006fa0:	f10b 0308 	add.w	r3, fp, #8
 8006fa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	4658      	mov	r0, fp
 8006faa:	b017      	add	sp, #92	; 0x5c
 8006fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb0:	9b06      	ldr	r3, [sp, #24]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	f77f ae35 	ble.w	8006c22 <_dtoa_r+0x792>
 8006fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fba:	9307      	str	r3, [sp, #28]
 8006fbc:	e649      	b.n	8006c52 <_dtoa_r+0x7c2>
 8006fbe:	9b02      	ldr	r3, [sp, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dc03      	bgt.n	8006fcc <_dtoa_r+0xb3c>
 8006fc4:	9b06      	ldr	r3, [sp, #24]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	f73f aecc 	bgt.w	8006d64 <_dtoa_r+0x8d4>
 8006fcc:	465d      	mov	r5, fp
 8006fce:	4639      	mov	r1, r7
 8006fd0:	9804      	ldr	r0, [sp, #16]
 8006fd2:	f7ff f9d1 	bl	8006378 <quorem>
 8006fd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006fda:	f805 8b01 	strb.w	r8, [r5], #1
 8006fde:	9a02      	ldr	r2, [sp, #8]
 8006fe0:	eba5 030b 	sub.w	r3, r5, fp
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	ddb0      	ble.n	8006f4a <_dtoa_r+0xaba>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	220a      	movs	r2, #10
 8006fec:	9904      	ldr	r1, [sp, #16]
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f000 f93c 	bl	800726c <__multadd>
 8006ff4:	9004      	str	r0, [sp, #16]
 8006ff6:	e7ea      	b.n	8006fce <_dtoa_r+0xb3e>
 8006ff8:	08008950 	.word	0x08008950
 8006ffc:	08008974 	.word	0x08008974

08007000 <std>:
 8007000:	2300      	movs	r3, #0
 8007002:	b510      	push	{r4, lr}
 8007004:	4604      	mov	r4, r0
 8007006:	e9c0 3300 	strd	r3, r3, [r0]
 800700a:	6083      	str	r3, [r0, #8]
 800700c:	8181      	strh	r1, [r0, #12]
 800700e:	6643      	str	r3, [r0, #100]	; 0x64
 8007010:	81c2      	strh	r2, [r0, #14]
 8007012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007016:	6183      	str	r3, [r0, #24]
 8007018:	4619      	mov	r1, r3
 800701a:	2208      	movs	r2, #8
 800701c:	305c      	adds	r0, #92	; 0x5c
 800701e:	f7fe fd2f 	bl	8005a80 <memset>
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <std+0x38>)
 8007024:	6263      	str	r3, [r4, #36]	; 0x24
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <std+0x3c>)
 8007028:	62a3      	str	r3, [r4, #40]	; 0x28
 800702a:	4b05      	ldr	r3, [pc, #20]	; (8007040 <std+0x40>)
 800702c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800702e:	4b05      	ldr	r3, [pc, #20]	; (8007044 <std+0x44>)
 8007030:	6224      	str	r4, [r4, #32]
 8007032:	6323      	str	r3, [r4, #48]	; 0x30
 8007034:	bd10      	pop	{r4, pc}
 8007036:	bf00      	nop
 8007038:	08007b99 	.word	0x08007b99
 800703c:	08007bbb 	.word	0x08007bbb
 8007040:	08007bf3 	.word	0x08007bf3
 8007044:	08007c17 	.word	0x08007c17

08007048 <_cleanup_r>:
 8007048:	4901      	ldr	r1, [pc, #4]	; (8007050 <_cleanup_r+0x8>)
 800704a:	f000 b885 	b.w	8007158 <_fwalk_reent>
 800704e:	bf00      	nop
 8007050:	08007ef1 	.word	0x08007ef1

08007054 <__sfmoreglue>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	1e4a      	subs	r2, r1, #1
 8007058:	2568      	movs	r5, #104	; 0x68
 800705a:	4355      	muls	r5, r2
 800705c:	460e      	mov	r6, r1
 800705e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007062:	f000 fbef 	bl	8007844 <_malloc_r>
 8007066:	4604      	mov	r4, r0
 8007068:	b140      	cbz	r0, 800707c <__sfmoreglue+0x28>
 800706a:	2100      	movs	r1, #0
 800706c:	e9c0 1600 	strd	r1, r6, [r0]
 8007070:	300c      	adds	r0, #12
 8007072:	60a0      	str	r0, [r4, #8]
 8007074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007078:	f7fe fd02 	bl	8005a80 <memset>
 800707c:	4620      	mov	r0, r4
 800707e:	bd70      	pop	{r4, r5, r6, pc}

08007080 <__sinit>:
 8007080:	6983      	ldr	r3, [r0, #24]
 8007082:	b510      	push	{r4, lr}
 8007084:	4604      	mov	r4, r0
 8007086:	bb33      	cbnz	r3, 80070d6 <__sinit+0x56>
 8007088:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800708c:	6503      	str	r3, [r0, #80]	; 0x50
 800708e:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <__sinit+0x58>)
 8007090:	4a12      	ldr	r2, [pc, #72]	; (80070dc <__sinit+0x5c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6282      	str	r2, [r0, #40]	; 0x28
 8007096:	4298      	cmp	r0, r3
 8007098:	bf04      	itt	eq
 800709a:	2301      	moveq	r3, #1
 800709c:	6183      	streq	r3, [r0, #24]
 800709e:	f000 f81f 	bl	80070e0 <__sfp>
 80070a2:	6060      	str	r0, [r4, #4]
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 f81b 	bl	80070e0 <__sfp>
 80070aa:	60a0      	str	r0, [r4, #8]
 80070ac:	4620      	mov	r0, r4
 80070ae:	f000 f817 	bl	80070e0 <__sfp>
 80070b2:	2200      	movs	r2, #0
 80070b4:	60e0      	str	r0, [r4, #12]
 80070b6:	2104      	movs	r1, #4
 80070b8:	6860      	ldr	r0, [r4, #4]
 80070ba:	f7ff ffa1 	bl	8007000 <std>
 80070be:	2201      	movs	r2, #1
 80070c0:	2109      	movs	r1, #9
 80070c2:	68a0      	ldr	r0, [r4, #8]
 80070c4:	f7ff ff9c 	bl	8007000 <std>
 80070c8:	2202      	movs	r2, #2
 80070ca:	2112      	movs	r1, #18
 80070cc:	68e0      	ldr	r0, [r4, #12]
 80070ce:	f7ff ff97 	bl	8007000 <std>
 80070d2:	2301      	movs	r3, #1
 80070d4:	61a3      	str	r3, [r4, #24]
 80070d6:	bd10      	pop	{r4, pc}
 80070d8:	0800893c 	.word	0x0800893c
 80070dc:	08007049 	.word	0x08007049

080070e0 <__sfp>:
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <__sfp+0x70>)
 80070e4:	681e      	ldr	r6, [r3, #0]
 80070e6:	69b3      	ldr	r3, [r6, #24]
 80070e8:	4607      	mov	r7, r0
 80070ea:	b913      	cbnz	r3, 80070f2 <__sfp+0x12>
 80070ec:	4630      	mov	r0, r6
 80070ee:	f7ff ffc7 	bl	8007080 <__sinit>
 80070f2:	3648      	adds	r6, #72	; 0x48
 80070f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	d503      	bpl.n	8007104 <__sfp+0x24>
 80070fc:	6833      	ldr	r3, [r6, #0]
 80070fe:	b133      	cbz	r3, 800710e <__sfp+0x2e>
 8007100:	6836      	ldr	r6, [r6, #0]
 8007102:	e7f7      	b.n	80070f4 <__sfp+0x14>
 8007104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007108:	b16d      	cbz	r5, 8007126 <__sfp+0x46>
 800710a:	3468      	adds	r4, #104	; 0x68
 800710c:	e7f4      	b.n	80070f8 <__sfp+0x18>
 800710e:	2104      	movs	r1, #4
 8007110:	4638      	mov	r0, r7
 8007112:	f7ff ff9f 	bl	8007054 <__sfmoreglue>
 8007116:	6030      	str	r0, [r6, #0]
 8007118:	2800      	cmp	r0, #0
 800711a:	d1f1      	bne.n	8007100 <__sfp+0x20>
 800711c:	230c      	movs	r3, #12
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	4604      	mov	r4, r0
 8007122:	4620      	mov	r0, r4
 8007124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007126:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <__sfp+0x74>)
 8007128:	6665      	str	r5, [r4, #100]	; 0x64
 800712a:	e9c4 5500 	strd	r5, r5, [r4]
 800712e:	60a5      	str	r5, [r4, #8]
 8007130:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007134:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007138:	2208      	movs	r2, #8
 800713a:	4629      	mov	r1, r5
 800713c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007140:	f7fe fc9e 	bl	8005a80 <memset>
 8007144:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007148:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800714c:	e7e9      	b.n	8007122 <__sfp+0x42>
 800714e:	bf00      	nop
 8007150:	0800893c 	.word	0x0800893c
 8007154:	ffff0001 	.word	0xffff0001

08007158 <_fwalk_reent>:
 8007158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800715c:	4680      	mov	r8, r0
 800715e:	4689      	mov	r9, r1
 8007160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007164:	2600      	movs	r6, #0
 8007166:	b914      	cbnz	r4, 800716e <_fwalk_reent+0x16>
 8007168:	4630      	mov	r0, r6
 800716a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800716e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007172:	3f01      	subs	r7, #1
 8007174:	d501      	bpl.n	800717a <_fwalk_reent+0x22>
 8007176:	6824      	ldr	r4, [r4, #0]
 8007178:	e7f5      	b.n	8007166 <_fwalk_reent+0xe>
 800717a:	89ab      	ldrh	r3, [r5, #12]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d907      	bls.n	8007190 <_fwalk_reent+0x38>
 8007180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007184:	3301      	adds	r3, #1
 8007186:	d003      	beq.n	8007190 <_fwalk_reent+0x38>
 8007188:	4629      	mov	r1, r5
 800718a:	4640      	mov	r0, r8
 800718c:	47c8      	blx	r9
 800718e:	4306      	orrs	r6, r0
 8007190:	3568      	adds	r5, #104	; 0x68
 8007192:	e7ee      	b.n	8007172 <_fwalk_reent+0x1a>

08007194 <_localeconv_r>:
 8007194:	4b04      	ldr	r3, [pc, #16]	; (80071a8 <_localeconv_r+0x14>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6a18      	ldr	r0, [r3, #32]
 800719a:	4b04      	ldr	r3, [pc, #16]	; (80071ac <_localeconv_r+0x18>)
 800719c:	2800      	cmp	r0, #0
 800719e:	bf08      	it	eq
 80071a0:	4618      	moveq	r0, r3
 80071a2:	30f0      	adds	r0, #240	; 0xf0
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000010 	.word	0x20000010
 80071ac:	20000074 	.word	0x20000074

080071b0 <malloc>:
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <malloc+0xc>)
 80071b2:	4601      	mov	r1, r0
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f000 bb45 	b.w	8007844 <_malloc_r>
 80071ba:	bf00      	nop
 80071bc:	20000010 	.word	0x20000010

080071c0 <memcpy>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	1e43      	subs	r3, r0, #1
 80071c4:	440a      	add	r2, r1
 80071c6:	4291      	cmp	r1, r2
 80071c8:	d100      	bne.n	80071cc <memcpy+0xc>
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d4:	e7f7      	b.n	80071c6 <memcpy+0x6>

080071d6 <_Balloc>:
 80071d6:	b570      	push	{r4, r5, r6, lr}
 80071d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071da:	4604      	mov	r4, r0
 80071dc:	460e      	mov	r6, r1
 80071de:	b93d      	cbnz	r5, 80071f0 <_Balloc+0x1a>
 80071e0:	2010      	movs	r0, #16
 80071e2:	f7ff ffe5 	bl	80071b0 <malloc>
 80071e6:	6260      	str	r0, [r4, #36]	; 0x24
 80071e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071ec:	6005      	str	r5, [r0, #0]
 80071ee:	60c5      	str	r5, [r0, #12]
 80071f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80071f2:	68eb      	ldr	r3, [r5, #12]
 80071f4:	b183      	cbz	r3, 8007218 <_Balloc+0x42>
 80071f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80071fe:	b9b8      	cbnz	r0, 8007230 <_Balloc+0x5a>
 8007200:	2101      	movs	r1, #1
 8007202:	fa01 f506 	lsl.w	r5, r1, r6
 8007206:	1d6a      	adds	r2, r5, #5
 8007208:	0092      	lsls	r2, r2, #2
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fabe 	bl	800778c <_calloc_r>
 8007210:	b160      	cbz	r0, 800722c <_Balloc+0x56>
 8007212:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007216:	e00e      	b.n	8007236 <_Balloc+0x60>
 8007218:	2221      	movs	r2, #33	; 0x21
 800721a:	2104      	movs	r1, #4
 800721c:	4620      	mov	r0, r4
 800721e:	f000 fab5 	bl	800778c <_calloc_r>
 8007222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007224:	60e8      	str	r0, [r5, #12]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e4      	bne.n	80071f6 <_Balloc+0x20>
 800722c:	2000      	movs	r0, #0
 800722e:	bd70      	pop	{r4, r5, r6, pc}
 8007230:	6802      	ldr	r2, [r0, #0]
 8007232:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007236:	2300      	movs	r3, #0
 8007238:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800723c:	e7f7      	b.n	800722e <_Balloc+0x58>

0800723e <_Bfree>:
 800723e:	b570      	push	{r4, r5, r6, lr}
 8007240:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007242:	4606      	mov	r6, r0
 8007244:	460d      	mov	r5, r1
 8007246:	b93c      	cbnz	r4, 8007258 <_Bfree+0x1a>
 8007248:	2010      	movs	r0, #16
 800724a:	f7ff ffb1 	bl	80071b0 <malloc>
 800724e:	6270      	str	r0, [r6, #36]	; 0x24
 8007250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007254:	6004      	str	r4, [r0, #0]
 8007256:	60c4      	str	r4, [r0, #12]
 8007258:	b13d      	cbz	r5, 800726a <_Bfree+0x2c>
 800725a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800725c:	686a      	ldr	r2, [r5, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007264:	6029      	str	r1, [r5, #0]
 8007266:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800726a:	bd70      	pop	{r4, r5, r6, pc}

0800726c <__multadd>:
 800726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	690d      	ldr	r5, [r1, #16]
 8007272:	461f      	mov	r7, r3
 8007274:	4606      	mov	r6, r0
 8007276:	460c      	mov	r4, r1
 8007278:	f101 0c14 	add.w	ip, r1, #20
 800727c:	2300      	movs	r3, #0
 800727e:	f8dc 0000 	ldr.w	r0, [ip]
 8007282:	b281      	uxth	r1, r0
 8007284:	fb02 7101 	mla	r1, r2, r1, r7
 8007288:	0c0f      	lsrs	r7, r1, #16
 800728a:	0c00      	lsrs	r0, r0, #16
 800728c:	fb02 7000 	mla	r0, r2, r0, r7
 8007290:	b289      	uxth	r1, r1
 8007292:	3301      	adds	r3, #1
 8007294:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007298:	429d      	cmp	r5, r3
 800729a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800729e:	f84c 1b04 	str.w	r1, [ip], #4
 80072a2:	dcec      	bgt.n	800727e <__multadd+0x12>
 80072a4:	b1d7      	cbz	r7, 80072dc <__multadd+0x70>
 80072a6:	68a3      	ldr	r3, [r4, #8]
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	dc12      	bgt.n	80072d2 <__multadd+0x66>
 80072ac:	6861      	ldr	r1, [r4, #4]
 80072ae:	4630      	mov	r0, r6
 80072b0:	3101      	adds	r1, #1
 80072b2:	f7ff ff90 	bl	80071d6 <_Balloc>
 80072b6:	6922      	ldr	r2, [r4, #16]
 80072b8:	3202      	adds	r2, #2
 80072ba:	f104 010c 	add.w	r1, r4, #12
 80072be:	4680      	mov	r8, r0
 80072c0:	0092      	lsls	r2, r2, #2
 80072c2:	300c      	adds	r0, #12
 80072c4:	f7ff ff7c 	bl	80071c0 <memcpy>
 80072c8:	4621      	mov	r1, r4
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff ffb7 	bl	800723e <_Bfree>
 80072d0:	4644      	mov	r4, r8
 80072d2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072d6:	3501      	adds	r5, #1
 80072d8:	615f      	str	r7, [r3, #20]
 80072da:	6125      	str	r5, [r4, #16]
 80072dc:	4620      	mov	r0, r4
 80072de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072e2 <__hi0bits>:
 80072e2:	0c02      	lsrs	r2, r0, #16
 80072e4:	0412      	lsls	r2, r2, #16
 80072e6:	4603      	mov	r3, r0
 80072e8:	b9b2      	cbnz	r2, 8007318 <__hi0bits+0x36>
 80072ea:	0403      	lsls	r3, r0, #16
 80072ec:	2010      	movs	r0, #16
 80072ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072f2:	bf04      	itt	eq
 80072f4:	021b      	lsleq	r3, r3, #8
 80072f6:	3008      	addeq	r0, #8
 80072f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072fc:	bf04      	itt	eq
 80072fe:	011b      	lsleq	r3, r3, #4
 8007300:	3004      	addeq	r0, #4
 8007302:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007306:	bf04      	itt	eq
 8007308:	009b      	lsleq	r3, r3, #2
 800730a:	3002      	addeq	r0, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	db06      	blt.n	800731e <__hi0bits+0x3c>
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	d503      	bpl.n	800731c <__hi0bits+0x3a>
 8007314:	3001      	adds	r0, #1
 8007316:	4770      	bx	lr
 8007318:	2000      	movs	r0, #0
 800731a:	e7e8      	b.n	80072ee <__hi0bits+0xc>
 800731c:	2020      	movs	r0, #32
 800731e:	4770      	bx	lr

08007320 <__lo0bits>:
 8007320:	6803      	ldr	r3, [r0, #0]
 8007322:	f013 0207 	ands.w	r2, r3, #7
 8007326:	4601      	mov	r1, r0
 8007328:	d00b      	beq.n	8007342 <__lo0bits+0x22>
 800732a:	07da      	lsls	r2, r3, #31
 800732c:	d423      	bmi.n	8007376 <__lo0bits+0x56>
 800732e:	0798      	lsls	r0, r3, #30
 8007330:	bf49      	itett	mi
 8007332:	085b      	lsrmi	r3, r3, #1
 8007334:	089b      	lsrpl	r3, r3, #2
 8007336:	2001      	movmi	r0, #1
 8007338:	600b      	strmi	r3, [r1, #0]
 800733a:	bf5c      	itt	pl
 800733c:	600b      	strpl	r3, [r1, #0]
 800733e:	2002      	movpl	r0, #2
 8007340:	4770      	bx	lr
 8007342:	b298      	uxth	r0, r3
 8007344:	b9a8      	cbnz	r0, 8007372 <__lo0bits+0x52>
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	2010      	movs	r0, #16
 800734a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800734e:	bf04      	itt	eq
 8007350:	0a1b      	lsreq	r3, r3, #8
 8007352:	3008      	addeq	r0, #8
 8007354:	071a      	lsls	r2, r3, #28
 8007356:	bf04      	itt	eq
 8007358:	091b      	lsreq	r3, r3, #4
 800735a:	3004      	addeq	r0, #4
 800735c:	079a      	lsls	r2, r3, #30
 800735e:	bf04      	itt	eq
 8007360:	089b      	lsreq	r3, r3, #2
 8007362:	3002      	addeq	r0, #2
 8007364:	07da      	lsls	r2, r3, #31
 8007366:	d402      	bmi.n	800736e <__lo0bits+0x4e>
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	d006      	beq.n	800737a <__lo0bits+0x5a>
 800736c:	3001      	adds	r0, #1
 800736e:	600b      	str	r3, [r1, #0]
 8007370:	4770      	bx	lr
 8007372:	4610      	mov	r0, r2
 8007374:	e7e9      	b.n	800734a <__lo0bits+0x2a>
 8007376:	2000      	movs	r0, #0
 8007378:	4770      	bx	lr
 800737a:	2020      	movs	r0, #32
 800737c:	4770      	bx	lr

0800737e <__i2b>:
 800737e:	b510      	push	{r4, lr}
 8007380:	460c      	mov	r4, r1
 8007382:	2101      	movs	r1, #1
 8007384:	f7ff ff27 	bl	80071d6 <_Balloc>
 8007388:	2201      	movs	r2, #1
 800738a:	6144      	str	r4, [r0, #20]
 800738c:	6102      	str	r2, [r0, #16]
 800738e:	bd10      	pop	{r4, pc}

08007390 <__multiply>:
 8007390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	4614      	mov	r4, r2
 8007396:	690a      	ldr	r2, [r1, #16]
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	429a      	cmp	r2, r3
 800739c:	bfb8      	it	lt
 800739e:	460b      	movlt	r3, r1
 80073a0:	4688      	mov	r8, r1
 80073a2:	bfbc      	itt	lt
 80073a4:	46a0      	movlt	r8, r4
 80073a6:	461c      	movlt	r4, r3
 80073a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073b8:	eb07 0609 	add.w	r6, r7, r9
 80073bc:	42b3      	cmp	r3, r6
 80073be:	bfb8      	it	lt
 80073c0:	3101      	addlt	r1, #1
 80073c2:	f7ff ff08 	bl	80071d6 <_Balloc>
 80073c6:	f100 0514 	add.w	r5, r0, #20
 80073ca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80073ce:	462b      	mov	r3, r5
 80073d0:	2200      	movs	r2, #0
 80073d2:	4573      	cmp	r3, lr
 80073d4:	d316      	bcc.n	8007404 <__multiply+0x74>
 80073d6:	f104 0214 	add.w	r2, r4, #20
 80073da:	f108 0114 	add.w	r1, r8, #20
 80073de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80073e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	9b00      	ldr	r3, [sp, #0]
 80073ea:	9201      	str	r2, [sp, #4]
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d80c      	bhi.n	800740a <__multiply+0x7a>
 80073f0:	2e00      	cmp	r6, #0
 80073f2:	dd03      	ble.n	80073fc <__multiply+0x6c>
 80073f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d05d      	beq.n	80074b8 <__multiply+0x128>
 80073fc:	6106      	str	r6, [r0, #16]
 80073fe:	b003      	add	sp, #12
 8007400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007404:	f843 2b04 	str.w	r2, [r3], #4
 8007408:	e7e3      	b.n	80073d2 <__multiply+0x42>
 800740a:	f8b2 b000 	ldrh.w	fp, [r2]
 800740e:	f1bb 0f00 	cmp.w	fp, #0
 8007412:	d023      	beq.n	800745c <__multiply+0xcc>
 8007414:	4689      	mov	r9, r1
 8007416:	46ac      	mov	ip, r5
 8007418:	f04f 0800 	mov.w	r8, #0
 800741c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007420:	f8dc a000 	ldr.w	sl, [ip]
 8007424:	b2a3      	uxth	r3, r4
 8007426:	fa1f fa8a 	uxth.w	sl, sl
 800742a:	fb0b a303 	mla	r3, fp, r3, sl
 800742e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007432:	f8dc 4000 	ldr.w	r4, [ip]
 8007436:	4443      	add	r3, r8
 8007438:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800743c:	fb0b 840a 	mla	r4, fp, sl, r8
 8007440:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007444:	46e2      	mov	sl, ip
 8007446:	b29b      	uxth	r3, r3
 8007448:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800744c:	454f      	cmp	r7, r9
 800744e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007452:	f84a 3b04 	str.w	r3, [sl], #4
 8007456:	d82b      	bhi.n	80074b0 <__multiply+0x120>
 8007458:	f8cc 8004 	str.w	r8, [ip, #4]
 800745c:	9b01      	ldr	r3, [sp, #4]
 800745e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007462:	3204      	adds	r2, #4
 8007464:	f1ba 0f00 	cmp.w	sl, #0
 8007468:	d020      	beq.n	80074ac <__multiply+0x11c>
 800746a:	682b      	ldr	r3, [r5, #0]
 800746c:	4689      	mov	r9, r1
 800746e:	46a8      	mov	r8, r5
 8007470:	f04f 0b00 	mov.w	fp, #0
 8007474:	f8b9 c000 	ldrh.w	ip, [r9]
 8007478:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800747c:	fb0a 440c 	mla	r4, sl, ip, r4
 8007480:	445c      	add	r4, fp
 8007482:	46c4      	mov	ip, r8
 8007484:	b29b      	uxth	r3, r3
 8007486:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800748a:	f84c 3b04 	str.w	r3, [ip], #4
 800748e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007492:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	fb0a b303 	mla	r3, sl, r3, fp
 800749c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80074a0:	454f      	cmp	r7, r9
 80074a2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80074a6:	d805      	bhi.n	80074b4 <__multiply+0x124>
 80074a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80074ac:	3504      	adds	r5, #4
 80074ae:	e79b      	b.n	80073e8 <__multiply+0x58>
 80074b0:	46d4      	mov	ip, sl
 80074b2:	e7b3      	b.n	800741c <__multiply+0x8c>
 80074b4:	46e0      	mov	r8, ip
 80074b6:	e7dd      	b.n	8007474 <__multiply+0xe4>
 80074b8:	3e01      	subs	r6, #1
 80074ba:	e799      	b.n	80073f0 <__multiply+0x60>

080074bc <__pow5mult>:
 80074bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c0:	4615      	mov	r5, r2
 80074c2:	f012 0203 	ands.w	r2, r2, #3
 80074c6:	4606      	mov	r6, r0
 80074c8:	460f      	mov	r7, r1
 80074ca:	d007      	beq.n	80074dc <__pow5mult+0x20>
 80074cc:	3a01      	subs	r2, #1
 80074ce:	4c21      	ldr	r4, [pc, #132]	; (8007554 <__pow5mult+0x98>)
 80074d0:	2300      	movs	r3, #0
 80074d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074d6:	f7ff fec9 	bl	800726c <__multadd>
 80074da:	4607      	mov	r7, r0
 80074dc:	10ad      	asrs	r5, r5, #2
 80074de:	d035      	beq.n	800754c <__pow5mult+0x90>
 80074e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074e2:	b93c      	cbnz	r4, 80074f4 <__pow5mult+0x38>
 80074e4:	2010      	movs	r0, #16
 80074e6:	f7ff fe63 	bl	80071b0 <malloc>
 80074ea:	6270      	str	r0, [r6, #36]	; 0x24
 80074ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074f0:	6004      	str	r4, [r0, #0]
 80074f2:	60c4      	str	r4, [r0, #12]
 80074f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074fc:	b94c      	cbnz	r4, 8007512 <__pow5mult+0x56>
 80074fe:	f240 2171 	movw	r1, #625	; 0x271
 8007502:	4630      	mov	r0, r6
 8007504:	f7ff ff3b 	bl	800737e <__i2b>
 8007508:	2300      	movs	r3, #0
 800750a:	f8c8 0008 	str.w	r0, [r8, #8]
 800750e:	4604      	mov	r4, r0
 8007510:	6003      	str	r3, [r0, #0]
 8007512:	f04f 0800 	mov.w	r8, #0
 8007516:	07eb      	lsls	r3, r5, #31
 8007518:	d50a      	bpl.n	8007530 <__pow5mult+0x74>
 800751a:	4639      	mov	r1, r7
 800751c:	4622      	mov	r2, r4
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff ff36 	bl	8007390 <__multiply>
 8007524:	4639      	mov	r1, r7
 8007526:	4681      	mov	r9, r0
 8007528:	4630      	mov	r0, r6
 800752a:	f7ff fe88 	bl	800723e <_Bfree>
 800752e:	464f      	mov	r7, r9
 8007530:	106d      	asrs	r5, r5, #1
 8007532:	d00b      	beq.n	800754c <__pow5mult+0x90>
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	b938      	cbnz	r0, 8007548 <__pow5mult+0x8c>
 8007538:	4622      	mov	r2, r4
 800753a:	4621      	mov	r1, r4
 800753c:	4630      	mov	r0, r6
 800753e:	f7ff ff27 	bl	8007390 <__multiply>
 8007542:	6020      	str	r0, [r4, #0]
 8007544:	f8c0 8000 	str.w	r8, [r0]
 8007548:	4604      	mov	r4, r0
 800754a:	e7e4      	b.n	8007516 <__pow5mult+0x5a>
 800754c:	4638      	mov	r0, r7
 800754e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007552:	bf00      	nop
 8007554:	08008ad8 	.word	0x08008ad8

08007558 <__lshift>:
 8007558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	460c      	mov	r4, r1
 800755e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007562:	6923      	ldr	r3, [r4, #16]
 8007564:	6849      	ldr	r1, [r1, #4]
 8007566:	eb0a 0903 	add.w	r9, sl, r3
 800756a:	68a3      	ldr	r3, [r4, #8]
 800756c:	4607      	mov	r7, r0
 800756e:	4616      	mov	r6, r2
 8007570:	f109 0501 	add.w	r5, r9, #1
 8007574:	42ab      	cmp	r3, r5
 8007576:	db32      	blt.n	80075de <__lshift+0x86>
 8007578:	4638      	mov	r0, r7
 800757a:	f7ff fe2c 	bl	80071d6 <_Balloc>
 800757e:	2300      	movs	r3, #0
 8007580:	4680      	mov	r8, r0
 8007582:	f100 0114 	add.w	r1, r0, #20
 8007586:	461a      	mov	r2, r3
 8007588:	4553      	cmp	r3, sl
 800758a:	db2b      	blt.n	80075e4 <__lshift+0x8c>
 800758c:	6920      	ldr	r0, [r4, #16]
 800758e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007592:	f104 0314 	add.w	r3, r4, #20
 8007596:	f016 021f 	ands.w	r2, r6, #31
 800759a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800759e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075a2:	d025      	beq.n	80075f0 <__lshift+0x98>
 80075a4:	f1c2 0e20 	rsb	lr, r2, #32
 80075a8:	2000      	movs	r0, #0
 80075aa:	681e      	ldr	r6, [r3, #0]
 80075ac:	468a      	mov	sl, r1
 80075ae:	4096      	lsls	r6, r2
 80075b0:	4330      	orrs	r0, r6
 80075b2:	f84a 0b04 	str.w	r0, [sl], #4
 80075b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80075ba:	459c      	cmp	ip, r3
 80075bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80075c0:	d814      	bhi.n	80075ec <__lshift+0x94>
 80075c2:	6048      	str	r0, [r1, #4]
 80075c4:	b108      	cbz	r0, 80075ca <__lshift+0x72>
 80075c6:	f109 0502 	add.w	r5, r9, #2
 80075ca:	3d01      	subs	r5, #1
 80075cc:	4638      	mov	r0, r7
 80075ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80075d2:	4621      	mov	r1, r4
 80075d4:	f7ff fe33 	bl	800723e <_Bfree>
 80075d8:	4640      	mov	r0, r8
 80075da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075de:	3101      	adds	r1, #1
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	e7c7      	b.n	8007574 <__lshift+0x1c>
 80075e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80075e8:	3301      	adds	r3, #1
 80075ea:	e7cd      	b.n	8007588 <__lshift+0x30>
 80075ec:	4651      	mov	r1, sl
 80075ee:	e7dc      	b.n	80075aa <__lshift+0x52>
 80075f0:	3904      	subs	r1, #4
 80075f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80075fa:	459c      	cmp	ip, r3
 80075fc:	d8f9      	bhi.n	80075f2 <__lshift+0x9a>
 80075fe:	e7e4      	b.n	80075ca <__lshift+0x72>

08007600 <__mcmp>:
 8007600:	6903      	ldr	r3, [r0, #16]
 8007602:	690a      	ldr	r2, [r1, #16]
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	b530      	push	{r4, r5, lr}
 8007608:	d10c      	bne.n	8007624 <__mcmp+0x24>
 800760a:	0092      	lsls	r2, r2, #2
 800760c:	3014      	adds	r0, #20
 800760e:	3114      	adds	r1, #20
 8007610:	1884      	adds	r4, r0, r2
 8007612:	4411      	add	r1, r2
 8007614:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007618:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800761c:	4295      	cmp	r5, r2
 800761e:	d003      	beq.n	8007628 <__mcmp+0x28>
 8007620:	d305      	bcc.n	800762e <__mcmp+0x2e>
 8007622:	2301      	movs	r3, #1
 8007624:	4618      	mov	r0, r3
 8007626:	bd30      	pop	{r4, r5, pc}
 8007628:	42a0      	cmp	r0, r4
 800762a:	d3f3      	bcc.n	8007614 <__mcmp+0x14>
 800762c:	e7fa      	b.n	8007624 <__mcmp+0x24>
 800762e:	f04f 33ff 	mov.w	r3, #4294967295
 8007632:	e7f7      	b.n	8007624 <__mcmp+0x24>

08007634 <__mdiff>:
 8007634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007638:	460d      	mov	r5, r1
 800763a:	4607      	mov	r7, r0
 800763c:	4611      	mov	r1, r2
 800763e:	4628      	mov	r0, r5
 8007640:	4614      	mov	r4, r2
 8007642:	f7ff ffdd 	bl	8007600 <__mcmp>
 8007646:	1e06      	subs	r6, r0, #0
 8007648:	d108      	bne.n	800765c <__mdiff+0x28>
 800764a:	4631      	mov	r1, r6
 800764c:	4638      	mov	r0, r7
 800764e:	f7ff fdc2 	bl	80071d6 <_Balloc>
 8007652:	2301      	movs	r3, #1
 8007654:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765c:	bfa4      	itt	ge
 800765e:	4623      	movge	r3, r4
 8007660:	462c      	movge	r4, r5
 8007662:	4638      	mov	r0, r7
 8007664:	6861      	ldr	r1, [r4, #4]
 8007666:	bfa6      	itte	ge
 8007668:	461d      	movge	r5, r3
 800766a:	2600      	movge	r6, #0
 800766c:	2601      	movlt	r6, #1
 800766e:	f7ff fdb2 	bl	80071d6 <_Balloc>
 8007672:	692b      	ldr	r3, [r5, #16]
 8007674:	60c6      	str	r6, [r0, #12]
 8007676:	6926      	ldr	r6, [r4, #16]
 8007678:	f105 0914 	add.w	r9, r5, #20
 800767c:	f104 0214 	add.w	r2, r4, #20
 8007680:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007684:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007688:	f100 0514 	add.w	r5, r0, #20
 800768c:	f04f 0e00 	mov.w	lr, #0
 8007690:	f852 ab04 	ldr.w	sl, [r2], #4
 8007694:	f859 4b04 	ldr.w	r4, [r9], #4
 8007698:	fa1e f18a 	uxtah	r1, lr, sl
 800769c:	b2a3      	uxth	r3, r4
 800769e:	1ac9      	subs	r1, r1, r3
 80076a0:	0c23      	lsrs	r3, r4, #16
 80076a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80076a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80076aa:	b289      	uxth	r1, r1
 80076ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80076b0:	45c8      	cmp	r8, r9
 80076b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80076b6:	4694      	mov	ip, r2
 80076b8:	f845 3b04 	str.w	r3, [r5], #4
 80076bc:	d8e8      	bhi.n	8007690 <__mdiff+0x5c>
 80076be:	45bc      	cmp	ip, r7
 80076c0:	d304      	bcc.n	80076cc <__mdiff+0x98>
 80076c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80076c6:	b183      	cbz	r3, 80076ea <__mdiff+0xb6>
 80076c8:	6106      	str	r6, [r0, #16]
 80076ca:	e7c5      	b.n	8007658 <__mdiff+0x24>
 80076cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80076d0:	fa1e f381 	uxtah	r3, lr, r1
 80076d4:	141a      	asrs	r2, r3, #16
 80076d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076da:	b29b      	uxth	r3, r3
 80076dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80076e4:	f845 3b04 	str.w	r3, [r5], #4
 80076e8:	e7e9      	b.n	80076be <__mdiff+0x8a>
 80076ea:	3e01      	subs	r6, #1
 80076ec:	e7e9      	b.n	80076c2 <__mdiff+0x8e>

080076ee <__d2b>:
 80076ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076f2:	460e      	mov	r6, r1
 80076f4:	2101      	movs	r1, #1
 80076f6:	ec59 8b10 	vmov	r8, r9, d0
 80076fa:	4615      	mov	r5, r2
 80076fc:	f7ff fd6b 	bl	80071d6 <_Balloc>
 8007700:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007704:	4607      	mov	r7, r0
 8007706:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800770a:	bb34      	cbnz	r4, 800775a <__d2b+0x6c>
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	f1b8 0300 	subs.w	r3, r8, #0
 8007712:	d027      	beq.n	8007764 <__d2b+0x76>
 8007714:	a802      	add	r0, sp, #8
 8007716:	f840 3d08 	str.w	r3, [r0, #-8]!
 800771a:	f7ff fe01 	bl	8007320 <__lo0bits>
 800771e:	9900      	ldr	r1, [sp, #0]
 8007720:	b1f0      	cbz	r0, 8007760 <__d2b+0x72>
 8007722:	9a01      	ldr	r2, [sp, #4]
 8007724:	f1c0 0320 	rsb	r3, r0, #32
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	430b      	orrs	r3, r1
 800772e:	40c2      	lsrs	r2, r0
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9b01      	ldr	r3, [sp, #4]
 8007736:	61bb      	str	r3, [r7, #24]
 8007738:	2b00      	cmp	r3, #0
 800773a:	bf14      	ite	ne
 800773c:	2102      	movne	r1, #2
 800773e:	2101      	moveq	r1, #1
 8007740:	6139      	str	r1, [r7, #16]
 8007742:	b1c4      	cbz	r4, 8007776 <__d2b+0x88>
 8007744:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007748:	4404      	add	r4, r0
 800774a:	6034      	str	r4, [r6, #0]
 800774c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007750:	6028      	str	r0, [r5, #0]
 8007752:	4638      	mov	r0, r7
 8007754:	b003      	add	sp, #12
 8007756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800775a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800775e:	e7d5      	b.n	800770c <__d2b+0x1e>
 8007760:	6179      	str	r1, [r7, #20]
 8007762:	e7e7      	b.n	8007734 <__d2b+0x46>
 8007764:	a801      	add	r0, sp, #4
 8007766:	f7ff fddb 	bl	8007320 <__lo0bits>
 800776a:	9b01      	ldr	r3, [sp, #4]
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	2101      	movs	r1, #1
 8007770:	6139      	str	r1, [r7, #16]
 8007772:	3020      	adds	r0, #32
 8007774:	e7e5      	b.n	8007742 <__d2b+0x54>
 8007776:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800777a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800777e:	6030      	str	r0, [r6, #0]
 8007780:	6918      	ldr	r0, [r3, #16]
 8007782:	f7ff fdae 	bl	80072e2 <__hi0bits>
 8007786:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800778a:	e7e1      	b.n	8007750 <__d2b+0x62>

0800778c <_calloc_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	fb02 f401 	mul.w	r4, r2, r1
 8007792:	4621      	mov	r1, r4
 8007794:	f000 f856 	bl	8007844 <_malloc_r>
 8007798:	4605      	mov	r5, r0
 800779a:	b118      	cbz	r0, 80077a4 <_calloc_r+0x18>
 800779c:	4622      	mov	r2, r4
 800779e:	2100      	movs	r1, #0
 80077a0:	f7fe f96e 	bl	8005a80 <memset>
 80077a4:	4628      	mov	r0, r5
 80077a6:	bd38      	pop	{r3, r4, r5, pc}

080077a8 <_free_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4605      	mov	r5, r0
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d045      	beq.n	800783c <_free_r+0x94>
 80077b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077b4:	1f0c      	subs	r4, r1, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bfb8      	it	lt
 80077ba:	18e4      	addlt	r4, r4, r3
 80077bc:	f000 fc4a 	bl	8008054 <__malloc_lock>
 80077c0:	4a1f      	ldr	r2, [pc, #124]	; (8007840 <_free_r+0x98>)
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	4610      	mov	r0, r2
 80077c6:	b933      	cbnz	r3, 80077d6 <_free_r+0x2e>
 80077c8:	6063      	str	r3, [r4, #4]
 80077ca:	6014      	str	r4, [r2, #0]
 80077cc:	4628      	mov	r0, r5
 80077ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077d2:	f000 bc40 	b.w	8008056 <__malloc_unlock>
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	d90c      	bls.n	80077f4 <_free_r+0x4c>
 80077da:	6821      	ldr	r1, [r4, #0]
 80077dc:	1862      	adds	r2, r4, r1
 80077de:	4293      	cmp	r3, r2
 80077e0:	bf04      	itt	eq
 80077e2:	681a      	ldreq	r2, [r3, #0]
 80077e4:	685b      	ldreq	r3, [r3, #4]
 80077e6:	6063      	str	r3, [r4, #4]
 80077e8:	bf04      	itt	eq
 80077ea:	1852      	addeq	r2, r2, r1
 80077ec:	6022      	streq	r2, [r4, #0]
 80077ee:	6004      	str	r4, [r0, #0]
 80077f0:	e7ec      	b.n	80077cc <_free_r+0x24>
 80077f2:	4613      	mov	r3, r2
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	b10a      	cbz	r2, 80077fc <_free_r+0x54>
 80077f8:	42a2      	cmp	r2, r4
 80077fa:	d9fa      	bls.n	80077f2 <_free_r+0x4a>
 80077fc:	6819      	ldr	r1, [r3, #0]
 80077fe:	1858      	adds	r0, r3, r1
 8007800:	42a0      	cmp	r0, r4
 8007802:	d10b      	bne.n	800781c <_free_r+0x74>
 8007804:	6820      	ldr	r0, [r4, #0]
 8007806:	4401      	add	r1, r0
 8007808:	1858      	adds	r0, r3, r1
 800780a:	4282      	cmp	r2, r0
 800780c:	6019      	str	r1, [r3, #0]
 800780e:	d1dd      	bne.n	80077cc <_free_r+0x24>
 8007810:	6810      	ldr	r0, [r2, #0]
 8007812:	6852      	ldr	r2, [r2, #4]
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	4401      	add	r1, r0
 8007818:	6019      	str	r1, [r3, #0]
 800781a:	e7d7      	b.n	80077cc <_free_r+0x24>
 800781c:	d902      	bls.n	8007824 <_free_r+0x7c>
 800781e:	230c      	movs	r3, #12
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	e7d3      	b.n	80077cc <_free_r+0x24>
 8007824:	6820      	ldr	r0, [r4, #0]
 8007826:	1821      	adds	r1, r4, r0
 8007828:	428a      	cmp	r2, r1
 800782a:	bf04      	itt	eq
 800782c:	6811      	ldreq	r1, [r2, #0]
 800782e:	6852      	ldreq	r2, [r2, #4]
 8007830:	6062      	str	r2, [r4, #4]
 8007832:	bf04      	itt	eq
 8007834:	1809      	addeq	r1, r1, r0
 8007836:	6021      	streq	r1, [r4, #0]
 8007838:	605c      	str	r4, [r3, #4]
 800783a:	e7c7      	b.n	80077cc <_free_r+0x24>
 800783c:	bd38      	pop	{r3, r4, r5, pc}
 800783e:	bf00      	nop
 8007840:	20000214 	.word	0x20000214

08007844 <_malloc_r>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	1ccd      	adds	r5, r1, #3
 8007848:	f025 0503 	bic.w	r5, r5, #3
 800784c:	3508      	adds	r5, #8
 800784e:	2d0c      	cmp	r5, #12
 8007850:	bf38      	it	cc
 8007852:	250c      	movcc	r5, #12
 8007854:	2d00      	cmp	r5, #0
 8007856:	4606      	mov	r6, r0
 8007858:	db01      	blt.n	800785e <_malloc_r+0x1a>
 800785a:	42a9      	cmp	r1, r5
 800785c:	d903      	bls.n	8007866 <_malloc_r+0x22>
 800785e:	230c      	movs	r3, #12
 8007860:	6033      	str	r3, [r6, #0]
 8007862:	2000      	movs	r0, #0
 8007864:	bd70      	pop	{r4, r5, r6, pc}
 8007866:	f000 fbf5 	bl	8008054 <__malloc_lock>
 800786a:	4a21      	ldr	r2, [pc, #132]	; (80078f0 <_malloc_r+0xac>)
 800786c:	6814      	ldr	r4, [r2, #0]
 800786e:	4621      	mov	r1, r4
 8007870:	b991      	cbnz	r1, 8007898 <_malloc_r+0x54>
 8007872:	4c20      	ldr	r4, [pc, #128]	; (80078f4 <_malloc_r+0xb0>)
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	b91b      	cbnz	r3, 8007880 <_malloc_r+0x3c>
 8007878:	4630      	mov	r0, r6
 800787a:	f000 f97d 	bl	8007b78 <_sbrk_r>
 800787e:	6020      	str	r0, [r4, #0]
 8007880:	4629      	mov	r1, r5
 8007882:	4630      	mov	r0, r6
 8007884:	f000 f978 	bl	8007b78 <_sbrk_r>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d124      	bne.n	80078d6 <_malloc_r+0x92>
 800788c:	230c      	movs	r3, #12
 800788e:	6033      	str	r3, [r6, #0]
 8007890:	4630      	mov	r0, r6
 8007892:	f000 fbe0 	bl	8008056 <__malloc_unlock>
 8007896:	e7e4      	b.n	8007862 <_malloc_r+0x1e>
 8007898:	680b      	ldr	r3, [r1, #0]
 800789a:	1b5b      	subs	r3, r3, r5
 800789c:	d418      	bmi.n	80078d0 <_malloc_r+0x8c>
 800789e:	2b0b      	cmp	r3, #11
 80078a0:	d90f      	bls.n	80078c2 <_malloc_r+0x7e>
 80078a2:	600b      	str	r3, [r1, #0]
 80078a4:	50cd      	str	r5, [r1, r3]
 80078a6:	18cc      	adds	r4, r1, r3
 80078a8:	4630      	mov	r0, r6
 80078aa:	f000 fbd4 	bl	8008056 <__malloc_unlock>
 80078ae:	f104 000b 	add.w	r0, r4, #11
 80078b2:	1d23      	adds	r3, r4, #4
 80078b4:	f020 0007 	bic.w	r0, r0, #7
 80078b8:	1ac3      	subs	r3, r0, r3
 80078ba:	d0d3      	beq.n	8007864 <_malloc_r+0x20>
 80078bc:	425a      	negs	r2, r3
 80078be:	50e2      	str	r2, [r4, r3]
 80078c0:	e7d0      	b.n	8007864 <_malloc_r+0x20>
 80078c2:	428c      	cmp	r4, r1
 80078c4:	684b      	ldr	r3, [r1, #4]
 80078c6:	bf16      	itet	ne
 80078c8:	6063      	strne	r3, [r4, #4]
 80078ca:	6013      	streq	r3, [r2, #0]
 80078cc:	460c      	movne	r4, r1
 80078ce:	e7eb      	b.n	80078a8 <_malloc_r+0x64>
 80078d0:	460c      	mov	r4, r1
 80078d2:	6849      	ldr	r1, [r1, #4]
 80078d4:	e7cc      	b.n	8007870 <_malloc_r+0x2c>
 80078d6:	1cc4      	adds	r4, r0, #3
 80078d8:	f024 0403 	bic.w	r4, r4, #3
 80078dc:	42a0      	cmp	r0, r4
 80078de:	d005      	beq.n	80078ec <_malloc_r+0xa8>
 80078e0:	1a21      	subs	r1, r4, r0
 80078e2:	4630      	mov	r0, r6
 80078e4:	f000 f948 	bl	8007b78 <_sbrk_r>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d0cf      	beq.n	800788c <_malloc_r+0x48>
 80078ec:	6025      	str	r5, [r4, #0]
 80078ee:	e7db      	b.n	80078a8 <_malloc_r+0x64>
 80078f0:	20000214 	.word	0x20000214
 80078f4:	20000218 	.word	0x20000218

080078f8 <__sfputc_r>:
 80078f8:	6893      	ldr	r3, [r2, #8]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	b410      	push	{r4}
 8007900:	6093      	str	r3, [r2, #8]
 8007902:	da08      	bge.n	8007916 <__sfputc_r+0x1e>
 8007904:	6994      	ldr	r4, [r2, #24]
 8007906:	42a3      	cmp	r3, r4
 8007908:	db01      	blt.n	800790e <__sfputc_r+0x16>
 800790a:	290a      	cmp	r1, #10
 800790c:	d103      	bne.n	8007916 <__sfputc_r+0x1e>
 800790e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007912:	f000 b985 	b.w	8007c20 <__swbuf_r>
 8007916:	6813      	ldr	r3, [r2, #0]
 8007918:	1c58      	adds	r0, r3, #1
 800791a:	6010      	str	r0, [r2, #0]
 800791c:	7019      	strb	r1, [r3, #0]
 800791e:	4608      	mov	r0, r1
 8007920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007924:	4770      	bx	lr

08007926 <__sfputs_r>:
 8007926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007928:	4606      	mov	r6, r0
 800792a:	460f      	mov	r7, r1
 800792c:	4614      	mov	r4, r2
 800792e:	18d5      	adds	r5, r2, r3
 8007930:	42ac      	cmp	r4, r5
 8007932:	d101      	bne.n	8007938 <__sfputs_r+0x12>
 8007934:	2000      	movs	r0, #0
 8007936:	e007      	b.n	8007948 <__sfputs_r+0x22>
 8007938:	463a      	mov	r2, r7
 800793a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff ffda 	bl	80078f8 <__sfputc_r>
 8007944:	1c43      	adds	r3, r0, #1
 8007946:	d1f3      	bne.n	8007930 <__sfputs_r+0xa>
 8007948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800794c <_vfiprintf_r>:
 800794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007950:	460c      	mov	r4, r1
 8007952:	b09d      	sub	sp, #116	; 0x74
 8007954:	4617      	mov	r7, r2
 8007956:	461d      	mov	r5, r3
 8007958:	4606      	mov	r6, r0
 800795a:	b118      	cbz	r0, 8007964 <_vfiprintf_r+0x18>
 800795c:	6983      	ldr	r3, [r0, #24]
 800795e:	b90b      	cbnz	r3, 8007964 <_vfiprintf_r+0x18>
 8007960:	f7ff fb8e 	bl	8007080 <__sinit>
 8007964:	4b7c      	ldr	r3, [pc, #496]	; (8007b58 <_vfiprintf_r+0x20c>)
 8007966:	429c      	cmp	r4, r3
 8007968:	d158      	bne.n	8007a1c <_vfiprintf_r+0xd0>
 800796a:	6874      	ldr	r4, [r6, #4]
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	0718      	lsls	r0, r3, #28
 8007970:	d55e      	bpl.n	8007a30 <_vfiprintf_r+0xe4>
 8007972:	6923      	ldr	r3, [r4, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d05b      	beq.n	8007a30 <_vfiprintf_r+0xe4>
 8007978:	2300      	movs	r3, #0
 800797a:	9309      	str	r3, [sp, #36]	; 0x24
 800797c:	2320      	movs	r3, #32
 800797e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007982:	2330      	movs	r3, #48	; 0x30
 8007984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007988:	9503      	str	r5, [sp, #12]
 800798a:	f04f 0b01 	mov.w	fp, #1
 800798e:	46b8      	mov	r8, r7
 8007990:	4645      	mov	r5, r8
 8007992:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007996:	b10b      	cbz	r3, 800799c <_vfiprintf_r+0x50>
 8007998:	2b25      	cmp	r3, #37	; 0x25
 800799a:	d154      	bne.n	8007a46 <_vfiprintf_r+0xfa>
 800799c:	ebb8 0a07 	subs.w	sl, r8, r7
 80079a0:	d00b      	beq.n	80079ba <_vfiprintf_r+0x6e>
 80079a2:	4653      	mov	r3, sl
 80079a4:	463a      	mov	r2, r7
 80079a6:	4621      	mov	r1, r4
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7ff ffbc 	bl	8007926 <__sfputs_r>
 80079ae:	3001      	adds	r0, #1
 80079b0:	f000 80c2 	beq.w	8007b38 <_vfiprintf_r+0x1ec>
 80079b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b6:	4453      	add	r3, sl
 80079b8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ba:	f898 3000 	ldrb.w	r3, [r8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 80ba 	beq.w	8007b38 <_vfiprintf_r+0x1ec>
 80079c4:	2300      	movs	r3, #0
 80079c6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ce:	9304      	str	r3, [sp, #16]
 80079d0:	9307      	str	r3, [sp, #28]
 80079d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079d6:	931a      	str	r3, [sp, #104]	; 0x68
 80079d8:	46a8      	mov	r8, r5
 80079da:	2205      	movs	r2, #5
 80079dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80079e0:	485e      	ldr	r0, [pc, #376]	; (8007b5c <_vfiprintf_r+0x210>)
 80079e2:	f7f8 fc05 	bl	80001f0 <memchr>
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	bb78      	cbnz	r0, 8007a4a <_vfiprintf_r+0xfe>
 80079ea:	06d9      	lsls	r1, r3, #27
 80079ec:	bf44      	itt	mi
 80079ee:	2220      	movmi	r2, #32
 80079f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079f4:	071a      	lsls	r2, r3, #28
 80079f6:	bf44      	itt	mi
 80079f8:	222b      	movmi	r2, #43	; 0x2b
 80079fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079fe:	782a      	ldrb	r2, [r5, #0]
 8007a00:	2a2a      	cmp	r2, #42	; 0x2a
 8007a02:	d02a      	beq.n	8007a5a <_vfiprintf_r+0x10e>
 8007a04:	9a07      	ldr	r2, [sp, #28]
 8007a06:	46a8      	mov	r8, r5
 8007a08:	2000      	movs	r0, #0
 8007a0a:	250a      	movs	r5, #10
 8007a0c:	4641      	mov	r1, r8
 8007a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a12:	3b30      	subs	r3, #48	; 0x30
 8007a14:	2b09      	cmp	r3, #9
 8007a16:	d969      	bls.n	8007aec <_vfiprintf_r+0x1a0>
 8007a18:	b360      	cbz	r0, 8007a74 <_vfiprintf_r+0x128>
 8007a1a:	e024      	b.n	8007a66 <_vfiprintf_r+0x11a>
 8007a1c:	4b50      	ldr	r3, [pc, #320]	; (8007b60 <_vfiprintf_r+0x214>)
 8007a1e:	429c      	cmp	r4, r3
 8007a20:	d101      	bne.n	8007a26 <_vfiprintf_r+0xda>
 8007a22:	68b4      	ldr	r4, [r6, #8]
 8007a24:	e7a2      	b.n	800796c <_vfiprintf_r+0x20>
 8007a26:	4b4f      	ldr	r3, [pc, #316]	; (8007b64 <_vfiprintf_r+0x218>)
 8007a28:	429c      	cmp	r4, r3
 8007a2a:	bf08      	it	eq
 8007a2c:	68f4      	ldreq	r4, [r6, #12]
 8007a2e:	e79d      	b.n	800796c <_vfiprintf_r+0x20>
 8007a30:	4621      	mov	r1, r4
 8007a32:	4630      	mov	r0, r6
 8007a34:	f000 f958 	bl	8007ce8 <__swsetup_r>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d09d      	beq.n	8007978 <_vfiprintf_r+0x2c>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	b01d      	add	sp, #116	; 0x74
 8007a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a46:	46a8      	mov	r8, r5
 8007a48:	e7a2      	b.n	8007990 <_vfiprintf_r+0x44>
 8007a4a:	4a44      	ldr	r2, [pc, #272]	; (8007b5c <_vfiprintf_r+0x210>)
 8007a4c:	1a80      	subs	r0, r0, r2
 8007a4e:	fa0b f000 	lsl.w	r0, fp, r0
 8007a52:	4318      	orrs	r0, r3
 8007a54:	9004      	str	r0, [sp, #16]
 8007a56:	4645      	mov	r5, r8
 8007a58:	e7be      	b.n	80079d8 <_vfiprintf_r+0x8c>
 8007a5a:	9a03      	ldr	r2, [sp, #12]
 8007a5c:	1d11      	adds	r1, r2, #4
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	9103      	str	r1, [sp, #12]
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	db01      	blt.n	8007a6a <_vfiprintf_r+0x11e>
 8007a66:	9207      	str	r2, [sp, #28]
 8007a68:	e004      	b.n	8007a74 <_vfiprintf_r+0x128>
 8007a6a:	4252      	negs	r2, r2
 8007a6c:	f043 0302 	orr.w	r3, r3, #2
 8007a70:	9207      	str	r2, [sp, #28]
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	f898 3000 	ldrb.w	r3, [r8]
 8007a78:	2b2e      	cmp	r3, #46	; 0x2e
 8007a7a:	d10e      	bne.n	8007a9a <_vfiprintf_r+0x14e>
 8007a7c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007a80:	2b2a      	cmp	r3, #42	; 0x2a
 8007a82:	d138      	bne.n	8007af6 <_vfiprintf_r+0x1aa>
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	1d1a      	adds	r2, r3, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	9203      	str	r2, [sp, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bfb8      	it	lt
 8007a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a94:	f108 0802 	add.w	r8, r8, #2
 8007a98:	9305      	str	r3, [sp, #20]
 8007a9a:	4d33      	ldr	r5, [pc, #204]	; (8007b68 <_vfiprintf_r+0x21c>)
 8007a9c:	f898 1000 	ldrb.w	r1, [r8]
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f7f8 fba4 	bl	80001f0 <memchr>
 8007aa8:	b140      	cbz	r0, 8007abc <_vfiprintf_r+0x170>
 8007aaa:	2340      	movs	r3, #64	; 0x40
 8007aac:	1b40      	subs	r0, r0, r5
 8007aae:	fa03 f000 	lsl.w	r0, r3, r0
 8007ab2:	9b04      	ldr	r3, [sp, #16]
 8007ab4:	4303      	orrs	r3, r0
 8007ab6:	f108 0801 	add.w	r8, r8, #1
 8007aba:	9304      	str	r3, [sp, #16]
 8007abc:	f898 1000 	ldrb.w	r1, [r8]
 8007ac0:	482a      	ldr	r0, [pc, #168]	; (8007b6c <_vfiprintf_r+0x220>)
 8007ac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ac6:	2206      	movs	r2, #6
 8007ac8:	f108 0701 	add.w	r7, r8, #1
 8007acc:	f7f8 fb90 	bl	80001f0 <memchr>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d037      	beq.n	8007b44 <_vfiprintf_r+0x1f8>
 8007ad4:	4b26      	ldr	r3, [pc, #152]	; (8007b70 <_vfiprintf_r+0x224>)
 8007ad6:	bb1b      	cbnz	r3, 8007b20 <_vfiprintf_r+0x1d4>
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	3307      	adds	r3, #7
 8007adc:	f023 0307 	bic.w	r3, r3, #7
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	9303      	str	r3, [sp, #12]
 8007ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae6:	444b      	add	r3, r9
 8007ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aea:	e750      	b.n	800798e <_vfiprintf_r+0x42>
 8007aec:	fb05 3202 	mla	r2, r5, r2, r3
 8007af0:	2001      	movs	r0, #1
 8007af2:	4688      	mov	r8, r1
 8007af4:	e78a      	b.n	8007a0c <_vfiprintf_r+0xc0>
 8007af6:	2300      	movs	r3, #0
 8007af8:	f108 0801 	add.w	r8, r8, #1
 8007afc:	9305      	str	r3, [sp, #20]
 8007afe:	4619      	mov	r1, r3
 8007b00:	250a      	movs	r5, #10
 8007b02:	4640      	mov	r0, r8
 8007b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b08:	3a30      	subs	r2, #48	; 0x30
 8007b0a:	2a09      	cmp	r2, #9
 8007b0c:	d903      	bls.n	8007b16 <_vfiprintf_r+0x1ca>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0c3      	beq.n	8007a9a <_vfiprintf_r+0x14e>
 8007b12:	9105      	str	r1, [sp, #20]
 8007b14:	e7c1      	b.n	8007a9a <_vfiprintf_r+0x14e>
 8007b16:	fb05 2101 	mla	r1, r5, r1, r2
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	e7f0      	b.n	8007b02 <_vfiprintf_r+0x1b6>
 8007b20:	ab03      	add	r3, sp, #12
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	4622      	mov	r2, r4
 8007b26:	4b13      	ldr	r3, [pc, #76]	; (8007b74 <_vfiprintf_r+0x228>)
 8007b28:	a904      	add	r1, sp, #16
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7fe f844 	bl	8005bb8 <_printf_float>
 8007b30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b34:	4681      	mov	r9, r0
 8007b36:	d1d5      	bne.n	8007ae4 <_vfiprintf_r+0x198>
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	065b      	lsls	r3, r3, #25
 8007b3c:	f53f af7e 	bmi.w	8007a3c <_vfiprintf_r+0xf0>
 8007b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b42:	e77d      	b.n	8007a40 <_vfiprintf_r+0xf4>
 8007b44:	ab03      	add	r3, sp, #12
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <_vfiprintf_r+0x228>)
 8007b4c:	a904      	add	r1, sp, #16
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7fe fae8 	bl	8006124 <_printf_i>
 8007b54:	e7ec      	b.n	8007b30 <_vfiprintf_r+0x1e4>
 8007b56:	bf00      	nop
 8007b58:	080089a4 	.word	0x080089a4
 8007b5c:	08008ae4 	.word	0x08008ae4
 8007b60:	080089c4 	.word	0x080089c4
 8007b64:	08008984 	.word	0x08008984
 8007b68:	08008aea 	.word	0x08008aea
 8007b6c:	08008aee 	.word	0x08008aee
 8007b70:	08005bb9 	.word	0x08005bb9
 8007b74:	08007927 	.word	0x08007927

08007b78 <_sbrk_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	4c06      	ldr	r4, [pc, #24]	; (8007b94 <_sbrk_r+0x1c>)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4605      	mov	r5, r0
 8007b80:	4608      	mov	r0, r1
 8007b82:	6023      	str	r3, [r4, #0]
 8007b84:	f7fa f9e8 	bl	8001f58 <_sbrk>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_sbrk_r+0x1a>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_sbrk_r+0x1a>
 8007b90:	602b      	str	r3, [r5, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	200003d4 	.word	0x200003d4

08007b98 <__sread>:
 8007b98:	b510      	push	{r4, lr}
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba0:	f000 fa5a 	bl	8008058 <_read_r>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	bfab      	itete	ge
 8007ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007baa:	89a3      	ldrhlt	r3, [r4, #12]
 8007bac:	181b      	addge	r3, r3, r0
 8007bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bb2:	bfac      	ite	ge
 8007bb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bb6:	81a3      	strhlt	r3, [r4, #12]
 8007bb8:	bd10      	pop	{r4, pc}

08007bba <__swrite>:
 8007bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbe:	461f      	mov	r7, r3
 8007bc0:	898b      	ldrh	r3, [r1, #12]
 8007bc2:	05db      	lsls	r3, r3, #23
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	4616      	mov	r6, r2
 8007bca:	d505      	bpl.n	8007bd8 <__swrite+0x1e>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd4:	f000 f9b6 	bl	8007f44 <_lseek_r>
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	4632      	mov	r2, r6
 8007be6:	463b      	mov	r3, r7
 8007be8:	4628      	mov	r0, r5
 8007bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bee:	f000 b869 	b.w	8007cc4 <_write_r>

08007bf2 <__sseek>:
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bfa:	f000 f9a3 	bl	8007f44 <_lseek_r>
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	bf15      	itete	ne
 8007c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c0e:	81a3      	strheq	r3, [r4, #12]
 8007c10:	bf18      	it	ne
 8007c12:	81a3      	strhne	r3, [r4, #12]
 8007c14:	bd10      	pop	{r4, pc}

08007c16 <__sclose>:
 8007c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1a:	f000 b8d3 	b.w	8007dc4 <_close_r>
	...

08007c20 <__swbuf_r>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	460e      	mov	r6, r1
 8007c24:	4614      	mov	r4, r2
 8007c26:	4605      	mov	r5, r0
 8007c28:	b118      	cbz	r0, 8007c32 <__swbuf_r+0x12>
 8007c2a:	6983      	ldr	r3, [r0, #24]
 8007c2c:	b90b      	cbnz	r3, 8007c32 <__swbuf_r+0x12>
 8007c2e:	f7ff fa27 	bl	8007080 <__sinit>
 8007c32:	4b21      	ldr	r3, [pc, #132]	; (8007cb8 <__swbuf_r+0x98>)
 8007c34:	429c      	cmp	r4, r3
 8007c36:	d12a      	bne.n	8007c8e <__swbuf_r+0x6e>
 8007c38:	686c      	ldr	r4, [r5, #4]
 8007c3a:	69a3      	ldr	r3, [r4, #24]
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	071a      	lsls	r2, r3, #28
 8007c42:	d52e      	bpl.n	8007ca2 <__swbuf_r+0x82>
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	b363      	cbz	r3, 8007ca2 <__swbuf_r+0x82>
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	6820      	ldr	r0, [r4, #0]
 8007c4c:	1ac0      	subs	r0, r0, r3
 8007c4e:	6963      	ldr	r3, [r4, #20]
 8007c50:	b2f6      	uxtb	r6, r6
 8007c52:	4283      	cmp	r3, r0
 8007c54:	4637      	mov	r7, r6
 8007c56:	dc04      	bgt.n	8007c62 <__swbuf_r+0x42>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 f948 	bl	8007ef0 <_fflush_r>
 8007c60:	bb28      	cbnz	r0, 8007cae <__swbuf_r+0x8e>
 8007c62:	68a3      	ldr	r3, [r4, #8]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	60a3      	str	r3, [r4, #8]
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	6022      	str	r2, [r4, #0]
 8007c6e:	701e      	strb	r6, [r3, #0]
 8007c70:	6963      	ldr	r3, [r4, #20]
 8007c72:	3001      	adds	r0, #1
 8007c74:	4283      	cmp	r3, r0
 8007c76:	d004      	beq.n	8007c82 <__swbuf_r+0x62>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	07db      	lsls	r3, r3, #31
 8007c7c:	d519      	bpl.n	8007cb2 <__swbuf_r+0x92>
 8007c7e:	2e0a      	cmp	r6, #10
 8007c80:	d117      	bne.n	8007cb2 <__swbuf_r+0x92>
 8007c82:	4621      	mov	r1, r4
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 f933 	bl	8007ef0 <_fflush_r>
 8007c8a:	b190      	cbz	r0, 8007cb2 <__swbuf_r+0x92>
 8007c8c:	e00f      	b.n	8007cae <__swbuf_r+0x8e>
 8007c8e:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <__swbuf_r+0x9c>)
 8007c90:	429c      	cmp	r4, r3
 8007c92:	d101      	bne.n	8007c98 <__swbuf_r+0x78>
 8007c94:	68ac      	ldr	r4, [r5, #8]
 8007c96:	e7d0      	b.n	8007c3a <__swbuf_r+0x1a>
 8007c98:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <__swbuf_r+0xa0>)
 8007c9a:	429c      	cmp	r4, r3
 8007c9c:	bf08      	it	eq
 8007c9e:	68ec      	ldreq	r4, [r5, #12]
 8007ca0:	e7cb      	b.n	8007c3a <__swbuf_r+0x1a>
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f000 f81f 	bl	8007ce8 <__swsetup_r>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d0cc      	beq.n	8007c48 <__swbuf_r+0x28>
 8007cae:	f04f 37ff 	mov.w	r7, #4294967295
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	080089a4 	.word	0x080089a4
 8007cbc:	080089c4 	.word	0x080089c4
 8007cc0:	08008984 	.word	0x08008984

08007cc4 <_write_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4c07      	ldr	r4, [pc, #28]	; (8007ce4 <_write_r+0x20>)
 8007cc8:	4605      	mov	r5, r0
 8007cca:	4608      	mov	r0, r1
 8007ccc:	4611      	mov	r1, r2
 8007cce:	2200      	movs	r2, #0
 8007cd0:	6022      	str	r2, [r4, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f7fa f8ef 	bl	8001eb6 <_write>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d102      	bne.n	8007ce2 <_write_r+0x1e>
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	b103      	cbz	r3, 8007ce2 <_write_r+0x1e>
 8007ce0:	602b      	str	r3, [r5, #0]
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	200003d4 	.word	0x200003d4

08007ce8 <__swsetup_r>:
 8007ce8:	4b32      	ldr	r3, [pc, #200]	; (8007db4 <__swsetup_r+0xcc>)
 8007cea:	b570      	push	{r4, r5, r6, lr}
 8007cec:	681d      	ldr	r5, [r3, #0]
 8007cee:	4606      	mov	r6, r0
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	b125      	cbz	r5, 8007cfe <__swsetup_r+0x16>
 8007cf4:	69ab      	ldr	r3, [r5, #24]
 8007cf6:	b913      	cbnz	r3, 8007cfe <__swsetup_r+0x16>
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f7ff f9c1 	bl	8007080 <__sinit>
 8007cfe:	4b2e      	ldr	r3, [pc, #184]	; (8007db8 <__swsetup_r+0xd0>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	d10f      	bne.n	8007d24 <__swsetup_r+0x3c>
 8007d04:	686c      	ldr	r4, [r5, #4]
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	0715      	lsls	r5, r2, #28
 8007d0e:	d42c      	bmi.n	8007d6a <__swsetup_r+0x82>
 8007d10:	06d0      	lsls	r0, r2, #27
 8007d12:	d411      	bmi.n	8007d38 <__swsetup_r+0x50>
 8007d14:	2209      	movs	r2, #9
 8007d16:	6032      	str	r2, [r6, #0]
 8007d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d22:	e03e      	b.n	8007da2 <__swsetup_r+0xba>
 8007d24:	4b25      	ldr	r3, [pc, #148]	; (8007dbc <__swsetup_r+0xd4>)
 8007d26:	429c      	cmp	r4, r3
 8007d28:	d101      	bne.n	8007d2e <__swsetup_r+0x46>
 8007d2a:	68ac      	ldr	r4, [r5, #8]
 8007d2c:	e7eb      	b.n	8007d06 <__swsetup_r+0x1e>
 8007d2e:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <__swsetup_r+0xd8>)
 8007d30:	429c      	cmp	r4, r3
 8007d32:	bf08      	it	eq
 8007d34:	68ec      	ldreq	r4, [r5, #12]
 8007d36:	e7e6      	b.n	8007d06 <__swsetup_r+0x1e>
 8007d38:	0751      	lsls	r1, r2, #29
 8007d3a:	d512      	bpl.n	8007d62 <__swsetup_r+0x7a>
 8007d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d3e:	b141      	cbz	r1, 8007d52 <__swsetup_r+0x6a>
 8007d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d44:	4299      	cmp	r1, r3
 8007d46:	d002      	beq.n	8007d4e <__swsetup_r+0x66>
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f7ff fd2d 	bl	80077a8 <_free_r>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	6363      	str	r3, [r4, #52]	; 0x34
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d58:	81a3      	strh	r3, [r4, #12]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	6063      	str	r3, [r4, #4]
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f043 0308 	orr.w	r3, r3, #8
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	b94b      	cbnz	r3, 8007d82 <__swsetup_r+0x9a>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d78:	d003      	beq.n	8007d82 <__swsetup_r+0x9a>
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f000 f917 	bl	8007fb0 <__smakebuf_r>
 8007d82:	89a2      	ldrh	r2, [r4, #12]
 8007d84:	f012 0301 	ands.w	r3, r2, #1
 8007d88:	d00c      	beq.n	8007da4 <__swsetup_r+0xbc>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60a3      	str	r3, [r4, #8]
 8007d8e:	6963      	ldr	r3, [r4, #20]
 8007d90:	425b      	negs	r3, r3
 8007d92:	61a3      	str	r3, [r4, #24]
 8007d94:	6923      	ldr	r3, [r4, #16]
 8007d96:	b953      	cbnz	r3, 8007dae <__swsetup_r+0xc6>
 8007d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007da0:	d1ba      	bne.n	8007d18 <__swsetup_r+0x30>
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	0792      	lsls	r2, r2, #30
 8007da6:	bf58      	it	pl
 8007da8:	6963      	ldrpl	r3, [r4, #20]
 8007daa:	60a3      	str	r3, [r4, #8]
 8007dac:	e7f2      	b.n	8007d94 <__swsetup_r+0xac>
 8007dae:	2000      	movs	r0, #0
 8007db0:	e7f7      	b.n	8007da2 <__swsetup_r+0xba>
 8007db2:	bf00      	nop
 8007db4:	20000010 	.word	0x20000010
 8007db8:	080089a4 	.word	0x080089a4
 8007dbc:	080089c4 	.word	0x080089c4
 8007dc0:	08008984 	.word	0x08008984

08007dc4 <_close_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4c06      	ldr	r4, [pc, #24]	; (8007de0 <_close_r+0x1c>)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4605      	mov	r5, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	6023      	str	r3, [r4, #0]
 8007dd0:	f7fa f88d 	bl	8001eee <_close>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_close_r+0x1a>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_close_r+0x1a>
 8007ddc:	602b      	str	r3, [r5, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	200003d4 	.word	0x200003d4

08007de4 <__sflush_r>:
 8007de4:	898a      	ldrh	r2, [r1, #12]
 8007de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dea:	4605      	mov	r5, r0
 8007dec:	0710      	lsls	r0, r2, #28
 8007dee:	460c      	mov	r4, r1
 8007df0:	d458      	bmi.n	8007ea4 <__sflush_r+0xc0>
 8007df2:	684b      	ldr	r3, [r1, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dc05      	bgt.n	8007e04 <__sflush_r+0x20>
 8007df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dc02      	bgt.n	8007e04 <__sflush_r+0x20>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	d0f9      	beq.n	8007dfe <__sflush_r+0x1a>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e10:	682f      	ldr	r7, [r5, #0]
 8007e12:	6a21      	ldr	r1, [r4, #32]
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	d032      	beq.n	8007e7e <__sflush_r+0x9a>
 8007e18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	075a      	lsls	r2, r3, #29
 8007e1e:	d505      	bpl.n	8007e2c <__sflush_r+0x48>
 8007e20:	6863      	ldr	r3, [r4, #4]
 8007e22:	1ac0      	subs	r0, r0, r3
 8007e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e26:	b10b      	cbz	r3, 8007e2c <__sflush_r+0x48>
 8007e28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e2a:	1ac0      	subs	r0, r0, r3
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4602      	mov	r2, r0
 8007e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e32:	6a21      	ldr	r1, [r4, #32]
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b0      	blx	r6
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	d106      	bne.n	8007e4c <__sflush_r+0x68>
 8007e3e:	6829      	ldr	r1, [r5, #0]
 8007e40:	291d      	cmp	r1, #29
 8007e42:	d848      	bhi.n	8007ed6 <__sflush_r+0xf2>
 8007e44:	4a29      	ldr	r2, [pc, #164]	; (8007eec <__sflush_r+0x108>)
 8007e46:	40ca      	lsrs	r2, r1
 8007e48:	07d6      	lsls	r6, r2, #31
 8007e4a:	d544      	bpl.n	8007ed6 <__sflush_r+0xf2>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	6062      	str	r2, [r4, #4]
 8007e50:	04d9      	lsls	r1, r3, #19
 8007e52:	6922      	ldr	r2, [r4, #16]
 8007e54:	6022      	str	r2, [r4, #0]
 8007e56:	d504      	bpl.n	8007e62 <__sflush_r+0x7e>
 8007e58:	1c42      	adds	r2, r0, #1
 8007e5a:	d101      	bne.n	8007e60 <__sflush_r+0x7c>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b903      	cbnz	r3, 8007e62 <__sflush_r+0x7e>
 8007e60:	6560      	str	r0, [r4, #84]	; 0x54
 8007e62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e64:	602f      	str	r7, [r5, #0]
 8007e66:	2900      	cmp	r1, #0
 8007e68:	d0c9      	beq.n	8007dfe <__sflush_r+0x1a>
 8007e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e6e:	4299      	cmp	r1, r3
 8007e70:	d002      	beq.n	8007e78 <__sflush_r+0x94>
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7ff fc98 	bl	80077a8 <_free_r>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	6360      	str	r0, [r4, #52]	; 0x34
 8007e7c:	e7c0      	b.n	8007e00 <__sflush_r+0x1c>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b0      	blx	r6
 8007e84:	1c41      	adds	r1, r0, #1
 8007e86:	d1c8      	bne.n	8007e1a <__sflush_r+0x36>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0c5      	beq.n	8007e1a <__sflush_r+0x36>
 8007e8e:	2b1d      	cmp	r3, #29
 8007e90:	d001      	beq.n	8007e96 <__sflush_r+0xb2>
 8007e92:	2b16      	cmp	r3, #22
 8007e94:	d101      	bne.n	8007e9a <__sflush_r+0xb6>
 8007e96:	602f      	str	r7, [r5, #0]
 8007e98:	e7b1      	b.n	8007dfe <__sflush_r+0x1a>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea0:	81a3      	strh	r3, [r4, #12]
 8007ea2:	e7ad      	b.n	8007e00 <__sflush_r+0x1c>
 8007ea4:	690f      	ldr	r7, [r1, #16]
 8007ea6:	2f00      	cmp	r7, #0
 8007ea8:	d0a9      	beq.n	8007dfe <__sflush_r+0x1a>
 8007eaa:	0793      	lsls	r3, r2, #30
 8007eac:	680e      	ldr	r6, [r1, #0]
 8007eae:	bf08      	it	eq
 8007eb0:	694b      	ldreq	r3, [r1, #20]
 8007eb2:	600f      	str	r7, [r1, #0]
 8007eb4:	bf18      	it	ne
 8007eb6:	2300      	movne	r3, #0
 8007eb8:	eba6 0807 	sub.w	r8, r6, r7
 8007ebc:	608b      	str	r3, [r1, #8]
 8007ebe:	f1b8 0f00 	cmp.w	r8, #0
 8007ec2:	dd9c      	ble.n	8007dfe <__sflush_r+0x1a>
 8007ec4:	4643      	mov	r3, r8
 8007ec6:	463a      	mov	r2, r7
 8007ec8:	6a21      	ldr	r1, [r4, #32]
 8007eca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b0      	blx	r6
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	dc06      	bgt.n	8007ee2 <__sflush_r+0xfe>
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	e78e      	b.n	8007e00 <__sflush_r+0x1c>
 8007ee2:	4407      	add	r7, r0
 8007ee4:	eba8 0800 	sub.w	r8, r8, r0
 8007ee8:	e7e9      	b.n	8007ebe <__sflush_r+0xda>
 8007eea:	bf00      	nop
 8007eec:	20400001 	.word	0x20400001

08007ef0 <_fflush_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	690b      	ldr	r3, [r1, #16]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	b1db      	cbz	r3, 8007f32 <_fflush_r+0x42>
 8007efa:	b118      	cbz	r0, 8007f04 <_fflush_r+0x14>
 8007efc:	6983      	ldr	r3, [r0, #24]
 8007efe:	b90b      	cbnz	r3, 8007f04 <_fflush_r+0x14>
 8007f00:	f7ff f8be 	bl	8007080 <__sinit>
 8007f04:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <_fflush_r+0x48>)
 8007f06:	429c      	cmp	r4, r3
 8007f08:	d109      	bne.n	8007f1e <_fflush_r+0x2e>
 8007f0a:	686c      	ldr	r4, [r5, #4]
 8007f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f10:	b17b      	cbz	r3, 8007f32 <_fflush_r+0x42>
 8007f12:	4621      	mov	r1, r4
 8007f14:	4628      	mov	r0, r5
 8007f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f1a:	f7ff bf63 	b.w	8007de4 <__sflush_r>
 8007f1e:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <_fflush_r+0x4c>)
 8007f20:	429c      	cmp	r4, r3
 8007f22:	d101      	bne.n	8007f28 <_fflush_r+0x38>
 8007f24:	68ac      	ldr	r4, [r5, #8]
 8007f26:	e7f1      	b.n	8007f0c <_fflush_r+0x1c>
 8007f28:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <_fflush_r+0x50>)
 8007f2a:	429c      	cmp	r4, r3
 8007f2c:	bf08      	it	eq
 8007f2e:	68ec      	ldreq	r4, [r5, #12]
 8007f30:	e7ec      	b.n	8007f0c <_fflush_r+0x1c>
 8007f32:	2000      	movs	r0, #0
 8007f34:	bd38      	pop	{r3, r4, r5, pc}
 8007f36:	bf00      	nop
 8007f38:	080089a4 	.word	0x080089a4
 8007f3c:	080089c4 	.word	0x080089c4
 8007f40:	08008984 	.word	0x08008984

08007f44 <_lseek_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4c07      	ldr	r4, [pc, #28]	; (8007f64 <_lseek_r+0x20>)
 8007f48:	4605      	mov	r5, r0
 8007f4a:	4608      	mov	r0, r1
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	6022      	str	r2, [r4, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f7f9 fff2 	bl	8001f3c <_lseek>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_lseek_r+0x1e>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_lseek_r+0x1e>
 8007f60:	602b      	str	r3, [r5, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	200003d4 	.word	0x200003d4

08007f68 <__swhatbuf_r>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	460e      	mov	r6, r1
 8007f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f70:	2900      	cmp	r1, #0
 8007f72:	b096      	sub	sp, #88	; 0x58
 8007f74:	4614      	mov	r4, r2
 8007f76:	461d      	mov	r5, r3
 8007f78:	da07      	bge.n	8007f8a <__swhatbuf_r+0x22>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	602b      	str	r3, [r5, #0]
 8007f7e:	89b3      	ldrh	r3, [r6, #12]
 8007f80:	061a      	lsls	r2, r3, #24
 8007f82:	d410      	bmi.n	8007fa6 <__swhatbuf_r+0x3e>
 8007f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f88:	e00e      	b.n	8007fa8 <__swhatbuf_r+0x40>
 8007f8a:	466a      	mov	r2, sp
 8007f8c:	f000 f884 	bl	8008098 <_fstat_r>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	dbf2      	blt.n	8007f7a <__swhatbuf_r+0x12>
 8007f94:	9a01      	ldr	r2, [sp, #4]
 8007f96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f9e:	425a      	negs	r2, r3
 8007fa0:	415a      	adcs	r2, r3
 8007fa2:	602a      	str	r2, [r5, #0]
 8007fa4:	e7ee      	b.n	8007f84 <__swhatbuf_r+0x1c>
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	2000      	movs	r0, #0
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	b016      	add	sp, #88	; 0x58
 8007fae:	bd70      	pop	{r4, r5, r6, pc}

08007fb0 <__smakebuf_r>:
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fb4:	079d      	lsls	r5, r3, #30
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	d507      	bpl.n	8007fcc <__smakebuf_r+0x1c>
 8007fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	6163      	str	r3, [r4, #20]
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	ab01      	add	r3, sp, #4
 8007fce:	466a      	mov	r2, sp
 8007fd0:	f7ff ffca 	bl	8007f68 <__swhatbuf_r>
 8007fd4:	9900      	ldr	r1, [sp, #0]
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f7ff fc33 	bl	8007844 <_malloc_r>
 8007fde:	b948      	cbnz	r0, 8007ff4 <__smakebuf_r+0x44>
 8007fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe4:	059a      	lsls	r2, r3, #22
 8007fe6:	d4ef      	bmi.n	8007fc8 <__smakebuf_r+0x18>
 8007fe8:	f023 0303 	bic.w	r3, r3, #3
 8007fec:	f043 0302 	orr.w	r3, r3, #2
 8007ff0:	81a3      	strh	r3, [r4, #12]
 8007ff2:	e7e3      	b.n	8007fbc <__smakebuf_r+0xc>
 8007ff4:	4b0d      	ldr	r3, [pc, #52]	; (800802c <__smakebuf_r+0x7c>)
 8007ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	6020      	str	r0, [r4, #0]
 8007ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	9b00      	ldr	r3, [sp, #0]
 8008004:	6163      	str	r3, [r4, #20]
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	6120      	str	r0, [r4, #16]
 800800a:	b15b      	cbz	r3, 8008024 <__smakebuf_r+0x74>
 800800c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008010:	4630      	mov	r0, r6
 8008012:	f000 f853 	bl	80080bc <_isatty_r>
 8008016:	b128      	cbz	r0, 8008024 <__smakebuf_r+0x74>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	f043 0301 	orr.w	r3, r3, #1
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	431d      	orrs	r5, r3
 8008028:	81a5      	strh	r5, [r4, #12]
 800802a:	e7cd      	b.n	8007fc8 <__smakebuf_r+0x18>
 800802c:	08007049 	.word	0x08007049

08008030 <__ascii_mbtowc>:
 8008030:	b082      	sub	sp, #8
 8008032:	b901      	cbnz	r1, 8008036 <__ascii_mbtowc+0x6>
 8008034:	a901      	add	r1, sp, #4
 8008036:	b142      	cbz	r2, 800804a <__ascii_mbtowc+0x1a>
 8008038:	b14b      	cbz	r3, 800804e <__ascii_mbtowc+0x1e>
 800803a:	7813      	ldrb	r3, [r2, #0]
 800803c:	600b      	str	r3, [r1, #0]
 800803e:	7812      	ldrb	r2, [r2, #0]
 8008040:	1c10      	adds	r0, r2, #0
 8008042:	bf18      	it	ne
 8008044:	2001      	movne	r0, #1
 8008046:	b002      	add	sp, #8
 8008048:	4770      	bx	lr
 800804a:	4610      	mov	r0, r2
 800804c:	e7fb      	b.n	8008046 <__ascii_mbtowc+0x16>
 800804e:	f06f 0001 	mvn.w	r0, #1
 8008052:	e7f8      	b.n	8008046 <__ascii_mbtowc+0x16>

08008054 <__malloc_lock>:
 8008054:	4770      	bx	lr

08008056 <__malloc_unlock>:
 8008056:	4770      	bx	lr

08008058 <_read_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4c07      	ldr	r4, [pc, #28]	; (8008078 <_read_r+0x20>)
 800805c:	4605      	mov	r5, r0
 800805e:	4608      	mov	r0, r1
 8008060:	4611      	mov	r1, r2
 8008062:	2200      	movs	r2, #0
 8008064:	6022      	str	r2, [r4, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	f7f9 ff08 	bl	8001e7c <_read>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d102      	bne.n	8008076 <_read_r+0x1e>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	b103      	cbz	r3, 8008076 <_read_r+0x1e>
 8008074:	602b      	str	r3, [r5, #0]
 8008076:	bd38      	pop	{r3, r4, r5, pc}
 8008078:	200003d4 	.word	0x200003d4

0800807c <__ascii_wctomb>:
 800807c:	b149      	cbz	r1, 8008092 <__ascii_wctomb+0x16>
 800807e:	2aff      	cmp	r2, #255	; 0xff
 8008080:	bf85      	ittet	hi
 8008082:	238a      	movhi	r3, #138	; 0x8a
 8008084:	6003      	strhi	r3, [r0, #0]
 8008086:	700a      	strbls	r2, [r1, #0]
 8008088:	f04f 30ff 	movhi.w	r0, #4294967295
 800808c:	bf98      	it	ls
 800808e:	2001      	movls	r0, #1
 8008090:	4770      	bx	lr
 8008092:	4608      	mov	r0, r1
 8008094:	4770      	bx	lr
	...

08008098 <_fstat_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4c07      	ldr	r4, [pc, #28]	; (80080b8 <_fstat_r+0x20>)
 800809c:	2300      	movs	r3, #0
 800809e:	4605      	mov	r5, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	4611      	mov	r1, r2
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	f7f9 ff2e 	bl	8001f06 <_fstat>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	d102      	bne.n	80080b4 <_fstat_r+0x1c>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	b103      	cbz	r3, 80080b4 <_fstat_r+0x1c>
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	bd38      	pop	{r3, r4, r5, pc}
 80080b6:	bf00      	nop
 80080b8:	200003d4 	.word	0x200003d4

080080bc <_isatty_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4c06      	ldr	r4, [pc, #24]	; (80080d8 <_isatty_r+0x1c>)
 80080c0:	2300      	movs	r3, #0
 80080c2:	4605      	mov	r5, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	6023      	str	r3, [r4, #0]
 80080c8:	f7f9 ff2d 	bl	8001f26 <_isatty>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_isatty_r+0x1a>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_isatty_r+0x1a>
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	200003d4 	.word	0x200003d4

080080dc <atan2>:
 80080dc:	f000 b864 	b.w	80081a8 <__ieee754_atan2>

080080e0 <fmod>:
 80080e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080e4:	ed2d 8b02 	vpush	{d8}
 80080e8:	b08b      	sub	sp, #44	; 0x2c
 80080ea:	ec55 4b10 	vmov	r4, r5, d0
 80080ee:	ec57 6b11 	vmov	r6, r7, d1
 80080f2:	f000 f937 	bl	8008364 <__ieee754_fmod>
 80080f6:	4b2a      	ldr	r3, [pc, #168]	; (80081a0 <fmod+0xc0>)
 80080f8:	eeb0 8a40 	vmov.f32	s16, s0
 80080fc:	eef0 8a60 	vmov.f32	s17, s1
 8008100:	f993 8000 	ldrsb.w	r8, [r3]
 8008104:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008108:	d030      	beq.n	800816c <fmod+0x8c>
 800810a:	4632      	mov	r2, r6
 800810c:	463b      	mov	r3, r7
 800810e:	4630      	mov	r0, r6
 8008110:	4639      	mov	r1, r7
 8008112:	f7f8 fd13 	bl	8000b3c <__aeabi_dcmpun>
 8008116:	bb48      	cbnz	r0, 800816c <fmod+0x8c>
 8008118:	4622      	mov	r2, r4
 800811a:	462b      	mov	r3, r5
 800811c:	4620      	mov	r0, r4
 800811e:	4629      	mov	r1, r5
 8008120:	f7f8 fd0c 	bl	8000b3c <__aeabi_dcmpun>
 8008124:	4681      	mov	r9, r0
 8008126:	bb08      	cbnz	r0, 800816c <fmod+0x8c>
 8008128:	2200      	movs	r2, #0
 800812a:	2300      	movs	r3, #0
 800812c:	4630      	mov	r0, r6
 800812e:	4639      	mov	r1, r7
 8008130:	f7f8 fcd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008134:	b1d0      	cbz	r0, 800816c <fmod+0x8c>
 8008136:	2301      	movs	r3, #1
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <fmod+0xc4>)
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008142:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008146:	f8cd 9020 	str.w	r9, [sp, #32]
 800814a:	f1b8 0f00 	cmp.w	r8, #0
 800814e:	d116      	bne.n	800817e <fmod+0x9e>
 8008150:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008154:	4668      	mov	r0, sp
 8008156:	f000 fbc0 	bl	80088da <matherr>
 800815a:	b1d8      	cbz	r0, 8008194 <fmod+0xb4>
 800815c:	9b08      	ldr	r3, [sp, #32]
 800815e:	b11b      	cbz	r3, 8008168 <fmod+0x88>
 8008160:	f7fd fc64 	bl	8005a2c <__errno>
 8008164:	9b08      	ldr	r3, [sp, #32]
 8008166:	6003      	str	r3, [r0, #0]
 8008168:	ed9d 8b06 	vldr	d8, [sp, #24]
 800816c:	eeb0 0a48 	vmov.f32	s0, s16
 8008170:	eef0 0a68 	vmov.f32	s1, s17
 8008174:	b00b      	add	sp, #44	; 0x2c
 8008176:	ecbd 8b02 	vpop	{d8}
 800817a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800817e:	2200      	movs	r2, #0
 8008180:	2300      	movs	r3, #0
 8008182:	4610      	mov	r0, r2
 8008184:	4619      	mov	r1, r3
 8008186:	f7f8 fb69 	bl	800085c <__aeabi_ddiv>
 800818a:	f1b8 0f02 	cmp.w	r8, #2
 800818e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008192:	d1df      	bne.n	8008154 <fmod+0x74>
 8008194:	f7fd fc4a 	bl	8005a2c <__errno>
 8008198:	2321      	movs	r3, #33	; 0x21
 800819a:	6003      	str	r3, [r0, #0]
 800819c:	e7de      	b.n	800815c <fmod+0x7c>
 800819e:	bf00      	nop
 80081a0:	200001e0 	.word	0x200001e0
 80081a4:	08008c00 	.word	0x08008c00

080081a8 <__ieee754_atan2>:
 80081a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ac:	ec57 6b11 	vmov	r6, r7, d1
 80081b0:	4273      	negs	r3, r6
 80081b2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80081b6:	4333      	orrs	r3, r6
 80081b8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008360 <__ieee754_atan2+0x1b8>
 80081bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80081c0:	4573      	cmp	r3, lr
 80081c2:	ec51 0b10 	vmov	r0, r1, d0
 80081c6:	ee11 8a10 	vmov	r8, s2
 80081ca:	d80a      	bhi.n	80081e2 <__ieee754_atan2+0x3a>
 80081cc:	4244      	negs	r4, r0
 80081ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081d2:	4304      	orrs	r4, r0
 80081d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80081d8:	4574      	cmp	r4, lr
 80081da:	468c      	mov	ip, r1
 80081dc:	ee10 9a10 	vmov	r9, s0
 80081e0:	d907      	bls.n	80081f2 <__ieee754_atan2+0x4a>
 80081e2:	4632      	mov	r2, r6
 80081e4:	463b      	mov	r3, r7
 80081e6:	f7f8 f859 	bl	800029c <__adddf3>
 80081ea:	ec41 0b10 	vmov	d0, r0, r1
 80081ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80081f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80081fa:	4334      	orrs	r4, r6
 80081fc:	d103      	bne.n	8008206 <__ieee754_atan2+0x5e>
 80081fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008202:	f000 b9c1 	b.w	8008588 <atan>
 8008206:	17bc      	asrs	r4, r7, #30
 8008208:	f004 0402 	and.w	r4, r4, #2
 800820c:	ea53 0909 	orrs.w	r9, r3, r9
 8008210:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008214:	d107      	bne.n	8008226 <__ieee754_atan2+0x7e>
 8008216:	2c02      	cmp	r4, #2
 8008218:	d073      	beq.n	8008302 <__ieee754_atan2+0x15a>
 800821a:	2c03      	cmp	r4, #3
 800821c:	d1e5      	bne.n	80081ea <__ieee754_atan2+0x42>
 800821e:	a13e      	add	r1, pc, #248	; (adr r1, 8008318 <__ieee754_atan2+0x170>)
 8008220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008224:	e7e1      	b.n	80081ea <__ieee754_atan2+0x42>
 8008226:	ea52 0808 	orrs.w	r8, r2, r8
 800822a:	d106      	bne.n	800823a <__ieee754_atan2+0x92>
 800822c:	f1bc 0f00 	cmp.w	ip, #0
 8008230:	da6b      	bge.n	800830a <__ieee754_atan2+0x162>
 8008232:	a13b      	add	r1, pc, #236	; (adr r1, 8008320 <__ieee754_atan2+0x178>)
 8008234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008238:	e7d7      	b.n	80081ea <__ieee754_atan2+0x42>
 800823a:	4572      	cmp	r2, lr
 800823c:	d120      	bne.n	8008280 <__ieee754_atan2+0xd8>
 800823e:	4293      	cmp	r3, r2
 8008240:	d111      	bne.n	8008266 <__ieee754_atan2+0xbe>
 8008242:	2c02      	cmp	r4, #2
 8008244:	d007      	beq.n	8008256 <__ieee754_atan2+0xae>
 8008246:	2c03      	cmp	r4, #3
 8008248:	d009      	beq.n	800825e <__ieee754_atan2+0xb6>
 800824a:	2c01      	cmp	r4, #1
 800824c:	d155      	bne.n	80082fa <__ieee754_atan2+0x152>
 800824e:	a136      	add	r1, pc, #216	; (adr r1, 8008328 <__ieee754_atan2+0x180>)
 8008250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008254:	e7c9      	b.n	80081ea <__ieee754_atan2+0x42>
 8008256:	a136      	add	r1, pc, #216	; (adr r1, 8008330 <__ieee754_atan2+0x188>)
 8008258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800825c:	e7c5      	b.n	80081ea <__ieee754_atan2+0x42>
 800825e:	a136      	add	r1, pc, #216	; (adr r1, 8008338 <__ieee754_atan2+0x190>)
 8008260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008264:	e7c1      	b.n	80081ea <__ieee754_atan2+0x42>
 8008266:	2c02      	cmp	r4, #2
 8008268:	d04b      	beq.n	8008302 <__ieee754_atan2+0x15a>
 800826a:	2c03      	cmp	r4, #3
 800826c:	d0d7      	beq.n	800821e <__ieee754_atan2+0x76>
 800826e:	2c01      	cmp	r4, #1
 8008270:	f04f 0000 	mov.w	r0, #0
 8008274:	d102      	bne.n	800827c <__ieee754_atan2+0xd4>
 8008276:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800827a:	e7b6      	b.n	80081ea <__ieee754_atan2+0x42>
 800827c:	2100      	movs	r1, #0
 800827e:	e7b4      	b.n	80081ea <__ieee754_atan2+0x42>
 8008280:	4573      	cmp	r3, lr
 8008282:	d0d3      	beq.n	800822c <__ieee754_atan2+0x84>
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	151b      	asrs	r3, r3, #20
 8008288:	2b3c      	cmp	r3, #60	; 0x3c
 800828a:	dc1e      	bgt.n	80082ca <__ieee754_atan2+0x122>
 800828c:	2f00      	cmp	r7, #0
 800828e:	da01      	bge.n	8008294 <__ieee754_atan2+0xec>
 8008290:	333c      	adds	r3, #60	; 0x3c
 8008292:	db1e      	blt.n	80082d2 <__ieee754_atan2+0x12a>
 8008294:	4632      	mov	r2, r6
 8008296:	463b      	mov	r3, r7
 8008298:	f7f8 fae0 	bl	800085c <__aeabi_ddiv>
 800829c:	ec41 0b10 	vmov	d0, r0, r1
 80082a0:	f000 fb12 	bl	80088c8 <fabs>
 80082a4:	f000 f970 	bl	8008588 <atan>
 80082a8:	ec51 0b10 	vmov	r0, r1, d0
 80082ac:	2c01      	cmp	r4, #1
 80082ae:	d013      	beq.n	80082d8 <__ieee754_atan2+0x130>
 80082b0:	2c02      	cmp	r4, #2
 80082b2:	d015      	beq.n	80082e0 <__ieee754_atan2+0x138>
 80082b4:	2c00      	cmp	r4, #0
 80082b6:	d098      	beq.n	80081ea <__ieee754_atan2+0x42>
 80082b8:	a321      	add	r3, pc, #132	; (adr r3, 8008340 <__ieee754_atan2+0x198>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f7 ffeb 	bl	8000298 <__aeabi_dsub>
 80082c2:	a321      	add	r3, pc, #132	; (adr r3, 8008348 <__ieee754_atan2+0x1a0>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	e014      	b.n	80082f4 <__ieee754_atan2+0x14c>
 80082ca:	a121      	add	r1, pc, #132	; (adr r1, 8008350 <__ieee754_atan2+0x1a8>)
 80082cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082d0:	e7ec      	b.n	80082ac <__ieee754_atan2+0x104>
 80082d2:	2000      	movs	r0, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	e7e9      	b.n	80082ac <__ieee754_atan2+0x104>
 80082d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082dc:	4619      	mov	r1, r3
 80082de:	e784      	b.n	80081ea <__ieee754_atan2+0x42>
 80082e0:	a317      	add	r3, pc, #92	; (adr r3, 8008340 <__ieee754_atan2+0x198>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f7f7 ffd7 	bl	8000298 <__aeabi_dsub>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	a116      	add	r1, pc, #88	; (adr r1, 8008348 <__ieee754_atan2+0x1a0>)
 80082f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f4:	f7f7 ffd0 	bl	8000298 <__aeabi_dsub>
 80082f8:	e777      	b.n	80081ea <__ieee754_atan2+0x42>
 80082fa:	a117      	add	r1, pc, #92	; (adr r1, 8008358 <__ieee754_atan2+0x1b0>)
 80082fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008300:	e773      	b.n	80081ea <__ieee754_atan2+0x42>
 8008302:	a111      	add	r1, pc, #68	; (adr r1, 8008348 <__ieee754_atan2+0x1a0>)
 8008304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008308:	e76f      	b.n	80081ea <__ieee754_atan2+0x42>
 800830a:	a111      	add	r1, pc, #68	; (adr r1, 8008350 <__ieee754_atan2+0x1a8>)
 800830c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008310:	e76b      	b.n	80081ea <__ieee754_atan2+0x42>
 8008312:	bf00      	nop
 8008314:	f3af 8000 	nop.w
 8008318:	54442d18 	.word	0x54442d18
 800831c:	c00921fb 	.word	0xc00921fb
 8008320:	54442d18 	.word	0x54442d18
 8008324:	bff921fb 	.word	0xbff921fb
 8008328:	54442d18 	.word	0x54442d18
 800832c:	bfe921fb 	.word	0xbfe921fb
 8008330:	7f3321d2 	.word	0x7f3321d2
 8008334:	4002d97c 	.word	0x4002d97c
 8008338:	7f3321d2 	.word	0x7f3321d2
 800833c:	c002d97c 	.word	0xc002d97c
 8008340:	33145c07 	.word	0x33145c07
 8008344:	3ca1a626 	.word	0x3ca1a626
 8008348:	54442d18 	.word	0x54442d18
 800834c:	400921fb 	.word	0x400921fb
 8008350:	54442d18 	.word	0x54442d18
 8008354:	3ff921fb 	.word	0x3ff921fb
 8008358:	54442d18 	.word	0x54442d18
 800835c:	3fe921fb 	.word	0x3fe921fb
 8008360:	7ff00000 	.word	0x7ff00000

08008364 <__ieee754_fmod>:
 8008364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008368:	ec53 2b11 	vmov	r2, r3, d1
 800836c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8008370:	ea5e 0402 	orrs.w	r4, lr, r2
 8008374:	ec51 0b10 	vmov	r0, r1, d0
 8008378:	461e      	mov	r6, r3
 800837a:	ee11 5a10 	vmov	r5, s2
 800837e:	4694      	mov	ip, r2
 8008380:	d00c      	beq.n	800839c <__ieee754_fmod+0x38>
 8008382:	4c7a      	ldr	r4, [pc, #488]	; (800856c <__ieee754_fmod+0x208>)
 8008384:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8008388:	45a0      	cmp	r8, r4
 800838a:	4689      	mov	r9, r1
 800838c:	dc06      	bgt.n	800839c <__ieee754_fmod+0x38>
 800838e:	4254      	negs	r4, r2
 8008390:	4314      	orrs	r4, r2
 8008392:	4f77      	ldr	r7, [pc, #476]	; (8008570 <__ieee754_fmod+0x20c>)
 8008394:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8008398:	42bc      	cmp	r4, r7
 800839a:	d909      	bls.n	80083b0 <__ieee754_fmod+0x4c>
 800839c:	f7f8 f934 	bl	8000608 <__aeabi_dmul>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	f7f8 fa5a 	bl	800085c <__aeabi_ddiv>
 80083a8:	ec41 0b10 	vmov	d0, r0, r1
 80083ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b0:	45f0      	cmp	r8, lr
 80083b2:	ee10 2a10 	vmov	r2, s0
 80083b6:	4607      	mov	r7, r0
 80083b8:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 80083bc:	dc0a      	bgt.n	80083d4 <__ieee754_fmod+0x70>
 80083be:	dbf3      	blt.n	80083a8 <__ieee754_fmod+0x44>
 80083c0:	42a8      	cmp	r0, r5
 80083c2:	d3f1      	bcc.n	80083a8 <__ieee754_fmod+0x44>
 80083c4:	d106      	bne.n	80083d4 <__ieee754_fmod+0x70>
 80083c6:	496b      	ldr	r1, [pc, #428]	; (8008574 <__ieee754_fmod+0x210>)
 80083c8:	0fe4      	lsrs	r4, r4, #31
 80083ca:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80083ce:	e9d4 0100 	ldrd	r0, r1, [r4]
 80083d2:	e7e9      	b.n	80083a8 <__ieee754_fmod+0x44>
 80083d4:	4b68      	ldr	r3, [pc, #416]	; (8008578 <__ieee754_fmod+0x214>)
 80083d6:	4598      	cmp	r8, r3
 80083d8:	dc49      	bgt.n	800846e <__ieee754_fmod+0x10a>
 80083da:	f1b8 0f00 	cmp.w	r8, #0
 80083de:	d13d      	bne.n	800845c <__ieee754_fmod+0xf8>
 80083e0:	4866      	ldr	r0, [pc, #408]	; (800857c <__ieee754_fmod+0x218>)
 80083e2:	4611      	mov	r1, r2
 80083e4:	2900      	cmp	r1, #0
 80083e6:	dc36      	bgt.n	8008456 <__ieee754_fmod+0xf2>
 80083e8:	459e      	cmp	lr, r3
 80083ea:	dc51      	bgt.n	8008490 <__ieee754_fmod+0x12c>
 80083ec:	f1be 0f00 	cmp.w	lr, #0
 80083f0:	d145      	bne.n	800847e <__ieee754_fmod+0x11a>
 80083f2:	4b62      	ldr	r3, [pc, #392]	; (800857c <__ieee754_fmod+0x218>)
 80083f4:	4629      	mov	r1, r5
 80083f6:	2900      	cmp	r1, #0
 80083f8:	dc3e      	bgt.n	8008478 <__ieee754_fmod+0x114>
 80083fa:	4961      	ldr	r1, [pc, #388]	; (8008580 <__ieee754_fmod+0x21c>)
 80083fc:	4288      	cmp	r0, r1
 80083fe:	db4c      	blt.n	800849a <__ieee754_fmod+0x136>
 8008400:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8008404:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008408:	4a5d      	ldr	r2, [pc, #372]	; (8008580 <__ieee754_fmod+0x21c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	db59      	blt.n	80084c2 <__ieee754_fmod+0x15e>
 800840e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008412:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8008416:	1ac0      	subs	r0, r0, r3
 8008418:	1b8a      	subs	r2, r1, r6
 800841a:	eba7 050c 	sub.w	r5, r7, ip
 800841e:	2800      	cmp	r0, #0
 8008420:	d166      	bne.n	80084f0 <__ieee754_fmod+0x18c>
 8008422:	4567      	cmp	r7, ip
 8008424:	bf38      	it	cc
 8008426:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800842a:	2a00      	cmp	r2, #0
 800842c:	bfbc      	itt	lt
 800842e:	463d      	movlt	r5, r7
 8008430:	460a      	movlt	r2, r1
 8008432:	ea52 0105 	orrs.w	r1, r2, r5
 8008436:	d0c6      	beq.n	80083c6 <__ieee754_fmod+0x62>
 8008438:	494f      	ldr	r1, [pc, #316]	; (8008578 <__ieee754_fmod+0x214>)
 800843a:	428a      	cmp	r2, r1
 800843c:	dd6d      	ble.n	800851a <__ieee754_fmod+0x1b6>
 800843e:	4950      	ldr	r1, [pc, #320]	; (8008580 <__ieee754_fmod+0x21c>)
 8008440:	428b      	cmp	r3, r1
 8008442:	db70      	blt.n	8008526 <__ieee754_fmod+0x1c2>
 8008444:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8008448:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800844c:	4314      	orrs	r4, r2
 800844e:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8008452:	4628      	mov	r0, r5
 8008454:	e7a8      	b.n	80083a8 <__ieee754_fmod+0x44>
 8008456:	3801      	subs	r0, #1
 8008458:	0049      	lsls	r1, r1, #1
 800845a:	e7c3      	b.n	80083e4 <__ieee754_fmod+0x80>
 800845c:	4848      	ldr	r0, [pc, #288]	; (8008580 <__ieee754_fmod+0x21c>)
 800845e:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8008462:	0049      	lsls	r1, r1, #1
 8008464:	2900      	cmp	r1, #0
 8008466:	f100 30ff 	add.w	r0, r0, #4294967295
 800846a:	dcfa      	bgt.n	8008462 <__ieee754_fmod+0xfe>
 800846c:	e7bc      	b.n	80083e8 <__ieee754_fmod+0x84>
 800846e:	ea4f 5028 	mov.w	r0, r8, asr #20
 8008472:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8008476:	e7b7      	b.n	80083e8 <__ieee754_fmod+0x84>
 8008478:	3b01      	subs	r3, #1
 800847a:	0049      	lsls	r1, r1, #1
 800847c:	e7bb      	b.n	80083f6 <__ieee754_fmod+0x92>
 800847e:	4b40      	ldr	r3, [pc, #256]	; (8008580 <__ieee754_fmod+0x21c>)
 8008480:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8008484:	0049      	lsls	r1, r1, #1
 8008486:	2900      	cmp	r1, #0
 8008488:	f103 33ff 	add.w	r3, r3, #4294967295
 800848c:	dcfa      	bgt.n	8008484 <__ieee754_fmod+0x120>
 800848e:	e7b4      	b.n	80083fa <__ieee754_fmod+0x96>
 8008490:	ea4f 532e 	mov.w	r3, lr, asr #20
 8008494:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008498:	e7af      	b.n	80083fa <__ieee754_fmod+0x96>
 800849a:	1a0f      	subs	r7, r1, r0
 800849c:	2f1f      	cmp	r7, #31
 800849e:	dc0a      	bgt.n	80084b6 <__ieee754_fmod+0x152>
 80084a0:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 80084a4:	fa08 f807 	lsl.w	r8, r8, r7
 80084a8:	fa22 f101 	lsr.w	r1, r2, r1
 80084ac:	ea41 0108 	orr.w	r1, r1, r8
 80084b0:	fa02 f707 	lsl.w	r7, r2, r7
 80084b4:	e7a8      	b.n	8008408 <__ieee754_fmod+0xa4>
 80084b6:	4933      	ldr	r1, [pc, #204]	; (8008584 <__ieee754_fmod+0x220>)
 80084b8:	1a09      	subs	r1, r1, r0
 80084ba:	fa02 f101 	lsl.w	r1, r2, r1
 80084be:	2700      	movs	r7, #0
 80084c0:	e7a2      	b.n	8008408 <__ieee754_fmod+0xa4>
 80084c2:	eba2 0c03 	sub.w	ip, r2, r3
 80084c6:	f1bc 0f1f 	cmp.w	ip, #31
 80084ca:	dc0a      	bgt.n	80084e2 <__ieee754_fmod+0x17e>
 80084cc:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 80084d0:	fa0e fe0c 	lsl.w	lr, lr, ip
 80084d4:	fa25 f606 	lsr.w	r6, r5, r6
 80084d8:	ea46 060e 	orr.w	r6, r6, lr
 80084dc:	fa05 fc0c 	lsl.w	ip, r5, ip
 80084e0:	e799      	b.n	8008416 <__ieee754_fmod+0xb2>
 80084e2:	4e28      	ldr	r6, [pc, #160]	; (8008584 <__ieee754_fmod+0x220>)
 80084e4:	1af6      	subs	r6, r6, r3
 80084e6:	fa05 f606 	lsl.w	r6, r5, r6
 80084ea:	f04f 0c00 	mov.w	ip, #0
 80084ee:	e792      	b.n	8008416 <__ieee754_fmod+0xb2>
 80084f0:	4567      	cmp	r7, ip
 80084f2:	bf38      	it	cc
 80084f4:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80084f8:	2a00      	cmp	r2, #0
 80084fa:	da05      	bge.n	8008508 <__ieee754_fmod+0x1a4>
 80084fc:	0ffa      	lsrs	r2, r7, #31
 80084fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008502:	007f      	lsls	r7, r7, #1
 8008504:	3801      	subs	r0, #1
 8008506:	e787      	b.n	8008418 <__ieee754_fmod+0xb4>
 8008508:	ea52 0105 	orrs.w	r1, r2, r5
 800850c:	f43f af5b 	beq.w	80083c6 <__ieee754_fmod+0x62>
 8008510:	0fe9      	lsrs	r1, r5, #31
 8008512:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8008516:	006f      	lsls	r7, r5, #1
 8008518:	e7f4      	b.n	8008504 <__ieee754_fmod+0x1a0>
 800851a:	0fe8      	lsrs	r0, r5, #31
 800851c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8008520:	006d      	lsls	r5, r5, #1
 8008522:	3b01      	subs	r3, #1
 8008524:	e789      	b.n	800843a <__ieee754_fmod+0xd6>
 8008526:	1ac9      	subs	r1, r1, r3
 8008528:	2914      	cmp	r1, #20
 800852a:	dc0a      	bgt.n	8008542 <__ieee754_fmod+0x1de>
 800852c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8008530:	fa02 f303 	lsl.w	r3, r2, r3
 8008534:	40cd      	lsrs	r5, r1
 8008536:	432b      	orrs	r3, r5
 8008538:	410a      	asrs	r2, r1
 800853a:	ea42 0104 	orr.w	r1, r2, r4
 800853e:	4618      	mov	r0, r3
 8008540:	e732      	b.n	80083a8 <__ieee754_fmod+0x44>
 8008542:	291f      	cmp	r1, #31
 8008544:	dc07      	bgt.n	8008556 <__ieee754_fmod+0x1f2>
 8008546:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800854a:	40cd      	lsrs	r5, r1
 800854c:	fa02 f303 	lsl.w	r3, r2, r3
 8008550:	432b      	orrs	r3, r5
 8008552:	4622      	mov	r2, r4
 8008554:	e7f1      	b.n	800853a <__ieee754_fmod+0x1d6>
 8008556:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800855a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800855e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008562:	33e2      	adds	r3, #226	; 0xe2
 8008564:	fa42 f303 	asr.w	r3, r2, r3
 8008568:	e7f3      	b.n	8008552 <__ieee754_fmod+0x1ee>
 800856a:	bf00      	nop
 800856c:	7fefffff 	.word	0x7fefffff
 8008570:	7ff00000 	.word	0x7ff00000
 8008574:	08008c08 	.word	0x08008c08
 8008578:	000fffff 	.word	0x000fffff
 800857c:	fffffbed 	.word	0xfffffbed
 8008580:	fffffc02 	.word	0xfffffc02
 8008584:	fffffbe2 	.word	0xfffffbe2

08008588 <atan>:
 8008588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	ec55 4b10 	vmov	r4, r5, d0
 8008590:	4bc3      	ldr	r3, [pc, #780]	; (80088a0 <atan+0x318>)
 8008592:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008596:	429e      	cmp	r6, r3
 8008598:	46ab      	mov	fp, r5
 800859a:	dd18      	ble.n	80085ce <atan+0x46>
 800859c:	4bc1      	ldr	r3, [pc, #772]	; (80088a4 <atan+0x31c>)
 800859e:	429e      	cmp	r6, r3
 80085a0:	dc01      	bgt.n	80085a6 <atan+0x1e>
 80085a2:	d109      	bne.n	80085b8 <atan+0x30>
 80085a4:	b144      	cbz	r4, 80085b8 <atan+0x30>
 80085a6:	4622      	mov	r2, r4
 80085a8:	462b      	mov	r3, r5
 80085aa:	4620      	mov	r0, r4
 80085ac:	4629      	mov	r1, r5
 80085ae:	f7f7 fe75 	bl	800029c <__adddf3>
 80085b2:	4604      	mov	r4, r0
 80085b4:	460d      	mov	r5, r1
 80085b6:	e006      	b.n	80085c6 <atan+0x3e>
 80085b8:	f1bb 0f00 	cmp.w	fp, #0
 80085bc:	f340 8131 	ble.w	8008822 <atan+0x29a>
 80085c0:	a59b      	add	r5, pc, #620	; (adr r5, 8008830 <atan+0x2a8>)
 80085c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80085c6:	ec45 4b10 	vmov	d0, r4, r5
 80085ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ce:	4bb6      	ldr	r3, [pc, #728]	; (80088a8 <atan+0x320>)
 80085d0:	429e      	cmp	r6, r3
 80085d2:	dc14      	bgt.n	80085fe <atan+0x76>
 80085d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80085d8:	429e      	cmp	r6, r3
 80085da:	dc0d      	bgt.n	80085f8 <atan+0x70>
 80085dc:	a396      	add	r3, pc, #600	; (adr r3, 8008838 <atan+0x2b0>)
 80085de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e2:	ee10 0a10 	vmov	r0, s0
 80085e6:	4629      	mov	r1, r5
 80085e8:	f7f7 fe58 	bl	800029c <__adddf3>
 80085ec:	2200      	movs	r2, #0
 80085ee:	4baf      	ldr	r3, [pc, #700]	; (80088ac <atan+0x324>)
 80085f0:	f7f8 fa9a 	bl	8000b28 <__aeabi_dcmpgt>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d1e6      	bne.n	80085c6 <atan+0x3e>
 80085f8:	f04f 3aff 	mov.w	sl, #4294967295
 80085fc:	e02b      	b.n	8008656 <atan+0xce>
 80085fe:	f000 f963 	bl	80088c8 <fabs>
 8008602:	4bab      	ldr	r3, [pc, #684]	; (80088b0 <atan+0x328>)
 8008604:	429e      	cmp	r6, r3
 8008606:	ec55 4b10 	vmov	r4, r5, d0
 800860a:	f300 80bf 	bgt.w	800878c <atan+0x204>
 800860e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008612:	429e      	cmp	r6, r3
 8008614:	f300 80a0 	bgt.w	8008758 <atan+0x1d0>
 8008618:	ee10 2a10 	vmov	r2, s0
 800861c:	ee10 0a10 	vmov	r0, s0
 8008620:	462b      	mov	r3, r5
 8008622:	4629      	mov	r1, r5
 8008624:	f7f7 fe3a 	bl	800029c <__adddf3>
 8008628:	2200      	movs	r2, #0
 800862a:	4ba0      	ldr	r3, [pc, #640]	; (80088ac <atan+0x324>)
 800862c:	f7f7 fe34 	bl	8000298 <__aeabi_dsub>
 8008630:	2200      	movs	r2, #0
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800863a:	4620      	mov	r0, r4
 800863c:	4629      	mov	r1, r5
 800863e:	f7f7 fe2d 	bl	800029c <__adddf3>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4630      	mov	r0, r6
 8008648:	4639      	mov	r1, r7
 800864a:	f7f8 f907 	bl	800085c <__aeabi_ddiv>
 800864e:	f04f 0a00 	mov.w	sl, #0
 8008652:	4604      	mov	r4, r0
 8008654:	460d      	mov	r5, r1
 8008656:	4622      	mov	r2, r4
 8008658:	462b      	mov	r3, r5
 800865a:	4620      	mov	r0, r4
 800865c:	4629      	mov	r1, r5
 800865e:	f7f7 ffd3 	bl	8000608 <__aeabi_dmul>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4680      	mov	r8, r0
 8008668:	4689      	mov	r9, r1
 800866a:	f7f7 ffcd 	bl	8000608 <__aeabi_dmul>
 800866e:	a374      	add	r3, pc, #464	; (adr r3, 8008840 <atan+0x2b8>)
 8008670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008674:	4606      	mov	r6, r0
 8008676:	460f      	mov	r7, r1
 8008678:	f7f7 ffc6 	bl	8000608 <__aeabi_dmul>
 800867c:	a372      	add	r3, pc, #456	; (adr r3, 8008848 <atan+0x2c0>)
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	f7f7 fe0b 	bl	800029c <__adddf3>
 8008686:	4632      	mov	r2, r6
 8008688:	463b      	mov	r3, r7
 800868a:	f7f7 ffbd 	bl	8000608 <__aeabi_dmul>
 800868e:	a370      	add	r3, pc, #448	; (adr r3, 8008850 <atan+0x2c8>)
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f7f7 fe02 	bl	800029c <__adddf3>
 8008698:	4632      	mov	r2, r6
 800869a:	463b      	mov	r3, r7
 800869c:	f7f7 ffb4 	bl	8000608 <__aeabi_dmul>
 80086a0:	a36d      	add	r3, pc, #436	; (adr r3, 8008858 <atan+0x2d0>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	f7f7 fdf9 	bl	800029c <__adddf3>
 80086aa:	4632      	mov	r2, r6
 80086ac:	463b      	mov	r3, r7
 80086ae:	f7f7 ffab 	bl	8000608 <__aeabi_dmul>
 80086b2:	a36b      	add	r3, pc, #428	; (adr r3, 8008860 <atan+0x2d8>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	f7f7 fdf0 	bl	800029c <__adddf3>
 80086bc:	4632      	mov	r2, r6
 80086be:	463b      	mov	r3, r7
 80086c0:	f7f7 ffa2 	bl	8000608 <__aeabi_dmul>
 80086c4:	a368      	add	r3, pc, #416	; (adr r3, 8008868 <atan+0x2e0>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	f7f7 fde7 	bl	800029c <__adddf3>
 80086ce:	4642      	mov	r2, r8
 80086d0:	464b      	mov	r3, r9
 80086d2:	f7f7 ff99 	bl	8000608 <__aeabi_dmul>
 80086d6:	a366      	add	r3, pc, #408	; (adr r3, 8008870 <atan+0x2e8>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	4680      	mov	r8, r0
 80086de:	4689      	mov	r9, r1
 80086e0:	4630      	mov	r0, r6
 80086e2:	4639      	mov	r1, r7
 80086e4:	f7f7 ff90 	bl	8000608 <__aeabi_dmul>
 80086e8:	a363      	add	r3, pc, #396	; (adr r3, 8008878 <atan+0x2f0>)
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	f7f7 fdd3 	bl	8000298 <__aeabi_dsub>
 80086f2:	4632      	mov	r2, r6
 80086f4:	463b      	mov	r3, r7
 80086f6:	f7f7 ff87 	bl	8000608 <__aeabi_dmul>
 80086fa:	a361      	add	r3, pc, #388	; (adr r3, 8008880 <atan+0x2f8>)
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f7f7 fdca 	bl	8000298 <__aeabi_dsub>
 8008704:	4632      	mov	r2, r6
 8008706:	463b      	mov	r3, r7
 8008708:	f7f7 ff7e 	bl	8000608 <__aeabi_dmul>
 800870c:	a35e      	add	r3, pc, #376	; (adr r3, 8008888 <atan+0x300>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f7f7 fdc1 	bl	8000298 <__aeabi_dsub>
 8008716:	4632      	mov	r2, r6
 8008718:	463b      	mov	r3, r7
 800871a:	f7f7 ff75 	bl	8000608 <__aeabi_dmul>
 800871e:	a35c      	add	r3, pc, #368	; (adr r3, 8008890 <atan+0x308>)
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	f7f7 fdb8 	bl	8000298 <__aeabi_dsub>
 8008728:	4632      	mov	r2, r6
 800872a:	463b      	mov	r3, r7
 800872c:	f7f7 ff6c 	bl	8000608 <__aeabi_dmul>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4640      	mov	r0, r8
 8008736:	4649      	mov	r1, r9
 8008738:	f7f7 fdb0 	bl	800029c <__adddf3>
 800873c:	4622      	mov	r2, r4
 800873e:	462b      	mov	r3, r5
 8008740:	f7f7 ff62 	bl	8000608 <__aeabi_dmul>
 8008744:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	d14b      	bne.n	80087e6 <atan+0x25e>
 800874e:	4620      	mov	r0, r4
 8008750:	4629      	mov	r1, r5
 8008752:	f7f7 fda1 	bl	8000298 <__aeabi_dsub>
 8008756:	e72c      	b.n	80085b2 <atan+0x2a>
 8008758:	ee10 0a10 	vmov	r0, s0
 800875c:	2200      	movs	r2, #0
 800875e:	4b53      	ldr	r3, [pc, #332]	; (80088ac <atan+0x324>)
 8008760:	4629      	mov	r1, r5
 8008762:	f7f7 fd99 	bl	8000298 <__aeabi_dsub>
 8008766:	2200      	movs	r2, #0
 8008768:	4606      	mov	r6, r0
 800876a:	460f      	mov	r7, r1
 800876c:	4b4f      	ldr	r3, [pc, #316]	; (80088ac <atan+0x324>)
 800876e:	4620      	mov	r0, r4
 8008770:	4629      	mov	r1, r5
 8008772:	f7f7 fd93 	bl	800029c <__adddf3>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4630      	mov	r0, r6
 800877c:	4639      	mov	r1, r7
 800877e:	f7f8 f86d 	bl	800085c <__aeabi_ddiv>
 8008782:	f04f 0a01 	mov.w	sl, #1
 8008786:	4604      	mov	r4, r0
 8008788:	460d      	mov	r5, r1
 800878a:	e764      	b.n	8008656 <atan+0xce>
 800878c:	4b49      	ldr	r3, [pc, #292]	; (80088b4 <atan+0x32c>)
 800878e:	429e      	cmp	r6, r3
 8008790:	dc1d      	bgt.n	80087ce <atan+0x246>
 8008792:	ee10 0a10 	vmov	r0, s0
 8008796:	2200      	movs	r2, #0
 8008798:	4b47      	ldr	r3, [pc, #284]	; (80088b8 <atan+0x330>)
 800879a:	4629      	mov	r1, r5
 800879c:	f7f7 fd7c 	bl	8000298 <__aeabi_dsub>
 80087a0:	2200      	movs	r2, #0
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	4b44      	ldr	r3, [pc, #272]	; (80088b8 <atan+0x330>)
 80087a8:	4620      	mov	r0, r4
 80087aa:	4629      	mov	r1, r5
 80087ac:	f7f7 ff2c 	bl	8000608 <__aeabi_dmul>
 80087b0:	2200      	movs	r2, #0
 80087b2:	4b3e      	ldr	r3, [pc, #248]	; (80088ac <atan+0x324>)
 80087b4:	f7f7 fd72 	bl	800029c <__adddf3>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f7f8 f84c 	bl	800085c <__aeabi_ddiv>
 80087c4:	f04f 0a02 	mov.w	sl, #2
 80087c8:	4604      	mov	r4, r0
 80087ca:	460d      	mov	r5, r1
 80087cc:	e743      	b.n	8008656 <atan+0xce>
 80087ce:	462b      	mov	r3, r5
 80087d0:	ee10 2a10 	vmov	r2, s0
 80087d4:	2000      	movs	r0, #0
 80087d6:	4939      	ldr	r1, [pc, #228]	; (80088bc <atan+0x334>)
 80087d8:	f7f8 f840 	bl	800085c <__aeabi_ddiv>
 80087dc:	f04f 0a03 	mov.w	sl, #3
 80087e0:	4604      	mov	r4, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	e737      	b.n	8008656 <atan+0xce>
 80087e6:	4b36      	ldr	r3, [pc, #216]	; (80088c0 <atan+0x338>)
 80087e8:	4e36      	ldr	r6, [pc, #216]	; (80088c4 <atan+0x33c>)
 80087ea:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80087ee:	4456      	add	r6, sl
 80087f0:	449a      	add	sl, r3
 80087f2:	e9da 2300 	ldrd	r2, r3, [sl]
 80087f6:	f7f7 fd4f 	bl	8000298 <__aeabi_dsub>
 80087fa:	4622      	mov	r2, r4
 80087fc:	462b      	mov	r3, r5
 80087fe:	f7f7 fd4b 	bl	8000298 <__aeabi_dsub>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	e9d6 0100 	ldrd	r0, r1, [r6]
 800880a:	f7f7 fd45 	bl	8000298 <__aeabi_dsub>
 800880e:	f1bb 0f00 	cmp.w	fp, #0
 8008812:	4604      	mov	r4, r0
 8008814:	460d      	mov	r5, r1
 8008816:	f6bf aed6 	bge.w	80085c6 <atan+0x3e>
 800881a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800881e:	461d      	mov	r5, r3
 8008820:	e6d1      	b.n	80085c6 <atan+0x3e>
 8008822:	a51d      	add	r5, pc, #116	; (adr r5, 8008898 <atan+0x310>)
 8008824:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008828:	e6cd      	b.n	80085c6 <atan+0x3e>
 800882a:	bf00      	nop
 800882c:	f3af 8000 	nop.w
 8008830:	54442d18 	.word	0x54442d18
 8008834:	3ff921fb 	.word	0x3ff921fb
 8008838:	8800759c 	.word	0x8800759c
 800883c:	7e37e43c 	.word	0x7e37e43c
 8008840:	e322da11 	.word	0xe322da11
 8008844:	3f90ad3a 	.word	0x3f90ad3a
 8008848:	24760deb 	.word	0x24760deb
 800884c:	3fa97b4b 	.word	0x3fa97b4b
 8008850:	a0d03d51 	.word	0xa0d03d51
 8008854:	3fb10d66 	.word	0x3fb10d66
 8008858:	c54c206e 	.word	0xc54c206e
 800885c:	3fb745cd 	.word	0x3fb745cd
 8008860:	920083ff 	.word	0x920083ff
 8008864:	3fc24924 	.word	0x3fc24924
 8008868:	5555550d 	.word	0x5555550d
 800886c:	3fd55555 	.word	0x3fd55555
 8008870:	2c6a6c2f 	.word	0x2c6a6c2f
 8008874:	bfa2b444 	.word	0xbfa2b444
 8008878:	52defd9a 	.word	0x52defd9a
 800887c:	3fadde2d 	.word	0x3fadde2d
 8008880:	af749a6d 	.word	0xaf749a6d
 8008884:	3fb3b0f2 	.word	0x3fb3b0f2
 8008888:	fe231671 	.word	0xfe231671
 800888c:	3fbc71c6 	.word	0x3fbc71c6
 8008890:	9998ebc4 	.word	0x9998ebc4
 8008894:	3fc99999 	.word	0x3fc99999
 8008898:	54442d18 	.word	0x54442d18
 800889c:	bff921fb 	.word	0xbff921fb
 80088a0:	440fffff 	.word	0x440fffff
 80088a4:	7ff00000 	.word	0x7ff00000
 80088a8:	3fdbffff 	.word	0x3fdbffff
 80088ac:	3ff00000 	.word	0x3ff00000
 80088b0:	3ff2ffff 	.word	0x3ff2ffff
 80088b4:	40037fff 	.word	0x40037fff
 80088b8:	3ff80000 	.word	0x3ff80000
 80088bc:	bff00000 	.word	0xbff00000
 80088c0:	08008c38 	.word	0x08008c38
 80088c4:	08008c18 	.word	0x08008c18

080088c8 <fabs>:
 80088c8:	ec51 0b10 	vmov	r0, r1, d0
 80088cc:	ee10 2a10 	vmov	r2, s0
 80088d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088d4:	ec43 2b10 	vmov	d0, r2, r3
 80088d8:	4770      	bx	lr

080088da <matherr>:
 80088da:	2000      	movs	r0, #0
 80088dc:	4770      	bx	lr
	...

080088e0 <_init>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	bf00      	nop
 80088e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e6:	bc08      	pop	{r3}
 80088e8:	469e      	mov	lr, r3
 80088ea:	4770      	bx	lr

080088ec <_fini>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	bf00      	nop
 80088f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f2:	bc08      	pop	{r3}
 80088f4:	469e      	mov	lr, r3
 80088f6:	4770      	bx	lr
