
MOTOR_Grellier_Leconte.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08007108  08007108  00017108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007458  08007458  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007458  08007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007460  08007460  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001e4  0800764c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800764c  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e63  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d3b  00000000  00000000  00037077  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  00039db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  0003ad50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195eb  00000000  00000000  0003bba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef69  00000000  00000000  00055193  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fbb5  00000000  00000000  000640fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3cb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea8  00000000  00000000  000f3d2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070ec 	.word	0x080070ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080070ec 	.word	0x080070ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <DriveSyst_Init>:
#include "stm32f4xx_hal.h"
#include <math.h>

Encoder_Feedback_t Feedback;

void DriveSyst_Init (driveSyst_t *dsHandle){
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	dsHandle->sp_source=e_BUTTON;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
	dsHandle->sp_physics=e_POSITION;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	705a      	strb	r2, [r3, #1]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <DriveSyst_Loop>:


void DriveSyst_Loop(driveSyst_t *dsHandle){
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08d      	sub	sp, #52	; 0x34
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	int in_movement=0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c

	switch(dsHandle->sp_physics) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	785b      	ldrb	r3, [r3, #1]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d03a      	beq.n	8001002 <DriveSyst_Loop+0x8a>
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	f000 80b6 	beq.w	80010fe <DriveSyst_Loop+0x186>
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 80cc 	bne.w	8001130 <DriveSyst_Loop+0x1b8>
		case e_SPEED:
						switch(dsHandle->sp_source){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d82a      	bhi.n	8000ff6 <DriveSyst_Loop+0x7e>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <DriveSyst_Loop+0x30>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fb9 	.word	0x08000fb9
 8000fac:	08000fff 	.word	0x08000fff
 8000fb0:	08000fff 	.word	0x08000fff
 8000fb4:	08000fff 	.word	0x08000fff
								case e_CONSTANT: 	pidHandleSpeed.input.order = 6;
 8000fb8:	4b63      	ldr	r3, [pc, #396]	; (8001148 <DriveSyst_Loop+0x1d0>)
 8000fba:	4a64      	ldr	r2, [pc, #400]	; (800114c <DriveSyst_Loop+0x1d4>)
 8000fbc:	615a      	str	r2, [r3, #20]
													pidHandleSpeed.input.feedback = Encoder_Read().d_angle;
 8000fbe:	f000 f8e7 	bl	8001190 <Encoder_Read>
 8000fc2:	eef0 6a40 	vmov.f32	s13, s0
 8000fc6:	eeb0 7a60 	vmov.f32	s14, s1
 8000fca:	eef0 7a41 	vmov.f32	s15, s2
 8000fce:	edc7 6a02 	vstr	s13, [r7, #8]
 8000fd2:	ed87 7a03 	vstr	s14, [r7, #12]
 8000fd6:	edc7 7a04 	vstr	s15, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4a5a      	ldr	r2, [pc, #360]	; (8001148 <DriveSyst_Loop+0x1d0>)
 8000fde:	6193      	str	r3, [r2, #24]
													PID_Execute(&pidHandleSpeed);
 8000fe0:	4859      	ldr	r0, [pc, #356]	; (8001148 <DriveSyst_Loop+0x1d0>)
 8000fe2:	f000 fca0 	bl	8001926 <PID_Execute>
													Motor_Pwm_Update(pidHandleSpeed.process.output);
 8000fe6:	4b58      	ldr	r3, [pc, #352]	; (8001148 <DriveSyst_Loop+0x1d0>)
 8000fe8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000fec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff0:	f000 fba0 	bl	8001734 <Motor_Pwm_Update>

												break;
 8000ff4:	e004      	b.n	8001000 <DriveSyst_Loop+0x88>
												break;
								case e_ACCELEROMETER:;
												break;
								case e_UART:
												break;
								default: printf("error source");
 8000ff6:	4856      	ldr	r0, [pc, #344]	; (8001150 <DriveSyst_Loop+0x1d8>)
 8000ff8:	f004 f836 	bl	8005068 <iprintf>
							}
						break;
 8000ffc:	e09b      	b.n	8001136 <DriveSyst_Loop+0x1be>
												break;
 8000ffe:	bf00      	nop
						break;
 8001000:	e099      	b.n	8001136 <DriveSyst_Loop+0x1be>



		case e_POSITION:
						switch(dsHandle->sp_source){
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d873      	bhi.n	80010f2 <DriveSyst_Loop+0x17a>
 800100a:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <DriveSyst_Loop+0x98>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	08001021 	.word	0x08001021
 8001014:	0800105f 	.word	0x0800105f
 8001018:	080010fb 	.word	0x080010fb
 800101c:	080010fb 	.word	0x080010fb
								case e_CONSTANT: 	pidHandlePosition.input.order = 18;
 8001020:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <DriveSyst_Loop+0x1dc>)
 8001022:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <DriveSyst_Loop+0x1e0>)
 8001024:	615a      	str	r2, [r3, #20]
													pidHandlePosition.input.feedback = Encoder_Read().angle_abs;
 8001026:	f000 f8b3 	bl	8001190 <Encoder_Read>
 800102a:	eef0 6a40 	vmov.f32	s13, s0
 800102e:	eeb0 7a60 	vmov.f32	s14, s1
 8001032:	eef0 7a41 	vmov.f32	s15, s2
 8001036:	edc7 6a05 	vstr	s13, [r7, #20]
 800103a:	ed87 7a06 	vstr	s14, [r7, #24]
 800103e:	edc7 7a07 	vstr	s15, [r7, #28]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4a43      	ldr	r2, [pc, #268]	; (8001154 <DriveSyst_Loop+0x1dc>)
 8001046:	6193      	str	r3, [r2, #24]
													PID_Execute(&pidHandlePosition);
 8001048:	4842      	ldr	r0, [pc, #264]	; (8001154 <DriveSyst_Loop+0x1dc>)
 800104a:	f000 fc6c 	bl	8001926 <PID_Execute>
													Motor_Pwm_Update(pidHandlePosition.process.output);
 800104e:	4b41      	ldr	r3, [pc, #260]	; (8001154 <DriveSyst_Loop+0x1dc>)
 8001050:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001054:	eeb0 0a67 	vmov.f32	s0, s15
 8001058:	f000 fb6c 	bl	8001734 <Motor_Pwm_Update>
												break;
 800105c:	e04e      	b.n	80010fc <DriveSyst_Loop+0x184>
									case e_BUTTON:
													if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0 && in_movement==0){
 800105e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001062:	483e      	ldr	r0, [pc, #248]	; (800115c <DriveSyst_Loop+0x1e4>)
 8001064:	f001 facc 	bl	8002600 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d117      	bne.n	800109e <DriveSyst_Loop+0x126>
 800106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	d114      	bne.n	800109e <DriveSyst_Loop+0x126>
														pidHandlePosition.input.order = pidHandlePosition.input.feedback+2*M_PI;
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <DriveSyst_Loop+0x1dc>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa6d 	bl	8000558 <__aeabi_f2d>
 800107e:	a330      	add	r3, pc, #192	; (adr r3, 8001140 <DriveSyst_Loop+0x1c8>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff f90a 	bl	800029c <__adddf3>
 8001088:	4603      	mov	r3, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f7ff fd92 	bl	8000bb8 <__aeabi_d2f>
 8001094:	4602      	mov	r2, r0
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <DriveSyst_Loop+0x1dc>)
 8001098:	615a      	str	r2, [r3, #20]
														in_movement=1;
 800109a:	2301      	movs	r3, #1
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
													}

													pidHandlePosition.input.feedback = Encoder_Read().angle_abs;
 800109e:	f000 f877 	bl	8001190 <Encoder_Read>
 80010a2:	eef0 6a40 	vmov.f32	s13, s0
 80010a6:	eeb0 7a60 	vmov.f32	s14, s1
 80010aa:	eef0 7a41 	vmov.f32	s15, s2
 80010ae:	edc7 6a08 	vstr	s13, [r7, #32]
 80010b2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80010b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	4a25      	ldr	r2, [pc, #148]	; (8001154 <DriveSyst_Loop+0x1dc>)
 80010be:	6193      	str	r3, [r2, #24]
													PID_Execute(&pidHandlePosition);
 80010c0:	4824      	ldr	r0, [pc, #144]	; (8001154 <DriveSyst_Loop+0x1dc>)
 80010c2:	f000 fc30 	bl	8001926 <PID_Execute>
													Motor_Pwm_Update(pidHandlePosition.process.output);
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <DriveSyst_Loop+0x1dc>)
 80010c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80010cc:	eeb0 0a67 	vmov.f32	s0, s15
 80010d0:	f000 fb30 	bl	8001734 <Motor_Pwm_Update>
													if(pidHandlePosition.process.error<pidHandlePosition.init.error_stop){
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <DriveSyst_Loop+0x1dc>)
 80010d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <DriveSyst_Loop+0x1dc>)
 80010dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80010e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e8:	d400      	bmi.n	80010ec <DriveSyst_Loop+0x174>
															in_movement=0;
													}
												break;
 80010ea:	e007      	b.n	80010fc <DriveSyst_Loop+0x184>
															in_movement=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
												break;
 80010f0:	e004      	b.n	80010fc <DriveSyst_Loop+0x184>
								case e_ACCELEROMETER:;
												break;
								case e_UART:
												break;
								default: printf("error source");
 80010f2:	4817      	ldr	r0, [pc, #92]	; (8001150 <DriveSyst_Loop+0x1d8>)
 80010f4:	f003 ffb8 	bl	8005068 <iprintf>
								}
						break;
 80010f8:	e01d      	b.n	8001136 <DriveSyst_Loop+0x1be>
												break;
 80010fa:	bf00      	nop
						break;
 80010fc:	e01b      	b.n	8001136 <DriveSyst_Loop+0x1be>


		case e_TORQUE:
						switch(dsHandle->sp_source){
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d80e      	bhi.n	8001124 <DriveSyst_Loop+0x1ac>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <DriveSyst_Loop+0x194>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	0800111d 	.word	0x0800111d
 8001110:	0800112d 	.word	0x0800112d
 8001114:	0800112d 	.word	0x0800112d
 8001118:	0800112d 	.word	0x0800112d
								case e_CONSTANT: pidHandleSpeed.input.order = 6;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <DriveSyst_Loop+0x1d0>)
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <DriveSyst_Loop+0x1d4>)
 8001120:	615a      	str	r2, [r3, #20]
												break;
 8001122:	e004      	b.n	800112e <DriveSyst_Loop+0x1b6>
												break;
								case e_ACCELEROMETER:;
												break;
								case e_UART:
												break;
								default: printf("error source");
 8001124:	480a      	ldr	r0, [pc, #40]	; (8001150 <DriveSyst_Loop+0x1d8>)
 8001126:	f003 ff9f 	bl	8005068 <iprintf>
						}
						break;
 800112a:	e004      	b.n	8001136 <DriveSyst_Loop+0x1be>
												break;
 800112c:	bf00      	nop
						break;
 800112e:	e002      	b.n	8001136 <DriveSyst_Loop+0x1be>
		default: printf("error physics");
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <DriveSyst_Loop+0x1e8>)
 8001132:	f003 ff99 	bl	8005068 <iprintf>
	}


}
 8001136:	bf00      	nop
 8001138:	3734      	adds	r7, #52	; 0x34
 800113a:	46bd      	mov	sp, r7
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	bf00      	nop
 8001140:	54442d18 	.word	0x54442d18
 8001144:	401921fb 	.word	0x401921fb
 8001148:	2000026c 	.word	0x2000026c
 800114c:	40c00000 	.word	0x40c00000
 8001150:	08007108 	.word	0x08007108
 8001154:	2000029c 	.word	0x2000029c
 8001158:	41900000 	.word	0x41900000
 800115c:	40020800 	.word	0x40020800
 8001160:	08007118 	.word	0x08007118

08001164 <Encoder_Init>:
#include "encoder.h"
#include "tim.h"
#include <math.h>
Encoder_Feedback_t Encoder;

void Encoder_Init(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8001168:	f000 fd56 	bl	8001c18 <MX_TIM2_Init>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 800116c:	2100      	movs	r1, #0
 800116e:	4807      	ldr	r0, [pc, #28]	; (800118c <Encoder_Init+0x28>)
 8001170:	f002 f950 	bl	8003414 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8001174:	2104      	movs	r1, #4
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <Encoder_Init+0x28>)
 8001178:	f002 f94c 	bl	8003414 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,32768);
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <Encoder_Init+0x28>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001184:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000340 	.word	0x20000340

08001190 <Encoder_Read>:

Encoder_Feedback_t Encoder_Read(void){
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af00      	add	r7, sp, #0

	float deltaT = 0.040;
 8001196:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <Encoder_Read+0x138>)
 8001198:	627b      	str	r3, [r7, #36]	; 0x24

	float counter=__HAL_TIM_GET_COUNTER(&htim2);
 800119a:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <Encoder_Read+0x13c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a8:	edc7 7a08 	vstr	s15, [r7, #32]
	__HAL_TIM_SET_COUNTER(&htim2,32768);
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <Encoder_Read+0x13c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24

	float delta = ((counter-32768.0F)*2.0F*M_PI)/(75.0F*8.0F);
 80011b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80011ba:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80012d0 <Encoder_Read+0x140>
 80011be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011c6:	ee17 0a90 	vmov	r0, s15
 80011ca:	f7ff f9c5 	bl	8000558 <__aeabi_f2d>
 80011ce:	a33a      	add	r3, pc, #232	; (adr r3, 80012b8 <Encoder_Read+0x128>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fa18 	bl	8000608 <__aeabi_dmul>
 80011d8:	4603      	mov	r3, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	4618      	mov	r0, r3
 80011de:	4621      	mov	r1, r4
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <Encoder_Read+0x144>)
 80011e6:	f7ff fb39 	bl	800085c <__aeabi_ddiv>
 80011ea:	4603      	mov	r3, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	4618      	mov	r0, r3
 80011f0:	4621      	mov	r1, r4
 80011f2:	f7ff fce1 	bl	8000bb8 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	61fb      	str	r3, [r7, #28]
	Encoder.angle_abs += delta;
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <Encoder_Read+0x148>)
 80011fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001200:	edd7 7a07 	vldr	s15, [r7, #28]
 8001204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <Encoder_Read+0x148>)
 800120a:	edc3 7a01 	vstr	s15, [r3, #4]
	Encoder.angle_rel = fmod(Encoder.angle_abs,2*M_PI);
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <Encoder_Read+0x148>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9a0 	bl	8000558 <__aeabi_f2d>
 8001218:	4603      	mov	r3, r0
 800121a:	460c      	mov	r4, r1
 800121c:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80012c0 <Encoder_Read+0x130>
 8001220:	ec44 3b10 	vmov	d0, r3, r4
 8001224:	f005 fdea 	bl	8006dfc <fmod>
 8001228:	ec54 3b10 	vmov	r3, r4, d0
 800122c:	4618      	mov	r0, r3
 800122e:	4621      	mov	r1, r4
 8001230:	f7ff fcc2 	bl	8000bb8 <__aeabi_d2f>
 8001234:	4602      	mov	r2, r0
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <Encoder_Read+0x148>)
 8001238:	601a      	str	r2, [r3, #0]
	if (Encoder.angle_rel<0){
 800123a:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <Encoder_Read+0x148>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	d512      	bpl.n	8001270 <Encoder_Read+0xe0>
		Encoder.angle_rel = Encoder.angle_rel+2*M_PI;
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <Encoder_Read+0x148>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f982 	bl	8000558 <__aeabi_f2d>
 8001254:	a31a      	add	r3, pc, #104	; (adr r3, 80012c0 <Encoder_Read+0x130>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f81f 	bl	800029c <__adddf3>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	4618      	mov	r0, r3
 8001264:	4621      	mov	r1, r4
 8001266:	f7ff fca7 	bl	8000bb8 <__aeabi_d2f>
 800126a:	4602      	mov	r2, r0
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <Encoder_Read+0x148>)
 800126e:	601a      	str	r2, [r3, #0]
	}

	Encoder.d_angle=delta/deltaT;
 8001270:	edd7 6a07 	vldr	s13, [r7, #28]
 8001274:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <Encoder_Read+0x148>)
 800127e:	edc3 7a02 	vstr	s15, [r3, #8]

	return Encoder;
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <Encoder_Read+0x148>)
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	ca07      	ldmia	r2, {r0, r1, r2}
 800128a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800128e:	6939      	ldr	r1, [r7, #16]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	ee06 1a90 	vmov	s13, r1
 8001298:	ee07 2a10 	vmov	s14, r2
 800129c:	ee07 3a90 	vmov	s15, r3

}
 80012a0:	eeb0 0a66 	vmov.f32	s0, s13
 80012a4:	eef0 0a47 	vmov.f32	s1, s14
 80012a8:	eeb0 1a67 	vmov.f32	s2, s15
 80012ac:	372c      	adds	r7, #44	; 0x2c
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	54442d18 	.word	0x54442d18
 80012bc:	400921fb 	.word	0x400921fb
 80012c0:	54442d18 	.word	0x54442d18
 80012c4:	401921fb 	.word	0x401921fb
 80012c8:	3d23d70a 	.word	0x3d23d70a
 80012cc:	20000340 	.word	0x20000340
 80012d0:	47000000 	.word	0x47000000
 80012d4:	4082c000 	.word	0x4082c000
 80012d8:	2000020c 	.word	0x2000020c

080012dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <MX_GPIO_Init+0xd0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a2c      	ldr	r2, [pc, #176]	; (80013ac <MX_GPIO_Init+0xd0>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a25      	ldr	r2, [pc, #148]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_GPIO_Init+0xd0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_GPIO_Init+0xd0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2120      	movs	r1, #32
 8001366:	4812      	ldr	r0, [pc, #72]	; (80013b0 <MX_GPIO_Init+0xd4>)
 8001368:	f001 f962 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800136c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_GPIO_Init+0xd8>)
 8001382:	f000 ffbb 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001386:	2320      	movs	r3, #32
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_GPIO_Init+0xd4>)
 800139e:	f000 ffad 	bl	80022fc <HAL_GPIO_Init>

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020800 	.word	0x40020800

080013b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_I2C1_Init+0x50>)
 80013be:	4a13      	ldr	r2, [pc, #76]	; (800140c <MX_I2C1_Init+0x54>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_I2C1_Init+0x50>)
 80013c4:	4a12      	ldr	r2, [pc, #72]	; (8001410 <MX_I2C1_Init+0x58>)
 80013c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_I2C1_Init+0x50>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <MX_I2C1_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_I2C1_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <MX_I2C1_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_I2C1_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_I2C1_Init+0x50>)
 80013f6:	f001 f94f 	bl	8002698 <HAL_I2C_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001400:	f000 f980 	bl	8001704 <Error_Handler>
  }

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000218 	.word	0x20000218
 800140c:	40005400 	.word	0x40005400
 8001410:	000186a0 	.word	0x000186a0

08001414 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a19      	ldr	r2, [pc, #100]	; (8001498 <HAL_I2C_MspInit+0x84>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d12b      	bne.n	800148e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_I2C_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_I2C_MspInit+0x88>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_I2C_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001452:	23c0      	movs	r3, #192	; 0xc0
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001456:	2312      	movs	r3, #18
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145a:	2301      	movs	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001462:	2304      	movs	r3, #4
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <HAL_I2C_MspInit+0x8c>)
 800146e:	f000 ff45 	bl	80022fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_I2C_MspInit+0x88>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_I2C_MspInit+0x88>)
 800147c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_I2C_MspInit+0x88>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40005400 	.word	0x40005400
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020400 	.word	0x40020400

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014a8:	b090      	sub	sp, #64	; 0x40
 80014aa:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ac:	f000 fdc8 	bl	8002040 <HAL_Init>

  /* USER CODE BEGIN Init */
  float Kp_speed = 0.02;
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <main+0xd8>)
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  float Ki_speed = 0.09;
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <main+0xdc>)
 80014b6:	623b      	str	r3, [r7, #32]
  float Kd_speed = 0.04;
 80014b8:	4b32      	ldr	r3, [pc, #200]	; (8001584 <main+0xe0>)
 80014ba:	61fb      	str	r3, [r7, #28]
  float error_stop_speed = 0.01;
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <main+0xe4>)
 80014be:	61bb      	str	r3, [r7, #24]
  float integ_sat_speed = 6;
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <main+0xe8>)
 80014c2:	617b      	str	r3, [r7, #20]

  float Kp_position = 0.02;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <main+0xd8>)
 80014c6:	613b      	str	r3, [r7, #16]
  float Ki_position = 0.035;
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <main+0xec>)
 80014ca:	60fb      	str	r3, [r7, #12]
  float Kd_position = 0.05;
 80014cc:	4b31      	ldr	r3, [pc, #196]	; (8001594 <main+0xf0>)
 80014ce:	60bb      	str	r3, [r7, #8]
  float error_stop_position = 0.01;
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <main+0xe4>)
 80014d2:	607b      	str	r3, [r7, #4]
  float integ_sat_position = 6;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <main+0xe8>)
 80014d6:	603b      	str	r3, [r7, #0]
  Motor_Init();
 80014d8:	f000 f91c 	bl	8001714 <Motor_Init>
  Encoder_Init();
 80014dc:	f7ff fe42 	bl	8001164 <Encoder_Init>

  PID_Init(&pidHandleSpeed, Kp_speed, Ki_speed, Kd_speed, error_stop_speed, integ_sat_speed);
 80014e0:	ed97 2a05 	vldr	s4, [r7, #20]
 80014e4:	edd7 1a06 	vldr	s3, [r7, #24]
 80014e8:	ed97 1a07 	vldr	s2, [r7, #28]
 80014ec:	edd7 0a08 	vldr	s1, [r7, #32]
 80014f0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80014f4:	4828      	ldr	r0, [pc, #160]	; (8001598 <main+0xf4>)
 80014f6:	f000 f9d7 	bl	80018a8 <PID_Init>
  PID_Init(&pidHandlePosition, Kp_position, Ki_position, Kd_position, error_stop_position, integ_sat_position);
 80014fa:	ed97 2a00 	vldr	s4, [r7]
 80014fe:	edd7 1a01 	vldr	s3, [r7, #4]
 8001502:	ed97 1a02 	vldr	s2, [r7, #8]
 8001506:	edd7 0a03 	vldr	s1, [r7, #12]
 800150a:	ed97 0a04 	vldr	s0, [r7, #16]
 800150e:	4823      	ldr	r0, [pc, #140]	; (800159c <main+0xf8>)
 8001510:	f000 f9ca 	bl	80018a8 <PID_Init>

  DriveSyst_Init (&dsHandle);
 8001514:	4822      	ldr	r0, [pc, #136]	; (80015a0 <main+0xfc>)
 8001516:	f7ff fd1f 	bl	8000f58 <DriveSyst_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f845 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f7ff fedd 	bl	80012dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001522:	f000 fcf1 	bl	8001f08 <MX_USART2_UART_Init>

  MX_I2C1_Init();
 8001526:	f7ff ff47 	bl	80013b8 <MX_I2C1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf("velocity: %f\n\r output: %f\n\r error: %f\n\r somme error: %f\n\r\n\r",pidHandleSpeed.input.feedback,pidHandleSpeed.process.output,pidHandleSpeed.process.error,pidHandleSpeed.process.integ);
	  printf("velocity: %f\n\r output: %f\n\r error: %f\n\r somme error: %f\n\r\n\r",pidHandlePosition.input.feedback,pidHandlePosition.process.output,pidHandlePosition.process.error,pidHandlePosition.process.integ);
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <main+0xf8>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f812 	bl	8000558 <__aeabi_f2d>
 8001534:	4682      	mov	sl, r0
 8001536:	468b      	mov	fp, r1
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <main+0xf8>)
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f80b 	bl	8000558 <__aeabi_f2d>
 8001542:	4604      	mov	r4, r0
 8001544:	460d      	mov	r5, r1
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <main+0xf8>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f804 	bl	8000558 <__aeabi_f2d>
 8001550:	4680      	mov	r8, r0
 8001552:	4689      	mov	r9, r1
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <main+0xf8>)
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fffd 	bl	8000558 <__aeabi_f2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001566:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800156a:	e9cd 4500 	strd	r4, r5, [sp]
 800156e:	4652      	mov	r2, sl
 8001570:	465b      	mov	r3, fp
 8001572:	480c      	ldr	r0, [pc, #48]	; (80015a4 <main+0x100>)
 8001574:	f003 fd78 	bl	8005068 <iprintf>
 8001578:	e7d7      	b.n	800152a <main+0x86>
 800157a:	bf00      	nop
 800157c:	3ca3d70a 	.word	0x3ca3d70a
 8001580:	3db851ec 	.word	0x3db851ec
 8001584:	3d23d70a 	.word	0x3d23d70a
 8001588:	3c23d70a 	.word	0x3c23d70a
 800158c:	40c00000 	.word	0x40c00000
 8001590:	3d0f5c29 	.word	0x3d0f5c29
 8001594:	3d4ccccd 	.word	0x3d4ccccd
 8001598:	2000026c 	.word	0x2000026c
 800159c:	2000029c 	.word	0x2000029c
 80015a0:	200002cc 	.word	0x200002cc
 80015a4:	08007128 	.word	0x08007128

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	; 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2230      	movs	r2, #48	; 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 f8f2 	bl	80047a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <SystemClock_Config+0xd0>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a28      	ldr	r2, [pc, #160]	; (8001678 <SystemClock_Config+0xd0>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <SystemClock_Config+0xd0>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <SystemClock_Config+0xd4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015f4:	4a21      	ldr	r2, [pc, #132]	; (800167c <SystemClock_Config+0xd4>)
 80015f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <SystemClock_Config+0xd4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160c:	2301      	movs	r3, #1
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001610:	2310      	movs	r3, #16
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001614:	2302      	movs	r3, #2
 8001616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001618:	2300      	movs	r3, #0
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800161c:	2310      	movs	r3, #16
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001620:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001626:	2304      	movs	r3, #4
 8001628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800162a:	2307      	movs	r3, #7
 800162c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	4618      	mov	r0, r3
 8001634:	f001 f968 	bl	8002908 <HAL_RCC_OscConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800163e:	f000 f861 	bl	8001704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001642:	230f      	movs	r3, #15
 8001644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001646:	2302      	movs	r3, #2
 8001648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800164e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2102      	movs	r1, #2
 800165e:	4618      	mov	r0, r3
 8001660:	f001 fbc2 	bl	8002de8 <HAL_RCC_ClockConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800166a:	f000 f84b 	bl	8001704 <Error_Handler>
  }
}
 800166e:	bf00      	nop
 8001670:	3750      	adds	r7, #80	; 0x50
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000

08001680 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	static uint16_t tempoNms = 500;
	static uint16_t tempoNmsEnc = 40;
	if(tempoNms > 0 ) tempoNms--;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_SYSTICK_Callback+0x50>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <HAL_SYSTICK_Callback+0x1a>
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_SYSTICK_Callback+0x50>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_SYSTICK_Callback+0x50>)
 8001696:	801a      	strh	r2, [r3, #0]
 8001698:	e007      	b.n	80016aa <HAL_SYSTICK_Callback+0x2a>
	else    {
		tempoNms = 500;
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_SYSTICK_Callback+0x50>)
 800169c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016a0:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80016a2:	2120      	movs	r1, #32
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <HAL_SYSTICK_Callback+0x54>)
 80016a6:	f000 ffdc 	bl	8002662 <HAL_GPIO_TogglePin>

	}
	if(tempoNmsEnc > 0 ) tempoNmsEnc--;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_SYSTICK_Callback+0x58>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_SYSTICK_Callback+0x40>
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_SYSTICK_Callback+0x58>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <HAL_SYSTICK_Callback+0x58>)
 80016bc:	801a      	strh	r2, [r3, #0]
			pidHandleSpeed.input.feedback = Encoder_Read().d_angle;
			PID_Execute(&pidHandleSpeed);
			Motor_Pwm_Update(pidHandleSpeed.process.output);*/
		}

}
 80016be:	e005      	b.n	80016cc <HAL_SYSTICK_Callback+0x4c>
			tempoNmsEnc = 40;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_SYSTICK_Callback+0x58>)
 80016c2:	2228      	movs	r2, #40	; 0x28
 80016c4:	801a      	strh	r2, [r3, #0]
			DriveSyst_Loop(&dsHandle);
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_SYSTICK_Callback+0x5c>)
 80016c8:	f7ff fc56 	bl	8000f78 <DriveSyst_Loop>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	40020000 	.word	0x40020000
 80016d8:	20000002 	.word	0x20000002
 80016dc:	200002cc 	.word	0x200002cc

080016e0 <__io_putchar>:

int __io_putchar(int ch){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016e8:	1d39      	adds	r1, r7, #4
 80016ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ee:	2201      	movs	r2, #1
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <__io_putchar+0x20>)
 80016f2:	f002 fbcc 	bl	8003e8e <HAL_UART_Transmit>
	return ch;
 80016f6:	687b      	ldr	r3, [r7, #4]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000380 	.word	0x20000380

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <Motor_Init>:
#include "motor.h"
#include "tim.h"


void Motor_Init(void){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 8001718:	f000 fad2 	bl	8001cc0 <MX_TIM3_Init>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800171c:	2100      	movs	r1, #0
 800171e:	4804      	ldr	r0, [pc, #16]	; (8001730 <Motor_Init+0x1c>)
 8001720:	f001 fdb4 	bl	800328c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001724:	2104      	movs	r1, #4
 8001726:	4802      	ldr	r0, [pc, #8]	; (8001730 <Motor_Init+0x1c>)
 8001728:	f001 fdb0 	bl	800328c <HAL_TIM_PWM_Start>
};
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000300 	.word	0x20000300

08001734 <Motor_Pwm_Update>:


void Motor_Pwm_Update(float in){
 8001734:	b580      	push	{r7, lr}
 8001736:	b090      	sub	sp, #64	; 0x40
 8001738:	af00      	add	r7, sp, #0
 800173a:	ed87 0a01 	vstr	s0, [r7, #4]

	TIM_OC_InitTypeDef sConfigOC1 = {0};
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]
	sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 8001752:	2360      	movs	r3, #96	; 0x60
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC1.Pulse = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC1.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34

	TIM_OC_InitTypeDef sConfigOC2 = {0};
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	619a      	str	r2, [r3, #24]
	sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8001776:	2360      	movs	r3, #96	; 0x60
 8001778:	60bb      	str	r3, [r7, #8]
	sConfigOC2.Pulse = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
	sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
	sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]


	if(in<-1.0){
 8001786:	edd7 7a01 	vldr	s15, [r7, #4]
 800178a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800178e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	d501      	bpl.n	800179c <Motor_Pwm_Update+0x68>
		in=-1.0;
 8001798:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <Motor_Pwm_Update+0x16c>)
 800179a:	607b      	str	r3, [r7, #4]
	}
	if(in>1.0){
 800179c:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	dd02      	ble.n	80017b4 <Motor_Pwm_Update+0x80>
			in=1.0;
 80017ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017b2:	607b      	str	r3, [r7, #4]
		}
	if(in==0.0){
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	d105      	bne.n	80017ce <Motor_Pwm_Update+0x9a>
				sConfigOC1.Pulse = htim3.Init.Period;
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <Motor_Pwm_Update+0x170>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
				sConfigOC2.Pulse = htim3.Init.Period;
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <Motor_Pwm_Update+0x170>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60fb      	str	r3, [r7, #12]
				}
	if(in<0.0){
 80017ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d51b      	bpl.n	8001814 <Motor_Pwm_Update+0xe0>
		in=-1-in;
 80017dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80017e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e8:	edc7 7a01 	vstr	s15, [r7, #4]
		sConfigOC1.Pulse = htim3.Init.Period*-in;
 80017ec:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <Motor_Pwm_Update+0x170>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fc:	eef1 7a67 	vneg.f32	s15, s15
 8001800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001808:	ee17 3a90 	vmov	r3, s15
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
		sConfigOC2.Pulse = htim3.Init.Period;
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <Motor_Pwm_Update+0x170>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	60fb      	str	r3, [r7, #12]
	}
	if(in>0.0){
 8001814:	edd7 7a01 	vldr	s15, [r7, #4]
 8001818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	dd19      	ble.n	8001856 <Motor_Pwm_Update+0x122>
		in=1-in;
 8001822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001826:	edd7 7a01 	vldr	s15, [r7, #4]
 800182a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182e:	edc7 7a01 	vstr	s15, [r7, #4]
			sConfigOC1.Pulse = htim3.Init.Period;
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <Motor_Pwm_Update+0x170>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
			sConfigOC2.Pulse = htim3.Init.Period*in;
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <Motor_Pwm_Update+0x170>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001844:	edd7 7a01 	vldr	s15, [r7, #4]
 8001848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001850:	ee17 3a90 	vmov	r3, s15
 8001854:	60fb      	str	r3, [r7, #12]
		}


	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 8001856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185a:	2200      	movs	r2, #0
 800185c:	4619      	mov	r1, r3
 800185e:	4811      	ldr	r0, [pc, #68]	; (80018a4 <Motor_Pwm_Update+0x170>)
 8001860:	f001 fe10 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <Motor_Pwm_Update+0x13a>
	  {
	    Error_Handler();
 800186a:	f7ff ff4b 	bl	8001704 <Error_Handler>
	  }

	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	2204      	movs	r2, #4
 8001874:	4619      	mov	r1, r3
 8001876:	480b      	ldr	r0, [pc, #44]	; (80018a4 <Motor_Pwm_Update+0x170>)
 8001878:	f001 fe04 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <Motor_Pwm_Update+0x152>
	  {
	    Error_Handler();
 8001882:	f7ff ff3f 	bl	8001704 <Error_Handler>
	  }
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001886:	2100      	movs	r1, #0
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <Motor_Pwm_Update+0x170>)
 800188a:	f001 fcff 	bl	800328c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800188e:	2104      	movs	r1, #4
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <Motor_Pwm_Update+0x170>)
 8001892:	f001 fcfb 	bl	800328c <HAL_TIM_PWM_Start>
}
 8001896:	bf00      	nop
 8001898:	3740      	adds	r7, #64	; 0x40
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	bf800000 	.word	0xbf800000
 80018a4:	20000300 	.word	0x20000300

080018a8 <PID_Init>:



//
void PID_Init(PID_t* pidHandle, float Kp, float Ki, float Kd, float error_stop,float integ_sat)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6178      	str	r0, [r7, #20]
 80018b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80018b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80018b8:	ed87 1a02 	vstr	s2, [r7, #8]
 80018bc:	edc7 1a01 	vstr	s3, [r7, #4]
 80018c0:	ed87 2a00 	vstr	s4, [r7]
	pidHandle->init.Kd = Kd;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	609a      	str	r2, [r3, #8]
	pidHandle->init.Kp = Kp;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	601a      	str	r2, [r3, #0]
	pidHandle->init.Ki = Ki;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	605a      	str	r2, [r3, #4]
	pidHandle->init.error_stop = error_stop;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]
	pidHandle->init.integ_sat = integ_sat;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	611a      	str	r2, [r3, #16]
	pidHandle->process.integ = 0;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
	pidHandle->process.previous_error = 0;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
	pidHandle->process.error = 0;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
	pidHandle->process.deriv = 0;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
	pidHandle->process.output = 0;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
	pidHandle->input.order = 0;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
	pidHandle->input.feedback = 0;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
}
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PID_Execute>:

float PID_Execute(PID_t* pidHandle)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 // error
	pidHandle->process.previous_error = pidHandle->process.error;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69da      	ldr	r2, [r3, #28]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	621a      	str	r2, [r3, #32]
	pidHandle->process.error = pidHandle->input.order-pidHandle->input.feedback;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	ed93 7a05 	vldr	s14, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	edc3 7a07 	vstr	s15, [r3, #28]

 // derivate
	pidHandle->process.deriv = pidHandle->process.error - pidHandle->process.previous_error;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	edd3 7a08 	vldr	s15, [r3, #32]
 8001958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

 // integer
	if (fabs(pidHandle->process.error) > pidHandle->init.error_stop){
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edd3 7a07 	vldr	s15, [r3, #28]
 8001968:	eeb0 7ae7 	vabs.f32	s14, s15
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	dd0a      	ble.n	8001992 <PID_Execute+0x6c>
		pidHandle->process.integ = pidHandle->process.integ + pidHandle->process.error;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	edd3 7a07 	vldr	s15, [r3, #28]
 8001988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	}

	if (fabs(pidHandle->process.integ) > pidHandle->init.integ_sat){
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001998:	eeb0 7ae7 	vabs.f32	s14, s15
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	edd3 7a04 	vldr	s15, [r3, #16]
 80019a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	dd03      	ble.n	80019b4 <PID_Execute+0x8e>
		pidHandle->process.integ = pidHandle->init.integ_sat;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
	}
//command


pidHandle->process.output = pidHandle->init.Kp * pidHandle->process.error + pidHandle->init.Ki * pidHandle->process.integ + pidHandle->init.Kd * pidHandle->process.deriv;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80019c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edd3 6a02 	vldr	s13, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80019e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

return pidHandle->process.output;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	ee07 3a90 	vmov	s15, r3
}
 80019fa:	eeb0 0a67 	vmov.f32	s0, s15
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a46:	2007      	movs	r0, #7
 8001a48:	f000 fc1e 	bl	8002288 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aac:	f000 fb1a 	bl	80020e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001ab0:	f000 fc1d 	bl	80022ee <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e00a      	b.n	8001ae0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aca:	f3af 8000 	nop.w
 8001ace:	4601      	mov	r1, r0
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	b2ca      	uxtb	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	dbf0      	blt.n	8001aca <_read+0x12>
	}

return len;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e009      	b.n	8001b18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fde7 	bl	80016e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	dbf1      	blt.n	8001b04 <_write+0x12>
	}
	return len;
 8001b20:	687b      	ldr	r3, [r7, #4]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_close>:

int _close(int file)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
	return -1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b52:	605a      	str	r2, [r3, #4]
	return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_isatty>:

int _isatty(int file)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
	return 1;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
	return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_sbrk+0x50>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x16>
		heap_end = &end;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <_sbrk+0x50>)
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <_sbrk+0x54>)
 8001ba8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <_sbrk+0x50>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <_sbrk+0x50>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	466a      	mov	r2, sp
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d907      	bls.n	8001bce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001bbe:	f002 fdc5 	bl	800474c <__errno>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	e006      	b.n	8001bdc <_sbrk+0x48>
	}

	heap_end += incr;
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <_sbrk+0x50>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <_sbrk+0x50>)
 8001bd8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000200 	.word	0x20000200
 8001be8:	200003c8 	.word	0x200003c8

08001bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <SystemInit+0x28>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf6:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <SystemInit+0x28>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SystemInit+0x28>)
 8001c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c06:	609a      	str	r2, [r3, #8]
#endif
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 fdba 	bl	80047a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <MX_TIM2_Init+0xa4>)
 8001c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <MX_TIM2_Init+0xa4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <MX_TIM2_Init+0xa4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c48:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <MX_TIM2_Init+0xa4>)
 8001c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_TIM2_Init+0xa4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <MX_TIM2_Init+0xa4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c64:	2301      	movs	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c74:	2301      	movs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	480d      	ldr	r0, [pc, #52]	; (8001cbc <MX_TIM2_Init+0xa4>)
 8001c88:	f001 fb32 	bl	80032f0 <HAL_TIM_Encoder_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c92:	f7ff fd37 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <MX_TIM2_Init+0xa4>)
 8001ca4:	f002 f838 	bl	8003d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001cae:	f7ff fd29 	bl	8001704 <Error_Handler>
  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3730      	adds	r7, #48	; 0x30
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000340 	.word	0x20000340

08001cc0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08e      	sub	sp, #56	; 0x38
 8001cc4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	f107 0320 	add.w	r3, r7, #32
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001cf0:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001cf2:	4a33      	ldr	r2, [pc, #204]	; (8001dc0 <MX_TIM3_Init+0x100>)
 8001cf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001d04:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001d08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d16:	4829      	ldr	r0, [pc, #164]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001d18:	f001 fa58 	bl	80031cc <HAL_TIM_Base_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d22:	f7ff fcef 	bl	8001704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d30:	4619      	mov	r1, r3
 8001d32:	4822      	ldr	r0, [pc, #136]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001d34:	f001 fc6c 	bl	8003610 <HAL_TIM_ConfigClockSource>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d3e:	f7ff fce1 	bl	8001704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d42:	481e      	ldr	r0, [pc, #120]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001d44:	f001 fa6d 	bl	8003222 <HAL_TIM_PWM_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d4e:	f7ff fcd9 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4816      	ldr	r0, [pc, #88]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001d62:	f001 ffd9 	bl	8003d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d6c:	f7ff fcca 	bl	8001704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d70:	2360      	movs	r3, #96	; 0x60
 8001d72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	4619      	mov	r1, r3
 8001d86:	480d      	ldr	r0, [pc, #52]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001d88:	f001 fb7c 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d92:	f7ff fcb7 	bl	8001704 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2204      	movs	r2, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4807      	ldr	r0, [pc, #28]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001d9e:	f001 fb71 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001da8:	f7ff fcac 	bl	8001704 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <MX_TIM3_Init+0xfc>)
 8001dae:	f000 f871 	bl	8001e94 <HAL_TIM_MspPostInit>

}
 8001db2:	bf00      	nop
 8001db4:	3738      	adds	r7, #56	; 0x38
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000300 	.word	0x20000300
 8001dc0:	40000400 	.word	0x40000400

08001dc4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de4:	d12b      	bne.n	8001e3e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_TIM_Encoder_MspInit+0x84>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <HAL_TIM_Encoder_MspInit+0x84>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_TIM_Encoder_MspInit+0x84>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e3a:	f000 fa5f 	bl	80022fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000

08001e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_TIM_Base_MspInit+0x3c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10d      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_TIM_Base_MspInit+0x40>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_TIM_Base_MspInit+0x40>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <HAL_TIM_Base_MspInit+0x40>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_TIM_MspPostInit+0x68>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d11d      	bne.n	8001ef2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_TIM_MspPostInit+0x6c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <HAL_TIM_MspPostInit+0x6c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_TIM_MspPostInit+0x6c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ed2:	23c0      	movs	r3, #192	; 0xc0
 8001ed4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <HAL_TIM_MspPostInit+0x70>)
 8001eee:	f000 fa05 	bl	80022fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000

08001f08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <MX_USART2_UART_Init+0x50>)
 8001f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f2e:	220c      	movs	r2, #12
 8001f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f40:	f001 ff58 	bl	8003df4 <HAL_UART_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f4a:	f7ff fbdb 	bl	8001704 <Error_Handler>
  }

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000380 	.word	0x20000380
 8001f58:	40004400 	.word	0x40004400

08001f5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_UART_MspInit+0x84>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d12b      	bne.n	8001fd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_UART_MspInit+0x88>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_UART_MspInit+0x88>)
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_UART_MspInit+0x88>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_UART_MspInit+0x88>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_UART_MspInit+0x88>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_UART_MspInit+0x88>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fb6:	230c      	movs	r3, #12
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <HAL_UART_MspInit+0x8c>)
 8001fd2:	f000 f993 	bl	80022fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40004400 	.word	0x40004400
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000

08001fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002024 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ff0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ff2:	e003      	b.n	8001ffc <LoopCopyDataInit>

08001ff4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ff6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ff8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ffa:	3104      	adds	r1, #4

08001ffc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ffc:	480b      	ldr	r0, [pc, #44]	; (800202c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002000:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002002:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002004:	d3f6      	bcc.n	8001ff4 <CopyDataInit>
  ldr  r2, =_sbss
 8002006:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002008:	e002      	b.n	8002010 <LoopFillZerobss>

0800200a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800200a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800200c:	f842 3b04 	str.w	r3, [r2], #4

08002010 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002012:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002014:	d3f9      	bcc.n	800200a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002016:	f7ff fde9 	bl	8001bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201a:	f002 fb9d 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201e:	f7ff fa41 	bl	80014a4 <main>
  bx  lr    
 8002022:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002024:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002028:	08007468 	.word	0x08007468
  ldr  r0, =_sdata
 800202c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002030:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002034:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002038:	200003c8 	.word	0x200003c8

0800203c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC_IRQHandler>
	...

08002040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_Init+0x40>)
 800204a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <HAL_Init+0x40>)
 8002056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800205a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_Init+0x40>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f000 f90d 	bl	8002288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206e:	2000      	movs	r0, #0
 8002070:	f000 f808 	bl	8002084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002074:	f7ff fcc8 	bl	8001a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023c00 	.word	0x40023c00

08002084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_InitTick+0x54>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_InitTick+0x58>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209a:	fbb3 f3f1 	udiv	r3, r3, r1
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f917 	bl	80022d6 <HAL_SYSTICK_Config>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00e      	b.n	80020d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b0f      	cmp	r3, #15
 80020b6:	d80a      	bhi.n	80020ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b8:	2200      	movs	r2, #0
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f000 f8ed 	bl	800229e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c4:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <HAL_InitTick+0x5c>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000004 	.word	0x20000004
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	20000008 	.word	0x20000008

080020e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x20>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x24>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <HAL_IncTick+0x24>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000000c 	.word	0x2000000c
 8002108:	200003c0 	.word	0x200003c0

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_GetTick+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	200003c0 	.word	0x200003c0

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	; (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002254:	d301      	bcc.n	800225a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002256:	2301      	movs	r3, #1
 8002258:	e00f      	b.n	800227a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <SysTick_Config+0x40>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002262:	210f      	movs	r1, #15
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f7ff ff8e 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <SysTick_Config+0x40>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <SysTick_Config+0x40>)
 8002274:	2207      	movs	r2, #7
 8002276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	e000e010 	.word	0xe000e010

08002288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff47 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b0:	f7ff ff5c 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	f7ff ff8e 	bl	80021dc <NVIC_EncodePriority>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff5d 	bl	8002188 <__NVIC_SetPriority>
}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffb0 	bl	8002244 <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80022f2:	f7ff f9c5 	bl	8001680 <HAL_SYSTICK_Callback>
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	e159      	b.n	80025cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	429a      	cmp	r2, r3
 8002332:	f040 8148 	bne.w	80025c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d00b      	beq.n	8002356 <HAL_GPIO_Init+0x5a>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800234a:	2b11      	cmp	r3, #17
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b12      	cmp	r3, #18
 8002354:	d130      	bne.n	80023b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800238c:	2201      	movs	r2, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 0201 	and.w	r2, r3, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0xfc>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b12      	cmp	r3, #18
 80023f6:	d123      	bne.n	8002440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	08da      	lsrs	r2, r3, #3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3208      	adds	r2, #8
 8002400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	69b9      	ldr	r1, [r7, #24]
 800243c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0203 	and.w	r2, r3, #3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80a2 	beq.w	80025c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b56      	ldr	r3, [pc, #344]	; (80025e0 <HAL_GPIO_Init+0x2e4>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a55      	ldr	r2, [pc, #340]	; (80025e0 <HAL_GPIO_Init+0x2e4>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <HAL_GPIO_Init+0x2e4>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249e:	4a51      	ldr	r2, [pc, #324]	; (80025e4 <HAL_GPIO_Init+0x2e8>)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	220f      	movs	r2, #15
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a48      	ldr	r2, [pc, #288]	; (80025e8 <HAL_GPIO_Init+0x2ec>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d019      	beq.n	80024fe <HAL_GPIO_Init+0x202>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a47      	ldr	r2, [pc, #284]	; (80025ec <HAL_GPIO_Init+0x2f0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_GPIO_Init+0x1fe>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a46      	ldr	r2, [pc, #280]	; (80025f0 <HAL_GPIO_Init+0x2f4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_GPIO_Init+0x1fa>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a45      	ldr	r2, [pc, #276]	; (80025f4 <HAL_GPIO_Init+0x2f8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <HAL_GPIO_Init+0x1f6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a44      	ldr	r2, [pc, #272]	; (80025f8 <HAL_GPIO_Init+0x2fc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_GPIO_Init+0x1f2>
 80024ea:	2304      	movs	r3, #4
 80024ec:	e008      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024ee:	2307      	movs	r3, #7
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024f2:	2303      	movs	r3, #3
 80024f4:	e004      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e002      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024fe:	2300      	movs	r3, #0
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	f002 0203 	and.w	r2, r2, #3
 8002506:	0092      	lsls	r2, r2, #2
 8002508:	4093      	lsls	r3, r2
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002510:	4934      	ldr	r1, [pc, #208]	; (80025e4 <HAL_GPIO_Init+0x2e8>)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3302      	adds	r3, #2
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800251e:	4b37      	ldr	r3, [pc, #220]	; (80025fc <HAL_GPIO_Init+0x300>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002542:	4a2e      	ldr	r2, [pc, #184]	; (80025fc <HAL_GPIO_Init+0x300>)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002548:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <HAL_GPIO_Init+0x300>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800256c:	4a23      	ldr	r2, [pc, #140]	; (80025fc <HAL_GPIO_Init+0x300>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_GPIO_Init+0x300>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002596:	4a19      	ldr	r2, [pc, #100]	; (80025fc <HAL_GPIO_Init+0x300>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <HAL_GPIO_Init+0x300>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c0:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_GPIO_Init+0x300>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b0f      	cmp	r3, #15
 80025d0:	f67f aea2 	bls.w	8002318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d4:	bf00      	nop
 80025d6:	3724      	adds	r7, #36	; 0x24
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40013c00 	.word	0x40013c00

08002600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e001      	b.n	8002622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
 800263c:	4613      	mov	r3, r2
 800263e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002640:	787b      	ldrb	r3, [r7, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800264c:	e003      	b.n	8002656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	041a      	lsls	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	619a      	str	r2, [r3, #24]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	401a      	ands	r2, r3
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	429a      	cmp	r2, r3
 800267a:	d104      	bne.n	8002686 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	041a      	lsls	r2, r3, #16
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002684:	e002      	b.n	800268c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e11f      	b.n	80028ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fea8 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2224      	movs	r2, #36	; 0x24
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026fc:	f000 fd3e 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8002700:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4a7b      	ldr	r2, [pc, #492]	; (80028f4 <HAL_I2C_Init+0x25c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d807      	bhi.n	800271c <HAL_I2C_Init+0x84>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a7a      	ldr	r2, [pc, #488]	; (80028f8 <HAL_I2C_Init+0x260>)
 8002710:	4293      	cmp	r3, r2
 8002712:	bf94      	ite	ls
 8002714:	2301      	movls	r3, #1
 8002716:	2300      	movhi	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e006      	b.n	800272a <HAL_I2C_Init+0x92>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4a77      	ldr	r2, [pc, #476]	; (80028fc <HAL_I2C_Init+0x264>)
 8002720:	4293      	cmp	r3, r2
 8002722:	bf94      	ite	ls
 8002724:	2301      	movls	r3, #1
 8002726:	2300      	movhi	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0db      	b.n	80028ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a72      	ldr	r2, [pc, #456]	; (8002900 <HAL_I2C_Init+0x268>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	0c9b      	lsrs	r3, r3, #18
 800273c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a64      	ldr	r2, [pc, #400]	; (80028f4 <HAL_I2C_Init+0x25c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d802      	bhi.n	800276c <HAL_I2C_Init+0xd4>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3301      	adds	r3, #1
 800276a:	e009      	b.n	8002780 <HAL_I2C_Init+0xe8>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	4a63      	ldr	r2, [pc, #396]	; (8002904 <HAL_I2C_Init+0x26c>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	3301      	adds	r3, #1
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	430b      	orrs	r3, r1
 8002786:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002792:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4956      	ldr	r1, [pc, #344]	; (80028f4 <HAL_I2C_Init+0x25c>)
 800279c:	428b      	cmp	r3, r1
 800279e:	d80d      	bhi.n	80027bc <HAL_I2C_Init+0x124>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1e59      	subs	r1, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	bf38      	it	cc
 80027b8:	2304      	movcc	r3, #4
 80027ba:	e04f      	b.n	800285c <HAL_I2C_Init+0x1c4>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d111      	bne.n	80027e8 <HAL_I2C_Init+0x150>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1e58      	subs	r0, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	440b      	add	r3, r1
 80027d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d6:	3301      	adds	r3, #1
 80027d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e012      	b.n	800280e <HAL_I2C_Init+0x176>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	0099      	lsls	r1, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Init+0x17e>
 8002812:	2301      	movs	r3, #1
 8002814:	e022      	b.n	800285c <HAL_I2C_Init+0x1c4>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10e      	bne.n	800283c <HAL_I2C_Init+0x1a4>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e58      	subs	r0, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6859      	ldr	r1, [r3, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	440b      	add	r3, r1
 800282c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283a:	e00f      	b.n	800285c <HAL_I2C_Init+0x1c4>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e58      	subs	r0, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	0099      	lsls	r1, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	6809      	ldr	r1, [r1, #0]
 8002860:	4313      	orrs	r3, r2
 8002862:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800288a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6911      	ldr	r1, [r2, #16]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68d2      	ldr	r2, [r2, #12]
 8002896:	4311      	orrs	r1, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	430b      	orrs	r3, r1
 800289e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	000186a0 	.word	0x000186a0
 80028f8:	001e847f 	.word	0x001e847f
 80028fc:	003d08ff 	.word	0x003d08ff
 8002900:	431bde83 	.word	0x431bde83
 8002904:	10624dd3 	.word	0x10624dd3

08002908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e25b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	4ba3      	ldr	r3, [pc, #652]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4ba0      	ldr	r3, [pc, #640]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	2b08      	cmp	r3, #8
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b9d      	ldr	r3, [pc, #628]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b99      	ldr	r3, [pc, #612]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e236      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b91      	ldr	r3, [pc, #580]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a90      	ldr	r2, [pc, #576]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b8b      	ldr	r3, [pc, #556]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a8a      	ldr	r2, [pc, #552]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b88      	ldr	r3, [pc, #544]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a87      	ldr	r2, [pc, #540]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a83      	ldr	r2, [pc, #524]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a80      	ldr	r2, [pc, #512]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff fba4 	bl	800210c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff fba0 	bl	800210c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1fb      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff fb90 	bl	800210c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff fb8c 	bl	800210c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1e7      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b6c      	ldr	r3, [pc, #432]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	4b65      	ldr	r3, [pc, #404]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1bb      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b56      	ldr	r3, [pc, #344]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4952      	ldr	r1, [pc, #328]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <HAL_RCC_OscConfig+0x2b0>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7ff fb45 	bl	800210c <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7ff fb41 	bl	800210c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e19c      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4940      	ldr	r1, [pc, #256]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCC_OscConfig+0x2b0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7ff fb24 	bl	800210c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7ff fb20 	bl	800210c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e17b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d030      	beq.n	8002b54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <HAL_RCC_OscConfig+0x2b4>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7ff fb04 	bl	800210c <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b08:	f7ff fb00 	bl	800210c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e15b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
 8002b26:	e015      	b.n	8002b54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_OscConfig+0x2b4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7ff faed 	bl	800210c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b36:	f7ff fae9 	bl	800210c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e144      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80a0 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10f      	bne.n	8002b92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x2b8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d121      	bne.n	8002be2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_RCC_OscConfig+0x2b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_RCC_OscConfig+0x2b8>)
 8002ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002baa:	f7ff faaf 	bl	800210c <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	e011      	b.n	8002bd6 <HAL_RCC_OscConfig+0x2ce>
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	42470000 	.word	0x42470000
 8002bbc:	42470e80 	.word	0x42470e80
 8002bc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7ff faa2 	bl	800210c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0fd      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <HAL_RCC_OscConfig+0x4d4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x2f0>
 8002bea:	4b7d      	ldr	r3, [pc, #500]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a7c      	ldr	r2, [pc, #496]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf6:	e01c      	b.n	8002c32 <HAL_RCC_OscConfig+0x32a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCC_OscConfig+0x312>
 8002c00:	4b77      	ldr	r3, [pc, #476]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a76      	ldr	r2, [pc, #472]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	4b74      	ldr	r3, [pc, #464]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a73      	ldr	r2, [pc, #460]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
 8002c18:	e00b      	b.n	8002c32 <HAL_RCC_OscConfig+0x32a>
 8002c1a:	4b71      	ldr	r3, [pc, #452]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a70      	ldr	r2, [pc, #448]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
 8002c26:	4b6e      	ldr	r3, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a6d      	ldr	r2, [pc, #436]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d015      	beq.n	8002c66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7ff fa67 	bl	800210c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7ff fa63 	bl	800210c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0bc      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ee      	beq.n	8002c42 <HAL_RCC_OscConfig+0x33a>
 8002c64:	e014      	b.n	8002c90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7ff fa51 	bl	800210c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7ff fa4d 	bl	800210c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0a6      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	4b56      	ldr	r3, [pc, #344]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ee      	bne.n	8002c6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c96:	4b52      	ldr	r3, [pc, #328]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a51      	ldr	r2, [pc, #324]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8092 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cac:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d05c      	beq.n	8002d72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d141      	bne.n	8002d44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <HAL_RCC_OscConfig+0x4dc>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7ff fa21 	bl	800210c <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cce:	f7ff fa1d 	bl	800210c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e078      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce0:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	019b      	lsls	r3, r3, #6
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	3b01      	subs	r3, #1
 8002d06:	041b      	lsls	r3, r3, #16
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	4933      	ldr	r1, [pc, #204]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d16:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_RCC_OscConfig+0x4dc>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7ff f9f6 	bl	800210c <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d24:	f7ff f9f2 	bl	800210c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e04d      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x41c>
 8002d42:	e045      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HAL_RCC_OscConfig+0x4dc>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4a:	f7ff f9df 	bl	800210c <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7ff f9db 	bl	800210c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e036      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x44a>
 8002d70:	e02e      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e029      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d11c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d115      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da6:	4013      	ands	r3, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d10d      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	40023800 	.word	0x40023800
 8002de4:	42470060 	.word	0x42470060

08002de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0cc      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b68      	ldr	r3, [pc, #416]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d90c      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b63      	ldr	r3, [pc, #396]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b8      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e3c:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a58      	ldr	r2, [pc, #352]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e54:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	494d      	ldr	r1, [pc, #308]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d044      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d119      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e07f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e06f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e067      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4934      	ldr	r1, [pc, #208]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7ff f918 	bl	800210c <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7ff f914 	bl	800210c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e04f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 020c 	and.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1eb      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d20c      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e032      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f6e:	f000 f821 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f72:	4601      	mov	r1, r0
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	fa21 f303 	lsr.w	r3, r1, r3
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff f878 	bl	8002084 <HAL_InitTick>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023c00 	.word	0x40023c00
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	08007164 	.word	0x08007164
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	20000008 	.word	0x20000008

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fca:	4b63      	ldr	r3, [pc, #396]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x32>
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d008      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x38>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 80b4 	bne.w	8003148 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b5e      	ldr	r3, [pc, #376]	; (800315c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fe2:	60bb      	str	r3, [r7, #8]
       break;
 8002fe4:	e0b3      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fe6:	4b5e      	ldr	r3, [pc, #376]	; (8003160 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002fe8:	60bb      	str	r3, [r7, #8]
      break;
 8002fea:	e0b0      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fec:	4b5a      	ldr	r3, [pc, #360]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff6:	4b58      	ldr	r3, [pc, #352]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d04a      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003002:	4b55      	ldr	r3, [pc, #340]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	f04f 0400 	mov.w	r4, #0
 800300c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	ea03 0501 	and.w	r5, r3, r1
 8003018:	ea04 0602 	and.w	r6, r4, r2
 800301c:	4629      	mov	r1, r5
 800301e:	4632      	mov	r2, r6
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	0154      	lsls	r4, r2, #5
 800302a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800302e:	014b      	lsls	r3, r1, #5
 8003030:	4619      	mov	r1, r3
 8003032:	4622      	mov	r2, r4
 8003034:	1b49      	subs	r1, r1, r5
 8003036:	eb62 0206 	sbc.w	r2, r2, r6
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	f04f 0400 	mov.w	r4, #0
 8003042:	0194      	lsls	r4, r2, #6
 8003044:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003048:	018b      	lsls	r3, r1, #6
 800304a:	1a5b      	subs	r3, r3, r1
 800304c:	eb64 0402 	sbc.w	r4, r4, r2
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	00e2      	lsls	r2, r4, #3
 800305a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800305e:	00d9      	lsls	r1, r3, #3
 8003060:	460b      	mov	r3, r1
 8003062:	4614      	mov	r4, r2
 8003064:	195b      	adds	r3, r3, r5
 8003066:	eb44 0406 	adc.w	r4, r4, r6
 800306a:	f04f 0100 	mov.w	r1, #0
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	0262      	lsls	r2, r4, #9
 8003074:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003078:	0259      	lsls	r1, r3, #9
 800307a:	460b      	mov	r3, r1
 800307c:	4614      	mov	r4, r2
 800307e:	4618      	mov	r0, r3
 8003080:	4621      	mov	r1, r4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f04f 0400 	mov.w	r4, #0
 8003088:	461a      	mov	r2, r3
 800308a:	4623      	mov	r3, r4
 800308c:	f7fd fde4 	bl	8000c58 <__aeabi_uldivmod>
 8003090:	4603      	mov	r3, r0
 8003092:	460c      	mov	r4, r1
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e049      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	f04f 0400 	mov.w	r4, #0
 80030a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	ea03 0501 	and.w	r5, r3, r1
 80030ae:	ea04 0602 	and.w	r6, r4, r2
 80030b2:	4629      	mov	r1, r5
 80030b4:	4632      	mov	r2, r6
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f04f 0400 	mov.w	r4, #0
 80030be:	0154      	lsls	r4, r2, #5
 80030c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030c4:	014b      	lsls	r3, r1, #5
 80030c6:	4619      	mov	r1, r3
 80030c8:	4622      	mov	r2, r4
 80030ca:	1b49      	subs	r1, r1, r5
 80030cc:	eb62 0206 	sbc.w	r2, r2, r6
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	f04f 0400 	mov.w	r4, #0
 80030d8:	0194      	lsls	r4, r2, #6
 80030da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030de:	018b      	lsls	r3, r1, #6
 80030e0:	1a5b      	subs	r3, r3, r1
 80030e2:	eb64 0402 	sbc.w	r4, r4, r2
 80030e6:	f04f 0100 	mov.w	r1, #0
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	00e2      	lsls	r2, r4, #3
 80030f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030f4:	00d9      	lsls	r1, r3, #3
 80030f6:	460b      	mov	r3, r1
 80030f8:	4614      	mov	r4, r2
 80030fa:	195b      	adds	r3, r3, r5
 80030fc:	eb44 0406 	adc.w	r4, r4, r6
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	02a2      	lsls	r2, r4, #10
 800310a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800310e:	0299      	lsls	r1, r3, #10
 8003110:	460b      	mov	r3, r1
 8003112:	4614      	mov	r4, r2
 8003114:	4618      	mov	r0, r3
 8003116:	4621      	mov	r1, r4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f04f 0400 	mov.w	r4, #0
 800311e:	461a      	mov	r2, r3
 8003120:	4623      	mov	r3, r4
 8003122:	f7fd fd99 	bl	8000c58 <__aeabi_uldivmod>
 8003126:	4603      	mov	r3, r0
 8003128:	460c      	mov	r4, r1
 800312a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	60bb      	str	r3, [r7, #8]
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800314a:	60bb      	str	r3, [r7, #8]
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	68bb      	ldr	r3, [r7, #8]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	00f42400 	.word	0x00f42400
 8003160:	007a1200 	.word	0x007a1200

08003164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <HAL_RCC_GetHCLKFreq+0x14>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000004 	.word	0x20000004

0800317c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003180:	f7ff fff0 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 8003184:	4601      	mov	r1, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0a9b      	lsrs	r3, r3, #10
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003192:	5cd3      	ldrb	r3, [r2, r3]
 8003194:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	08007174 	.word	0x08007174

080031a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031a8:	f7ff ffdc 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 80031ac:	4601      	mov	r1, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0b5b      	lsrs	r3, r3, #13
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4a03      	ldr	r2, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08007174 	.word	0x08007174

080031cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e01d      	b.n	800321a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fe fe2c 	bl	8001e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f000 fab8 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e01d      	b.n	8003270 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f815 	bl	8003278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	4619      	mov	r1, r3
 8003260:	4610      	mov	r0, r2
 8003262:	f000 fa8d 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2201      	movs	r2, #1
 800329c:	6839      	ldr	r1, [r7, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fd14 	bl	8003ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a10      	ldr	r2, [pc, #64]	; (80032ec <HAL_TIM_PWM_Start+0x60>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d107      	bne.n	80032be <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b06      	cmp	r3, #6
 80032ce:	d007      	beq.n	80032e0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40010000 	.word	0x40010000

080032f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e083      	b.n	800340c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fe fd53 	bl	8001dc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003334:	f023 0307 	bic.w	r3, r3, #7
 8003338:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f000 fa1b 	bl	8003780 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003372:	f023 0303 	bic.w	r3, r3, #3
 8003376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	4313      	orrs	r3, r2
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003390:	f023 030c 	bic.w	r3, r3, #12
 8003394:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800339c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	4313      	orrs	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	011a      	lsls	r2, r3, #4
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	031b      	lsls	r3, r3, #12
 80033c0:	4313      	orrs	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	4313      	orrs	r3, r2
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_TIM_Encoder_Start+0x16>
 8003424:	2b04      	cmp	r3, #4
 8003426:	d008      	beq.n	800343a <HAL_TIM_Encoder_Start+0x26>
 8003428:	e00f      	b.n	800344a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2201      	movs	r2, #1
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fc4a 	bl	8003ccc <TIM_CCxChannelCmd>
      break;
 8003438:	e016      	b.n	8003468 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	2104      	movs	r1, #4
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fc42 	bl	8003ccc <TIM_CCxChannelCmd>
      break;
 8003448:	e00e      	b.n	8003468 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2201      	movs	r2, #1
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fc3a 	bl	8003ccc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2201      	movs	r2, #1
 800345e:	2104      	movs	r1, #4
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fc33 	bl	8003ccc <TIM_CCxChannelCmd>
      break;
 8003466:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800349a:	2302      	movs	r3, #2
 800349c:	e0b4      	b.n	8003608 <HAL_TIM_PWM_ConfigChannel+0x184>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	f200 809f 	bhi.w	80035f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80034b6:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	080034f1 	.word	0x080034f1
 80034c0:	080035f5 	.word	0x080035f5
 80034c4:	080035f5 	.word	0x080035f5
 80034c8:	080035f5 	.word	0x080035f5
 80034cc:	08003531 	.word	0x08003531
 80034d0:	080035f5 	.word	0x080035f5
 80034d4:	080035f5 	.word	0x080035f5
 80034d8:	080035f5 	.word	0x080035f5
 80034dc:	08003573 	.word	0x08003573
 80034e0:	080035f5 	.word	0x080035f5
 80034e4:	080035f5 	.word	0x080035f5
 80034e8:	080035f5 	.word	0x080035f5
 80034ec:	080035b3 	.word	0x080035b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f9c2 	bl	8003880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0208 	orr.w	r2, r2, #8
 800350a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0204 	bic.w	r2, r2, #4
 800351a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6999      	ldr	r1, [r3, #24]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	619a      	str	r2, [r3, #24]
      break;
 800352e:	e062      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fa08 	bl	800394c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6999      	ldr	r1, [r3, #24]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	021a      	lsls	r2, r3, #8
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	619a      	str	r2, [r3, #24]
      break;
 8003570:	e041      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fa53 	bl	8003a24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0208 	orr.w	r2, r2, #8
 800358c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0204 	bic.w	r2, r2, #4
 800359c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69d9      	ldr	r1, [r3, #28]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	61da      	str	r2, [r3, #28]
      break;
 80035b0:	e021      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fa9d 	bl	8003af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69d9      	ldr	r1, [r3, #28]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	021a      	lsls	r2, r3, #8
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	61da      	str	r2, [r3, #28]
      break;
 80035f2:	e000      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80035f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIM_ConfigClockSource+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e0a6      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x166>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d067      	beq.n	8003730 <HAL_TIM_ConfigClockSource+0x120>
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d80b      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x6c>
 8003664:	2b10      	cmp	r3, #16
 8003666:	d073      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x140>
 8003668:	2b10      	cmp	r3, #16
 800366a:	d802      	bhi.n	8003672 <HAL_TIM_ConfigClockSource+0x62>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d06f      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003670:	e078      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003672:	2b20      	cmp	r3, #32
 8003674:	d06c      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x140>
 8003676:	2b30      	cmp	r3, #48	; 0x30
 8003678:	d06a      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800367a:	e073      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d00d      	beq.n	800369c <HAL_TIM_ConfigClockSource+0x8c>
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d804      	bhi.n	800368e <HAL_TIM_ConfigClockSource+0x7e>
 8003684:	2b50      	cmp	r3, #80	; 0x50
 8003686:	d033      	beq.n	80036f0 <HAL_TIM_ConfigClockSource+0xe0>
 8003688:	2b60      	cmp	r3, #96	; 0x60
 800368a:	d041      	beq.n	8003710 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800368c:	e06a      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003692:	d066      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x152>
 8003694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003698:	d017      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800369a:	e063      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6899      	ldr	r1, [r3, #8]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f000 faee 	bl	8003c8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	609a      	str	r2, [r3, #8]
      break;
 80036c8:	e04c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6899      	ldr	r1, [r3, #8]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f000 fad7 	bl	8003c8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ec:	609a      	str	r2, [r3, #8]
      break;
 80036ee:	e039      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	461a      	mov	r2, r3
 80036fe:	f000 fa4b 	bl	8003b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2150      	movs	r1, #80	; 0x50
 8003708:	4618      	mov	r0, r3
 800370a:	f000 faa4 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 800370e:	e029      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	461a      	mov	r2, r3
 800371e:	f000 fa6a 	bl	8003bf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2160      	movs	r1, #96	; 0x60
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fa94 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 800372e:	e019      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	461a      	mov	r2, r3
 800373e:	f000 fa2b 	bl	8003b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fa84 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 800374e:	e009      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f000 fa7b 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 8003760:	e000      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a34      	ldr	r2, [pc, #208]	; (8003864 <TIM_Base_SetConfig+0xe4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00f      	beq.n	80037b8 <TIM_Base_SetConfig+0x38>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379e:	d00b      	beq.n	80037b8 <TIM_Base_SetConfig+0x38>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a31      	ldr	r2, [pc, #196]	; (8003868 <TIM_Base_SetConfig+0xe8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d007      	beq.n	80037b8 <TIM_Base_SetConfig+0x38>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a30      	ldr	r2, [pc, #192]	; (800386c <TIM_Base_SetConfig+0xec>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_Base_SetConfig+0x38>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a2f      	ldr	r2, [pc, #188]	; (8003870 <TIM_Base_SetConfig+0xf0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d108      	bne.n	80037ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a25      	ldr	r2, [pc, #148]	; (8003864 <TIM_Base_SetConfig+0xe4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01b      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d017      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a22      	ldr	r2, [pc, #136]	; (8003868 <TIM_Base_SetConfig+0xe8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a21      	ldr	r2, [pc, #132]	; (800386c <TIM_Base_SetConfig+0xec>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00f      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a20      	ldr	r2, [pc, #128]	; (8003870 <TIM_Base_SetConfig+0xf0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00b      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <TIM_Base_SetConfig+0xf4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a1e      	ldr	r2, [pc, #120]	; (8003878 <TIM_Base_SetConfig+0xf8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1d      	ldr	r2, [pc, #116]	; (800387c <TIM_Base_SetConfig+0xfc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d108      	bne.n	800381c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a08      	ldr	r2, [pc, #32]	; (8003864 <TIM_Base_SetConfig+0xe4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d103      	bne.n	8003850 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	615a      	str	r2, [r3, #20]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40010000 	.word	0x40010000
 8003868:	40000400 	.word	0x40000400
 800386c:	40000800 	.word	0x40000800
 8003870:	40000c00 	.word	0x40000c00
 8003874:	40014000 	.word	0x40014000
 8003878:	40014400 	.word	0x40014400
 800387c:	40014800 	.word	0x40014800

08003880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f023 0201 	bic.w	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f023 0302 	bic.w	r3, r3, #2
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <TIM_OC1_SetConfig+0xc8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d10c      	bne.n	80038f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 0308 	bic.w	r3, r3, #8
 80038e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a13      	ldr	r2, [pc, #76]	; (8003948 <TIM_OC1_SetConfig+0xc8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d111      	bne.n	8003922 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800390c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	621a      	str	r2, [r3, #32]
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	40010000 	.word	0x40010000

0800394c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0210 	bic.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0320 	bic.w	r3, r3, #32
 8003996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <TIM_OC2_SetConfig+0xd4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10d      	bne.n	80039c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <TIM_OC2_SetConfig+0xd4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d113      	bne.n	80039f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000

08003a24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0303 	bic.w	r3, r3, #3
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <TIM_OC3_SetConfig+0xd0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10d      	bne.n	8003a9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <TIM_OC3_SetConfig+0xd0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d113      	bne.n	8003ace <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	621a      	str	r2, [r3, #32]
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40010000 	.word	0x40010000

08003af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	031b      	lsls	r3, r3, #12
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <TIM_OC4_SetConfig+0x9c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d109      	bne.n	8003b6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	019b      	lsls	r3, r3, #6
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000

08003b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0201 	bic.w	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f023 030a 	bic.w	r3, r3, #10
 8003bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b087      	sub	sp, #28
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f023 0210 	bic.w	r2, r3, #16
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	031b      	lsls	r3, r3, #12
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f043 0307 	orr.w	r3, r3, #7
 8003c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	609a      	str	r2, [r3, #8]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	021a      	lsls	r2, r3, #8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	609a      	str	r2, [r3, #8]
}
 8003cc0:	bf00      	nop
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2201      	movs	r2, #1
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1a      	ldr	r2, [r3, #32]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	401a      	ands	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e050      	b.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d018      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d013      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a15      	ldr	r2, [pc, #84]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10c      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40000c00 	.word	0x40000c00
 8003df0:	40014000 	.word	0x40014000

08003df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e03f      	b.n	8003e86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe f89e 	bl	8001f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2224      	movs	r2, #36	; 0x24
 8003e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f90b 	bl	8004054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b088      	sub	sp, #32
 8003e92:	af02      	add	r7, sp, #8
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	f040 8083 	bne.w	8003fb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_UART_Transmit+0x2e>
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e07b      	b.n	8003fb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Transmit+0x40>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e074      	b.n	8003fb8 <HAL_UART_Transmit+0x12a>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2221      	movs	r2, #33	; 0x21
 8003ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003ee4:	f7fe f912 	bl	800210c <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003efe:	e042      	b.n	8003f86 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	d122      	bne.n	8003f5e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2180      	movs	r1, #128	; 0x80
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f84c 	bl	8003fc0 <UART_WaitOnFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e042      	b.n	8003fb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f44:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3302      	adds	r3, #2
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	e017      	b.n	8003f86 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	e013      	b.n	8003f86 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2180      	movs	r1, #128	; 0x80
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f829 	bl	8003fc0 <UART_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e01f      	b.n	8003fb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	60ba      	str	r2, [r7, #8]
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1b7      	bne.n	8003f00 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2200      	movs	r2, #0
 8003f98:	2140      	movs	r1, #64	; 0x40
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f810 	bl	8003fc0 <UART_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e006      	b.n	8003fb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd0:	e02c      	b.n	800402c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d028      	beq.n	800402c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fe0:	f7fe f894 	bl	800210c <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d21d      	bcs.n	800402c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ffe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e00f      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4013      	ands	r3, r2
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	429a      	cmp	r2, r3
 8004048:	d0c3      	beq.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004096:	f023 030c 	bic.w	r3, r3, #12
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	430b      	orrs	r3, r1
 80040a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c2:	f040 818b 	bne.w	80043dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4ac1      	ldr	r2, [pc, #772]	; (80043d0 <UART_SetConfig+0x37c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d005      	beq.n	80040dc <UART_SetConfig+0x88>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4abf      	ldr	r2, [pc, #764]	; (80043d4 <UART_SetConfig+0x380>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	f040 80bd 	bne.w	8004256 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7ff f862 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 80040e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	461d      	mov	r5, r3
 80040e6:	f04f 0600 	mov.w	r6, #0
 80040ea:	46a8      	mov	r8, r5
 80040ec:	46b1      	mov	r9, r6
 80040ee:	eb18 0308 	adds.w	r3, r8, r8
 80040f2:	eb49 0409 	adc.w	r4, r9, r9
 80040f6:	4698      	mov	r8, r3
 80040f8:	46a1      	mov	r9, r4
 80040fa:	eb18 0805 	adds.w	r8, r8, r5
 80040fe:	eb49 0906 	adc.w	r9, r9, r6
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800410e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004112:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004116:	4688      	mov	r8, r1
 8004118:	4691      	mov	r9, r2
 800411a:	eb18 0005 	adds.w	r0, r8, r5
 800411e:	eb49 0106 	adc.w	r1, r9, r6
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	461d      	mov	r5, r3
 8004128:	f04f 0600 	mov.w	r6, #0
 800412c:	196b      	adds	r3, r5, r5
 800412e:	eb46 0406 	adc.w	r4, r6, r6
 8004132:	461a      	mov	r2, r3
 8004134:	4623      	mov	r3, r4
 8004136:	f7fc fd8f 	bl	8000c58 <__aeabi_uldivmod>
 800413a:	4603      	mov	r3, r0
 800413c:	460c      	mov	r4, r1
 800413e:	461a      	mov	r2, r3
 8004140:	4ba5      	ldr	r3, [pc, #660]	; (80043d8 <UART_SetConfig+0x384>)
 8004142:	fba3 2302 	umull	r2, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	461d      	mov	r5, r3
 8004150:	f04f 0600 	mov.w	r6, #0
 8004154:	46a9      	mov	r9, r5
 8004156:	46b2      	mov	sl, r6
 8004158:	eb19 0309 	adds.w	r3, r9, r9
 800415c:	eb4a 040a 	adc.w	r4, sl, sl
 8004160:	4699      	mov	r9, r3
 8004162:	46a2      	mov	sl, r4
 8004164:	eb19 0905 	adds.w	r9, r9, r5
 8004168:	eb4a 0a06 	adc.w	sl, sl, r6
 800416c:	f04f 0100 	mov.w	r1, #0
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004178:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800417c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004180:	4689      	mov	r9, r1
 8004182:	4692      	mov	sl, r2
 8004184:	eb19 0005 	adds.w	r0, r9, r5
 8004188:	eb4a 0106 	adc.w	r1, sl, r6
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	461d      	mov	r5, r3
 8004192:	f04f 0600 	mov.w	r6, #0
 8004196:	196b      	adds	r3, r5, r5
 8004198:	eb46 0406 	adc.w	r4, r6, r6
 800419c:	461a      	mov	r2, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	f7fc fd5a 	bl	8000c58 <__aeabi_uldivmod>
 80041a4:	4603      	mov	r3, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b8b      	ldr	r3, [pc, #556]	; (80043d8 <UART_SetConfig+0x384>)
 80041ac:	fba3 1302 	umull	r1, r3, r3, r2
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	2164      	movs	r1, #100	; 0x64
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	3332      	adds	r3, #50	; 0x32
 80041be:	4a86      	ldr	r2, [pc, #536]	; (80043d8 <UART_SetConfig+0x384>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041cc:	4498      	add	r8, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	461d      	mov	r5, r3
 80041d2:	f04f 0600 	mov.w	r6, #0
 80041d6:	46a9      	mov	r9, r5
 80041d8:	46b2      	mov	sl, r6
 80041da:	eb19 0309 	adds.w	r3, r9, r9
 80041de:	eb4a 040a 	adc.w	r4, sl, sl
 80041e2:	4699      	mov	r9, r3
 80041e4:	46a2      	mov	sl, r4
 80041e6:	eb19 0905 	adds.w	r9, r9, r5
 80041ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004202:	4689      	mov	r9, r1
 8004204:	4692      	mov	sl, r2
 8004206:	eb19 0005 	adds.w	r0, r9, r5
 800420a:	eb4a 0106 	adc.w	r1, sl, r6
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	461d      	mov	r5, r3
 8004214:	f04f 0600 	mov.w	r6, #0
 8004218:	196b      	adds	r3, r5, r5
 800421a:	eb46 0406 	adc.w	r4, r6, r6
 800421e:	461a      	mov	r2, r3
 8004220:	4623      	mov	r3, r4
 8004222:	f7fc fd19 	bl	8000c58 <__aeabi_uldivmod>
 8004226:	4603      	mov	r3, r0
 8004228:	460c      	mov	r4, r1
 800422a:	461a      	mov	r2, r3
 800422c:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <UART_SetConfig+0x384>)
 800422e:	fba3 1302 	umull	r1, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2164      	movs	r1, #100	; 0x64
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	3332      	adds	r3, #50	; 0x32
 8004240:	4a65      	ldr	r2, [pc, #404]	; (80043d8 <UART_SetConfig+0x384>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	f003 0207 	and.w	r2, r3, #7
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4442      	add	r2, r8
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	e26f      	b.n	8004736 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004256:	f7fe ff91 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 800425a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	461d      	mov	r5, r3
 8004260:	f04f 0600 	mov.w	r6, #0
 8004264:	46a8      	mov	r8, r5
 8004266:	46b1      	mov	r9, r6
 8004268:	eb18 0308 	adds.w	r3, r8, r8
 800426c:	eb49 0409 	adc.w	r4, r9, r9
 8004270:	4698      	mov	r8, r3
 8004272:	46a1      	mov	r9, r4
 8004274:	eb18 0805 	adds.w	r8, r8, r5
 8004278:	eb49 0906 	adc.w	r9, r9, r6
 800427c:	f04f 0100 	mov.w	r1, #0
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004288:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800428c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004290:	4688      	mov	r8, r1
 8004292:	4691      	mov	r9, r2
 8004294:	eb18 0005 	adds.w	r0, r8, r5
 8004298:	eb49 0106 	adc.w	r1, r9, r6
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	461d      	mov	r5, r3
 80042a2:	f04f 0600 	mov.w	r6, #0
 80042a6:	196b      	adds	r3, r5, r5
 80042a8:	eb46 0406 	adc.w	r4, r6, r6
 80042ac:	461a      	mov	r2, r3
 80042ae:	4623      	mov	r3, r4
 80042b0:	f7fc fcd2 	bl	8000c58 <__aeabi_uldivmod>
 80042b4:	4603      	mov	r3, r0
 80042b6:	460c      	mov	r4, r1
 80042b8:	461a      	mov	r2, r3
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <UART_SetConfig+0x384>)
 80042bc:	fba3 2302 	umull	r2, r3, r3, r2
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	461d      	mov	r5, r3
 80042ca:	f04f 0600 	mov.w	r6, #0
 80042ce:	46a9      	mov	r9, r5
 80042d0:	46b2      	mov	sl, r6
 80042d2:	eb19 0309 	adds.w	r3, r9, r9
 80042d6:	eb4a 040a 	adc.w	r4, sl, sl
 80042da:	4699      	mov	r9, r3
 80042dc:	46a2      	mov	sl, r4
 80042de:	eb19 0905 	adds.w	r9, r9, r5
 80042e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80042e6:	f04f 0100 	mov.w	r1, #0
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042fa:	4689      	mov	r9, r1
 80042fc:	4692      	mov	sl, r2
 80042fe:	eb19 0005 	adds.w	r0, r9, r5
 8004302:	eb4a 0106 	adc.w	r1, sl, r6
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	461d      	mov	r5, r3
 800430c:	f04f 0600 	mov.w	r6, #0
 8004310:	196b      	adds	r3, r5, r5
 8004312:	eb46 0406 	adc.w	r4, r6, r6
 8004316:	461a      	mov	r2, r3
 8004318:	4623      	mov	r3, r4
 800431a:	f7fc fc9d 	bl	8000c58 <__aeabi_uldivmod>
 800431e:	4603      	mov	r3, r0
 8004320:	460c      	mov	r4, r1
 8004322:	461a      	mov	r2, r3
 8004324:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <UART_SetConfig+0x384>)
 8004326:	fba3 1302 	umull	r1, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2164      	movs	r1, #100	; 0x64
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	3332      	adds	r3, #50	; 0x32
 8004338:	4a27      	ldr	r2, [pc, #156]	; (80043d8 <UART_SetConfig+0x384>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004346:	4498      	add	r8, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	461d      	mov	r5, r3
 800434c:	f04f 0600 	mov.w	r6, #0
 8004350:	46a9      	mov	r9, r5
 8004352:	46b2      	mov	sl, r6
 8004354:	eb19 0309 	adds.w	r3, r9, r9
 8004358:	eb4a 040a 	adc.w	r4, sl, sl
 800435c:	4699      	mov	r9, r3
 800435e:	46a2      	mov	sl, r4
 8004360:	eb19 0905 	adds.w	r9, r9, r5
 8004364:	eb4a 0a06 	adc.w	sl, sl, r6
 8004368:	f04f 0100 	mov.w	r1, #0
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004374:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004378:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800437c:	4689      	mov	r9, r1
 800437e:	4692      	mov	sl, r2
 8004380:	eb19 0005 	adds.w	r0, r9, r5
 8004384:	eb4a 0106 	adc.w	r1, sl, r6
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	461d      	mov	r5, r3
 800438e:	f04f 0600 	mov.w	r6, #0
 8004392:	196b      	adds	r3, r5, r5
 8004394:	eb46 0406 	adc.w	r4, r6, r6
 8004398:	461a      	mov	r2, r3
 800439a:	4623      	mov	r3, r4
 800439c:	f7fc fc5c 	bl	8000c58 <__aeabi_uldivmod>
 80043a0:	4603      	mov	r3, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	461a      	mov	r2, r3
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <UART_SetConfig+0x384>)
 80043a8:	fba3 1302 	umull	r1, r3, r3, r2
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	2164      	movs	r1, #100	; 0x64
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	3332      	adds	r3, #50	; 0x32
 80043ba:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <UART_SetConfig+0x384>)
 80043bc:	fba2 2303 	umull	r2, r3, r2, r3
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	f003 0207 	and.w	r2, r3, #7
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4442      	add	r2, r8
 80043cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80043ce:	e1b2      	b.n	8004736 <UART_SetConfig+0x6e2>
 80043d0:	40011000 	.word	0x40011000
 80043d4:	40011400 	.word	0x40011400
 80043d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4ad7      	ldr	r2, [pc, #860]	; (8004740 <UART_SetConfig+0x6ec>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d005      	beq.n	80043f2 <UART_SetConfig+0x39e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4ad6      	ldr	r2, [pc, #856]	; (8004744 <UART_SetConfig+0x6f0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	f040 80d1 	bne.w	8004594 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043f2:	f7fe fed7 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 80043f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	469a      	mov	sl, r3
 80043fc:	f04f 0b00 	mov.w	fp, #0
 8004400:	46d0      	mov	r8, sl
 8004402:	46d9      	mov	r9, fp
 8004404:	eb18 0308 	adds.w	r3, r8, r8
 8004408:	eb49 0409 	adc.w	r4, r9, r9
 800440c:	4698      	mov	r8, r3
 800440e:	46a1      	mov	r9, r4
 8004410:	eb18 080a 	adds.w	r8, r8, sl
 8004414:	eb49 090b 	adc.w	r9, r9, fp
 8004418:	f04f 0100 	mov.w	r1, #0
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004424:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004428:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800442c:	4688      	mov	r8, r1
 800442e:	4691      	mov	r9, r2
 8004430:	eb1a 0508 	adds.w	r5, sl, r8
 8004434:	eb4b 0609 	adc.w	r6, fp, r9
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4619      	mov	r1, r3
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	f04f 0400 	mov.w	r4, #0
 800444a:	0094      	lsls	r4, r2, #2
 800444c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004450:	008b      	lsls	r3, r1, #2
 8004452:	461a      	mov	r2, r3
 8004454:	4623      	mov	r3, r4
 8004456:	4628      	mov	r0, r5
 8004458:	4631      	mov	r1, r6
 800445a:	f7fc fbfd 	bl	8000c58 <__aeabi_uldivmod>
 800445e:	4603      	mov	r3, r0
 8004460:	460c      	mov	r4, r1
 8004462:	461a      	mov	r2, r3
 8004464:	4bb8      	ldr	r3, [pc, #736]	; (8004748 <UART_SetConfig+0x6f4>)
 8004466:	fba3 2302 	umull	r2, r3, r3, r2
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	469b      	mov	fp, r3
 8004474:	f04f 0c00 	mov.w	ip, #0
 8004478:	46d9      	mov	r9, fp
 800447a:	46e2      	mov	sl, ip
 800447c:	eb19 0309 	adds.w	r3, r9, r9
 8004480:	eb4a 040a 	adc.w	r4, sl, sl
 8004484:	4699      	mov	r9, r3
 8004486:	46a2      	mov	sl, r4
 8004488:	eb19 090b 	adds.w	r9, r9, fp
 800448c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800449c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044a4:	4689      	mov	r9, r1
 80044a6:	4692      	mov	sl, r2
 80044a8:	eb1b 0509 	adds.w	r5, fp, r9
 80044ac:	eb4c 060a 	adc.w	r6, ip, sl
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	f04f 0400 	mov.w	r4, #0
 80044c2:	0094      	lsls	r4, r2, #2
 80044c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044c8:	008b      	lsls	r3, r1, #2
 80044ca:	461a      	mov	r2, r3
 80044cc:	4623      	mov	r3, r4
 80044ce:	4628      	mov	r0, r5
 80044d0:	4631      	mov	r1, r6
 80044d2:	f7fc fbc1 	bl	8000c58 <__aeabi_uldivmod>
 80044d6:	4603      	mov	r3, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	461a      	mov	r2, r3
 80044dc:	4b9a      	ldr	r3, [pc, #616]	; (8004748 <UART_SetConfig+0x6f4>)
 80044de:	fba3 1302 	umull	r1, r3, r3, r2
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	2164      	movs	r1, #100	; 0x64
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	3332      	adds	r3, #50	; 0x32
 80044f0:	4a95      	ldr	r2, [pc, #596]	; (8004748 <UART_SetConfig+0x6f4>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fc:	4498      	add	r8, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	469b      	mov	fp, r3
 8004502:	f04f 0c00 	mov.w	ip, #0
 8004506:	46d9      	mov	r9, fp
 8004508:	46e2      	mov	sl, ip
 800450a:	eb19 0309 	adds.w	r3, r9, r9
 800450e:	eb4a 040a 	adc.w	r4, sl, sl
 8004512:	4699      	mov	r9, r3
 8004514:	46a2      	mov	sl, r4
 8004516:	eb19 090b 	adds.w	r9, r9, fp
 800451a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800452a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800452e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004532:	4689      	mov	r9, r1
 8004534:	4692      	mov	sl, r2
 8004536:	eb1b 0509 	adds.w	r5, fp, r9
 800453a:	eb4c 060a 	adc.w	r6, ip, sl
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4619      	mov	r1, r3
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	f04f 0400 	mov.w	r4, #0
 8004550:	0094      	lsls	r4, r2, #2
 8004552:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004556:	008b      	lsls	r3, r1, #2
 8004558:	461a      	mov	r2, r3
 800455a:	4623      	mov	r3, r4
 800455c:	4628      	mov	r0, r5
 800455e:	4631      	mov	r1, r6
 8004560:	f7fc fb7a 	bl	8000c58 <__aeabi_uldivmod>
 8004564:	4603      	mov	r3, r0
 8004566:	460c      	mov	r4, r1
 8004568:	461a      	mov	r2, r3
 800456a:	4b77      	ldr	r3, [pc, #476]	; (8004748 <UART_SetConfig+0x6f4>)
 800456c:	fba3 1302 	umull	r1, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2164      	movs	r1, #100	; 0x64
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	3332      	adds	r3, #50	; 0x32
 800457e:	4a72      	ldr	r2, [pc, #456]	; (8004748 <UART_SetConfig+0x6f4>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 020f 	and.w	r2, r3, #15
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4442      	add	r2, r8
 8004590:	609a      	str	r2, [r3, #8]
 8004592:	e0d0      	b.n	8004736 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004594:	f7fe fdf2 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004598:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	469a      	mov	sl, r3
 800459e:	f04f 0b00 	mov.w	fp, #0
 80045a2:	46d0      	mov	r8, sl
 80045a4:	46d9      	mov	r9, fp
 80045a6:	eb18 0308 	adds.w	r3, r8, r8
 80045aa:	eb49 0409 	adc.w	r4, r9, r9
 80045ae:	4698      	mov	r8, r3
 80045b0:	46a1      	mov	r9, r4
 80045b2:	eb18 080a 	adds.w	r8, r8, sl
 80045b6:	eb49 090b 	adc.w	r9, r9, fp
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045ce:	4688      	mov	r8, r1
 80045d0:	4691      	mov	r9, r2
 80045d2:	eb1a 0508 	adds.w	r5, sl, r8
 80045d6:	eb4b 0609 	adc.w	r6, fp, r9
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4619      	mov	r1, r3
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	f04f 0400 	mov.w	r4, #0
 80045ec:	0094      	lsls	r4, r2, #2
 80045ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045f2:	008b      	lsls	r3, r1, #2
 80045f4:	461a      	mov	r2, r3
 80045f6:	4623      	mov	r3, r4
 80045f8:	4628      	mov	r0, r5
 80045fa:	4631      	mov	r1, r6
 80045fc:	f7fc fb2c 	bl	8000c58 <__aeabi_uldivmod>
 8004600:	4603      	mov	r3, r0
 8004602:	460c      	mov	r4, r1
 8004604:	461a      	mov	r2, r3
 8004606:	4b50      	ldr	r3, [pc, #320]	; (8004748 <UART_SetConfig+0x6f4>)
 8004608:	fba3 2302 	umull	r2, r3, r3, r2
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	469b      	mov	fp, r3
 8004616:	f04f 0c00 	mov.w	ip, #0
 800461a:	46d9      	mov	r9, fp
 800461c:	46e2      	mov	sl, ip
 800461e:	eb19 0309 	adds.w	r3, r9, r9
 8004622:	eb4a 040a 	adc.w	r4, sl, sl
 8004626:	4699      	mov	r9, r3
 8004628:	46a2      	mov	sl, r4
 800462a:	eb19 090b 	adds.w	r9, r9, fp
 800462e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004632:	f04f 0100 	mov.w	r1, #0
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800463e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004642:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004646:	4689      	mov	r9, r1
 8004648:	4692      	mov	sl, r2
 800464a:	eb1b 0509 	adds.w	r5, fp, r9
 800464e:	eb4c 060a 	adc.w	r6, ip, sl
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4619      	mov	r1, r3
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	f04f 0400 	mov.w	r4, #0
 8004664:	0094      	lsls	r4, r2, #2
 8004666:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800466a:	008b      	lsls	r3, r1, #2
 800466c:	461a      	mov	r2, r3
 800466e:	4623      	mov	r3, r4
 8004670:	4628      	mov	r0, r5
 8004672:	4631      	mov	r1, r6
 8004674:	f7fc faf0 	bl	8000c58 <__aeabi_uldivmod>
 8004678:	4603      	mov	r3, r0
 800467a:	460c      	mov	r4, r1
 800467c:	461a      	mov	r2, r3
 800467e:	4b32      	ldr	r3, [pc, #200]	; (8004748 <UART_SetConfig+0x6f4>)
 8004680:	fba3 1302 	umull	r1, r3, r3, r2
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	2164      	movs	r1, #100	; 0x64
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	3332      	adds	r3, #50	; 0x32
 8004692:	4a2d      	ldr	r2, [pc, #180]	; (8004748 <UART_SetConfig+0x6f4>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800469e:	4498      	add	r8, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	469b      	mov	fp, r3
 80046a4:	f04f 0c00 	mov.w	ip, #0
 80046a8:	46d9      	mov	r9, fp
 80046aa:	46e2      	mov	sl, ip
 80046ac:	eb19 0309 	adds.w	r3, r9, r9
 80046b0:	eb4a 040a 	adc.w	r4, sl, sl
 80046b4:	4699      	mov	r9, r3
 80046b6:	46a2      	mov	sl, r4
 80046b8:	eb19 090b 	adds.w	r9, r9, fp
 80046bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046d4:	4689      	mov	r9, r1
 80046d6:	4692      	mov	sl, r2
 80046d8:	eb1b 0509 	adds.w	r5, fp, r9
 80046dc:	eb4c 060a 	adc.w	r6, ip, sl
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4619      	mov	r1, r3
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	f04f 0400 	mov.w	r4, #0
 80046f2:	0094      	lsls	r4, r2, #2
 80046f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046f8:	008b      	lsls	r3, r1, #2
 80046fa:	461a      	mov	r2, r3
 80046fc:	4623      	mov	r3, r4
 80046fe:	4628      	mov	r0, r5
 8004700:	4631      	mov	r1, r6
 8004702:	f7fc faa9 	bl	8000c58 <__aeabi_uldivmod>
 8004706:	4603      	mov	r3, r0
 8004708:	460c      	mov	r4, r1
 800470a:	461a      	mov	r2, r3
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <UART_SetConfig+0x6f4>)
 800470e:	fba3 1302 	umull	r1, r3, r3, r2
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	2164      	movs	r1, #100	; 0x64
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	3332      	adds	r3, #50	; 0x32
 8004720:	4a09      	ldr	r2, [pc, #36]	; (8004748 <UART_SetConfig+0x6f4>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	f003 020f 	and.w	r2, r3, #15
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4442      	add	r2, r8
 8004732:	609a      	str	r2, [r3, #8]
}
 8004734:	e7ff      	b.n	8004736 <UART_SetConfig+0x6e2>
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004740:	40011000 	.word	0x40011000
 8004744:	40011400 	.word	0x40011400
 8004748:	51eb851f 	.word	0x51eb851f

0800474c <__errno>:
 800474c:	4b01      	ldr	r3, [pc, #4]	; (8004754 <__errno+0x8>)
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000010 	.word	0x20000010

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	4e0d      	ldr	r6, [pc, #52]	; (8004790 <__libc_init_array+0x38>)
 800475c:	4c0d      	ldr	r4, [pc, #52]	; (8004794 <__libc_init_array+0x3c>)
 800475e:	1ba4      	subs	r4, r4, r6
 8004760:	10a4      	asrs	r4, r4, #2
 8004762:	2500      	movs	r5, #0
 8004764:	42a5      	cmp	r5, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	4e0b      	ldr	r6, [pc, #44]	; (8004798 <__libc_init_array+0x40>)
 800476a:	4c0c      	ldr	r4, [pc, #48]	; (800479c <__libc_init_array+0x44>)
 800476c:	f002 fcbe 	bl	80070ec <_init>
 8004770:	1ba4      	subs	r4, r4, r6
 8004772:	10a4      	asrs	r4, r4, #2
 8004774:	2500      	movs	r5, #0
 8004776:	42a5      	cmp	r5, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004780:	4798      	blx	r3
 8004782:	3501      	adds	r5, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800478a:	4798      	blx	r3
 800478c:	3501      	adds	r5, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	08007460 	.word	0x08007460
 8004794:	08007460 	.word	0x08007460
 8004798:	08007460 	.word	0x08007460
 800479c:	08007464 	.word	0x08007464

080047a0 <memset>:
 80047a0:	4402      	add	r2, r0
 80047a2:	4603      	mov	r3, r0
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d100      	bne.n	80047aa <memset+0xa>
 80047a8:	4770      	bx	lr
 80047aa:	f803 1b01 	strb.w	r1, [r3], #1
 80047ae:	e7f9      	b.n	80047a4 <memset+0x4>

080047b0 <__cvt>:
 80047b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047b4:	ec55 4b10 	vmov	r4, r5, d0
 80047b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80047ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80047be:	2d00      	cmp	r5, #0
 80047c0:	460e      	mov	r6, r1
 80047c2:	4691      	mov	r9, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	bfb8      	it	lt
 80047c8:	4622      	movlt	r2, r4
 80047ca:	462b      	mov	r3, r5
 80047cc:	f027 0720 	bic.w	r7, r7, #32
 80047d0:	bfbb      	ittet	lt
 80047d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80047d6:	461d      	movlt	r5, r3
 80047d8:	2300      	movge	r3, #0
 80047da:	232d      	movlt	r3, #45	; 0x2d
 80047dc:	bfb8      	it	lt
 80047de:	4614      	movlt	r4, r2
 80047e0:	2f46      	cmp	r7, #70	; 0x46
 80047e2:	700b      	strb	r3, [r1, #0]
 80047e4:	d004      	beq.n	80047f0 <__cvt+0x40>
 80047e6:	2f45      	cmp	r7, #69	; 0x45
 80047e8:	d100      	bne.n	80047ec <__cvt+0x3c>
 80047ea:	3601      	adds	r6, #1
 80047ec:	2102      	movs	r1, #2
 80047ee:	e000      	b.n	80047f2 <__cvt+0x42>
 80047f0:	2103      	movs	r1, #3
 80047f2:	ab03      	add	r3, sp, #12
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	ab02      	add	r3, sp, #8
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	4632      	mov	r2, r6
 80047fc:	4653      	mov	r3, sl
 80047fe:	ec45 4b10 	vmov	d0, r4, r5
 8004802:	f000 fcd5 	bl	80051b0 <_dtoa_r>
 8004806:	2f47      	cmp	r7, #71	; 0x47
 8004808:	4680      	mov	r8, r0
 800480a:	d102      	bne.n	8004812 <__cvt+0x62>
 800480c:	f019 0f01 	tst.w	r9, #1
 8004810:	d026      	beq.n	8004860 <__cvt+0xb0>
 8004812:	2f46      	cmp	r7, #70	; 0x46
 8004814:	eb08 0906 	add.w	r9, r8, r6
 8004818:	d111      	bne.n	800483e <__cvt+0x8e>
 800481a:	f898 3000 	ldrb.w	r3, [r8]
 800481e:	2b30      	cmp	r3, #48	; 0x30
 8004820:	d10a      	bne.n	8004838 <__cvt+0x88>
 8004822:	2200      	movs	r2, #0
 8004824:	2300      	movs	r3, #0
 8004826:	4620      	mov	r0, r4
 8004828:	4629      	mov	r1, r5
 800482a:	f7fc f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800482e:	b918      	cbnz	r0, 8004838 <__cvt+0x88>
 8004830:	f1c6 0601 	rsb	r6, r6, #1
 8004834:	f8ca 6000 	str.w	r6, [sl]
 8004838:	f8da 3000 	ldr.w	r3, [sl]
 800483c:	4499      	add	r9, r3
 800483e:	2200      	movs	r2, #0
 8004840:	2300      	movs	r3, #0
 8004842:	4620      	mov	r0, r4
 8004844:	4629      	mov	r1, r5
 8004846:	f7fc f947 	bl	8000ad8 <__aeabi_dcmpeq>
 800484a:	b938      	cbnz	r0, 800485c <__cvt+0xac>
 800484c:	2230      	movs	r2, #48	; 0x30
 800484e:	9b03      	ldr	r3, [sp, #12]
 8004850:	454b      	cmp	r3, r9
 8004852:	d205      	bcs.n	8004860 <__cvt+0xb0>
 8004854:	1c59      	adds	r1, r3, #1
 8004856:	9103      	str	r1, [sp, #12]
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e7f8      	b.n	800484e <__cvt+0x9e>
 800485c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004864:	eba3 0308 	sub.w	r3, r3, r8
 8004868:	4640      	mov	r0, r8
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	b004      	add	sp, #16
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004872 <__exponent>:
 8004872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004874:	2900      	cmp	r1, #0
 8004876:	4604      	mov	r4, r0
 8004878:	bfba      	itte	lt
 800487a:	4249      	neglt	r1, r1
 800487c:	232d      	movlt	r3, #45	; 0x2d
 800487e:	232b      	movge	r3, #43	; 0x2b
 8004880:	2909      	cmp	r1, #9
 8004882:	f804 2b02 	strb.w	r2, [r4], #2
 8004886:	7043      	strb	r3, [r0, #1]
 8004888:	dd20      	ble.n	80048cc <__exponent+0x5a>
 800488a:	f10d 0307 	add.w	r3, sp, #7
 800488e:	461f      	mov	r7, r3
 8004890:	260a      	movs	r6, #10
 8004892:	fb91 f5f6 	sdiv	r5, r1, r6
 8004896:	fb06 1115 	mls	r1, r6, r5, r1
 800489a:	3130      	adds	r1, #48	; 0x30
 800489c:	2d09      	cmp	r5, #9
 800489e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048a2:	f103 32ff 	add.w	r2, r3, #4294967295
 80048a6:	4629      	mov	r1, r5
 80048a8:	dc09      	bgt.n	80048be <__exponent+0x4c>
 80048aa:	3130      	adds	r1, #48	; 0x30
 80048ac:	3b02      	subs	r3, #2
 80048ae:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048b2:	42bb      	cmp	r3, r7
 80048b4:	4622      	mov	r2, r4
 80048b6:	d304      	bcc.n	80048c2 <__exponent+0x50>
 80048b8:	1a10      	subs	r0, r2, r0
 80048ba:	b003      	add	sp, #12
 80048bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048be:	4613      	mov	r3, r2
 80048c0:	e7e7      	b.n	8004892 <__exponent+0x20>
 80048c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048c6:	f804 2b01 	strb.w	r2, [r4], #1
 80048ca:	e7f2      	b.n	80048b2 <__exponent+0x40>
 80048cc:	2330      	movs	r3, #48	; 0x30
 80048ce:	4419      	add	r1, r3
 80048d0:	7083      	strb	r3, [r0, #2]
 80048d2:	1d02      	adds	r2, r0, #4
 80048d4:	70c1      	strb	r1, [r0, #3]
 80048d6:	e7ef      	b.n	80048b8 <__exponent+0x46>

080048d8 <_printf_float>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	b08d      	sub	sp, #52	; 0x34
 80048de:	460c      	mov	r4, r1
 80048e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80048e4:	4616      	mov	r6, r2
 80048e6:	461f      	mov	r7, r3
 80048e8:	4605      	mov	r5, r0
 80048ea:	f001 fae3 	bl	8005eb4 <_localeconv_r>
 80048ee:	6803      	ldr	r3, [r0, #0]
 80048f0:	9304      	str	r3, [sp, #16]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fb fc74 	bl	80001e0 <strlen>
 80048f8:	2300      	movs	r3, #0
 80048fa:	930a      	str	r3, [sp, #40]	; 0x28
 80048fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004900:	9005      	str	r0, [sp, #20]
 8004902:	3307      	adds	r3, #7
 8004904:	f023 0307 	bic.w	r3, r3, #7
 8004908:	f103 0208 	add.w	r2, r3, #8
 800490c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004910:	f8d4 b000 	ldr.w	fp, [r4]
 8004914:	f8c8 2000 	str.w	r2, [r8]
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004920:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004924:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004928:	9307      	str	r3, [sp, #28]
 800492a:	f8cd 8018 	str.w	r8, [sp, #24]
 800492e:	f04f 32ff 	mov.w	r2, #4294967295
 8004932:	4ba7      	ldr	r3, [pc, #668]	; (8004bd0 <_printf_float+0x2f8>)
 8004934:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004938:	f7fc f900 	bl	8000b3c <__aeabi_dcmpun>
 800493c:	bb70      	cbnz	r0, 800499c <_printf_float+0xc4>
 800493e:	f04f 32ff 	mov.w	r2, #4294967295
 8004942:	4ba3      	ldr	r3, [pc, #652]	; (8004bd0 <_printf_float+0x2f8>)
 8004944:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004948:	f7fc f8da 	bl	8000b00 <__aeabi_dcmple>
 800494c:	bb30      	cbnz	r0, 800499c <_printf_float+0xc4>
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	4640      	mov	r0, r8
 8004954:	4649      	mov	r1, r9
 8004956:	f7fc f8c9 	bl	8000aec <__aeabi_dcmplt>
 800495a:	b110      	cbz	r0, 8004962 <_printf_float+0x8a>
 800495c:	232d      	movs	r3, #45	; 0x2d
 800495e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004962:	4a9c      	ldr	r2, [pc, #624]	; (8004bd4 <_printf_float+0x2fc>)
 8004964:	4b9c      	ldr	r3, [pc, #624]	; (8004bd8 <_printf_float+0x300>)
 8004966:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800496a:	bf8c      	ite	hi
 800496c:	4690      	movhi	r8, r2
 800496e:	4698      	movls	r8, r3
 8004970:	2303      	movs	r3, #3
 8004972:	f02b 0204 	bic.w	r2, fp, #4
 8004976:	6123      	str	r3, [r4, #16]
 8004978:	6022      	str	r2, [r4, #0]
 800497a:	f04f 0900 	mov.w	r9, #0
 800497e:	9700      	str	r7, [sp, #0]
 8004980:	4633      	mov	r3, r6
 8004982:	aa0b      	add	r2, sp, #44	; 0x2c
 8004984:	4621      	mov	r1, r4
 8004986:	4628      	mov	r0, r5
 8004988:	f000 f9e6 	bl	8004d58 <_printf_common>
 800498c:	3001      	adds	r0, #1
 800498e:	f040 808d 	bne.w	8004aac <_printf_float+0x1d4>
 8004992:	f04f 30ff 	mov.w	r0, #4294967295
 8004996:	b00d      	add	sp, #52	; 0x34
 8004998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499c:	4642      	mov	r2, r8
 800499e:	464b      	mov	r3, r9
 80049a0:	4640      	mov	r0, r8
 80049a2:	4649      	mov	r1, r9
 80049a4:	f7fc f8ca 	bl	8000b3c <__aeabi_dcmpun>
 80049a8:	b110      	cbz	r0, 80049b0 <_printf_float+0xd8>
 80049aa:	4a8c      	ldr	r2, [pc, #560]	; (8004bdc <_printf_float+0x304>)
 80049ac:	4b8c      	ldr	r3, [pc, #560]	; (8004be0 <_printf_float+0x308>)
 80049ae:	e7da      	b.n	8004966 <_printf_float+0x8e>
 80049b0:	6861      	ldr	r1, [r4, #4]
 80049b2:	1c4b      	adds	r3, r1, #1
 80049b4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80049b8:	a80a      	add	r0, sp, #40	; 0x28
 80049ba:	d13e      	bne.n	8004a3a <_printf_float+0x162>
 80049bc:	2306      	movs	r3, #6
 80049be:	6063      	str	r3, [r4, #4]
 80049c0:	2300      	movs	r3, #0
 80049c2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80049c6:	ab09      	add	r3, sp, #36	; 0x24
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	ec49 8b10 	vmov	d0, r8, r9
 80049ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049d2:	6022      	str	r2, [r4, #0]
 80049d4:	f8cd a004 	str.w	sl, [sp, #4]
 80049d8:	6861      	ldr	r1, [r4, #4]
 80049da:	4628      	mov	r0, r5
 80049dc:	f7ff fee8 	bl	80047b0 <__cvt>
 80049e0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80049e4:	2b47      	cmp	r3, #71	; 0x47
 80049e6:	4680      	mov	r8, r0
 80049e8:	d109      	bne.n	80049fe <_printf_float+0x126>
 80049ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ec:	1cd8      	adds	r0, r3, #3
 80049ee:	db02      	blt.n	80049f6 <_printf_float+0x11e>
 80049f0:	6862      	ldr	r2, [r4, #4]
 80049f2:	4293      	cmp	r3, r2
 80049f4:	dd47      	ble.n	8004a86 <_printf_float+0x1ae>
 80049f6:	f1aa 0a02 	sub.w	sl, sl, #2
 80049fa:	fa5f fa8a 	uxtb.w	sl, sl
 80049fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004a02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a04:	d824      	bhi.n	8004a50 <_printf_float+0x178>
 8004a06:	3901      	subs	r1, #1
 8004a08:	4652      	mov	r2, sl
 8004a0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a0e:	9109      	str	r1, [sp, #36]	; 0x24
 8004a10:	f7ff ff2f 	bl	8004872 <__exponent>
 8004a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a16:	1813      	adds	r3, r2, r0
 8004a18:	2a01      	cmp	r2, #1
 8004a1a:	4681      	mov	r9, r0
 8004a1c:	6123      	str	r3, [r4, #16]
 8004a1e:	dc02      	bgt.n	8004a26 <_printf_float+0x14e>
 8004a20:	6822      	ldr	r2, [r4, #0]
 8004a22:	07d1      	lsls	r1, r2, #31
 8004a24:	d501      	bpl.n	8004a2a <_printf_float+0x152>
 8004a26:	3301      	adds	r3, #1
 8004a28:	6123      	str	r3, [r4, #16]
 8004a2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0a5      	beq.n	800497e <_printf_float+0xa6>
 8004a32:	232d      	movs	r3, #45	; 0x2d
 8004a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a38:	e7a1      	b.n	800497e <_printf_float+0xa6>
 8004a3a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004a3e:	f000 8177 	beq.w	8004d30 <_printf_float+0x458>
 8004a42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004a46:	d1bb      	bne.n	80049c0 <_printf_float+0xe8>
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d1b9      	bne.n	80049c0 <_printf_float+0xe8>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e7b6      	b.n	80049be <_printf_float+0xe6>
 8004a50:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004a54:	d119      	bne.n	8004a8a <_printf_float+0x1b2>
 8004a56:	2900      	cmp	r1, #0
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	dd0c      	ble.n	8004a76 <_printf_float+0x19e>
 8004a5c:	6121      	str	r1, [r4, #16]
 8004a5e:	b913      	cbnz	r3, 8004a66 <_printf_float+0x18e>
 8004a60:	6822      	ldr	r2, [r4, #0]
 8004a62:	07d2      	lsls	r2, r2, #31
 8004a64:	d502      	bpl.n	8004a6c <_printf_float+0x194>
 8004a66:	3301      	adds	r3, #1
 8004a68:	440b      	add	r3, r1
 8004a6a:	6123      	str	r3, [r4, #16]
 8004a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a70:	f04f 0900 	mov.w	r9, #0
 8004a74:	e7d9      	b.n	8004a2a <_printf_float+0x152>
 8004a76:	b913      	cbnz	r3, 8004a7e <_printf_float+0x1a6>
 8004a78:	6822      	ldr	r2, [r4, #0]
 8004a7a:	07d0      	lsls	r0, r2, #31
 8004a7c:	d501      	bpl.n	8004a82 <_printf_float+0x1aa>
 8004a7e:	3302      	adds	r3, #2
 8004a80:	e7f3      	b.n	8004a6a <_printf_float+0x192>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e7f1      	b.n	8004a6a <_printf_float+0x192>
 8004a86:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004a8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	db05      	blt.n	8004a9e <_printf_float+0x1c6>
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	6123      	str	r3, [r4, #16]
 8004a96:	07d1      	lsls	r1, r2, #31
 8004a98:	d5e8      	bpl.n	8004a6c <_printf_float+0x194>
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	e7e5      	b.n	8004a6a <_printf_float+0x192>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bfd4      	ite	le
 8004aa2:	f1c3 0302 	rsble	r3, r3, #2
 8004aa6:	2301      	movgt	r3, #1
 8004aa8:	4413      	add	r3, r2
 8004aaa:	e7de      	b.n	8004a6a <_printf_float+0x192>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	055a      	lsls	r2, r3, #21
 8004ab0:	d407      	bmi.n	8004ac2 <_printf_float+0x1ea>
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b8      	blx	r7
 8004abc:	3001      	adds	r0, #1
 8004abe:	d12b      	bne.n	8004b18 <_printf_float+0x240>
 8004ac0:	e767      	b.n	8004992 <_printf_float+0xba>
 8004ac2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004ac6:	f240 80dc 	bls.w	8004c82 <_printf_float+0x3aa>
 8004aca:	2200      	movs	r2, #0
 8004acc:	2300      	movs	r3, #0
 8004ace:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ad2:	f7fc f801 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d033      	beq.n	8004b42 <_printf_float+0x26a>
 8004ada:	2301      	movs	r3, #1
 8004adc:	4a41      	ldr	r2, [pc, #260]	; (8004be4 <_printf_float+0x30c>)
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b8      	blx	r7
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	f43f af54 	beq.w	8004992 <_printf_float+0xba>
 8004aea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aee:	429a      	cmp	r2, r3
 8004af0:	db02      	blt.n	8004af8 <_printf_float+0x220>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	07d8      	lsls	r0, r3, #31
 8004af6:	d50f      	bpl.n	8004b18 <_printf_float+0x240>
 8004af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004afc:	4631      	mov	r1, r6
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b8      	blx	r7
 8004b02:	3001      	adds	r0, #1
 8004b04:	f43f af45 	beq.w	8004992 <_printf_float+0xba>
 8004b08:	f04f 0800 	mov.w	r8, #0
 8004b0c:	f104 091a 	add.w	r9, r4, #26
 8004b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b12:	3b01      	subs	r3, #1
 8004b14:	4543      	cmp	r3, r8
 8004b16:	dc09      	bgt.n	8004b2c <_printf_float+0x254>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	079b      	lsls	r3, r3, #30
 8004b1c:	f100 8103 	bmi.w	8004d26 <_printf_float+0x44e>
 8004b20:	68e0      	ldr	r0, [r4, #12]
 8004b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b24:	4298      	cmp	r0, r3
 8004b26:	bfb8      	it	lt
 8004b28:	4618      	movlt	r0, r3
 8004b2a:	e734      	b.n	8004996 <_printf_float+0xbe>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	464a      	mov	r2, r9
 8004b30:	4631      	mov	r1, r6
 8004b32:	4628      	mov	r0, r5
 8004b34:	47b8      	blx	r7
 8004b36:	3001      	adds	r0, #1
 8004b38:	f43f af2b 	beq.w	8004992 <_printf_float+0xba>
 8004b3c:	f108 0801 	add.w	r8, r8, #1
 8004b40:	e7e6      	b.n	8004b10 <_printf_float+0x238>
 8004b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	dc2b      	bgt.n	8004ba0 <_printf_float+0x2c8>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4a26      	ldr	r2, [pc, #152]	; (8004be4 <_printf_float+0x30c>)
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4628      	mov	r0, r5
 8004b50:	47b8      	blx	r7
 8004b52:	3001      	adds	r0, #1
 8004b54:	f43f af1d 	beq.w	8004992 <_printf_float+0xba>
 8004b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5a:	b923      	cbnz	r3, 8004b66 <_printf_float+0x28e>
 8004b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b5e:	b913      	cbnz	r3, 8004b66 <_printf_float+0x28e>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	07d9      	lsls	r1, r3, #31
 8004b64:	d5d8      	bpl.n	8004b18 <_printf_float+0x240>
 8004b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f af0e 	beq.w	8004992 <_printf_float+0xba>
 8004b76:	f04f 0900 	mov.w	r9, #0
 8004b7a:	f104 0a1a 	add.w	sl, r4, #26
 8004b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b80:	425b      	negs	r3, r3
 8004b82:	454b      	cmp	r3, r9
 8004b84:	dc01      	bgt.n	8004b8a <_printf_float+0x2b2>
 8004b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b88:	e794      	b.n	8004ab4 <_printf_float+0x1dc>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	4652      	mov	r2, sl
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	47b8      	blx	r7
 8004b94:	3001      	adds	r0, #1
 8004b96:	f43f aefc 	beq.w	8004992 <_printf_float+0xba>
 8004b9a:	f109 0901 	add.w	r9, r9, #1
 8004b9e:	e7ee      	b.n	8004b7e <_printf_float+0x2a6>
 8004ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	bfa8      	it	ge
 8004ba8:	461a      	movge	r2, r3
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	4691      	mov	r9, r2
 8004bae:	dd07      	ble.n	8004bc0 <_printf_float+0x2e8>
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	47b8      	blx	r7
 8004bba:	3001      	adds	r0, #1
 8004bbc:	f43f aee9 	beq.w	8004992 <_printf_float+0xba>
 8004bc0:	f104 031a 	add.w	r3, r4, #26
 8004bc4:	f04f 0b00 	mov.w	fp, #0
 8004bc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bcc:	9306      	str	r3, [sp, #24]
 8004bce:	e015      	b.n	8004bfc <_printf_float+0x324>
 8004bd0:	7fefffff 	.word	0x7fefffff
 8004bd4:	08007184 	.word	0x08007184
 8004bd8:	08007180 	.word	0x08007180
 8004bdc:	0800718c 	.word	0x0800718c
 8004be0:	08007188 	.word	0x08007188
 8004be4:	08007190 	.word	0x08007190
 8004be8:	2301      	movs	r3, #1
 8004bea:	9a06      	ldr	r2, [sp, #24]
 8004bec:	4631      	mov	r1, r6
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f aecd 	beq.w	8004992 <_printf_float+0xba>
 8004bf8:	f10b 0b01 	add.w	fp, fp, #1
 8004bfc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c00:	ebaa 0309 	sub.w	r3, sl, r9
 8004c04:	455b      	cmp	r3, fp
 8004c06:	dcef      	bgt.n	8004be8 <_printf_float+0x310>
 8004c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	44d0      	add	r8, sl
 8004c10:	db15      	blt.n	8004c3e <_printf_float+0x366>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	07da      	lsls	r2, r3, #31
 8004c16:	d412      	bmi.n	8004c3e <_printf_float+0x366>
 8004c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c1c:	eba3 020a 	sub.w	r2, r3, sl
 8004c20:	eba3 0a01 	sub.w	sl, r3, r1
 8004c24:	4592      	cmp	sl, r2
 8004c26:	bfa8      	it	ge
 8004c28:	4692      	movge	sl, r2
 8004c2a:	f1ba 0f00 	cmp.w	sl, #0
 8004c2e:	dc0e      	bgt.n	8004c4e <_printf_float+0x376>
 8004c30:	f04f 0800 	mov.w	r8, #0
 8004c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c38:	f104 091a 	add.w	r9, r4, #26
 8004c3c:	e019      	b.n	8004c72 <_printf_float+0x39a>
 8004c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d1e5      	bne.n	8004c18 <_printf_float+0x340>
 8004c4c:	e6a1      	b.n	8004992 <_printf_float+0xba>
 8004c4e:	4653      	mov	r3, sl
 8004c50:	4642      	mov	r2, r8
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d1e9      	bne.n	8004c30 <_printf_float+0x358>
 8004c5c:	e699      	b.n	8004992 <_printf_float+0xba>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	464a      	mov	r2, r9
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f ae92 	beq.w	8004992 <_printf_float+0xba>
 8004c6e:	f108 0801 	add.w	r8, r8, #1
 8004c72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	eba3 030a 	sub.w	r3, r3, sl
 8004c7c:	4543      	cmp	r3, r8
 8004c7e:	dcee      	bgt.n	8004c5e <_printf_float+0x386>
 8004c80:	e74a      	b.n	8004b18 <_printf_float+0x240>
 8004c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c84:	2a01      	cmp	r2, #1
 8004c86:	dc01      	bgt.n	8004c8c <_printf_float+0x3b4>
 8004c88:	07db      	lsls	r3, r3, #31
 8004c8a:	d53a      	bpl.n	8004d02 <_printf_float+0x42a>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4642      	mov	r2, r8
 8004c90:	4631      	mov	r1, r6
 8004c92:	4628      	mov	r0, r5
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	f43f ae7b 	beq.w	8004992 <_printf_float+0xba>
 8004c9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f108 0801 	add.w	r8, r8, #1
 8004cac:	f43f ae71 	beq.w	8004992 <_printf_float+0xba>
 8004cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f103 3aff 	add.w	sl, r3, #4294967295
 8004cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f7fb ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cc2:	b9c8      	cbnz	r0, 8004cf8 <_printf_float+0x420>
 8004cc4:	4653      	mov	r3, sl
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	4631      	mov	r1, r6
 8004cca:	4628      	mov	r0, r5
 8004ccc:	47b8      	blx	r7
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d10e      	bne.n	8004cf0 <_printf_float+0x418>
 8004cd2:	e65e      	b.n	8004992 <_printf_float+0xba>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	4652      	mov	r2, sl
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4628      	mov	r0, r5
 8004cdc:	47b8      	blx	r7
 8004cde:	3001      	adds	r0, #1
 8004ce0:	f43f ae57 	beq.w	8004992 <_printf_float+0xba>
 8004ce4:	f108 0801 	add.w	r8, r8, #1
 8004ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cea:	3b01      	subs	r3, #1
 8004cec:	4543      	cmp	r3, r8
 8004cee:	dcf1      	bgt.n	8004cd4 <_printf_float+0x3fc>
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cf6:	e6de      	b.n	8004ab6 <_printf_float+0x1de>
 8004cf8:	f04f 0800 	mov.w	r8, #0
 8004cfc:	f104 0a1a 	add.w	sl, r4, #26
 8004d00:	e7f2      	b.n	8004ce8 <_printf_float+0x410>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e7df      	b.n	8004cc6 <_printf_float+0x3ee>
 8004d06:	2301      	movs	r3, #1
 8004d08:	464a      	mov	r2, r9
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	f43f ae3e 	beq.w	8004992 <_printf_float+0xba>
 8004d16:	f108 0801 	add.w	r8, r8, #1
 8004d1a:	68e3      	ldr	r3, [r4, #12]
 8004d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	4543      	cmp	r3, r8
 8004d22:	dcf0      	bgt.n	8004d06 <_printf_float+0x42e>
 8004d24:	e6fc      	b.n	8004b20 <_printf_float+0x248>
 8004d26:	f04f 0800 	mov.w	r8, #0
 8004d2a:	f104 0919 	add.w	r9, r4, #25
 8004d2e:	e7f4      	b.n	8004d1a <_printf_float+0x442>
 8004d30:	2900      	cmp	r1, #0
 8004d32:	f43f ae8b 	beq.w	8004a4c <_printf_float+0x174>
 8004d36:	2300      	movs	r3, #0
 8004d38:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004d3c:	ab09      	add	r3, sp, #36	; 0x24
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	ec49 8b10 	vmov	d0, r8, r9
 8004d44:	6022      	str	r2, [r4, #0]
 8004d46:	f8cd a004 	str.w	sl, [sp, #4]
 8004d4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f7ff fd2e 	bl	80047b0 <__cvt>
 8004d54:	4680      	mov	r8, r0
 8004d56:	e648      	b.n	80049ea <_printf_float+0x112>

08004d58 <_printf_common>:
 8004d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5c:	4691      	mov	r9, r2
 8004d5e:	461f      	mov	r7, r3
 8004d60:	688a      	ldr	r2, [r1, #8]
 8004d62:	690b      	ldr	r3, [r1, #16]
 8004d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	bfb8      	it	lt
 8004d6c:	4613      	movlt	r3, r2
 8004d6e:	f8c9 3000 	str.w	r3, [r9]
 8004d72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d76:	4606      	mov	r6, r0
 8004d78:	460c      	mov	r4, r1
 8004d7a:	b112      	cbz	r2, 8004d82 <_printf_common+0x2a>
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	f8c9 3000 	str.w	r3, [r9]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	0699      	lsls	r1, r3, #26
 8004d86:	bf42      	ittt	mi
 8004d88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d8c:	3302      	addmi	r3, #2
 8004d8e:	f8c9 3000 	strmi.w	r3, [r9]
 8004d92:	6825      	ldr	r5, [r4, #0]
 8004d94:	f015 0506 	ands.w	r5, r5, #6
 8004d98:	d107      	bne.n	8004daa <_printf_common+0x52>
 8004d9a:	f104 0a19 	add.w	sl, r4, #25
 8004d9e:	68e3      	ldr	r3, [r4, #12]
 8004da0:	f8d9 2000 	ldr.w	r2, [r9]
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	42ab      	cmp	r3, r5
 8004da8:	dc28      	bgt.n	8004dfc <_printf_common+0xa4>
 8004daa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004dae:	6822      	ldr	r2, [r4, #0]
 8004db0:	3300      	adds	r3, #0
 8004db2:	bf18      	it	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	0692      	lsls	r2, r2, #26
 8004db8:	d42d      	bmi.n	8004e16 <_printf_common+0xbe>
 8004dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dbe:	4639      	mov	r1, r7
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	47c0      	blx	r8
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d020      	beq.n	8004e0a <_printf_common+0xb2>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	68e5      	ldr	r5, [r4, #12]
 8004dcc:	f8d9 2000 	ldr.w	r2, [r9]
 8004dd0:	f003 0306 	and.w	r3, r3, #6
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	bf08      	it	eq
 8004dd8:	1aad      	subeq	r5, r5, r2
 8004dda:	68a3      	ldr	r3, [r4, #8]
 8004ddc:	6922      	ldr	r2, [r4, #16]
 8004dde:	bf0c      	ite	eq
 8004de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de4:	2500      	movne	r5, #0
 8004de6:	4293      	cmp	r3, r2
 8004de8:	bfc4      	itt	gt
 8004dea:	1a9b      	subgt	r3, r3, r2
 8004dec:	18ed      	addgt	r5, r5, r3
 8004dee:	f04f 0900 	mov.w	r9, #0
 8004df2:	341a      	adds	r4, #26
 8004df4:	454d      	cmp	r5, r9
 8004df6:	d11a      	bne.n	8004e2e <_printf_common+0xd6>
 8004df8:	2000      	movs	r0, #0
 8004dfa:	e008      	b.n	8004e0e <_printf_common+0xb6>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4652      	mov	r2, sl
 8004e00:	4639      	mov	r1, r7
 8004e02:	4630      	mov	r0, r6
 8004e04:	47c0      	blx	r8
 8004e06:	3001      	adds	r0, #1
 8004e08:	d103      	bne.n	8004e12 <_printf_common+0xba>
 8004e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e12:	3501      	adds	r5, #1
 8004e14:	e7c3      	b.n	8004d9e <_printf_common+0x46>
 8004e16:	18e1      	adds	r1, r4, r3
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	2030      	movs	r0, #48	; 0x30
 8004e1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e20:	4422      	add	r2, r4
 8004e22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	e7c5      	b.n	8004dba <_printf_common+0x62>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4622      	mov	r2, r4
 8004e32:	4639      	mov	r1, r7
 8004e34:	4630      	mov	r0, r6
 8004e36:	47c0      	blx	r8
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d0e6      	beq.n	8004e0a <_printf_common+0xb2>
 8004e3c:	f109 0901 	add.w	r9, r9, #1
 8004e40:	e7d8      	b.n	8004df4 <_printf_common+0x9c>
	...

08004e44 <_printf_i>:
 8004e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	7e09      	ldrb	r1, [r1, #24]
 8004e50:	b085      	sub	sp, #20
 8004e52:	296e      	cmp	r1, #110	; 0x6e
 8004e54:	4617      	mov	r7, r2
 8004e56:	4606      	mov	r6, r0
 8004e58:	4698      	mov	r8, r3
 8004e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e5c:	f000 80b3 	beq.w	8004fc6 <_printf_i+0x182>
 8004e60:	d822      	bhi.n	8004ea8 <_printf_i+0x64>
 8004e62:	2963      	cmp	r1, #99	; 0x63
 8004e64:	d036      	beq.n	8004ed4 <_printf_i+0x90>
 8004e66:	d80a      	bhi.n	8004e7e <_printf_i+0x3a>
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	f000 80b9 	beq.w	8004fe0 <_printf_i+0x19c>
 8004e6e:	2958      	cmp	r1, #88	; 0x58
 8004e70:	f000 8083 	beq.w	8004f7a <_printf_i+0x136>
 8004e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e7c:	e032      	b.n	8004ee4 <_printf_i+0xa0>
 8004e7e:	2964      	cmp	r1, #100	; 0x64
 8004e80:	d001      	beq.n	8004e86 <_printf_i+0x42>
 8004e82:	2969      	cmp	r1, #105	; 0x69
 8004e84:	d1f6      	bne.n	8004e74 <_printf_i+0x30>
 8004e86:	6820      	ldr	r0, [r4, #0]
 8004e88:	6813      	ldr	r3, [r2, #0]
 8004e8a:	0605      	lsls	r5, r0, #24
 8004e8c:	f103 0104 	add.w	r1, r3, #4
 8004e90:	d52a      	bpl.n	8004ee8 <_printf_i+0xa4>
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6011      	str	r1, [r2, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da03      	bge.n	8004ea2 <_printf_i+0x5e>
 8004e9a:	222d      	movs	r2, #45	; 0x2d
 8004e9c:	425b      	negs	r3, r3
 8004e9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ea2:	486f      	ldr	r0, [pc, #444]	; (8005060 <_printf_i+0x21c>)
 8004ea4:	220a      	movs	r2, #10
 8004ea6:	e039      	b.n	8004f1c <_printf_i+0xd8>
 8004ea8:	2973      	cmp	r1, #115	; 0x73
 8004eaa:	f000 809d 	beq.w	8004fe8 <_printf_i+0x1a4>
 8004eae:	d808      	bhi.n	8004ec2 <_printf_i+0x7e>
 8004eb0:	296f      	cmp	r1, #111	; 0x6f
 8004eb2:	d020      	beq.n	8004ef6 <_printf_i+0xb2>
 8004eb4:	2970      	cmp	r1, #112	; 0x70
 8004eb6:	d1dd      	bne.n	8004e74 <_printf_i+0x30>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	f043 0320 	orr.w	r3, r3, #32
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	e003      	b.n	8004eca <_printf_i+0x86>
 8004ec2:	2975      	cmp	r1, #117	; 0x75
 8004ec4:	d017      	beq.n	8004ef6 <_printf_i+0xb2>
 8004ec6:	2978      	cmp	r1, #120	; 0x78
 8004ec8:	d1d4      	bne.n	8004e74 <_printf_i+0x30>
 8004eca:	2378      	movs	r3, #120	; 0x78
 8004ecc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ed0:	4864      	ldr	r0, [pc, #400]	; (8005064 <_printf_i+0x220>)
 8004ed2:	e055      	b.n	8004f80 <_printf_i+0x13c>
 8004ed4:	6813      	ldr	r3, [r2, #0]
 8004ed6:	1d19      	adds	r1, r3, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6011      	str	r1, [r2, #0]
 8004edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e08c      	b.n	8005002 <_printf_i+0x1be>
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6011      	str	r1, [r2, #0]
 8004eec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ef0:	bf18      	it	ne
 8004ef2:	b21b      	sxthne	r3, r3
 8004ef4:	e7cf      	b.n	8004e96 <_printf_i+0x52>
 8004ef6:	6813      	ldr	r3, [r2, #0]
 8004ef8:	6825      	ldr	r5, [r4, #0]
 8004efa:	1d18      	adds	r0, r3, #4
 8004efc:	6010      	str	r0, [r2, #0]
 8004efe:	0628      	lsls	r0, r5, #24
 8004f00:	d501      	bpl.n	8004f06 <_printf_i+0xc2>
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	e002      	b.n	8004f0c <_printf_i+0xc8>
 8004f06:	0668      	lsls	r0, r5, #25
 8004f08:	d5fb      	bpl.n	8004f02 <_printf_i+0xbe>
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	4854      	ldr	r0, [pc, #336]	; (8005060 <_printf_i+0x21c>)
 8004f0e:	296f      	cmp	r1, #111	; 0x6f
 8004f10:	bf14      	ite	ne
 8004f12:	220a      	movne	r2, #10
 8004f14:	2208      	moveq	r2, #8
 8004f16:	2100      	movs	r1, #0
 8004f18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f1c:	6865      	ldr	r5, [r4, #4]
 8004f1e:	60a5      	str	r5, [r4, #8]
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	f2c0 8095 	blt.w	8005050 <_printf_i+0x20c>
 8004f26:	6821      	ldr	r1, [r4, #0]
 8004f28:	f021 0104 	bic.w	r1, r1, #4
 8004f2c:	6021      	str	r1, [r4, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d13d      	bne.n	8004fae <_printf_i+0x16a>
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	f040 808e 	bne.w	8005054 <_printf_i+0x210>
 8004f38:	4665      	mov	r5, ip
 8004f3a:	2a08      	cmp	r2, #8
 8004f3c:	d10b      	bne.n	8004f56 <_printf_i+0x112>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	07db      	lsls	r3, r3, #31
 8004f42:	d508      	bpl.n	8004f56 <_printf_i+0x112>
 8004f44:	6923      	ldr	r3, [r4, #16]
 8004f46:	6862      	ldr	r2, [r4, #4]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	bfde      	ittt	le
 8004f4c:	2330      	movle	r3, #48	; 0x30
 8004f4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f56:	ebac 0305 	sub.w	r3, ip, r5
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	f8cd 8000 	str.w	r8, [sp]
 8004f60:	463b      	mov	r3, r7
 8004f62:	aa03      	add	r2, sp, #12
 8004f64:	4621      	mov	r1, r4
 8004f66:	4630      	mov	r0, r6
 8004f68:	f7ff fef6 	bl	8004d58 <_printf_common>
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d14d      	bne.n	800500c <_printf_i+0x1c8>
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	b005      	add	sp, #20
 8004f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f7a:	4839      	ldr	r0, [pc, #228]	; (8005060 <_printf_i+0x21c>)
 8004f7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f80:	6813      	ldr	r3, [r2, #0]
 8004f82:	6821      	ldr	r1, [r4, #0]
 8004f84:	1d1d      	adds	r5, r3, #4
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6015      	str	r5, [r2, #0]
 8004f8a:	060a      	lsls	r2, r1, #24
 8004f8c:	d50b      	bpl.n	8004fa6 <_printf_i+0x162>
 8004f8e:	07ca      	lsls	r2, r1, #31
 8004f90:	bf44      	itt	mi
 8004f92:	f041 0120 	orrmi.w	r1, r1, #32
 8004f96:	6021      	strmi	r1, [r4, #0]
 8004f98:	b91b      	cbnz	r3, 8004fa2 <_printf_i+0x15e>
 8004f9a:	6822      	ldr	r2, [r4, #0]
 8004f9c:	f022 0220 	bic.w	r2, r2, #32
 8004fa0:	6022      	str	r2, [r4, #0]
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	e7b7      	b.n	8004f16 <_printf_i+0xd2>
 8004fa6:	064d      	lsls	r5, r1, #25
 8004fa8:	bf48      	it	mi
 8004faa:	b29b      	uxthmi	r3, r3
 8004fac:	e7ef      	b.n	8004f8e <_printf_i+0x14a>
 8004fae:	4665      	mov	r5, ip
 8004fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fb4:	fb02 3311 	mls	r3, r2, r1, r3
 8004fb8:	5cc3      	ldrb	r3, [r0, r3]
 8004fba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	d1f5      	bne.n	8004fb0 <_printf_i+0x16c>
 8004fc4:	e7b9      	b.n	8004f3a <_printf_i+0xf6>
 8004fc6:	6813      	ldr	r3, [r2, #0]
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	6961      	ldr	r1, [r4, #20]
 8004fcc:	1d18      	adds	r0, r3, #4
 8004fce:	6010      	str	r0, [r2, #0]
 8004fd0:	0628      	lsls	r0, r5, #24
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	d501      	bpl.n	8004fda <_printf_i+0x196>
 8004fd6:	6019      	str	r1, [r3, #0]
 8004fd8:	e002      	b.n	8004fe0 <_printf_i+0x19c>
 8004fda:	066a      	lsls	r2, r5, #25
 8004fdc:	d5fb      	bpl.n	8004fd6 <_printf_i+0x192>
 8004fde:	8019      	strh	r1, [r3, #0]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	6123      	str	r3, [r4, #16]
 8004fe4:	4665      	mov	r5, ip
 8004fe6:	e7b9      	b.n	8004f5c <_printf_i+0x118>
 8004fe8:	6813      	ldr	r3, [r2, #0]
 8004fea:	1d19      	adds	r1, r3, #4
 8004fec:	6011      	str	r1, [r2, #0]
 8004fee:	681d      	ldr	r5, [r3, #0]
 8004ff0:	6862      	ldr	r2, [r4, #4]
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f7fb f8fb 	bl	80001f0 <memchr>
 8004ffa:	b108      	cbz	r0, 8005000 <_printf_i+0x1bc>
 8004ffc:	1b40      	subs	r0, r0, r5
 8004ffe:	6060      	str	r0, [r4, #4]
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	2300      	movs	r3, #0
 8005006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500a:	e7a7      	b.n	8004f5c <_printf_i+0x118>
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	462a      	mov	r2, r5
 8005010:	4639      	mov	r1, r7
 8005012:	4630      	mov	r0, r6
 8005014:	47c0      	blx	r8
 8005016:	3001      	adds	r0, #1
 8005018:	d0aa      	beq.n	8004f70 <_printf_i+0x12c>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	079b      	lsls	r3, r3, #30
 800501e:	d413      	bmi.n	8005048 <_printf_i+0x204>
 8005020:	68e0      	ldr	r0, [r4, #12]
 8005022:	9b03      	ldr	r3, [sp, #12]
 8005024:	4298      	cmp	r0, r3
 8005026:	bfb8      	it	lt
 8005028:	4618      	movlt	r0, r3
 800502a:	e7a3      	b.n	8004f74 <_printf_i+0x130>
 800502c:	2301      	movs	r3, #1
 800502e:	464a      	mov	r2, r9
 8005030:	4639      	mov	r1, r7
 8005032:	4630      	mov	r0, r6
 8005034:	47c0      	blx	r8
 8005036:	3001      	adds	r0, #1
 8005038:	d09a      	beq.n	8004f70 <_printf_i+0x12c>
 800503a:	3501      	adds	r5, #1
 800503c:	68e3      	ldr	r3, [r4, #12]
 800503e:	9a03      	ldr	r2, [sp, #12]
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	42ab      	cmp	r3, r5
 8005044:	dcf2      	bgt.n	800502c <_printf_i+0x1e8>
 8005046:	e7eb      	b.n	8005020 <_printf_i+0x1dc>
 8005048:	2500      	movs	r5, #0
 800504a:	f104 0919 	add.w	r9, r4, #25
 800504e:	e7f5      	b.n	800503c <_printf_i+0x1f8>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ac      	bne.n	8004fae <_printf_i+0x16a>
 8005054:	7803      	ldrb	r3, [r0, #0]
 8005056:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800505a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800505e:	e76c      	b.n	8004f3a <_printf_i+0xf6>
 8005060:	08007192 	.word	0x08007192
 8005064:	080071a3 	.word	0x080071a3

08005068 <iprintf>:
 8005068:	b40f      	push	{r0, r1, r2, r3}
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <iprintf+0x2c>)
 800506c:	b513      	push	{r0, r1, r4, lr}
 800506e:	681c      	ldr	r4, [r3, #0]
 8005070:	b124      	cbz	r4, 800507c <iprintf+0x14>
 8005072:	69a3      	ldr	r3, [r4, #24]
 8005074:	b913      	cbnz	r3, 800507c <iprintf+0x14>
 8005076:	4620      	mov	r0, r4
 8005078:	f000 fe92 	bl	8005da0 <__sinit>
 800507c:	ab05      	add	r3, sp, #20
 800507e:	9a04      	ldr	r2, [sp, #16]
 8005080:	68a1      	ldr	r1, [r4, #8]
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	4620      	mov	r0, r4
 8005086:	f001 faf1 	bl	800666c <_vfiprintf_r>
 800508a:	b002      	add	sp, #8
 800508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005090:	b004      	add	sp, #16
 8005092:	4770      	bx	lr
 8005094:	20000010 	.word	0x20000010

08005098 <quorem>:
 8005098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	6903      	ldr	r3, [r0, #16]
 800509e:	690c      	ldr	r4, [r1, #16]
 80050a0:	42a3      	cmp	r3, r4
 80050a2:	4680      	mov	r8, r0
 80050a4:	f2c0 8082 	blt.w	80051ac <quorem+0x114>
 80050a8:	3c01      	subs	r4, #1
 80050aa:	f101 0714 	add.w	r7, r1, #20
 80050ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80050b2:	f100 0614 	add.w	r6, r0, #20
 80050b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80050ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80050be:	eb06 030c 	add.w	r3, r6, ip
 80050c2:	3501      	adds	r5, #1
 80050c4:	eb07 090c 	add.w	r9, r7, ip
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80050ce:	b395      	cbz	r5, 8005136 <quorem+0x9e>
 80050d0:	f04f 0a00 	mov.w	sl, #0
 80050d4:	4638      	mov	r0, r7
 80050d6:	46b6      	mov	lr, r6
 80050d8:	46d3      	mov	fp, sl
 80050da:	f850 2b04 	ldr.w	r2, [r0], #4
 80050de:	b293      	uxth	r3, r2
 80050e0:	fb05 a303 	mla	r3, r5, r3, sl
 80050e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	ebab 0303 	sub.w	r3, fp, r3
 80050ee:	0c12      	lsrs	r2, r2, #16
 80050f0:	f8de b000 	ldr.w	fp, [lr]
 80050f4:	fb05 a202 	mla	r2, r5, r2, sl
 80050f8:	fa13 f38b 	uxtah	r3, r3, fp
 80050fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005100:	fa1f fb82 	uxth.w	fp, r2
 8005104:	f8de 2000 	ldr.w	r2, [lr]
 8005108:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800510c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005110:	b29b      	uxth	r3, r3
 8005112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005116:	4581      	cmp	r9, r0
 8005118:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800511c:	f84e 3b04 	str.w	r3, [lr], #4
 8005120:	d2db      	bcs.n	80050da <quorem+0x42>
 8005122:	f856 300c 	ldr.w	r3, [r6, ip]
 8005126:	b933      	cbnz	r3, 8005136 <quorem+0x9e>
 8005128:	9b01      	ldr	r3, [sp, #4]
 800512a:	3b04      	subs	r3, #4
 800512c:	429e      	cmp	r6, r3
 800512e:	461a      	mov	r2, r3
 8005130:	d330      	bcc.n	8005194 <quorem+0xfc>
 8005132:	f8c8 4010 	str.w	r4, [r8, #16]
 8005136:	4640      	mov	r0, r8
 8005138:	f001 f8f2 	bl	8006320 <__mcmp>
 800513c:	2800      	cmp	r0, #0
 800513e:	db25      	blt.n	800518c <quorem+0xf4>
 8005140:	3501      	adds	r5, #1
 8005142:	4630      	mov	r0, r6
 8005144:	f04f 0c00 	mov.w	ip, #0
 8005148:	f857 2b04 	ldr.w	r2, [r7], #4
 800514c:	f8d0 e000 	ldr.w	lr, [r0]
 8005150:	b293      	uxth	r3, r2
 8005152:	ebac 0303 	sub.w	r3, ip, r3
 8005156:	0c12      	lsrs	r2, r2, #16
 8005158:	fa13 f38e 	uxtah	r3, r3, lr
 800515c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005164:	b29b      	uxth	r3, r3
 8005166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800516a:	45b9      	cmp	r9, r7
 800516c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005170:	f840 3b04 	str.w	r3, [r0], #4
 8005174:	d2e8      	bcs.n	8005148 <quorem+0xb0>
 8005176:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800517a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800517e:	b92a      	cbnz	r2, 800518c <quorem+0xf4>
 8005180:	3b04      	subs	r3, #4
 8005182:	429e      	cmp	r6, r3
 8005184:	461a      	mov	r2, r3
 8005186:	d30b      	bcc.n	80051a0 <quorem+0x108>
 8005188:	f8c8 4010 	str.w	r4, [r8, #16]
 800518c:	4628      	mov	r0, r5
 800518e:	b003      	add	sp, #12
 8005190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	3b04      	subs	r3, #4
 8005198:	2a00      	cmp	r2, #0
 800519a:	d1ca      	bne.n	8005132 <quorem+0x9a>
 800519c:	3c01      	subs	r4, #1
 800519e:	e7c5      	b.n	800512c <quorem+0x94>
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	3b04      	subs	r3, #4
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	d1ef      	bne.n	8005188 <quorem+0xf0>
 80051a8:	3c01      	subs	r4, #1
 80051aa:	e7ea      	b.n	8005182 <quorem+0xea>
 80051ac:	2000      	movs	r0, #0
 80051ae:	e7ee      	b.n	800518e <quorem+0xf6>

080051b0 <_dtoa_r>:
 80051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b4:	ec57 6b10 	vmov	r6, r7, d0
 80051b8:	b097      	sub	sp, #92	; 0x5c
 80051ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051bc:	9106      	str	r1, [sp, #24]
 80051be:	4604      	mov	r4, r0
 80051c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80051c2:	9312      	str	r3, [sp, #72]	; 0x48
 80051c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80051c8:	e9cd 6700 	strd	r6, r7, [sp]
 80051cc:	b93d      	cbnz	r5, 80051de <_dtoa_r+0x2e>
 80051ce:	2010      	movs	r0, #16
 80051d0:	f000 fe7e 	bl	8005ed0 <malloc>
 80051d4:	6260      	str	r0, [r4, #36]	; 0x24
 80051d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051da:	6005      	str	r5, [r0, #0]
 80051dc:	60c5      	str	r5, [r0, #12]
 80051de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	b151      	cbz	r1, 80051fa <_dtoa_r+0x4a>
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	604a      	str	r2, [r1, #4]
 80051e8:	2301      	movs	r3, #1
 80051ea:	4093      	lsls	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 feb5 	bl	8005f5e <_Bfree>
 80051f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	1e3b      	subs	r3, r7, #0
 80051fc:	bfbb      	ittet	lt
 80051fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005202:	9301      	strlt	r3, [sp, #4]
 8005204:	2300      	movge	r3, #0
 8005206:	2201      	movlt	r2, #1
 8005208:	bfac      	ite	ge
 800520a:	f8c8 3000 	strge.w	r3, [r8]
 800520e:	f8c8 2000 	strlt.w	r2, [r8]
 8005212:	4baf      	ldr	r3, [pc, #700]	; (80054d0 <_dtoa_r+0x320>)
 8005214:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005218:	ea33 0308 	bics.w	r3, r3, r8
 800521c:	d114      	bne.n	8005248 <_dtoa_r+0x98>
 800521e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005220:	f242 730f 	movw	r3, #9999	; 0x270f
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	9b00      	ldr	r3, [sp, #0]
 8005228:	b923      	cbnz	r3, 8005234 <_dtoa_r+0x84>
 800522a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800522e:	2800      	cmp	r0, #0
 8005230:	f000 8542 	beq.w	8005cb8 <_dtoa_r+0xb08>
 8005234:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005236:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80054e4 <_dtoa_r+0x334>
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8544 	beq.w	8005cc8 <_dtoa_r+0xb18>
 8005240:	f10b 0303 	add.w	r3, fp, #3
 8005244:	f000 bd3e 	b.w	8005cc4 <_dtoa_r+0xb14>
 8005248:	e9dd 6700 	ldrd	r6, r7, [sp]
 800524c:	2200      	movs	r2, #0
 800524e:	2300      	movs	r3, #0
 8005250:	4630      	mov	r0, r6
 8005252:	4639      	mov	r1, r7
 8005254:	f7fb fc40 	bl	8000ad8 <__aeabi_dcmpeq>
 8005258:	4681      	mov	r9, r0
 800525a:	b168      	cbz	r0, 8005278 <_dtoa_r+0xc8>
 800525c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800525e:	2301      	movs	r3, #1
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8524 	beq.w	8005cb2 <_dtoa_r+0xb02>
 800526a:	4b9a      	ldr	r3, [pc, #616]	; (80054d4 <_dtoa_r+0x324>)
 800526c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800526e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	f000 bd28 	b.w	8005cc8 <_dtoa_r+0xb18>
 8005278:	aa14      	add	r2, sp, #80	; 0x50
 800527a:	a915      	add	r1, sp, #84	; 0x54
 800527c:	ec47 6b10 	vmov	d0, r6, r7
 8005280:	4620      	mov	r0, r4
 8005282:	f001 f8c4 	bl	800640e <__d2b>
 8005286:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800528a:	9004      	str	r0, [sp, #16]
 800528c:	2d00      	cmp	r5, #0
 800528e:	d07c      	beq.n	800538a <_dtoa_r+0x1da>
 8005290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005294:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005298:	46b2      	mov	sl, r6
 800529a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800529e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80052a6:	2200      	movs	r2, #0
 80052a8:	4b8b      	ldr	r3, [pc, #556]	; (80054d8 <_dtoa_r+0x328>)
 80052aa:	4650      	mov	r0, sl
 80052ac:	4659      	mov	r1, fp
 80052ae:	f7fa fff3 	bl	8000298 <__aeabi_dsub>
 80052b2:	a381      	add	r3, pc, #516	; (adr r3, 80054b8 <_dtoa_r+0x308>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f7fb f9a6 	bl	8000608 <__aeabi_dmul>
 80052bc:	a380      	add	r3, pc, #512	; (adr r3, 80054c0 <_dtoa_r+0x310>)
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f7fa ffeb 	bl	800029c <__adddf3>
 80052c6:	4606      	mov	r6, r0
 80052c8:	4628      	mov	r0, r5
 80052ca:	460f      	mov	r7, r1
 80052cc:	f7fb f932 	bl	8000534 <__aeabi_i2d>
 80052d0:	a37d      	add	r3, pc, #500	; (adr r3, 80054c8 <_dtoa_r+0x318>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f7fb f997 	bl	8000608 <__aeabi_dmul>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4630      	mov	r0, r6
 80052e0:	4639      	mov	r1, r7
 80052e2:	f7fa ffdb 	bl	800029c <__adddf3>
 80052e6:	4606      	mov	r6, r0
 80052e8:	460f      	mov	r7, r1
 80052ea:	f7fb fc3d 	bl	8000b68 <__aeabi_d2iz>
 80052ee:	2200      	movs	r2, #0
 80052f0:	4682      	mov	sl, r0
 80052f2:	2300      	movs	r3, #0
 80052f4:	4630      	mov	r0, r6
 80052f6:	4639      	mov	r1, r7
 80052f8:	f7fb fbf8 	bl	8000aec <__aeabi_dcmplt>
 80052fc:	b148      	cbz	r0, 8005312 <_dtoa_r+0x162>
 80052fe:	4650      	mov	r0, sl
 8005300:	f7fb f918 	bl	8000534 <__aeabi_i2d>
 8005304:	4632      	mov	r2, r6
 8005306:	463b      	mov	r3, r7
 8005308:	f7fb fbe6 	bl	8000ad8 <__aeabi_dcmpeq>
 800530c:	b908      	cbnz	r0, 8005312 <_dtoa_r+0x162>
 800530e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005312:	f1ba 0f16 	cmp.w	sl, #22
 8005316:	d859      	bhi.n	80053cc <_dtoa_r+0x21c>
 8005318:	4970      	ldr	r1, [pc, #448]	; (80054dc <_dtoa_r+0x32c>)
 800531a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800531e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005326:	f7fb fbff 	bl	8000b28 <__aeabi_dcmpgt>
 800532a:	2800      	cmp	r0, #0
 800532c:	d050      	beq.n	80053d0 <_dtoa_r+0x220>
 800532e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005332:	2300      	movs	r3, #0
 8005334:	930f      	str	r3, [sp, #60]	; 0x3c
 8005336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005338:	1b5d      	subs	r5, r3, r5
 800533a:	f1b5 0801 	subs.w	r8, r5, #1
 800533e:	bf49      	itett	mi
 8005340:	f1c5 0301 	rsbmi	r3, r5, #1
 8005344:	2300      	movpl	r3, #0
 8005346:	9305      	strmi	r3, [sp, #20]
 8005348:	f04f 0800 	movmi.w	r8, #0
 800534c:	bf58      	it	pl
 800534e:	9305      	strpl	r3, [sp, #20]
 8005350:	f1ba 0f00 	cmp.w	sl, #0
 8005354:	db3e      	blt.n	80053d4 <_dtoa_r+0x224>
 8005356:	2300      	movs	r3, #0
 8005358:	44d0      	add	r8, sl
 800535a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800535e:	9307      	str	r3, [sp, #28]
 8005360:	9b06      	ldr	r3, [sp, #24]
 8005362:	2b09      	cmp	r3, #9
 8005364:	f200 8090 	bhi.w	8005488 <_dtoa_r+0x2d8>
 8005368:	2b05      	cmp	r3, #5
 800536a:	bfc4      	itt	gt
 800536c:	3b04      	subgt	r3, #4
 800536e:	9306      	strgt	r3, [sp, #24]
 8005370:	9b06      	ldr	r3, [sp, #24]
 8005372:	f1a3 0302 	sub.w	r3, r3, #2
 8005376:	bfcc      	ite	gt
 8005378:	2500      	movgt	r5, #0
 800537a:	2501      	movle	r5, #1
 800537c:	2b03      	cmp	r3, #3
 800537e:	f200 808f 	bhi.w	80054a0 <_dtoa_r+0x2f0>
 8005382:	e8df f003 	tbb	[pc, r3]
 8005386:	7f7d      	.short	0x7f7d
 8005388:	7131      	.short	0x7131
 800538a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800538e:	441d      	add	r5, r3
 8005390:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005394:	2820      	cmp	r0, #32
 8005396:	dd13      	ble.n	80053c0 <_dtoa_r+0x210>
 8005398:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800539c:	9b00      	ldr	r3, [sp, #0]
 800539e:	fa08 f800 	lsl.w	r8, r8, r0
 80053a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80053a6:	fa23 f000 	lsr.w	r0, r3, r0
 80053aa:	ea48 0000 	orr.w	r0, r8, r0
 80053ae:	f7fb f8b1 	bl	8000514 <__aeabi_ui2d>
 80053b2:	2301      	movs	r3, #1
 80053b4:	4682      	mov	sl, r0
 80053b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80053ba:	3d01      	subs	r5, #1
 80053bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80053be:	e772      	b.n	80052a6 <_dtoa_r+0xf6>
 80053c0:	9b00      	ldr	r3, [sp, #0]
 80053c2:	f1c0 0020 	rsb	r0, r0, #32
 80053c6:	fa03 f000 	lsl.w	r0, r3, r0
 80053ca:	e7f0      	b.n	80053ae <_dtoa_r+0x1fe>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e7b1      	b.n	8005334 <_dtoa_r+0x184>
 80053d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80053d2:	e7b0      	b.n	8005336 <_dtoa_r+0x186>
 80053d4:	9b05      	ldr	r3, [sp, #20]
 80053d6:	eba3 030a 	sub.w	r3, r3, sl
 80053da:	9305      	str	r3, [sp, #20]
 80053dc:	f1ca 0300 	rsb	r3, sl, #0
 80053e0:	9307      	str	r3, [sp, #28]
 80053e2:	2300      	movs	r3, #0
 80053e4:	930e      	str	r3, [sp, #56]	; 0x38
 80053e6:	e7bb      	b.n	8005360 <_dtoa_r+0x1b0>
 80053e8:	2301      	movs	r3, #1
 80053ea:	930a      	str	r3, [sp, #40]	; 0x28
 80053ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	dd59      	ble.n	80054a6 <_dtoa_r+0x2f6>
 80053f2:	9302      	str	r3, [sp, #8]
 80053f4:	4699      	mov	r9, r3
 80053f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80053f8:	2200      	movs	r2, #0
 80053fa:	6072      	str	r2, [r6, #4]
 80053fc:	2204      	movs	r2, #4
 80053fe:	f102 0014 	add.w	r0, r2, #20
 8005402:	4298      	cmp	r0, r3
 8005404:	6871      	ldr	r1, [r6, #4]
 8005406:	d953      	bls.n	80054b0 <_dtoa_r+0x300>
 8005408:	4620      	mov	r0, r4
 800540a:	f000 fd74 	bl	8005ef6 <_Balloc>
 800540e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005410:	6030      	str	r0, [r6, #0]
 8005412:	f1b9 0f0e 	cmp.w	r9, #14
 8005416:	f8d3 b000 	ldr.w	fp, [r3]
 800541a:	f200 80e6 	bhi.w	80055ea <_dtoa_r+0x43a>
 800541e:	2d00      	cmp	r5, #0
 8005420:	f000 80e3 	beq.w	80055ea <_dtoa_r+0x43a>
 8005424:	ed9d 7b00 	vldr	d7, [sp]
 8005428:	f1ba 0f00 	cmp.w	sl, #0
 800542c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005430:	dd74      	ble.n	800551c <_dtoa_r+0x36c>
 8005432:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <_dtoa_r+0x32c>)
 8005434:	f00a 030f 	and.w	r3, sl, #15
 8005438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800543c:	ed93 7b00 	vldr	d7, [r3]
 8005440:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005444:	06f0      	lsls	r0, r6, #27
 8005446:	ed8d 7b08 	vstr	d7, [sp, #32]
 800544a:	d565      	bpl.n	8005518 <_dtoa_r+0x368>
 800544c:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <_dtoa_r+0x330>)
 800544e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005452:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005456:	f7fb fa01 	bl	800085c <__aeabi_ddiv>
 800545a:	e9cd 0100 	strd	r0, r1, [sp]
 800545e:	f006 060f 	and.w	r6, r6, #15
 8005462:	2503      	movs	r5, #3
 8005464:	4f1e      	ldr	r7, [pc, #120]	; (80054e0 <_dtoa_r+0x330>)
 8005466:	e04c      	b.n	8005502 <_dtoa_r+0x352>
 8005468:	2301      	movs	r3, #1
 800546a:	930a      	str	r3, [sp, #40]	; 0x28
 800546c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546e:	4453      	add	r3, sl
 8005470:	f103 0901 	add.w	r9, r3, #1
 8005474:	9302      	str	r3, [sp, #8]
 8005476:	464b      	mov	r3, r9
 8005478:	2b01      	cmp	r3, #1
 800547a:	bfb8      	it	lt
 800547c:	2301      	movlt	r3, #1
 800547e:	e7ba      	b.n	80053f6 <_dtoa_r+0x246>
 8005480:	2300      	movs	r3, #0
 8005482:	e7b2      	b.n	80053ea <_dtoa_r+0x23a>
 8005484:	2300      	movs	r3, #0
 8005486:	e7f0      	b.n	800546a <_dtoa_r+0x2ba>
 8005488:	2501      	movs	r5, #1
 800548a:	2300      	movs	r3, #0
 800548c:	9306      	str	r3, [sp, #24]
 800548e:	950a      	str	r5, [sp, #40]	; 0x28
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	9302      	str	r3, [sp, #8]
 8005496:	4699      	mov	r9, r3
 8005498:	2200      	movs	r2, #0
 800549a:	2312      	movs	r3, #18
 800549c:	920b      	str	r2, [sp, #44]	; 0x2c
 800549e:	e7aa      	b.n	80053f6 <_dtoa_r+0x246>
 80054a0:	2301      	movs	r3, #1
 80054a2:	930a      	str	r3, [sp, #40]	; 0x28
 80054a4:	e7f4      	b.n	8005490 <_dtoa_r+0x2e0>
 80054a6:	2301      	movs	r3, #1
 80054a8:	9302      	str	r3, [sp, #8]
 80054aa:	4699      	mov	r9, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	e7f5      	b.n	800549c <_dtoa_r+0x2ec>
 80054b0:	3101      	adds	r1, #1
 80054b2:	6071      	str	r1, [r6, #4]
 80054b4:	0052      	lsls	r2, r2, #1
 80054b6:	e7a2      	b.n	80053fe <_dtoa_r+0x24e>
 80054b8:	636f4361 	.word	0x636f4361
 80054bc:	3fd287a7 	.word	0x3fd287a7
 80054c0:	8b60c8b3 	.word	0x8b60c8b3
 80054c4:	3fc68a28 	.word	0x3fc68a28
 80054c8:	509f79fb 	.word	0x509f79fb
 80054cc:	3fd34413 	.word	0x3fd34413
 80054d0:	7ff00000 	.word	0x7ff00000
 80054d4:	08007191 	.word	0x08007191
 80054d8:	3ff80000 	.word	0x3ff80000
 80054dc:	08007250 	.word	0x08007250
 80054e0:	08007228 	.word	0x08007228
 80054e4:	080071bd 	.word	0x080071bd
 80054e8:	07f1      	lsls	r1, r6, #31
 80054ea:	d508      	bpl.n	80054fe <_dtoa_r+0x34e>
 80054ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f4:	f7fb f888 	bl	8000608 <__aeabi_dmul>
 80054f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054fc:	3501      	adds	r5, #1
 80054fe:	1076      	asrs	r6, r6, #1
 8005500:	3708      	adds	r7, #8
 8005502:	2e00      	cmp	r6, #0
 8005504:	d1f0      	bne.n	80054e8 <_dtoa_r+0x338>
 8005506:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800550a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800550e:	f7fb f9a5 	bl	800085c <__aeabi_ddiv>
 8005512:	e9cd 0100 	strd	r0, r1, [sp]
 8005516:	e01a      	b.n	800554e <_dtoa_r+0x39e>
 8005518:	2502      	movs	r5, #2
 800551a:	e7a3      	b.n	8005464 <_dtoa_r+0x2b4>
 800551c:	f000 80a0 	beq.w	8005660 <_dtoa_r+0x4b0>
 8005520:	f1ca 0600 	rsb	r6, sl, #0
 8005524:	4b9f      	ldr	r3, [pc, #636]	; (80057a4 <_dtoa_r+0x5f4>)
 8005526:	4fa0      	ldr	r7, [pc, #640]	; (80057a8 <_dtoa_r+0x5f8>)
 8005528:	f006 020f 	and.w	r2, r6, #15
 800552c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005538:	f7fb f866 	bl	8000608 <__aeabi_dmul>
 800553c:	e9cd 0100 	strd	r0, r1, [sp]
 8005540:	1136      	asrs	r6, r6, #4
 8005542:	2300      	movs	r3, #0
 8005544:	2502      	movs	r5, #2
 8005546:	2e00      	cmp	r6, #0
 8005548:	d17f      	bne.n	800564a <_dtoa_r+0x49a>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1e1      	bne.n	8005512 <_dtoa_r+0x362>
 800554e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8087 	beq.w	8005664 <_dtoa_r+0x4b4>
 8005556:	e9dd 6700 	ldrd	r6, r7, [sp]
 800555a:	2200      	movs	r2, #0
 800555c:	4b93      	ldr	r3, [pc, #588]	; (80057ac <_dtoa_r+0x5fc>)
 800555e:	4630      	mov	r0, r6
 8005560:	4639      	mov	r1, r7
 8005562:	f7fb fac3 	bl	8000aec <__aeabi_dcmplt>
 8005566:	2800      	cmp	r0, #0
 8005568:	d07c      	beq.n	8005664 <_dtoa_r+0x4b4>
 800556a:	f1b9 0f00 	cmp.w	r9, #0
 800556e:	d079      	beq.n	8005664 <_dtoa_r+0x4b4>
 8005570:	9b02      	ldr	r3, [sp, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	dd35      	ble.n	80055e2 <_dtoa_r+0x432>
 8005576:	f10a 33ff 	add.w	r3, sl, #4294967295
 800557a:	9308      	str	r3, [sp, #32]
 800557c:	4639      	mov	r1, r7
 800557e:	2200      	movs	r2, #0
 8005580:	4b8b      	ldr	r3, [pc, #556]	; (80057b0 <_dtoa_r+0x600>)
 8005582:	4630      	mov	r0, r6
 8005584:	f7fb f840 	bl	8000608 <__aeabi_dmul>
 8005588:	e9cd 0100 	strd	r0, r1, [sp]
 800558c:	9f02      	ldr	r7, [sp, #8]
 800558e:	3501      	adds	r5, #1
 8005590:	4628      	mov	r0, r5
 8005592:	f7fa ffcf 	bl	8000534 <__aeabi_i2d>
 8005596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800559a:	f7fb f835 	bl	8000608 <__aeabi_dmul>
 800559e:	2200      	movs	r2, #0
 80055a0:	4b84      	ldr	r3, [pc, #528]	; (80057b4 <_dtoa_r+0x604>)
 80055a2:	f7fa fe7b 	bl	800029c <__adddf3>
 80055a6:	4605      	mov	r5, r0
 80055a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80055ac:	2f00      	cmp	r7, #0
 80055ae:	d15d      	bne.n	800566c <_dtoa_r+0x4bc>
 80055b0:	2200      	movs	r2, #0
 80055b2:	4b81      	ldr	r3, [pc, #516]	; (80057b8 <_dtoa_r+0x608>)
 80055b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055b8:	f7fa fe6e 	bl	8000298 <__aeabi_dsub>
 80055bc:	462a      	mov	r2, r5
 80055be:	4633      	mov	r3, r6
 80055c0:	e9cd 0100 	strd	r0, r1, [sp]
 80055c4:	f7fb fab0 	bl	8000b28 <__aeabi_dcmpgt>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	f040 8288 	bne.w	8005ade <_dtoa_r+0x92e>
 80055ce:	462a      	mov	r2, r5
 80055d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80055d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055d8:	f7fb fa88 	bl	8000aec <__aeabi_dcmplt>
 80055dc:	2800      	cmp	r0, #0
 80055de:	f040 827c 	bne.w	8005ada <_dtoa_r+0x92a>
 80055e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055e6:	e9cd 2300 	strd	r2, r3, [sp]
 80055ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f2c0 8150 	blt.w	8005892 <_dtoa_r+0x6e2>
 80055f2:	f1ba 0f0e 	cmp.w	sl, #14
 80055f6:	f300 814c 	bgt.w	8005892 <_dtoa_r+0x6e2>
 80055fa:	4b6a      	ldr	r3, [pc, #424]	; (80057a4 <_dtoa_r+0x5f4>)
 80055fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005600:	ed93 7b00 	vldr	d7, [r3]
 8005604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005606:	2b00      	cmp	r3, #0
 8005608:	ed8d 7b02 	vstr	d7, [sp, #8]
 800560c:	f280 80d8 	bge.w	80057c0 <_dtoa_r+0x610>
 8005610:	f1b9 0f00 	cmp.w	r9, #0
 8005614:	f300 80d4 	bgt.w	80057c0 <_dtoa_r+0x610>
 8005618:	f040 825e 	bne.w	8005ad8 <_dtoa_r+0x928>
 800561c:	2200      	movs	r2, #0
 800561e:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <_dtoa_r+0x608>)
 8005620:	ec51 0b17 	vmov	r0, r1, d7
 8005624:	f7fa fff0 	bl	8000608 <__aeabi_dmul>
 8005628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800562c:	f7fb fa72 	bl	8000b14 <__aeabi_dcmpge>
 8005630:	464f      	mov	r7, r9
 8005632:	464e      	mov	r6, r9
 8005634:	2800      	cmp	r0, #0
 8005636:	f040 8234 	bne.w	8005aa2 <_dtoa_r+0x8f2>
 800563a:	2331      	movs	r3, #49	; 0x31
 800563c:	f10b 0501 	add.w	r5, fp, #1
 8005640:	f88b 3000 	strb.w	r3, [fp]
 8005644:	f10a 0a01 	add.w	sl, sl, #1
 8005648:	e22f      	b.n	8005aaa <_dtoa_r+0x8fa>
 800564a:	07f2      	lsls	r2, r6, #31
 800564c:	d505      	bpl.n	800565a <_dtoa_r+0x4aa>
 800564e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005652:	f7fa ffd9 	bl	8000608 <__aeabi_dmul>
 8005656:	3501      	adds	r5, #1
 8005658:	2301      	movs	r3, #1
 800565a:	1076      	asrs	r6, r6, #1
 800565c:	3708      	adds	r7, #8
 800565e:	e772      	b.n	8005546 <_dtoa_r+0x396>
 8005660:	2502      	movs	r5, #2
 8005662:	e774      	b.n	800554e <_dtoa_r+0x39e>
 8005664:	f8cd a020 	str.w	sl, [sp, #32]
 8005668:	464f      	mov	r7, r9
 800566a:	e791      	b.n	8005590 <_dtoa_r+0x3e0>
 800566c:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <_dtoa_r+0x5f4>)
 800566e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005672:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005678:	2b00      	cmp	r3, #0
 800567a:	d047      	beq.n	800570c <_dtoa_r+0x55c>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	2000      	movs	r0, #0
 8005682:	494e      	ldr	r1, [pc, #312]	; (80057bc <_dtoa_r+0x60c>)
 8005684:	f7fb f8ea 	bl	800085c <__aeabi_ddiv>
 8005688:	462a      	mov	r2, r5
 800568a:	4633      	mov	r3, r6
 800568c:	f7fa fe04 	bl	8000298 <__aeabi_dsub>
 8005690:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005694:	465d      	mov	r5, fp
 8005696:	e9dd 0100 	ldrd	r0, r1, [sp]
 800569a:	f7fb fa65 	bl	8000b68 <__aeabi_d2iz>
 800569e:	4606      	mov	r6, r0
 80056a0:	f7fa ff48 	bl	8000534 <__aeabi_i2d>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ac:	f7fa fdf4 	bl	8000298 <__aeabi_dsub>
 80056b0:	3630      	adds	r6, #48	; 0x30
 80056b2:	f805 6b01 	strb.w	r6, [r5], #1
 80056b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056ba:	e9cd 0100 	strd	r0, r1, [sp]
 80056be:	f7fb fa15 	bl	8000aec <__aeabi_dcmplt>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d163      	bne.n	800578e <_dtoa_r+0x5de>
 80056c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056ca:	2000      	movs	r0, #0
 80056cc:	4937      	ldr	r1, [pc, #220]	; (80057ac <_dtoa_r+0x5fc>)
 80056ce:	f7fa fde3 	bl	8000298 <__aeabi_dsub>
 80056d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056d6:	f7fb fa09 	bl	8000aec <__aeabi_dcmplt>
 80056da:	2800      	cmp	r0, #0
 80056dc:	f040 80b7 	bne.w	800584e <_dtoa_r+0x69e>
 80056e0:	eba5 030b 	sub.w	r3, r5, fp
 80056e4:	429f      	cmp	r7, r3
 80056e6:	f77f af7c 	ble.w	80055e2 <_dtoa_r+0x432>
 80056ea:	2200      	movs	r2, #0
 80056ec:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <_dtoa_r+0x600>)
 80056ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056f2:	f7fa ff89 	bl	8000608 <__aeabi_dmul>
 80056f6:	2200      	movs	r2, #0
 80056f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80056fc:	4b2c      	ldr	r3, [pc, #176]	; (80057b0 <_dtoa_r+0x600>)
 80056fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005702:	f7fa ff81 	bl	8000608 <__aeabi_dmul>
 8005706:	e9cd 0100 	strd	r0, r1, [sp]
 800570a:	e7c4      	b.n	8005696 <_dtoa_r+0x4e6>
 800570c:	462a      	mov	r2, r5
 800570e:	4633      	mov	r3, r6
 8005710:	f7fa ff7a 	bl	8000608 <__aeabi_dmul>
 8005714:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005718:	eb0b 0507 	add.w	r5, fp, r7
 800571c:	465e      	mov	r6, fp
 800571e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005722:	f7fb fa21 	bl	8000b68 <__aeabi_d2iz>
 8005726:	4607      	mov	r7, r0
 8005728:	f7fa ff04 	bl	8000534 <__aeabi_i2d>
 800572c:	3730      	adds	r7, #48	; 0x30
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005736:	f7fa fdaf 	bl	8000298 <__aeabi_dsub>
 800573a:	f806 7b01 	strb.w	r7, [r6], #1
 800573e:	42ae      	cmp	r6, r5
 8005740:	e9cd 0100 	strd	r0, r1, [sp]
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	d126      	bne.n	8005798 <_dtoa_r+0x5e8>
 800574a:	4b1c      	ldr	r3, [pc, #112]	; (80057bc <_dtoa_r+0x60c>)
 800574c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005750:	f7fa fda4 	bl	800029c <__adddf3>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800575c:	f7fb f9e4 	bl	8000b28 <__aeabi_dcmpgt>
 8005760:	2800      	cmp	r0, #0
 8005762:	d174      	bne.n	800584e <_dtoa_r+0x69e>
 8005764:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005768:	2000      	movs	r0, #0
 800576a:	4914      	ldr	r1, [pc, #80]	; (80057bc <_dtoa_r+0x60c>)
 800576c:	f7fa fd94 	bl	8000298 <__aeabi_dsub>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005778:	f7fb f9b8 	bl	8000aec <__aeabi_dcmplt>
 800577c:	2800      	cmp	r0, #0
 800577e:	f43f af30 	beq.w	80055e2 <_dtoa_r+0x432>
 8005782:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005786:	2b30      	cmp	r3, #48	; 0x30
 8005788:	f105 32ff 	add.w	r2, r5, #4294967295
 800578c:	d002      	beq.n	8005794 <_dtoa_r+0x5e4>
 800578e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005792:	e04a      	b.n	800582a <_dtoa_r+0x67a>
 8005794:	4615      	mov	r5, r2
 8005796:	e7f4      	b.n	8005782 <_dtoa_r+0x5d2>
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <_dtoa_r+0x600>)
 800579a:	f7fa ff35 	bl	8000608 <__aeabi_dmul>
 800579e:	e9cd 0100 	strd	r0, r1, [sp]
 80057a2:	e7bc      	b.n	800571e <_dtoa_r+0x56e>
 80057a4:	08007250 	.word	0x08007250
 80057a8:	08007228 	.word	0x08007228
 80057ac:	3ff00000 	.word	0x3ff00000
 80057b0:	40240000 	.word	0x40240000
 80057b4:	401c0000 	.word	0x401c0000
 80057b8:	40140000 	.word	0x40140000
 80057bc:	3fe00000 	.word	0x3fe00000
 80057c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80057c4:	465d      	mov	r5, fp
 80057c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ca:	4630      	mov	r0, r6
 80057cc:	4639      	mov	r1, r7
 80057ce:	f7fb f845 	bl	800085c <__aeabi_ddiv>
 80057d2:	f7fb f9c9 	bl	8000b68 <__aeabi_d2iz>
 80057d6:	4680      	mov	r8, r0
 80057d8:	f7fa feac 	bl	8000534 <__aeabi_i2d>
 80057dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057e0:	f7fa ff12 	bl	8000608 <__aeabi_dmul>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4630      	mov	r0, r6
 80057ea:	4639      	mov	r1, r7
 80057ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80057f0:	f7fa fd52 	bl	8000298 <__aeabi_dsub>
 80057f4:	f805 6b01 	strb.w	r6, [r5], #1
 80057f8:	eba5 060b 	sub.w	r6, r5, fp
 80057fc:	45b1      	cmp	r9, r6
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	d139      	bne.n	8005878 <_dtoa_r+0x6c8>
 8005804:	f7fa fd4a 	bl	800029c <__adddf3>
 8005808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800580c:	4606      	mov	r6, r0
 800580e:	460f      	mov	r7, r1
 8005810:	f7fb f98a 	bl	8000b28 <__aeabi_dcmpgt>
 8005814:	b9c8      	cbnz	r0, 800584a <_dtoa_r+0x69a>
 8005816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800581a:	4630      	mov	r0, r6
 800581c:	4639      	mov	r1, r7
 800581e:	f7fb f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005822:	b110      	cbz	r0, 800582a <_dtoa_r+0x67a>
 8005824:	f018 0f01 	tst.w	r8, #1
 8005828:	d10f      	bne.n	800584a <_dtoa_r+0x69a>
 800582a:	9904      	ldr	r1, [sp, #16]
 800582c:	4620      	mov	r0, r4
 800582e:	f000 fb96 	bl	8005f5e <_Bfree>
 8005832:	2300      	movs	r3, #0
 8005834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005836:	702b      	strb	r3, [r5, #0]
 8005838:	f10a 0301 	add.w	r3, sl, #1
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8241 	beq.w	8005cc8 <_dtoa_r+0xb18>
 8005846:	601d      	str	r5, [r3, #0]
 8005848:	e23e      	b.n	8005cc8 <_dtoa_r+0xb18>
 800584a:	f8cd a020 	str.w	sl, [sp, #32]
 800584e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005852:	2a39      	cmp	r2, #57	; 0x39
 8005854:	f105 33ff 	add.w	r3, r5, #4294967295
 8005858:	d108      	bne.n	800586c <_dtoa_r+0x6bc>
 800585a:	459b      	cmp	fp, r3
 800585c:	d10a      	bne.n	8005874 <_dtoa_r+0x6c4>
 800585e:	9b08      	ldr	r3, [sp, #32]
 8005860:	3301      	adds	r3, #1
 8005862:	9308      	str	r3, [sp, #32]
 8005864:	2330      	movs	r3, #48	; 0x30
 8005866:	f88b 3000 	strb.w	r3, [fp]
 800586a:	465b      	mov	r3, fp
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	3201      	adds	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	e78c      	b.n	800578e <_dtoa_r+0x5de>
 8005874:	461d      	mov	r5, r3
 8005876:	e7ea      	b.n	800584e <_dtoa_r+0x69e>
 8005878:	2200      	movs	r2, #0
 800587a:	4b9b      	ldr	r3, [pc, #620]	; (8005ae8 <_dtoa_r+0x938>)
 800587c:	f7fa fec4 	bl	8000608 <__aeabi_dmul>
 8005880:	2200      	movs	r2, #0
 8005882:	2300      	movs	r3, #0
 8005884:	4606      	mov	r6, r0
 8005886:	460f      	mov	r7, r1
 8005888:	f7fb f926 	bl	8000ad8 <__aeabi_dcmpeq>
 800588c:	2800      	cmp	r0, #0
 800588e:	d09a      	beq.n	80057c6 <_dtoa_r+0x616>
 8005890:	e7cb      	b.n	800582a <_dtoa_r+0x67a>
 8005892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005894:	2a00      	cmp	r2, #0
 8005896:	f000 808b 	beq.w	80059b0 <_dtoa_r+0x800>
 800589a:	9a06      	ldr	r2, [sp, #24]
 800589c:	2a01      	cmp	r2, #1
 800589e:	dc6e      	bgt.n	800597e <_dtoa_r+0x7ce>
 80058a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	d067      	beq.n	8005976 <_dtoa_r+0x7c6>
 80058a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058aa:	9f07      	ldr	r7, [sp, #28]
 80058ac:	9d05      	ldr	r5, [sp, #20]
 80058ae:	9a05      	ldr	r2, [sp, #20]
 80058b0:	2101      	movs	r1, #1
 80058b2:	441a      	add	r2, r3
 80058b4:	4620      	mov	r0, r4
 80058b6:	9205      	str	r2, [sp, #20]
 80058b8:	4498      	add	r8, r3
 80058ba:	f000 fbf0 	bl	800609e <__i2b>
 80058be:	4606      	mov	r6, r0
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	dd0c      	ble.n	80058de <_dtoa_r+0x72e>
 80058c4:	f1b8 0f00 	cmp.w	r8, #0
 80058c8:	dd09      	ble.n	80058de <_dtoa_r+0x72e>
 80058ca:	4545      	cmp	r5, r8
 80058cc:	9a05      	ldr	r2, [sp, #20]
 80058ce:	462b      	mov	r3, r5
 80058d0:	bfa8      	it	ge
 80058d2:	4643      	movge	r3, r8
 80058d4:	1ad2      	subs	r2, r2, r3
 80058d6:	9205      	str	r2, [sp, #20]
 80058d8:	1aed      	subs	r5, r5, r3
 80058da:	eba8 0803 	sub.w	r8, r8, r3
 80058de:	9b07      	ldr	r3, [sp, #28]
 80058e0:	b1eb      	cbz	r3, 800591e <_dtoa_r+0x76e>
 80058e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d067      	beq.n	80059b8 <_dtoa_r+0x808>
 80058e8:	b18f      	cbz	r7, 800590e <_dtoa_r+0x75e>
 80058ea:	4631      	mov	r1, r6
 80058ec:	463a      	mov	r2, r7
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fc74 	bl	80061dc <__pow5mult>
 80058f4:	9a04      	ldr	r2, [sp, #16]
 80058f6:	4601      	mov	r1, r0
 80058f8:	4606      	mov	r6, r0
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fbd8 	bl	80060b0 <__multiply>
 8005900:	9904      	ldr	r1, [sp, #16]
 8005902:	9008      	str	r0, [sp, #32]
 8005904:	4620      	mov	r0, r4
 8005906:	f000 fb2a 	bl	8005f5e <_Bfree>
 800590a:	9b08      	ldr	r3, [sp, #32]
 800590c:	9304      	str	r3, [sp, #16]
 800590e:	9b07      	ldr	r3, [sp, #28]
 8005910:	1bda      	subs	r2, r3, r7
 8005912:	d004      	beq.n	800591e <_dtoa_r+0x76e>
 8005914:	9904      	ldr	r1, [sp, #16]
 8005916:	4620      	mov	r0, r4
 8005918:	f000 fc60 	bl	80061dc <__pow5mult>
 800591c:	9004      	str	r0, [sp, #16]
 800591e:	2101      	movs	r1, #1
 8005920:	4620      	mov	r0, r4
 8005922:	f000 fbbc 	bl	800609e <__i2b>
 8005926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005928:	4607      	mov	r7, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 81d0 	beq.w	8005cd0 <_dtoa_r+0xb20>
 8005930:	461a      	mov	r2, r3
 8005932:	4601      	mov	r1, r0
 8005934:	4620      	mov	r0, r4
 8005936:	f000 fc51 	bl	80061dc <__pow5mult>
 800593a:	9b06      	ldr	r3, [sp, #24]
 800593c:	2b01      	cmp	r3, #1
 800593e:	4607      	mov	r7, r0
 8005940:	dc40      	bgt.n	80059c4 <_dtoa_r+0x814>
 8005942:	9b00      	ldr	r3, [sp, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d139      	bne.n	80059bc <_dtoa_r+0x80c>
 8005948:	9b01      	ldr	r3, [sp, #4]
 800594a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800594e:	2b00      	cmp	r3, #0
 8005950:	d136      	bne.n	80059c0 <_dtoa_r+0x810>
 8005952:	9b01      	ldr	r3, [sp, #4]
 8005954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005958:	0d1b      	lsrs	r3, r3, #20
 800595a:	051b      	lsls	r3, r3, #20
 800595c:	b12b      	cbz	r3, 800596a <_dtoa_r+0x7ba>
 800595e:	9b05      	ldr	r3, [sp, #20]
 8005960:	3301      	adds	r3, #1
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	f108 0801 	add.w	r8, r8, #1
 8005968:	2301      	movs	r3, #1
 800596a:	9307      	str	r3, [sp, #28]
 800596c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800596e:	2b00      	cmp	r3, #0
 8005970:	d12a      	bne.n	80059c8 <_dtoa_r+0x818>
 8005972:	2001      	movs	r0, #1
 8005974:	e030      	b.n	80059d8 <_dtoa_r+0x828>
 8005976:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005978:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800597c:	e795      	b.n	80058aa <_dtoa_r+0x6fa>
 800597e:	9b07      	ldr	r3, [sp, #28]
 8005980:	f109 37ff 	add.w	r7, r9, #4294967295
 8005984:	42bb      	cmp	r3, r7
 8005986:	bfbf      	itttt	lt
 8005988:	9b07      	ldrlt	r3, [sp, #28]
 800598a:	9707      	strlt	r7, [sp, #28]
 800598c:	1afa      	sublt	r2, r7, r3
 800598e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005990:	bfbb      	ittet	lt
 8005992:	189b      	addlt	r3, r3, r2
 8005994:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005996:	1bdf      	subge	r7, r3, r7
 8005998:	2700      	movlt	r7, #0
 800599a:	f1b9 0f00 	cmp.w	r9, #0
 800599e:	bfb5      	itete	lt
 80059a0:	9b05      	ldrlt	r3, [sp, #20]
 80059a2:	9d05      	ldrge	r5, [sp, #20]
 80059a4:	eba3 0509 	sublt.w	r5, r3, r9
 80059a8:	464b      	movge	r3, r9
 80059aa:	bfb8      	it	lt
 80059ac:	2300      	movlt	r3, #0
 80059ae:	e77e      	b.n	80058ae <_dtoa_r+0x6fe>
 80059b0:	9f07      	ldr	r7, [sp, #28]
 80059b2:	9d05      	ldr	r5, [sp, #20]
 80059b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80059b6:	e783      	b.n	80058c0 <_dtoa_r+0x710>
 80059b8:	9a07      	ldr	r2, [sp, #28]
 80059ba:	e7ab      	b.n	8005914 <_dtoa_r+0x764>
 80059bc:	2300      	movs	r3, #0
 80059be:	e7d4      	b.n	800596a <_dtoa_r+0x7ba>
 80059c0:	9b00      	ldr	r3, [sp, #0]
 80059c2:	e7d2      	b.n	800596a <_dtoa_r+0x7ba>
 80059c4:	2300      	movs	r3, #0
 80059c6:	9307      	str	r3, [sp, #28]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80059ce:	6918      	ldr	r0, [r3, #16]
 80059d0:	f000 fb17 	bl	8006002 <__hi0bits>
 80059d4:	f1c0 0020 	rsb	r0, r0, #32
 80059d8:	4440      	add	r0, r8
 80059da:	f010 001f 	ands.w	r0, r0, #31
 80059de:	d047      	beq.n	8005a70 <_dtoa_r+0x8c0>
 80059e0:	f1c0 0320 	rsb	r3, r0, #32
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	dd3b      	ble.n	8005a60 <_dtoa_r+0x8b0>
 80059e8:	9b05      	ldr	r3, [sp, #20]
 80059ea:	f1c0 001c 	rsb	r0, r0, #28
 80059ee:	4403      	add	r3, r0
 80059f0:	9305      	str	r3, [sp, #20]
 80059f2:	4405      	add	r5, r0
 80059f4:	4480      	add	r8, r0
 80059f6:	9b05      	ldr	r3, [sp, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dd05      	ble.n	8005a08 <_dtoa_r+0x858>
 80059fc:	461a      	mov	r2, r3
 80059fe:	9904      	ldr	r1, [sp, #16]
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 fc39 	bl	8006278 <__lshift>
 8005a06:	9004      	str	r0, [sp, #16]
 8005a08:	f1b8 0f00 	cmp.w	r8, #0
 8005a0c:	dd05      	ble.n	8005a1a <_dtoa_r+0x86a>
 8005a0e:	4639      	mov	r1, r7
 8005a10:	4642      	mov	r2, r8
 8005a12:	4620      	mov	r0, r4
 8005a14:	f000 fc30 	bl	8006278 <__lshift>
 8005a18:	4607      	mov	r7, r0
 8005a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a1c:	b353      	cbz	r3, 8005a74 <_dtoa_r+0x8c4>
 8005a1e:	4639      	mov	r1, r7
 8005a20:	9804      	ldr	r0, [sp, #16]
 8005a22:	f000 fc7d 	bl	8006320 <__mcmp>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	da24      	bge.n	8005a74 <_dtoa_r+0x8c4>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	220a      	movs	r2, #10
 8005a2e:	9904      	ldr	r1, [sp, #16]
 8005a30:	4620      	mov	r0, r4
 8005a32:	f000 faab 	bl	8005f8c <__multadd>
 8005a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a38:	9004      	str	r0, [sp, #16]
 8005a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 814d 	beq.w	8005cde <_dtoa_r+0xb2e>
 8005a44:	2300      	movs	r3, #0
 8005a46:	4631      	mov	r1, r6
 8005a48:	220a      	movs	r2, #10
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f000 fa9e 	bl	8005f8c <__multadd>
 8005a50:	9b02      	ldr	r3, [sp, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	4606      	mov	r6, r0
 8005a56:	dc4f      	bgt.n	8005af8 <_dtoa_r+0x948>
 8005a58:	9b06      	ldr	r3, [sp, #24]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	dd4c      	ble.n	8005af8 <_dtoa_r+0x948>
 8005a5e:	e011      	b.n	8005a84 <_dtoa_r+0x8d4>
 8005a60:	d0c9      	beq.n	80059f6 <_dtoa_r+0x846>
 8005a62:	9a05      	ldr	r2, [sp, #20]
 8005a64:	331c      	adds	r3, #28
 8005a66:	441a      	add	r2, r3
 8005a68:	9205      	str	r2, [sp, #20]
 8005a6a:	441d      	add	r5, r3
 8005a6c:	4498      	add	r8, r3
 8005a6e:	e7c2      	b.n	80059f6 <_dtoa_r+0x846>
 8005a70:	4603      	mov	r3, r0
 8005a72:	e7f6      	b.n	8005a62 <_dtoa_r+0x8b2>
 8005a74:	f1b9 0f00 	cmp.w	r9, #0
 8005a78:	dc38      	bgt.n	8005aec <_dtoa_r+0x93c>
 8005a7a:	9b06      	ldr	r3, [sp, #24]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	dd35      	ble.n	8005aec <_dtoa_r+0x93c>
 8005a80:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	b963      	cbnz	r3, 8005aa2 <_dtoa_r+0x8f2>
 8005a88:	4639      	mov	r1, r7
 8005a8a:	2205      	movs	r2, #5
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f000 fa7d 	bl	8005f8c <__multadd>
 8005a92:	4601      	mov	r1, r0
 8005a94:	4607      	mov	r7, r0
 8005a96:	9804      	ldr	r0, [sp, #16]
 8005a98:	f000 fc42 	bl	8006320 <__mcmp>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	f73f adcc 	bgt.w	800563a <_dtoa_r+0x48a>
 8005aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aa4:	465d      	mov	r5, fp
 8005aa6:	ea6f 0a03 	mvn.w	sl, r3
 8005aaa:	f04f 0900 	mov.w	r9, #0
 8005aae:	4639      	mov	r1, r7
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 fa54 	bl	8005f5e <_Bfree>
 8005ab6:	2e00      	cmp	r6, #0
 8005ab8:	f43f aeb7 	beq.w	800582a <_dtoa_r+0x67a>
 8005abc:	f1b9 0f00 	cmp.w	r9, #0
 8005ac0:	d005      	beq.n	8005ace <_dtoa_r+0x91e>
 8005ac2:	45b1      	cmp	r9, r6
 8005ac4:	d003      	beq.n	8005ace <_dtoa_r+0x91e>
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f000 fa48 	bl	8005f5e <_Bfree>
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 fa44 	bl	8005f5e <_Bfree>
 8005ad6:	e6a8      	b.n	800582a <_dtoa_r+0x67a>
 8005ad8:	2700      	movs	r7, #0
 8005ada:	463e      	mov	r6, r7
 8005adc:	e7e1      	b.n	8005aa2 <_dtoa_r+0x8f2>
 8005ade:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005ae2:	463e      	mov	r6, r7
 8005ae4:	e5a9      	b.n	800563a <_dtoa_r+0x48a>
 8005ae6:	bf00      	nop
 8005ae8:	40240000 	.word	0x40240000
 8005aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aee:	f8cd 9008 	str.w	r9, [sp, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80fa 	beq.w	8005cec <_dtoa_r+0xb3c>
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	dd05      	ble.n	8005b08 <_dtoa_r+0x958>
 8005afc:	4631      	mov	r1, r6
 8005afe:	462a      	mov	r2, r5
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 fbb9 	bl	8006278 <__lshift>
 8005b06:	4606      	mov	r6, r0
 8005b08:	9b07      	ldr	r3, [sp, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d04c      	beq.n	8005ba8 <_dtoa_r+0x9f8>
 8005b0e:	6871      	ldr	r1, [r6, #4]
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 f9f0 	bl	8005ef6 <_Balloc>
 8005b16:	6932      	ldr	r2, [r6, #16]
 8005b18:	3202      	adds	r2, #2
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	0092      	lsls	r2, r2, #2
 8005b1e:	f106 010c 	add.w	r1, r6, #12
 8005b22:	300c      	adds	r0, #12
 8005b24:	f000 f9dc 	bl	8005ee0 <memcpy>
 8005b28:	2201      	movs	r2, #1
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 fba3 	bl	8006278 <__lshift>
 8005b32:	9b00      	ldr	r3, [sp, #0]
 8005b34:	f8cd b014 	str.w	fp, [sp, #20]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	46b1      	mov	r9, r6
 8005b3e:	9307      	str	r3, [sp, #28]
 8005b40:	4606      	mov	r6, r0
 8005b42:	4639      	mov	r1, r7
 8005b44:	9804      	ldr	r0, [sp, #16]
 8005b46:	f7ff faa7 	bl	8005098 <quorem>
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b52:	9804      	ldr	r0, [sp, #16]
 8005b54:	f000 fbe4 	bl	8006320 <__mcmp>
 8005b58:	4632      	mov	r2, r6
 8005b5a:	9000      	str	r0, [sp, #0]
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 fbf8 	bl	8006354 <__mdiff>
 8005b64:	68c3      	ldr	r3, [r0, #12]
 8005b66:	4602      	mov	r2, r0
 8005b68:	bb03      	cbnz	r3, 8005bac <_dtoa_r+0x9fc>
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	9008      	str	r0, [sp, #32]
 8005b6e:	9804      	ldr	r0, [sp, #16]
 8005b70:	f000 fbd6 	bl	8006320 <__mcmp>
 8005b74:	9a08      	ldr	r2, [sp, #32]
 8005b76:	4603      	mov	r3, r0
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	9308      	str	r3, [sp, #32]
 8005b7e:	f000 f9ee 	bl	8005f5e <_Bfree>
 8005b82:	9b08      	ldr	r3, [sp, #32]
 8005b84:	b9a3      	cbnz	r3, 8005bb0 <_dtoa_r+0xa00>
 8005b86:	9a06      	ldr	r2, [sp, #24]
 8005b88:	b992      	cbnz	r2, 8005bb0 <_dtoa_r+0xa00>
 8005b8a:	9a07      	ldr	r2, [sp, #28]
 8005b8c:	b982      	cbnz	r2, 8005bb0 <_dtoa_r+0xa00>
 8005b8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b92:	d029      	beq.n	8005be8 <_dtoa_r+0xa38>
 8005b94:	9b00      	ldr	r3, [sp, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dd01      	ble.n	8005b9e <_dtoa_r+0x9ee>
 8005b9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005b9e:	9b05      	ldr	r3, [sp, #20]
 8005ba0:	1c5d      	adds	r5, r3, #1
 8005ba2:	f883 8000 	strb.w	r8, [r3]
 8005ba6:	e782      	b.n	8005aae <_dtoa_r+0x8fe>
 8005ba8:	4630      	mov	r0, r6
 8005baa:	e7c2      	b.n	8005b32 <_dtoa_r+0x982>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e7e3      	b.n	8005b78 <_dtoa_r+0x9c8>
 8005bb0:	9a00      	ldr	r2, [sp, #0]
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	db04      	blt.n	8005bc0 <_dtoa_r+0xa10>
 8005bb6:	d125      	bne.n	8005c04 <_dtoa_r+0xa54>
 8005bb8:	9a06      	ldr	r2, [sp, #24]
 8005bba:	bb1a      	cbnz	r2, 8005c04 <_dtoa_r+0xa54>
 8005bbc:	9a07      	ldr	r2, [sp, #28]
 8005bbe:	bb0a      	cbnz	r2, 8005c04 <_dtoa_r+0xa54>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	ddec      	ble.n	8005b9e <_dtoa_r+0x9ee>
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	9904      	ldr	r1, [sp, #16]
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 fb55 	bl	8006278 <__lshift>
 8005bce:	4639      	mov	r1, r7
 8005bd0:	9004      	str	r0, [sp, #16]
 8005bd2:	f000 fba5 	bl	8006320 <__mcmp>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	dc03      	bgt.n	8005be2 <_dtoa_r+0xa32>
 8005bda:	d1e0      	bne.n	8005b9e <_dtoa_r+0x9ee>
 8005bdc:	f018 0f01 	tst.w	r8, #1
 8005be0:	d0dd      	beq.n	8005b9e <_dtoa_r+0x9ee>
 8005be2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005be6:	d1d8      	bne.n	8005b9a <_dtoa_r+0x9ea>
 8005be8:	9b05      	ldr	r3, [sp, #20]
 8005bea:	9a05      	ldr	r2, [sp, #20]
 8005bec:	1c5d      	adds	r5, r3, #1
 8005bee:	2339      	movs	r3, #57	; 0x39
 8005bf0:	7013      	strb	r3, [r2, #0]
 8005bf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bf6:	2b39      	cmp	r3, #57	; 0x39
 8005bf8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005bfc:	d04f      	beq.n	8005c9e <_dtoa_r+0xaee>
 8005bfe:	3301      	adds	r3, #1
 8005c00:	7013      	strb	r3, [r2, #0]
 8005c02:	e754      	b.n	8005aae <_dtoa_r+0x8fe>
 8005c04:	9a05      	ldr	r2, [sp, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f102 0501 	add.w	r5, r2, #1
 8005c0c:	dd06      	ble.n	8005c1c <_dtoa_r+0xa6c>
 8005c0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c12:	d0e9      	beq.n	8005be8 <_dtoa_r+0xa38>
 8005c14:	f108 0801 	add.w	r8, r8, #1
 8005c18:	9b05      	ldr	r3, [sp, #20]
 8005c1a:	e7c2      	b.n	8005ba2 <_dtoa_r+0x9f2>
 8005c1c:	9a02      	ldr	r2, [sp, #8]
 8005c1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c22:	eba5 030b 	sub.w	r3, r5, fp
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d021      	beq.n	8005c6e <_dtoa_r+0xabe>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	220a      	movs	r2, #10
 8005c2e:	9904      	ldr	r1, [sp, #16]
 8005c30:	4620      	mov	r0, r4
 8005c32:	f000 f9ab 	bl	8005f8c <__multadd>
 8005c36:	45b1      	cmp	r9, r6
 8005c38:	9004      	str	r0, [sp, #16]
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	f04f 020a 	mov.w	r2, #10
 8005c42:	4649      	mov	r1, r9
 8005c44:	4620      	mov	r0, r4
 8005c46:	d105      	bne.n	8005c54 <_dtoa_r+0xaa4>
 8005c48:	f000 f9a0 	bl	8005f8c <__multadd>
 8005c4c:	4681      	mov	r9, r0
 8005c4e:	4606      	mov	r6, r0
 8005c50:	9505      	str	r5, [sp, #20]
 8005c52:	e776      	b.n	8005b42 <_dtoa_r+0x992>
 8005c54:	f000 f99a 	bl	8005f8c <__multadd>
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4681      	mov	r9, r0
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	220a      	movs	r2, #10
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 f993 	bl	8005f8c <__multadd>
 8005c66:	4606      	mov	r6, r0
 8005c68:	e7f2      	b.n	8005c50 <_dtoa_r+0xaa0>
 8005c6a:	f04f 0900 	mov.w	r9, #0
 8005c6e:	2201      	movs	r2, #1
 8005c70:	9904      	ldr	r1, [sp, #16]
 8005c72:	4620      	mov	r0, r4
 8005c74:	f000 fb00 	bl	8006278 <__lshift>
 8005c78:	4639      	mov	r1, r7
 8005c7a:	9004      	str	r0, [sp, #16]
 8005c7c:	f000 fb50 	bl	8006320 <__mcmp>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	dcb6      	bgt.n	8005bf2 <_dtoa_r+0xa42>
 8005c84:	d102      	bne.n	8005c8c <_dtoa_r+0xadc>
 8005c86:	f018 0f01 	tst.w	r8, #1
 8005c8a:	d1b2      	bne.n	8005bf2 <_dtoa_r+0xa42>
 8005c8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c90:	2b30      	cmp	r3, #48	; 0x30
 8005c92:	f105 32ff 	add.w	r2, r5, #4294967295
 8005c96:	f47f af0a 	bne.w	8005aae <_dtoa_r+0x8fe>
 8005c9a:	4615      	mov	r5, r2
 8005c9c:	e7f6      	b.n	8005c8c <_dtoa_r+0xadc>
 8005c9e:	4593      	cmp	fp, r2
 8005ca0:	d105      	bne.n	8005cae <_dtoa_r+0xafe>
 8005ca2:	2331      	movs	r3, #49	; 0x31
 8005ca4:	f10a 0a01 	add.w	sl, sl, #1
 8005ca8:	f88b 3000 	strb.w	r3, [fp]
 8005cac:	e6ff      	b.n	8005aae <_dtoa_r+0x8fe>
 8005cae:	4615      	mov	r5, r2
 8005cb0:	e79f      	b.n	8005bf2 <_dtoa_r+0xa42>
 8005cb2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005d18 <_dtoa_r+0xb68>
 8005cb6:	e007      	b.n	8005cc8 <_dtoa_r+0xb18>
 8005cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cba:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005d1c <_dtoa_r+0xb6c>
 8005cbe:	b11b      	cbz	r3, 8005cc8 <_dtoa_r+0xb18>
 8005cc0:	f10b 0308 	add.w	r3, fp, #8
 8005cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4658      	mov	r0, fp
 8005cca:	b017      	add	sp, #92	; 0x5c
 8005ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd0:	9b06      	ldr	r3, [sp, #24]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	f77f ae35 	ble.w	8005942 <_dtoa_r+0x792>
 8005cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cda:	9307      	str	r3, [sp, #28]
 8005cdc:	e649      	b.n	8005972 <_dtoa_r+0x7c2>
 8005cde:	9b02      	ldr	r3, [sp, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dc03      	bgt.n	8005cec <_dtoa_r+0xb3c>
 8005ce4:	9b06      	ldr	r3, [sp, #24]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	f73f aecc 	bgt.w	8005a84 <_dtoa_r+0x8d4>
 8005cec:	465d      	mov	r5, fp
 8005cee:	4639      	mov	r1, r7
 8005cf0:	9804      	ldr	r0, [sp, #16]
 8005cf2:	f7ff f9d1 	bl	8005098 <quorem>
 8005cf6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005cfa:	f805 8b01 	strb.w	r8, [r5], #1
 8005cfe:	9a02      	ldr	r2, [sp, #8]
 8005d00:	eba5 030b 	sub.w	r3, r5, fp
 8005d04:	429a      	cmp	r2, r3
 8005d06:	ddb0      	ble.n	8005c6a <_dtoa_r+0xaba>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	220a      	movs	r2, #10
 8005d0c:	9904      	ldr	r1, [sp, #16]
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f000 f93c 	bl	8005f8c <__multadd>
 8005d14:	9004      	str	r0, [sp, #16]
 8005d16:	e7ea      	b.n	8005cee <_dtoa_r+0xb3e>
 8005d18:	08007190 	.word	0x08007190
 8005d1c:	080071b4 	.word	0x080071b4

08005d20 <std>:
 8005d20:	2300      	movs	r3, #0
 8005d22:	b510      	push	{r4, lr}
 8005d24:	4604      	mov	r4, r0
 8005d26:	e9c0 3300 	strd	r3, r3, [r0]
 8005d2a:	6083      	str	r3, [r0, #8]
 8005d2c:	8181      	strh	r1, [r0, #12]
 8005d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d30:	81c2      	strh	r2, [r0, #14]
 8005d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d36:	6183      	str	r3, [r0, #24]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	305c      	adds	r0, #92	; 0x5c
 8005d3e:	f7fe fd2f 	bl	80047a0 <memset>
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <std+0x38>)
 8005d44:	6263      	str	r3, [r4, #36]	; 0x24
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <std+0x3c>)
 8005d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <std+0x40>)
 8005d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <std+0x44>)
 8005d50:	6224      	str	r4, [r4, #32]
 8005d52:	6323      	str	r3, [r4, #48]	; 0x30
 8005d54:	bd10      	pop	{r4, pc}
 8005d56:	bf00      	nop
 8005d58:	080068b9 	.word	0x080068b9
 8005d5c:	080068db 	.word	0x080068db
 8005d60:	08006913 	.word	0x08006913
 8005d64:	08006937 	.word	0x08006937

08005d68 <_cleanup_r>:
 8005d68:	4901      	ldr	r1, [pc, #4]	; (8005d70 <_cleanup_r+0x8>)
 8005d6a:	f000 b885 	b.w	8005e78 <_fwalk_reent>
 8005d6e:	bf00      	nop
 8005d70:	08006c11 	.word	0x08006c11

08005d74 <__sfmoreglue>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	1e4a      	subs	r2, r1, #1
 8005d78:	2568      	movs	r5, #104	; 0x68
 8005d7a:	4355      	muls	r5, r2
 8005d7c:	460e      	mov	r6, r1
 8005d7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d82:	f000 fbef 	bl	8006564 <_malloc_r>
 8005d86:	4604      	mov	r4, r0
 8005d88:	b140      	cbz	r0, 8005d9c <__sfmoreglue+0x28>
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	e9c0 1600 	strd	r1, r6, [r0]
 8005d90:	300c      	adds	r0, #12
 8005d92:	60a0      	str	r0, [r4, #8]
 8005d94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d98:	f7fe fd02 	bl	80047a0 <memset>
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}

08005da0 <__sinit>:
 8005da0:	6983      	ldr	r3, [r0, #24]
 8005da2:	b510      	push	{r4, lr}
 8005da4:	4604      	mov	r4, r0
 8005da6:	bb33      	cbnz	r3, 8005df6 <__sinit+0x56>
 8005da8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005dac:	6503      	str	r3, [r0, #80]	; 0x50
 8005dae:	4b12      	ldr	r3, [pc, #72]	; (8005df8 <__sinit+0x58>)
 8005db0:	4a12      	ldr	r2, [pc, #72]	; (8005dfc <__sinit+0x5c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6282      	str	r2, [r0, #40]	; 0x28
 8005db6:	4298      	cmp	r0, r3
 8005db8:	bf04      	itt	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	6183      	streq	r3, [r0, #24]
 8005dbe:	f000 f81f 	bl	8005e00 <__sfp>
 8005dc2:	6060      	str	r0, [r4, #4]
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 f81b 	bl	8005e00 <__sfp>
 8005dca:	60a0      	str	r0, [r4, #8]
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 f817 	bl	8005e00 <__sfp>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	60e0      	str	r0, [r4, #12]
 8005dd6:	2104      	movs	r1, #4
 8005dd8:	6860      	ldr	r0, [r4, #4]
 8005dda:	f7ff ffa1 	bl	8005d20 <std>
 8005dde:	2201      	movs	r2, #1
 8005de0:	2109      	movs	r1, #9
 8005de2:	68a0      	ldr	r0, [r4, #8]
 8005de4:	f7ff ff9c 	bl	8005d20 <std>
 8005de8:	2202      	movs	r2, #2
 8005dea:	2112      	movs	r1, #18
 8005dec:	68e0      	ldr	r0, [r4, #12]
 8005dee:	f7ff ff97 	bl	8005d20 <std>
 8005df2:	2301      	movs	r3, #1
 8005df4:	61a3      	str	r3, [r4, #24]
 8005df6:	bd10      	pop	{r4, pc}
 8005df8:	0800717c 	.word	0x0800717c
 8005dfc:	08005d69 	.word	0x08005d69

08005e00 <__sfp>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <__sfp+0x70>)
 8005e04:	681e      	ldr	r6, [r3, #0]
 8005e06:	69b3      	ldr	r3, [r6, #24]
 8005e08:	4607      	mov	r7, r0
 8005e0a:	b913      	cbnz	r3, 8005e12 <__sfp+0x12>
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7ff ffc7 	bl	8005da0 <__sinit>
 8005e12:	3648      	adds	r6, #72	; 0x48
 8005e14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	d503      	bpl.n	8005e24 <__sfp+0x24>
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	b133      	cbz	r3, 8005e2e <__sfp+0x2e>
 8005e20:	6836      	ldr	r6, [r6, #0]
 8005e22:	e7f7      	b.n	8005e14 <__sfp+0x14>
 8005e24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e28:	b16d      	cbz	r5, 8005e46 <__sfp+0x46>
 8005e2a:	3468      	adds	r4, #104	; 0x68
 8005e2c:	e7f4      	b.n	8005e18 <__sfp+0x18>
 8005e2e:	2104      	movs	r1, #4
 8005e30:	4638      	mov	r0, r7
 8005e32:	f7ff ff9f 	bl	8005d74 <__sfmoreglue>
 8005e36:	6030      	str	r0, [r6, #0]
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d1f1      	bne.n	8005e20 <__sfp+0x20>
 8005e3c:	230c      	movs	r3, #12
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4604      	mov	r4, r0
 8005e42:	4620      	mov	r0, r4
 8005e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e46:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <__sfp+0x74>)
 8005e48:	6665      	str	r5, [r4, #100]	; 0x64
 8005e4a:	e9c4 5500 	strd	r5, r5, [r4]
 8005e4e:	60a5      	str	r5, [r4, #8]
 8005e50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005e54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e60:	f7fe fc9e 	bl	80047a0 <memset>
 8005e64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e6c:	e7e9      	b.n	8005e42 <__sfp+0x42>
 8005e6e:	bf00      	nop
 8005e70:	0800717c 	.word	0x0800717c
 8005e74:	ffff0001 	.word	0xffff0001

08005e78 <_fwalk_reent>:
 8005e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	4689      	mov	r9, r1
 8005e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e84:	2600      	movs	r6, #0
 8005e86:	b914      	cbnz	r4, 8005e8e <_fwalk_reent+0x16>
 8005e88:	4630      	mov	r0, r6
 8005e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e92:	3f01      	subs	r7, #1
 8005e94:	d501      	bpl.n	8005e9a <_fwalk_reent+0x22>
 8005e96:	6824      	ldr	r4, [r4, #0]
 8005e98:	e7f5      	b.n	8005e86 <_fwalk_reent+0xe>
 8005e9a:	89ab      	ldrh	r3, [r5, #12]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d907      	bls.n	8005eb0 <_fwalk_reent+0x38>
 8005ea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	d003      	beq.n	8005eb0 <_fwalk_reent+0x38>
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4640      	mov	r0, r8
 8005eac:	47c8      	blx	r9
 8005eae:	4306      	orrs	r6, r0
 8005eb0:	3568      	adds	r5, #104	; 0x68
 8005eb2:	e7ee      	b.n	8005e92 <_fwalk_reent+0x1a>

08005eb4 <_localeconv_r>:
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <_localeconv_r+0x14>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6a18      	ldr	r0, [r3, #32]
 8005eba:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <_localeconv_r+0x18>)
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	bf08      	it	eq
 8005ec0:	4618      	moveq	r0, r3
 8005ec2:	30f0      	adds	r0, #240	; 0xf0
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000010 	.word	0x20000010
 8005ecc:	20000074 	.word	0x20000074

08005ed0 <malloc>:
 8005ed0:	4b02      	ldr	r3, [pc, #8]	; (8005edc <malloc+0xc>)
 8005ed2:	4601      	mov	r1, r0
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	f000 bb45 	b.w	8006564 <_malloc_r>
 8005eda:	bf00      	nop
 8005edc:	20000010 	.word	0x20000010

08005ee0 <memcpy>:
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	1e43      	subs	r3, r0, #1
 8005ee4:	440a      	add	r2, r1
 8005ee6:	4291      	cmp	r1, r2
 8005ee8:	d100      	bne.n	8005eec <memcpy+0xc>
 8005eea:	bd10      	pop	{r4, pc}
 8005eec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ef4:	e7f7      	b.n	8005ee6 <memcpy+0x6>

08005ef6 <_Balloc>:
 8005ef6:	b570      	push	{r4, r5, r6, lr}
 8005ef8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005efa:	4604      	mov	r4, r0
 8005efc:	460e      	mov	r6, r1
 8005efe:	b93d      	cbnz	r5, 8005f10 <_Balloc+0x1a>
 8005f00:	2010      	movs	r0, #16
 8005f02:	f7ff ffe5 	bl	8005ed0 <malloc>
 8005f06:	6260      	str	r0, [r4, #36]	; 0x24
 8005f08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f0c:	6005      	str	r5, [r0, #0]
 8005f0e:	60c5      	str	r5, [r0, #12]
 8005f10:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f12:	68eb      	ldr	r3, [r5, #12]
 8005f14:	b183      	cbz	r3, 8005f38 <_Balloc+0x42>
 8005f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f1e:	b9b8      	cbnz	r0, 8005f50 <_Balloc+0x5a>
 8005f20:	2101      	movs	r1, #1
 8005f22:	fa01 f506 	lsl.w	r5, r1, r6
 8005f26:	1d6a      	adds	r2, r5, #5
 8005f28:	0092      	lsls	r2, r2, #2
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f000 fabe 	bl	80064ac <_calloc_r>
 8005f30:	b160      	cbz	r0, 8005f4c <_Balloc+0x56>
 8005f32:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f36:	e00e      	b.n	8005f56 <_Balloc+0x60>
 8005f38:	2221      	movs	r2, #33	; 0x21
 8005f3a:	2104      	movs	r1, #4
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 fab5 	bl	80064ac <_calloc_r>
 8005f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f44:	60e8      	str	r0, [r5, #12]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e4      	bne.n	8005f16 <_Balloc+0x20>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	6802      	ldr	r2, [r0, #0]
 8005f52:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f56:	2300      	movs	r3, #0
 8005f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f5c:	e7f7      	b.n	8005f4e <_Balloc+0x58>

08005f5e <_Bfree>:
 8005f5e:	b570      	push	{r4, r5, r6, lr}
 8005f60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f62:	4606      	mov	r6, r0
 8005f64:	460d      	mov	r5, r1
 8005f66:	b93c      	cbnz	r4, 8005f78 <_Bfree+0x1a>
 8005f68:	2010      	movs	r0, #16
 8005f6a:	f7ff ffb1 	bl	8005ed0 <malloc>
 8005f6e:	6270      	str	r0, [r6, #36]	; 0x24
 8005f70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f74:	6004      	str	r4, [r0, #0]
 8005f76:	60c4      	str	r4, [r0, #12]
 8005f78:	b13d      	cbz	r5, 8005f8a <_Bfree+0x2c>
 8005f7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f7c:	686a      	ldr	r2, [r5, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f84:	6029      	str	r1, [r5, #0]
 8005f86:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}

08005f8c <__multadd>:
 8005f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f90:	690d      	ldr	r5, [r1, #16]
 8005f92:	461f      	mov	r7, r3
 8005f94:	4606      	mov	r6, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	f101 0c14 	add.w	ip, r1, #20
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f8dc 0000 	ldr.w	r0, [ip]
 8005fa2:	b281      	uxth	r1, r0
 8005fa4:	fb02 7101 	mla	r1, r2, r1, r7
 8005fa8:	0c0f      	lsrs	r7, r1, #16
 8005faa:	0c00      	lsrs	r0, r0, #16
 8005fac:	fb02 7000 	mla	r0, r2, r0, r7
 8005fb0:	b289      	uxth	r1, r1
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fb8:	429d      	cmp	r5, r3
 8005fba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fbe:	f84c 1b04 	str.w	r1, [ip], #4
 8005fc2:	dcec      	bgt.n	8005f9e <__multadd+0x12>
 8005fc4:	b1d7      	cbz	r7, 8005ffc <__multadd+0x70>
 8005fc6:	68a3      	ldr	r3, [r4, #8]
 8005fc8:	42ab      	cmp	r3, r5
 8005fca:	dc12      	bgt.n	8005ff2 <__multadd+0x66>
 8005fcc:	6861      	ldr	r1, [r4, #4]
 8005fce:	4630      	mov	r0, r6
 8005fd0:	3101      	adds	r1, #1
 8005fd2:	f7ff ff90 	bl	8005ef6 <_Balloc>
 8005fd6:	6922      	ldr	r2, [r4, #16]
 8005fd8:	3202      	adds	r2, #2
 8005fda:	f104 010c 	add.w	r1, r4, #12
 8005fde:	4680      	mov	r8, r0
 8005fe0:	0092      	lsls	r2, r2, #2
 8005fe2:	300c      	adds	r0, #12
 8005fe4:	f7ff ff7c 	bl	8005ee0 <memcpy>
 8005fe8:	4621      	mov	r1, r4
 8005fea:	4630      	mov	r0, r6
 8005fec:	f7ff ffb7 	bl	8005f5e <_Bfree>
 8005ff0:	4644      	mov	r4, r8
 8005ff2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ff6:	3501      	adds	r5, #1
 8005ff8:	615f      	str	r7, [r3, #20]
 8005ffa:	6125      	str	r5, [r4, #16]
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006002 <__hi0bits>:
 8006002:	0c02      	lsrs	r2, r0, #16
 8006004:	0412      	lsls	r2, r2, #16
 8006006:	4603      	mov	r3, r0
 8006008:	b9b2      	cbnz	r2, 8006038 <__hi0bits+0x36>
 800600a:	0403      	lsls	r3, r0, #16
 800600c:	2010      	movs	r0, #16
 800600e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006012:	bf04      	itt	eq
 8006014:	021b      	lsleq	r3, r3, #8
 8006016:	3008      	addeq	r0, #8
 8006018:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800601c:	bf04      	itt	eq
 800601e:	011b      	lsleq	r3, r3, #4
 8006020:	3004      	addeq	r0, #4
 8006022:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006026:	bf04      	itt	eq
 8006028:	009b      	lsleq	r3, r3, #2
 800602a:	3002      	addeq	r0, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	db06      	blt.n	800603e <__hi0bits+0x3c>
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	d503      	bpl.n	800603c <__hi0bits+0x3a>
 8006034:	3001      	adds	r0, #1
 8006036:	4770      	bx	lr
 8006038:	2000      	movs	r0, #0
 800603a:	e7e8      	b.n	800600e <__hi0bits+0xc>
 800603c:	2020      	movs	r0, #32
 800603e:	4770      	bx	lr

08006040 <__lo0bits>:
 8006040:	6803      	ldr	r3, [r0, #0]
 8006042:	f013 0207 	ands.w	r2, r3, #7
 8006046:	4601      	mov	r1, r0
 8006048:	d00b      	beq.n	8006062 <__lo0bits+0x22>
 800604a:	07da      	lsls	r2, r3, #31
 800604c:	d423      	bmi.n	8006096 <__lo0bits+0x56>
 800604e:	0798      	lsls	r0, r3, #30
 8006050:	bf49      	itett	mi
 8006052:	085b      	lsrmi	r3, r3, #1
 8006054:	089b      	lsrpl	r3, r3, #2
 8006056:	2001      	movmi	r0, #1
 8006058:	600b      	strmi	r3, [r1, #0]
 800605a:	bf5c      	itt	pl
 800605c:	600b      	strpl	r3, [r1, #0]
 800605e:	2002      	movpl	r0, #2
 8006060:	4770      	bx	lr
 8006062:	b298      	uxth	r0, r3
 8006064:	b9a8      	cbnz	r0, 8006092 <__lo0bits+0x52>
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	2010      	movs	r0, #16
 800606a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800606e:	bf04      	itt	eq
 8006070:	0a1b      	lsreq	r3, r3, #8
 8006072:	3008      	addeq	r0, #8
 8006074:	071a      	lsls	r2, r3, #28
 8006076:	bf04      	itt	eq
 8006078:	091b      	lsreq	r3, r3, #4
 800607a:	3004      	addeq	r0, #4
 800607c:	079a      	lsls	r2, r3, #30
 800607e:	bf04      	itt	eq
 8006080:	089b      	lsreq	r3, r3, #2
 8006082:	3002      	addeq	r0, #2
 8006084:	07da      	lsls	r2, r3, #31
 8006086:	d402      	bmi.n	800608e <__lo0bits+0x4e>
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	d006      	beq.n	800609a <__lo0bits+0x5a>
 800608c:	3001      	adds	r0, #1
 800608e:	600b      	str	r3, [r1, #0]
 8006090:	4770      	bx	lr
 8006092:	4610      	mov	r0, r2
 8006094:	e7e9      	b.n	800606a <__lo0bits+0x2a>
 8006096:	2000      	movs	r0, #0
 8006098:	4770      	bx	lr
 800609a:	2020      	movs	r0, #32
 800609c:	4770      	bx	lr

0800609e <__i2b>:
 800609e:	b510      	push	{r4, lr}
 80060a0:	460c      	mov	r4, r1
 80060a2:	2101      	movs	r1, #1
 80060a4:	f7ff ff27 	bl	8005ef6 <_Balloc>
 80060a8:	2201      	movs	r2, #1
 80060aa:	6144      	str	r4, [r0, #20]
 80060ac:	6102      	str	r2, [r0, #16]
 80060ae:	bd10      	pop	{r4, pc}

080060b0 <__multiply>:
 80060b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	4614      	mov	r4, r2
 80060b6:	690a      	ldr	r2, [r1, #16]
 80060b8:	6923      	ldr	r3, [r4, #16]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	bfb8      	it	lt
 80060be:	460b      	movlt	r3, r1
 80060c0:	4688      	mov	r8, r1
 80060c2:	bfbc      	itt	lt
 80060c4:	46a0      	movlt	r8, r4
 80060c6:	461c      	movlt	r4, r3
 80060c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060d8:	eb07 0609 	add.w	r6, r7, r9
 80060dc:	42b3      	cmp	r3, r6
 80060de:	bfb8      	it	lt
 80060e0:	3101      	addlt	r1, #1
 80060e2:	f7ff ff08 	bl	8005ef6 <_Balloc>
 80060e6:	f100 0514 	add.w	r5, r0, #20
 80060ea:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80060ee:	462b      	mov	r3, r5
 80060f0:	2200      	movs	r2, #0
 80060f2:	4573      	cmp	r3, lr
 80060f4:	d316      	bcc.n	8006124 <__multiply+0x74>
 80060f6:	f104 0214 	add.w	r2, r4, #20
 80060fa:	f108 0114 	add.w	r1, r8, #20
 80060fe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006102:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	9b00      	ldr	r3, [sp, #0]
 800610a:	9201      	str	r2, [sp, #4]
 800610c:	4293      	cmp	r3, r2
 800610e:	d80c      	bhi.n	800612a <__multiply+0x7a>
 8006110:	2e00      	cmp	r6, #0
 8006112:	dd03      	ble.n	800611c <__multiply+0x6c>
 8006114:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006118:	2b00      	cmp	r3, #0
 800611a:	d05d      	beq.n	80061d8 <__multiply+0x128>
 800611c:	6106      	str	r6, [r0, #16]
 800611e:	b003      	add	sp, #12
 8006120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006124:	f843 2b04 	str.w	r2, [r3], #4
 8006128:	e7e3      	b.n	80060f2 <__multiply+0x42>
 800612a:	f8b2 b000 	ldrh.w	fp, [r2]
 800612e:	f1bb 0f00 	cmp.w	fp, #0
 8006132:	d023      	beq.n	800617c <__multiply+0xcc>
 8006134:	4689      	mov	r9, r1
 8006136:	46ac      	mov	ip, r5
 8006138:	f04f 0800 	mov.w	r8, #0
 800613c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006140:	f8dc a000 	ldr.w	sl, [ip]
 8006144:	b2a3      	uxth	r3, r4
 8006146:	fa1f fa8a 	uxth.w	sl, sl
 800614a:	fb0b a303 	mla	r3, fp, r3, sl
 800614e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006152:	f8dc 4000 	ldr.w	r4, [ip]
 8006156:	4443      	add	r3, r8
 8006158:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800615c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006160:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006164:	46e2      	mov	sl, ip
 8006166:	b29b      	uxth	r3, r3
 8006168:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800616c:	454f      	cmp	r7, r9
 800616e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006172:	f84a 3b04 	str.w	r3, [sl], #4
 8006176:	d82b      	bhi.n	80061d0 <__multiply+0x120>
 8006178:	f8cc 8004 	str.w	r8, [ip, #4]
 800617c:	9b01      	ldr	r3, [sp, #4]
 800617e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006182:	3204      	adds	r2, #4
 8006184:	f1ba 0f00 	cmp.w	sl, #0
 8006188:	d020      	beq.n	80061cc <__multiply+0x11c>
 800618a:	682b      	ldr	r3, [r5, #0]
 800618c:	4689      	mov	r9, r1
 800618e:	46a8      	mov	r8, r5
 8006190:	f04f 0b00 	mov.w	fp, #0
 8006194:	f8b9 c000 	ldrh.w	ip, [r9]
 8006198:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800619c:	fb0a 440c 	mla	r4, sl, ip, r4
 80061a0:	445c      	add	r4, fp
 80061a2:	46c4      	mov	ip, r8
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061aa:	f84c 3b04 	str.w	r3, [ip], #4
 80061ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80061b2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80061b6:	0c1b      	lsrs	r3, r3, #16
 80061b8:	fb0a b303 	mla	r3, sl, r3, fp
 80061bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061c0:	454f      	cmp	r7, r9
 80061c2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80061c6:	d805      	bhi.n	80061d4 <__multiply+0x124>
 80061c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80061cc:	3504      	adds	r5, #4
 80061ce:	e79b      	b.n	8006108 <__multiply+0x58>
 80061d0:	46d4      	mov	ip, sl
 80061d2:	e7b3      	b.n	800613c <__multiply+0x8c>
 80061d4:	46e0      	mov	r8, ip
 80061d6:	e7dd      	b.n	8006194 <__multiply+0xe4>
 80061d8:	3e01      	subs	r6, #1
 80061da:	e799      	b.n	8006110 <__multiply+0x60>

080061dc <__pow5mult>:
 80061dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e0:	4615      	mov	r5, r2
 80061e2:	f012 0203 	ands.w	r2, r2, #3
 80061e6:	4606      	mov	r6, r0
 80061e8:	460f      	mov	r7, r1
 80061ea:	d007      	beq.n	80061fc <__pow5mult+0x20>
 80061ec:	3a01      	subs	r2, #1
 80061ee:	4c21      	ldr	r4, [pc, #132]	; (8006274 <__pow5mult+0x98>)
 80061f0:	2300      	movs	r3, #0
 80061f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061f6:	f7ff fec9 	bl	8005f8c <__multadd>
 80061fa:	4607      	mov	r7, r0
 80061fc:	10ad      	asrs	r5, r5, #2
 80061fe:	d035      	beq.n	800626c <__pow5mult+0x90>
 8006200:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006202:	b93c      	cbnz	r4, 8006214 <__pow5mult+0x38>
 8006204:	2010      	movs	r0, #16
 8006206:	f7ff fe63 	bl	8005ed0 <malloc>
 800620a:	6270      	str	r0, [r6, #36]	; 0x24
 800620c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006210:	6004      	str	r4, [r0, #0]
 8006212:	60c4      	str	r4, [r0, #12]
 8006214:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006218:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800621c:	b94c      	cbnz	r4, 8006232 <__pow5mult+0x56>
 800621e:	f240 2171 	movw	r1, #625	; 0x271
 8006222:	4630      	mov	r0, r6
 8006224:	f7ff ff3b 	bl	800609e <__i2b>
 8006228:	2300      	movs	r3, #0
 800622a:	f8c8 0008 	str.w	r0, [r8, #8]
 800622e:	4604      	mov	r4, r0
 8006230:	6003      	str	r3, [r0, #0]
 8006232:	f04f 0800 	mov.w	r8, #0
 8006236:	07eb      	lsls	r3, r5, #31
 8006238:	d50a      	bpl.n	8006250 <__pow5mult+0x74>
 800623a:	4639      	mov	r1, r7
 800623c:	4622      	mov	r2, r4
 800623e:	4630      	mov	r0, r6
 8006240:	f7ff ff36 	bl	80060b0 <__multiply>
 8006244:	4639      	mov	r1, r7
 8006246:	4681      	mov	r9, r0
 8006248:	4630      	mov	r0, r6
 800624a:	f7ff fe88 	bl	8005f5e <_Bfree>
 800624e:	464f      	mov	r7, r9
 8006250:	106d      	asrs	r5, r5, #1
 8006252:	d00b      	beq.n	800626c <__pow5mult+0x90>
 8006254:	6820      	ldr	r0, [r4, #0]
 8006256:	b938      	cbnz	r0, 8006268 <__pow5mult+0x8c>
 8006258:	4622      	mov	r2, r4
 800625a:	4621      	mov	r1, r4
 800625c:	4630      	mov	r0, r6
 800625e:	f7ff ff27 	bl	80060b0 <__multiply>
 8006262:	6020      	str	r0, [r4, #0]
 8006264:	f8c0 8000 	str.w	r8, [r0]
 8006268:	4604      	mov	r4, r0
 800626a:	e7e4      	b.n	8006236 <__pow5mult+0x5a>
 800626c:	4638      	mov	r0, r7
 800626e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006272:	bf00      	nop
 8006274:	08007318 	.word	0x08007318

08006278 <__lshift>:
 8006278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800627c:	460c      	mov	r4, r1
 800627e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	6849      	ldr	r1, [r1, #4]
 8006286:	eb0a 0903 	add.w	r9, sl, r3
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	4607      	mov	r7, r0
 800628e:	4616      	mov	r6, r2
 8006290:	f109 0501 	add.w	r5, r9, #1
 8006294:	42ab      	cmp	r3, r5
 8006296:	db32      	blt.n	80062fe <__lshift+0x86>
 8006298:	4638      	mov	r0, r7
 800629a:	f7ff fe2c 	bl	8005ef6 <_Balloc>
 800629e:	2300      	movs	r3, #0
 80062a0:	4680      	mov	r8, r0
 80062a2:	f100 0114 	add.w	r1, r0, #20
 80062a6:	461a      	mov	r2, r3
 80062a8:	4553      	cmp	r3, sl
 80062aa:	db2b      	blt.n	8006304 <__lshift+0x8c>
 80062ac:	6920      	ldr	r0, [r4, #16]
 80062ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062b2:	f104 0314 	add.w	r3, r4, #20
 80062b6:	f016 021f 	ands.w	r2, r6, #31
 80062ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062c2:	d025      	beq.n	8006310 <__lshift+0x98>
 80062c4:	f1c2 0e20 	rsb	lr, r2, #32
 80062c8:	2000      	movs	r0, #0
 80062ca:	681e      	ldr	r6, [r3, #0]
 80062cc:	468a      	mov	sl, r1
 80062ce:	4096      	lsls	r6, r2
 80062d0:	4330      	orrs	r0, r6
 80062d2:	f84a 0b04 	str.w	r0, [sl], #4
 80062d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80062da:	459c      	cmp	ip, r3
 80062dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80062e0:	d814      	bhi.n	800630c <__lshift+0x94>
 80062e2:	6048      	str	r0, [r1, #4]
 80062e4:	b108      	cbz	r0, 80062ea <__lshift+0x72>
 80062e6:	f109 0502 	add.w	r5, r9, #2
 80062ea:	3d01      	subs	r5, #1
 80062ec:	4638      	mov	r0, r7
 80062ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80062f2:	4621      	mov	r1, r4
 80062f4:	f7ff fe33 	bl	8005f5e <_Bfree>
 80062f8:	4640      	mov	r0, r8
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	3101      	adds	r1, #1
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	e7c7      	b.n	8006294 <__lshift+0x1c>
 8006304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006308:	3301      	adds	r3, #1
 800630a:	e7cd      	b.n	80062a8 <__lshift+0x30>
 800630c:	4651      	mov	r1, sl
 800630e:	e7dc      	b.n	80062ca <__lshift+0x52>
 8006310:	3904      	subs	r1, #4
 8006312:	f853 2b04 	ldr.w	r2, [r3], #4
 8006316:	f841 2f04 	str.w	r2, [r1, #4]!
 800631a:	459c      	cmp	ip, r3
 800631c:	d8f9      	bhi.n	8006312 <__lshift+0x9a>
 800631e:	e7e4      	b.n	80062ea <__lshift+0x72>

08006320 <__mcmp>:
 8006320:	6903      	ldr	r3, [r0, #16]
 8006322:	690a      	ldr	r2, [r1, #16]
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	b530      	push	{r4, r5, lr}
 8006328:	d10c      	bne.n	8006344 <__mcmp+0x24>
 800632a:	0092      	lsls	r2, r2, #2
 800632c:	3014      	adds	r0, #20
 800632e:	3114      	adds	r1, #20
 8006330:	1884      	adds	r4, r0, r2
 8006332:	4411      	add	r1, r2
 8006334:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006338:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800633c:	4295      	cmp	r5, r2
 800633e:	d003      	beq.n	8006348 <__mcmp+0x28>
 8006340:	d305      	bcc.n	800634e <__mcmp+0x2e>
 8006342:	2301      	movs	r3, #1
 8006344:	4618      	mov	r0, r3
 8006346:	bd30      	pop	{r4, r5, pc}
 8006348:	42a0      	cmp	r0, r4
 800634a:	d3f3      	bcc.n	8006334 <__mcmp+0x14>
 800634c:	e7fa      	b.n	8006344 <__mcmp+0x24>
 800634e:	f04f 33ff 	mov.w	r3, #4294967295
 8006352:	e7f7      	b.n	8006344 <__mcmp+0x24>

08006354 <__mdiff>:
 8006354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006358:	460d      	mov	r5, r1
 800635a:	4607      	mov	r7, r0
 800635c:	4611      	mov	r1, r2
 800635e:	4628      	mov	r0, r5
 8006360:	4614      	mov	r4, r2
 8006362:	f7ff ffdd 	bl	8006320 <__mcmp>
 8006366:	1e06      	subs	r6, r0, #0
 8006368:	d108      	bne.n	800637c <__mdiff+0x28>
 800636a:	4631      	mov	r1, r6
 800636c:	4638      	mov	r0, r7
 800636e:	f7ff fdc2 	bl	8005ef6 <_Balloc>
 8006372:	2301      	movs	r3, #1
 8006374:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637c:	bfa4      	itt	ge
 800637e:	4623      	movge	r3, r4
 8006380:	462c      	movge	r4, r5
 8006382:	4638      	mov	r0, r7
 8006384:	6861      	ldr	r1, [r4, #4]
 8006386:	bfa6      	itte	ge
 8006388:	461d      	movge	r5, r3
 800638a:	2600      	movge	r6, #0
 800638c:	2601      	movlt	r6, #1
 800638e:	f7ff fdb2 	bl	8005ef6 <_Balloc>
 8006392:	692b      	ldr	r3, [r5, #16]
 8006394:	60c6      	str	r6, [r0, #12]
 8006396:	6926      	ldr	r6, [r4, #16]
 8006398:	f105 0914 	add.w	r9, r5, #20
 800639c:	f104 0214 	add.w	r2, r4, #20
 80063a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80063a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063a8:	f100 0514 	add.w	r5, r0, #20
 80063ac:	f04f 0e00 	mov.w	lr, #0
 80063b0:	f852 ab04 	ldr.w	sl, [r2], #4
 80063b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80063b8:	fa1e f18a 	uxtah	r1, lr, sl
 80063bc:	b2a3      	uxth	r3, r4
 80063be:	1ac9      	subs	r1, r1, r3
 80063c0:	0c23      	lsrs	r3, r4, #16
 80063c2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80063c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063ca:	b289      	uxth	r1, r1
 80063cc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80063d0:	45c8      	cmp	r8, r9
 80063d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063d6:	4694      	mov	ip, r2
 80063d8:	f845 3b04 	str.w	r3, [r5], #4
 80063dc:	d8e8      	bhi.n	80063b0 <__mdiff+0x5c>
 80063de:	45bc      	cmp	ip, r7
 80063e0:	d304      	bcc.n	80063ec <__mdiff+0x98>
 80063e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80063e6:	b183      	cbz	r3, 800640a <__mdiff+0xb6>
 80063e8:	6106      	str	r6, [r0, #16]
 80063ea:	e7c5      	b.n	8006378 <__mdiff+0x24>
 80063ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063f0:	fa1e f381 	uxtah	r3, lr, r1
 80063f4:	141a      	asrs	r2, r3, #16
 80063f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006400:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006404:	f845 3b04 	str.w	r3, [r5], #4
 8006408:	e7e9      	b.n	80063de <__mdiff+0x8a>
 800640a:	3e01      	subs	r6, #1
 800640c:	e7e9      	b.n	80063e2 <__mdiff+0x8e>

0800640e <__d2b>:
 800640e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006412:	460e      	mov	r6, r1
 8006414:	2101      	movs	r1, #1
 8006416:	ec59 8b10 	vmov	r8, r9, d0
 800641a:	4615      	mov	r5, r2
 800641c:	f7ff fd6b 	bl	8005ef6 <_Balloc>
 8006420:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006424:	4607      	mov	r7, r0
 8006426:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800642a:	bb34      	cbnz	r4, 800647a <__d2b+0x6c>
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	f1b8 0300 	subs.w	r3, r8, #0
 8006432:	d027      	beq.n	8006484 <__d2b+0x76>
 8006434:	a802      	add	r0, sp, #8
 8006436:	f840 3d08 	str.w	r3, [r0, #-8]!
 800643a:	f7ff fe01 	bl	8006040 <__lo0bits>
 800643e:	9900      	ldr	r1, [sp, #0]
 8006440:	b1f0      	cbz	r0, 8006480 <__d2b+0x72>
 8006442:	9a01      	ldr	r2, [sp, #4]
 8006444:	f1c0 0320 	rsb	r3, r0, #32
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	430b      	orrs	r3, r1
 800644e:	40c2      	lsrs	r2, r0
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	9201      	str	r2, [sp, #4]
 8006454:	9b01      	ldr	r3, [sp, #4]
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	bf14      	ite	ne
 800645c:	2102      	movne	r1, #2
 800645e:	2101      	moveq	r1, #1
 8006460:	6139      	str	r1, [r7, #16]
 8006462:	b1c4      	cbz	r4, 8006496 <__d2b+0x88>
 8006464:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006468:	4404      	add	r4, r0
 800646a:	6034      	str	r4, [r6, #0]
 800646c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006470:	6028      	str	r0, [r5, #0]
 8006472:	4638      	mov	r0, r7
 8006474:	b003      	add	sp, #12
 8006476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800647a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800647e:	e7d5      	b.n	800642c <__d2b+0x1e>
 8006480:	6179      	str	r1, [r7, #20]
 8006482:	e7e7      	b.n	8006454 <__d2b+0x46>
 8006484:	a801      	add	r0, sp, #4
 8006486:	f7ff fddb 	bl	8006040 <__lo0bits>
 800648a:	9b01      	ldr	r3, [sp, #4]
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	2101      	movs	r1, #1
 8006490:	6139      	str	r1, [r7, #16]
 8006492:	3020      	adds	r0, #32
 8006494:	e7e5      	b.n	8006462 <__d2b+0x54>
 8006496:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800649a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800649e:	6030      	str	r0, [r6, #0]
 80064a0:	6918      	ldr	r0, [r3, #16]
 80064a2:	f7ff fdae 	bl	8006002 <__hi0bits>
 80064a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064aa:	e7e1      	b.n	8006470 <__d2b+0x62>

080064ac <_calloc_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	fb02 f401 	mul.w	r4, r2, r1
 80064b2:	4621      	mov	r1, r4
 80064b4:	f000 f856 	bl	8006564 <_malloc_r>
 80064b8:	4605      	mov	r5, r0
 80064ba:	b118      	cbz	r0, 80064c4 <_calloc_r+0x18>
 80064bc:	4622      	mov	r2, r4
 80064be:	2100      	movs	r1, #0
 80064c0:	f7fe f96e 	bl	80047a0 <memset>
 80064c4:	4628      	mov	r0, r5
 80064c6:	bd38      	pop	{r3, r4, r5, pc}

080064c8 <_free_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4605      	mov	r5, r0
 80064cc:	2900      	cmp	r1, #0
 80064ce:	d045      	beq.n	800655c <_free_r+0x94>
 80064d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064d4:	1f0c      	subs	r4, r1, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bfb8      	it	lt
 80064da:	18e4      	addlt	r4, r4, r3
 80064dc:	f000 fc4a 	bl	8006d74 <__malloc_lock>
 80064e0:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <_free_r+0x98>)
 80064e2:	6813      	ldr	r3, [r2, #0]
 80064e4:	4610      	mov	r0, r2
 80064e6:	b933      	cbnz	r3, 80064f6 <_free_r+0x2e>
 80064e8:	6063      	str	r3, [r4, #4]
 80064ea:	6014      	str	r4, [r2, #0]
 80064ec:	4628      	mov	r0, r5
 80064ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064f2:	f000 bc40 	b.w	8006d76 <__malloc_unlock>
 80064f6:	42a3      	cmp	r3, r4
 80064f8:	d90c      	bls.n	8006514 <_free_r+0x4c>
 80064fa:	6821      	ldr	r1, [r4, #0]
 80064fc:	1862      	adds	r2, r4, r1
 80064fe:	4293      	cmp	r3, r2
 8006500:	bf04      	itt	eq
 8006502:	681a      	ldreq	r2, [r3, #0]
 8006504:	685b      	ldreq	r3, [r3, #4]
 8006506:	6063      	str	r3, [r4, #4]
 8006508:	bf04      	itt	eq
 800650a:	1852      	addeq	r2, r2, r1
 800650c:	6022      	streq	r2, [r4, #0]
 800650e:	6004      	str	r4, [r0, #0]
 8006510:	e7ec      	b.n	80064ec <_free_r+0x24>
 8006512:	4613      	mov	r3, r2
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	b10a      	cbz	r2, 800651c <_free_r+0x54>
 8006518:	42a2      	cmp	r2, r4
 800651a:	d9fa      	bls.n	8006512 <_free_r+0x4a>
 800651c:	6819      	ldr	r1, [r3, #0]
 800651e:	1858      	adds	r0, r3, r1
 8006520:	42a0      	cmp	r0, r4
 8006522:	d10b      	bne.n	800653c <_free_r+0x74>
 8006524:	6820      	ldr	r0, [r4, #0]
 8006526:	4401      	add	r1, r0
 8006528:	1858      	adds	r0, r3, r1
 800652a:	4282      	cmp	r2, r0
 800652c:	6019      	str	r1, [r3, #0]
 800652e:	d1dd      	bne.n	80064ec <_free_r+0x24>
 8006530:	6810      	ldr	r0, [r2, #0]
 8006532:	6852      	ldr	r2, [r2, #4]
 8006534:	605a      	str	r2, [r3, #4]
 8006536:	4401      	add	r1, r0
 8006538:	6019      	str	r1, [r3, #0]
 800653a:	e7d7      	b.n	80064ec <_free_r+0x24>
 800653c:	d902      	bls.n	8006544 <_free_r+0x7c>
 800653e:	230c      	movs	r3, #12
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	e7d3      	b.n	80064ec <_free_r+0x24>
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	1821      	adds	r1, r4, r0
 8006548:	428a      	cmp	r2, r1
 800654a:	bf04      	itt	eq
 800654c:	6811      	ldreq	r1, [r2, #0]
 800654e:	6852      	ldreq	r2, [r2, #4]
 8006550:	6062      	str	r2, [r4, #4]
 8006552:	bf04      	itt	eq
 8006554:	1809      	addeq	r1, r1, r0
 8006556:	6021      	streq	r1, [r4, #0]
 8006558:	605c      	str	r4, [r3, #4]
 800655a:	e7c7      	b.n	80064ec <_free_r+0x24>
 800655c:	bd38      	pop	{r3, r4, r5, pc}
 800655e:	bf00      	nop
 8006560:	20000204 	.word	0x20000204

08006564 <_malloc_r>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	1ccd      	adds	r5, r1, #3
 8006568:	f025 0503 	bic.w	r5, r5, #3
 800656c:	3508      	adds	r5, #8
 800656e:	2d0c      	cmp	r5, #12
 8006570:	bf38      	it	cc
 8006572:	250c      	movcc	r5, #12
 8006574:	2d00      	cmp	r5, #0
 8006576:	4606      	mov	r6, r0
 8006578:	db01      	blt.n	800657e <_malloc_r+0x1a>
 800657a:	42a9      	cmp	r1, r5
 800657c:	d903      	bls.n	8006586 <_malloc_r+0x22>
 800657e:	230c      	movs	r3, #12
 8006580:	6033      	str	r3, [r6, #0]
 8006582:	2000      	movs	r0, #0
 8006584:	bd70      	pop	{r4, r5, r6, pc}
 8006586:	f000 fbf5 	bl	8006d74 <__malloc_lock>
 800658a:	4a21      	ldr	r2, [pc, #132]	; (8006610 <_malloc_r+0xac>)
 800658c:	6814      	ldr	r4, [r2, #0]
 800658e:	4621      	mov	r1, r4
 8006590:	b991      	cbnz	r1, 80065b8 <_malloc_r+0x54>
 8006592:	4c20      	ldr	r4, [pc, #128]	; (8006614 <_malloc_r+0xb0>)
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	b91b      	cbnz	r3, 80065a0 <_malloc_r+0x3c>
 8006598:	4630      	mov	r0, r6
 800659a:	f000 f97d 	bl	8006898 <_sbrk_r>
 800659e:	6020      	str	r0, [r4, #0]
 80065a0:	4629      	mov	r1, r5
 80065a2:	4630      	mov	r0, r6
 80065a4:	f000 f978 	bl	8006898 <_sbrk_r>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d124      	bne.n	80065f6 <_malloc_r+0x92>
 80065ac:	230c      	movs	r3, #12
 80065ae:	6033      	str	r3, [r6, #0]
 80065b0:	4630      	mov	r0, r6
 80065b2:	f000 fbe0 	bl	8006d76 <__malloc_unlock>
 80065b6:	e7e4      	b.n	8006582 <_malloc_r+0x1e>
 80065b8:	680b      	ldr	r3, [r1, #0]
 80065ba:	1b5b      	subs	r3, r3, r5
 80065bc:	d418      	bmi.n	80065f0 <_malloc_r+0x8c>
 80065be:	2b0b      	cmp	r3, #11
 80065c0:	d90f      	bls.n	80065e2 <_malloc_r+0x7e>
 80065c2:	600b      	str	r3, [r1, #0]
 80065c4:	50cd      	str	r5, [r1, r3]
 80065c6:	18cc      	adds	r4, r1, r3
 80065c8:	4630      	mov	r0, r6
 80065ca:	f000 fbd4 	bl	8006d76 <__malloc_unlock>
 80065ce:	f104 000b 	add.w	r0, r4, #11
 80065d2:	1d23      	adds	r3, r4, #4
 80065d4:	f020 0007 	bic.w	r0, r0, #7
 80065d8:	1ac3      	subs	r3, r0, r3
 80065da:	d0d3      	beq.n	8006584 <_malloc_r+0x20>
 80065dc:	425a      	negs	r2, r3
 80065de:	50e2      	str	r2, [r4, r3]
 80065e0:	e7d0      	b.n	8006584 <_malloc_r+0x20>
 80065e2:	428c      	cmp	r4, r1
 80065e4:	684b      	ldr	r3, [r1, #4]
 80065e6:	bf16      	itet	ne
 80065e8:	6063      	strne	r3, [r4, #4]
 80065ea:	6013      	streq	r3, [r2, #0]
 80065ec:	460c      	movne	r4, r1
 80065ee:	e7eb      	b.n	80065c8 <_malloc_r+0x64>
 80065f0:	460c      	mov	r4, r1
 80065f2:	6849      	ldr	r1, [r1, #4]
 80065f4:	e7cc      	b.n	8006590 <_malloc_r+0x2c>
 80065f6:	1cc4      	adds	r4, r0, #3
 80065f8:	f024 0403 	bic.w	r4, r4, #3
 80065fc:	42a0      	cmp	r0, r4
 80065fe:	d005      	beq.n	800660c <_malloc_r+0xa8>
 8006600:	1a21      	subs	r1, r4, r0
 8006602:	4630      	mov	r0, r6
 8006604:	f000 f948 	bl	8006898 <_sbrk_r>
 8006608:	3001      	adds	r0, #1
 800660a:	d0cf      	beq.n	80065ac <_malloc_r+0x48>
 800660c:	6025      	str	r5, [r4, #0]
 800660e:	e7db      	b.n	80065c8 <_malloc_r+0x64>
 8006610:	20000204 	.word	0x20000204
 8006614:	20000208 	.word	0x20000208

08006618 <__sfputc_r>:
 8006618:	6893      	ldr	r3, [r2, #8]
 800661a:	3b01      	subs	r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	b410      	push	{r4}
 8006620:	6093      	str	r3, [r2, #8]
 8006622:	da08      	bge.n	8006636 <__sfputc_r+0x1e>
 8006624:	6994      	ldr	r4, [r2, #24]
 8006626:	42a3      	cmp	r3, r4
 8006628:	db01      	blt.n	800662e <__sfputc_r+0x16>
 800662a:	290a      	cmp	r1, #10
 800662c:	d103      	bne.n	8006636 <__sfputc_r+0x1e>
 800662e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006632:	f000 b985 	b.w	8006940 <__swbuf_r>
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	1c58      	adds	r0, r3, #1
 800663a:	6010      	str	r0, [r2, #0]
 800663c:	7019      	strb	r1, [r3, #0]
 800663e:	4608      	mov	r0, r1
 8006640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006644:	4770      	bx	lr

08006646 <__sfputs_r>:
 8006646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006648:	4606      	mov	r6, r0
 800664a:	460f      	mov	r7, r1
 800664c:	4614      	mov	r4, r2
 800664e:	18d5      	adds	r5, r2, r3
 8006650:	42ac      	cmp	r4, r5
 8006652:	d101      	bne.n	8006658 <__sfputs_r+0x12>
 8006654:	2000      	movs	r0, #0
 8006656:	e007      	b.n	8006668 <__sfputs_r+0x22>
 8006658:	463a      	mov	r2, r7
 800665a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800665e:	4630      	mov	r0, r6
 8006660:	f7ff ffda 	bl	8006618 <__sfputc_r>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d1f3      	bne.n	8006650 <__sfputs_r+0xa>
 8006668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800666c <_vfiprintf_r>:
 800666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006670:	460c      	mov	r4, r1
 8006672:	b09d      	sub	sp, #116	; 0x74
 8006674:	4617      	mov	r7, r2
 8006676:	461d      	mov	r5, r3
 8006678:	4606      	mov	r6, r0
 800667a:	b118      	cbz	r0, 8006684 <_vfiprintf_r+0x18>
 800667c:	6983      	ldr	r3, [r0, #24]
 800667e:	b90b      	cbnz	r3, 8006684 <_vfiprintf_r+0x18>
 8006680:	f7ff fb8e 	bl	8005da0 <__sinit>
 8006684:	4b7c      	ldr	r3, [pc, #496]	; (8006878 <_vfiprintf_r+0x20c>)
 8006686:	429c      	cmp	r4, r3
 8006688:	d158      	bne.n	800673c <_vfiprintf_r+0xd0>
 800668a:	6874      	ldr	r4, [r6, #4]
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	0718      	lsls	r0, r3, #28
 8006690:	d55e      	bpl.n	8006750 <_vfiprintf_r+0xe4>
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d05b      	beq.n	8006750 <_vfiprintf_r+0xe4>
 8006698:	2300      	movs	r3, #0
 800669a:	9309      	str	r3, [sp, #36]	; 0x24
 800669c:	2320      	movs	r3, #32
 800669e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066a2:	2330      	movs	r3, #48	; 0x30
 80066a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066a8:	9503      	str	r5, [sp, #12]
 80066aa:	f04f 0b01 	mov.w	fp, #1
 80066ae:	46b8      	mov	r8, r7
 80066b0:	4645      	mov	r5, r8
 80066b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066b6:	b10b      	cbz	r3, 80066bc <_vfiprintf_r+0x50>
 80066b8:	2b25      	cmp	r3, #37	; 0x25
 80066ba:	d154      	bne.n	8006766 <_vfiprintf_r+0xfa>
 80066bc:	ebb8 0a07 	subs.w	sl, r8, r7
 80066c0:	d00b      	beq.n	80066da <_vfiprintf_r+0x6e>
 80066c2:	4653      	mov	r3, sl
 80066c4:	463a      	mov	r2, r7
 80066c6:	4621      	mov	r1, r4
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7ff ffbc 	bl	8006646 <__sfputs_r>
 80066ce:	3001      	adds	r0, #1
 80066d0:	f000 80c2 	beq.w	8006858 <_vfiprintf_r+0x1ec>
 80066d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d6:	4453      	add	r3, sl
 80066d8:	9309      	str	r3, [sp, #36]	; 0x24
 80066da:	f898 3000 	ldrb.w	r3, [r8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 80ba 	beq.w	8006858 <_vfiprintf_r+0x1ec>
 80066e4:	2300      	movs	r3, #0
 80066e6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066ee:	9304      	str	r3, [sp, #16]
 80066f0:	9307      	str	r3, [sp, #28]
 80066f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066f6:	931a      	str	r3, [sp, #104]	; 0x68
 80066f8:	46a8      	mov	r8, r5
 80066fa:	2205      	movs	r2, #5
 80066fc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006700:	485e      	ldr	r0, [pc, #376]	; (800687c <_vfiprintf_r+0x210>)
 8006702:	f7f9 fd75 	bl	80001f0 <memchr>
 8006706:	9b04      	ldr	r3, [sp, #16]
 8006708:	bb78      	cbnz	r0, 800676a <_vfiprintf_r+0xfe>
 800670a:	06d9      	lsls	r1, r3, #27
 800670c:	bf44      	itt	mi
 800670e:	2220      	movmi	r2, #32
 8006710:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006714:	071a      	lsls	r2, r3, #28
 8006716:	bf44      	itt	mi
 8006718:	222b      	movmi	r2, #43	; 0x2b
 800671a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800671e:	782a      	ldrb	r2, [r5, #0]
 8006720:	2a2a      	cmp	r2, #42	; 0x2a
 8006722:	d02a      	beq.n	800677a <_vfiprintf_r+0x10e>
 8006724:	9a07      	ldr	r2, [sp, #28]
 8006726:	46a8      	mov	r8, r5
 8006728:	2000      	movs	r0, #0
 800672a:	250a      	movs	r5, #10
 800672c:	4641      	mov	r1, r8
 800672e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006732:	3b30      	subs	r3, #48	; 0x30
 8006734:	2b09      	cmp	r3, #9
 8006736:	d969      	bls.n	800680c <_vfiprintf_r+0x1a0>
 8006738:	b360      	cbz	r0, 8006794 <_vfiprintf_r+0x128>
 800673a:	e024      	b.n	8006786 <_vfiprintf_r+0x11a>
 800673c:	4b50      	ldr	r3, [pc, #320]	; (8006880 <_vfiprintf_r+0x214>)
 800673e:	429c      	cmp	r4, r3
 8006740:	d101      	bne.n	8006746 <_vfiprintf_r+0xda>
 8006742:	68b4      	ldr	r4, [r6, #8]
 8006744:	e7a2      	b.n	800668c <_vfiprintf_r+0x20>
 8006746:	4b4f      	ldr	r3, [pc, #316]	; (8006884 <_vfiprintf_r+0x218>)
 8006748:	429c      	cmp	r4, r3
 800674a:	bf08      	it	eq
 800674c:	68f4      	ldreq	r4, [r6, #12]
 800674e:	e79d      	b.n	800668c <_vfiprintf_r+0x20>
 8006750:	4621      	mov	r1, r4
 8006752:	4630      	mov	r0, r6
 8006754:	f000 f958 	bl	8006a08 <__swsetup_r>
 8006758:	2800      	cmp	r0, #0
 800675a:	d09d      	beq.n	8006698 <_vfiprintf_r+0x2c>
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	b01d      	add	sp, #116	; 0x74
 8006762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006766:	46a8      	mov	r8, r5
 8006768:	e7a2      	b.n	80066b0 <_vfiprintf_r+0x44>
 800676a:	4a44      	ldr	r2, [pc, #272]	; (800687c <_vfiprintf_r+0x210>)
 800676c:	1a80      	subs	r0, r0, r2
 800676e:	fa0b f000 	lsl.w	r0, fp, r0
 8006772:	4318      	orrs	r0, r3
 8006774:	9004      	str	r0, [sp, #16]
 8006776:	4645      	mov	r5, r8
 8006778:	e7be      	b.n	80066f8 <_vfiprintf_r+0x8c>
 800677a:	9a03      	ldr	r2, [sp, #12]
 800677c:	1d11      	adds	r1, r2, #4
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	9103      	str	r1, [sp, #12]
 8006782:	2a00      	cmp	r2, #0
 8006784:	db01      	blt.n	800678a <_vfiprintf_r+0x11e>
 8006786:	9207      	str	r2, [sp, #28]
 8006788:	e004      	b.n	8006794 <_vfiprintf_r+0x128>
 800678a:	4252      	negs	r2, r2
 800678c:	f043 0302 	orr.w	r3, r3, #2
 8006790:	9207      	str	r2, [sp, #28]
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	f898 3000 	ldrb.w	r3, [r8]
 8006798:	2b2e      	cmp	r3, #46	; 0x2e
 800679a:	d10e      	bne.n	80067ba <_vfiprintf_r+0x14e>
 800679c:	f898 3001 	ldrb.w	r3, [r8, #1]
 80067a0:	2b2a      	cmp	r3, #42	; 0x2a
 80067a2:	d138      	bne.n	8006816 <_vfiprintf_r+0x1aa>
 80067a4:	9b03      	ldr	r3, [sp, #12]
 80067a6:	1d1a      	adds	r2, r3, #4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	9203      	str	r2, [sp, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfb8      	it	lt
 80067b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80067b4:	f108 0802 	add.w	r8, r8, #2
 80067b8:	9305      	str	r3, [sp, #20]
 80067ba:	4d33      	ldr	r5, [pc, #204]	; (8006888 <_vfiprintf_r+0x21c>)
 80067bc:	f898 1000 	ldrb.w	r1, [r8]
 80067c0:	2203      	movs	r2, #3
 80067c2:	4628      	mov	r0, r5
 80067c4:	f7f9 fd14 	bl	80001f0 <memchr>
 80067c8:	b140      	cbz	r0, 80067dc <_vfiprintf_r+0x170>
 80067ca:	2340      	movs	r3, #64	; 0x40
 80067cc:	1b40      	subs	r0, r0, r5
 80067ce:	fa03 f000 	lsl.w	r0, r3, r0
 80067d2:	9b04      	ldr	r3, [sp, #16]
 80067d4:	4303      	orrs	r3, r0
 80067d6:	f108 0801 	add.w	r8, r8, #1
 80067da:	9304      	str	r3, [sp, #16]
 80067dc:	f898 1000 	ldrb.w	r1, [r8]
 80067e0:	482a      	ldr	r0, [pc, #168]	; (800688c <_vfiprintf_r+0x220>)
 80067e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e6:	2206      	movs	r2, #6
 80067e8:	f108 0701 	add.w	r7, r8, #1
 80067ec:	f7f9 fd00 	bl	80001f0 <memchr>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d037      	beq.n	8006864 <_vfiprintf_r+0x1f8>
 80067f4:	4b26      	ldr	r3, [pc, #152]	; (8006890 <_vfiprintf_r+0x224>)
 80067f6:	bb1b      	cbnz	r3, 8006840 <_vfiprintf_r+0x1d4>
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	3307      	adds	r3, #7
 80067fc:	f023 0307 	bic.w	r3, r3, #7
 8006800:	3308      	adds	r3, #8
 8006802:	9303      	str	r3, [sp, #12]
 8006804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006806:	444b      	add	r3, r9
 8006808:	9309      	str	r3, [sp, #36]	; 0x24
 800680a:	e750      	b.n	80066ae <_vfiprintf_r+0x42>
 800680c:	fb05 3202 	mla	r2, r5, r2, r3
 8006810:	2001      	movs	r0, #1
 8006812:	4688      	mov	r8, r1
 8006814:	e78a      	b.n	800672c <_vfiprintf_r+0xc0>
 8006816:	2300      	movs	r3, #0
 8006818:	f108 0801 	add.w	r8, r8, #1
 800681c:	9305      	str	r3, [sp, #20]
 800681e:	4619      	mov	r1, r3
 8006820:	250a      	movs	r5, #10
 8006822:	4640      	mov	r0, r8
 8006824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006828:	3a30      	subs	r2, #48	; 0x30
 800682a:	2a09      	cmp	r2, #9
 800682c:	d903      	bls.n	8006836 <_vfiprintf_r+0x1ca>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0c3      	beq.n	80067ba <_vfiprintf_r+0x14e>
 8006832:	9105      	str	r1, [sp, #20]
 8006834:	e7c1      	b.n	80067ba <_vfiprintf_r+0x14e>
 8006836:	fb05 2101 	mla	r1, r5, r1, r2
 800683a:	2301      	movs	r3, #1
 800683c:	4680      	mov	r8, r0
 800683e:	e7f0      	b.n	8006822 <_vfiprintf_r+0x1b6>
 8006840:	ab03      	add	r3, sp, #12
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	4622      	mov	r2, r4
 8006846:	4b13      	ldr	r3, [pc, #76]	; (8006894 <_vfiprintf_r+0x228>)
 8006848:	a904      	add	r1, sp, #16
 800684a:	4630      	mov	r0, r6
 800684c:	f7fe f844 	bl	80048d8 <_printf_float>
 8006850:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006854:	4681      	mov	r9, r0
 8006856:	d1d5      	bne.n	8006804 <_vfiprintf_r+0x198>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	065b      	lsls	r3, r3, #25
 800685c:	f53f af7e 	bmi.w	800675c <_vfiprintf_r+0xf0>
 8006860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006862:	e77d      	b.n	8006760 <_vfiprintf_r+0xf4>
 8006864:	ab03      	add	r3, sp, #12
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	4622      	mov	r2, r4
 800686a:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <_vfiprintf_r+0x228>)
 800686c:	a904      	add	r1, sp, #16
 800686e:	4630      	mov	r0, r6
 8006870:	f7fe fae8 	bl	8004e44 <_printf_i>
 8006874:	e7ec      	b.n	8006850 <_vfiprintf_r+0x1e4>
 8006876:	bf00      	nop
 8006878:	080071e4 	.word	0x080071e4
 800687c:	08007324 	.word	0x08007324
 8006880:	08007204 	.word	0x08007204
 8006884:	080071c4 	.word	0x080071c4
 8006888:	0800732a 	.word	0x0800732a
 800688c:	0800732e 	.word	0x0800732e
 8006890:	080048d9 	.word	0x080048d9
 8006894:	08006647 	.word	0x08006647

08006898 <_sbrk_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4c06      	ldr	r4, [pc, #24]	; (80068b4 <_sbrk_r+0x1c>)
 800689c:	2300      	movs	r3, #0
 800689e:	4605      	mov	r5, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	f7fb f976 	bl	8001b94 <_sbrk>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_sbrk_r+0x1a>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_sbrk_r+0x1a>
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	200003c4 	.word	0x200003c4

080068b8 <__sread>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	460c      	mov	r4, r1
 80068bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c0:	f000 fa5a 	bl	8006d78 <_read_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	bfab      	itete	ge
 80068c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068ca:	89a3      	ldrhlt	r3, [r4, #12]
 80068cc:	181b      	addge	r3, r3, r0
 80068ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068d2:	bfac      	ite	ge
 80068d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80068d6:	81a3      	strhlt	r3, [r4, #12]
 80068d8:	bd10      	pop	{r4, pc}

080068da <__swrite>:
 80068da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068de:	461f      	mov	r7, r3
 80068e0:	898b      	ldrh	r3, [r1, #12]
 80068e2:	05db      	lsls	r3, r3, #23
 80068e4:	4605      	mov	r5, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	4616      	mov	r6, r2
 80068ea:	d505      	bpl.n	80068f8 <__swrite+0x1e>
 80068ec:	2302      	movs	r3, #2
 80068ee:	2200      	movs	r2, #0
 80068f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f4:	f000 f9b6 	bl	8006c64 <_lseek_r>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006902:	81a3      	strh	r3, [r4, #12]
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	4628      	mov	r0, r5
 800690a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800690e:	f000 b869 	b.w	80069e4 <_write_r>

08006912 <__sseek>:
 8006912:	b510      	push	{r4, lr}
 8006914:	460c      	mov	r4, r1
 8006916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691a:	f000 f9a3 	bl	8006c64 <_lseek_r>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	bf15      	itete	ne
 8006924:	6560      	strne	r0, [r4, #84]	; 0x54
 8006926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800692a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800692e:	81a3      	strheq	r3, [r4, #12]
 8006930:	bf18      	it	ne
 8006932:	81a3      	strhne	r3, [r4, #12]
 8006934:	bd10      	pop	{r4, pc}

08006936 <__sclose>:
 8006936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693a:	f000 b8d3 	b.w	8006ae4 <_close_r>
	...

08006940 <__swbuf_r>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	460e      	mov	r6, r1
 8006944:	4614      	mov	r4, r2
 8006946:	4605      	mov	r5, r0
 8006948:	b118      	cbz	r0, 8006952 <__swbuf_r+0x12>
 800694a:	6983      	ldr	r3, [r0, #24]
 800694c:	b90b      	cbnz	r3, 8006952 <__swbuf_r+0x12>
 800694e:	f7ff fa27 	bl	8005da0 <__sinit>
 8006952:	4b21      	ldr	r3, [pc, #132]	; (80069d8 <__swbuf_r+0x98>)
 8006954:	429c      	cmp	r4, r3
 8006956:	d12a      	bne.n	80069ae <__swbuf_r+0x6e>
 8006958:	686c      	ldr	r4, [r5, #4]
 800695a:	69a3      	ldr	r3, [r4, #24]
 800695c:	60a3      	str	r3, [r4, #8]
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	071a      	lsls	r2, r3, #28
 8006962:	d52e      	bpl.n	80069c2 <__swbuf_r+0x82>
 8006964:	6923      	ldr	r3, [r4, #16]
 8006966:	b363      	cbz	r3, 80069c2 <__swbuf_r+0x82>
 8006968:	6923      	ldr	r3, [r4, #16]
 800696a:	6820      	ldr	r0, [r4, #0]
 800696c:	1ac0      	subs	r0, r0, r3
 800696e:	6963      	ldr	r3, [r4, #20]
 8006970:	b2f6      	uxtb	r6, r6
 8006972:	4283      	cmp	r3, r0
 8006974:	4637      	mov	r7, r6
 8006976:	dc04      	bgt.n	8006982 <__swbuf_r+0x42>
 8006978:	4621      	mov	r1, r4
 800697a:	4628      	mov	r0, r5
 800697c:	f000 f948 	bl	8006c10 <_fflush_r>
 8006980:	bb28      	cbnz	r0, 80069ce <__swbuf_r+0x8e>
 8006982:	68a3      	ldr	r3, [r4, #8]
 8006984:	3b01      	subs	r3, #1
 8006986:	60a3      	str	r3, [r4, #8]
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	6022      	str	r2, [r4, #0]
 800698e:	701e      	strb	r6, [r3, #0]
 8006990:	6963      	ldr	r3, [r4, #20]
 8006992:	3001      	adds	r0, #1
 8006994:	4283      	cmp	r3, r0
 8006996:	d004      	beq.n	80069a2 <__swbuf_r+0x62>
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	07db      	lsls	r3, r3, #31
 800699c:	d519      	bpl.n	80069d2 <__swbuf_r+0x92>
 800699e:	2e0a      	cmp	r6, #10
 80069a0:	d117      	bne.n	80069d2 <__swbuf_r+0x92>
 80069a2:	4621      	mov	r1, r4
 80069a4:	4628      	mov	r0, r5
 80069a6:	f000 f933 	bl	8006c10 <_fflush_r>
 80069aa:	b190      	cbz	r0, 80069d2 <__swbuf_r+0x92>
 80069ac:	e00f      	b.n	80069ce <__swbuf_r+0x8e>
 80069ae:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <__swbuf_r+0x9c>)
 80069b0:	429c      	cmp	r4, r3
 80069b2:	d101      	bne.n	80069b8 <__swbuf_r+0x78>
 80069b4:	68ac      	ldr	r4, [r5, #8]
 80069b6:	e7d0      	b.n	800695a <__swbuf_r+0x1a>
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <__swbuf_r+0xa0>)
 80069ba:	429c      	cmp	r4, r3
 80069bc:	bf08      	it	eq
 80069be:	68ec      	ldreq	r4, [r5, #12]
 80069c0:	e7cb      	b.n	800695a <__swbuf_r+0x1a>
 80069c2:	4621      	mov	r1, r4
 80069c4:	4628      	mov	r0, r5
 80069c6:	f000 f81f 	bl	8006a08 <__swsetup_r>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d0cc      	beq.n	8006968 <__swbuf_r+0x28>
 80069ce:	f04f 37ff 	mov.w	r7, #4294967295
 80069d2:	4638      	mov	r0, r7
 80069d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069d6:	bf00      	nop
 80069d8:	080071e4 	.word	0x080071e4
 80069dc:	08007204 	.word	0x08007204
 80069e0:	080071c4 	.word	0x080071c4

080069e4 <_write_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4c07      	ldr	r4, [pc, #28]	; (8006a04 <_write_r+0x20>)
 80069e8:	4605      	mov	r5, r0
 80069ea:	4608      	mov	r0, r1
 80069ec:	4611      	mov	r1, r2
 80069ee:	2200      	movs	r2, #0
 80069f0:	6022      	str	r2, [r4, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f7fb f87d 	bl	8001af2 <_write>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_write_r+0x1e>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_write_r+0x1e>
 8006a00:	602b      	str	r3, [r5, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	200003c4 	.word	0x200003c4

08006a08 <__swsetup_r>:
 8006a08:	4b32      	ldr	r3, [pc, #200]	; (8006ad4 <__swsetup_r+0xcc>)
 8006a0a:	b570      	push	{r4, r5, r6, lr}
 8006a0c:	681d      	ldr	r5, [r3, #0]
 8006a0e:	4606      	mov	r6, r0
 8006a10:	460c      	mov	r4, r1
 8006a12:	b125      	cbz	r5, 8006a1e <__swsetup_r+0x16>
 8006a14:	69ab      	ldr	r3, [r5, #24]
 8006a16:	b913      	cbnz	r3, 8006a1e <__swsetup_r+0x16>
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f7ff f9c1 	bl	8005da0 <__sinit>
 8006a1e:	4b2e      	ldr	r3, [pc, #184]	; (8006ad8 <__swsetup_r+0xd0>)
 8006a20:	429c      	cmp	r4, r3
 8006a22:	d10f      	bne.n	8006a44 <__swsetup_r+0x3c>
 8006a24:	686c      	ldr	r4, [r5, #4]
 8006a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	0715      	lsls	r5, r2, #28
 8006a2e:	d42c      	bmi.n	8006a8a <__swsetup_r+0x82>
 8006a30:	06d0      	lsls	r0, r2, #27
 8006a32:	d411      	bmi.n	8006a58 <__swsetup_r+0x50>
 8006a34:	2209      	movs	r2, #9
 8006a36:	6032      	str	r2, [r6, #0]
 8006a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a42:	e03e      	b.n	8006ac2 <__swsetup_r+0xba>
 8006a44:	4b25      	ldr	r3, [pc, #148]	; (8006adc <__swsetup_r+0xd4>)
 8006a46:	429c      	cmp	r4, r3
 8006a48:	d101      	bne.n	8006a4e <__swsetup_r+0x46>
 8006a4a:	68ac      	ldr	r4, [r5, #8]
 8006a4c:	e7eb      	b.n	8006a26 <__swsetup_r+0x1e>
 8006a4e:	4b24      	ldr	r3, [pc, #144]	; (8006ae0 <__swsetup_r+0xd8>)
 8006a50:	429c      	cmp	r4, r3
 8006a52:	bf08      	it	eq
 8006a54:	68ec      	ldreq	r4, [r5, #12]
 8006a56:	e7e6      	b.n	8006a26 <__swsetup_r+0x1e>
 8006a58:	0751      	lsls	r1, r2, #29
 8006a5a:	d512      	bpl.n	8006a82 <__swsetup_r+0x7a>
 8006a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a5e:	b141      	cbz	r1, 8006a72 <__swsetup_r+0x6a>
 8006a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a64:	4299      	cmp	r1, r3
 8006a66:	d002      	beq.n	8006a6e <__swsetup_r+0x66>
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f7ff fd2d 	bl	80064c8 <_free_r>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	6363      	str	r3, [r4, #52]	; 0x34
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a78:	81a3      	strh	r3, [r4, #12]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6063      	str	r3, [r4, #4]
 8006a7e:	6923      	ldr	r3, [r4, #16]
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	f043 0308 	orr.w	r3, r3, #8
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	b94b      	cbnz	r3, 8006aa2 <__swsetup_r+0x9a>
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a98:	d003      	beq.n	8006aa2 <__swsetup_r+0x9a>
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f000 f917 	bl	8006cd0 <__smakebuf_r>
 8006aa2:	89a2      	ldrh	r2, [r4, #12]
 8006aa4:	f012 0301 	ands.w	r3, r2, #1
 8006aa8:	d00c      	beq.n	8006ac4 <__swsetup_r+0xbc>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60a3      	str	r3, [r4, #8]
 8006aae:	6963      	ldr	r3, [r4, #20]
 8006ab0:	425b      	negs	r3, r3
 8006ab2:	61a3      	str	r3, [r4, #24]
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	b953      	cbnz	r3, 8006ace <__swsetup_r+0xc6>
 8006ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006abc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ac0:	d1ba      	bne.n	8006a38 <__swsetup_r+0x30>
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	0792      	lsls	r2, r2, #30
 8006ac6:	bf58      	it	pl
 8006ac8:	6963      	ldrpl	r3, [r4, #20]
 8006aca:	60a3      	str	r3, [r4, #8]
 8006acc:	e7f2      	b.n	8006ab4 <__swsetup_r+0xac>
 8006ace:	2000      	movs	r0, #0
 8006ad0:	e7f7      	b.n	8006ac2 <__swsetup_r+0xba>
 8006ad2:	bf00      	nop
 8006ad4:	20000010 	.word	0x20000010
 8006ad8:	080071e4 	.word	0x080071e4
 8006adc:	08007204 	.word	0x08007204
 8006ae0:	080071c4 	.word	0x080071c4

08006ae4 <_close_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4c06      	ldr	r4, [pc, #24]	; (8006b00 <_close_r+0x1c>)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4605      	mov	r5, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	f7fb f81b 	bl	8001b2a <_close>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_close_r+0x1a>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_close_r+0x1a>
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	200003c4 	.word	0x200003c4

08006b04 <__sflush_r>:
 8006b04:	898a      	ldrh	r2, [r1, #12]
 8006b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	0710      	lsls	r0, r2, #28
 8006b0e:	460c      	mov	r4, r1
 8006b10:	d458      	bmi.n	8006bc4 <__sflush_r+0xc0>
 8006b12:	684b      	ldr	r3, [r1, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dc05      	bgt.n	8006b24 <__sflush_r+0x20>
 8006b18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dc02      	bgt.n	8006b24 <__sflush_r+0x20>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b26:	2e00      	cmp	r6, #0
 8006b28:	d0f9      	beq.n	8006b1e <__sflush_r+0x1a>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b30:	682f      	ldr	r7, [r5, #0]
 8006b32:	6a21      	ldr	r1, [r4, #32]
 8006b34:	602b      	str	r3, [r5, #0]
 8006b36:	d032      	beq.n	8006b9e <__sflush_r+0x9a>
 8006b38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	075a      	lsls	r2, r3, #29
 8006b3e:	d505      	bpl.n	8006b4c <__sflush_r+0x48>
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	1ac0      	subs	r0, r0, r3
 8006b44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b46:	b10b      	cbz	r3, 8006b4c <__sflush_r+0x48>
 8006b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b4a:	1ac0      	subs	r0, r0, r3
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4602      	mov	r2, r0
 8006b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b52:	6a21      	ldr	r1, [r4, #32]
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b0      	blx	r6
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	d106      	bne.n	8006b6c <__sflush_r+0x68>
 8006b5e:	6829      	ldr	r1, [r5, #0]
 8006b60:	291d      	cmp	r1, #29
 8006b62:	d848      	bhi.n	8006bf6 <__sflush_r+0xf2>
 8006b64:	4a29      	ldr	r2, [pc, #164]	; (8006c0c <__sflush_r+0x108>)
 8006b66:	40ca      	lsrs	r2, r1
 8006b68:	07d6      	lsls	r6, r2, #31
 8006b6a:	d544      	bpl.n	8006bf6 <__sflush_r+0xf2>
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	6062      	str	r2, [r4, #4]
 8006b70:	04d9      	lsls	r1, r3, #19
 8006b72:	6922      	ldr	r2, [r4, #16]
 8006b74:	6022      	str	r2, [r4, #0]
 8006b76:	d504      	bpl.n	8006b82 <__sflush_r+0x7e>
 8006b78:	1c42      	adds	r2, r0, #1
 8006b7a:	d101      	bne.n	8006b80 <__sflush_r+0x7c>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	b903      	cbnz	r3, 8006b82 <__sflush_r+0x7e>
 8006b80:	6560      	str	r0, [r4, #84]	; 0x54
 8006b82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b84:	602f      	str	r7, [r5, #0]
 8006b86:	2900      	cmp	r1, #0
 8006b88:	d0c9      	beq.n	8006b1e <__sflush_r+0x1a>
 8006b8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	d002      	beq.n	8006b98 <__sflush_r+0x94>
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7ff fc98 	bl	80064c8 <_free_r>
 8006b98:	2000      	movs	r0, #0
 8006b9a:	6360      	str	r0, [r4, #52]	; 0x34
 8006b9c:	e7c0      	b.n	8006b20 <__sflush_r+0x1c>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b0      	blx	r6
 8006ba4:	1c41      	adds	r1, r0, #1
 8006ba6:	d1c8      	bne.n	8006b3a <__sflush_r+0x36>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0c5      	beq.n	8006b3a <__sflush_r+0x36>
 8006bae:	2b1d      	cmp	r3, #29
 8006bb0:	d001      	beq.n	8006bb6 <__sflush_r+0xb2>
 8006bb2:	2b16      	cmp	r3, #22
 8006bb4:	d101      	bne.n	8006bba <__sflush_r+0xb6>
 8006bb6:	602f      	str	r7, [r5, #0]
 8006bb8:	e7b1      	b.n	8006b1e <__sflush_r+0x1a>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	e7ad      	b.n	8006b20 <__sflush_r+0x1c>
 8006bc4:	690f      	ldr	r7, [r1, #16]
 8006bc6:	2f00      	cmp	r7, #0
 8006bc8:	d0a9      	beq.n	8006b1e <__sflush_r+0x1a>
 8006bca:	0793      	lsls	r3, r2, #30
 8006bcc:	680e      	ldr	r6, [r1, #0]
 8006bce:	bf08      	it	eq
 8006bd0:	694b      	ldreq	r3, [r1, #20]
 8006bd2:	600f      	str	r7, [r1, #0]
 8006bd4:	bf18      	it	ne
 8006bd6:	2300      	movne	r3, #0
 8006bd8:	eba6 0807 	sub.w	r8, r6, r7
 8006bdc:	608b      	str	r3, [r1, #8]
 8006bde:	f1b8 0f00 	cmp.w	r8, #0
 8006be2:	dd9c      	ble.n	8006b1e <__sflush_r+0x1a>
 8006be4:	4643      	mov	r3, r8
 8006be6:	463a      	mov	r2, r7
 8006be8:	6a21      	ldr	r1, [r4, #32]
 8006bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b0      	blx	r6
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	dc06      	bgt.n	8006c02 <__sflush_r+0xfe>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	e78e      	b.n	8006b20 <__sflush_r+0x1c>
 8006c02:	4407      	add	r7, r0
 8006c04:	eba8 0800 	sub.w	r8, r8, r0
 8006c08:	e7e9      	b.n	8006bde <__sflush_r+0xda>
 8006c0a:	bf00      	nop
 8006c0c:	20400001 	.word	0x20400001

08006c10 <_fflush_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	690b      	ldr	r3, [r1, #16]
 8006c14:	4605      	mov	r5, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	b1db      	cbz	r3, 8006c52 <_fflush_r+0x42>
 8006c1a:	b118      	cbz	r0, 8006c24 <_fflush_r+0x14>
 8006c1c:	6983      	ldr	r3, [r0, #24]
 8006c1e:	b90b      	cbnz	r3, 8006c24 <_fflush_r+0x14>
 8006c20:	f7ff f8be 	bl	8005da0 <__sinit>
 8006c24:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <_fflush_r+0x48>)
 8006c26:	429c      	cmp	r4, r3
 8006c28:	d109      	bne.n	8006c3e <_fflush_r+0x2e>
 8006c2a:	686c      	ldr	r4, [r5, #4]
 8006c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c30:	b17b      	cbz	r3, 8006c52 <_fflush_r+0x42>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c3a:	f7ff bf63 	b.w	8006b04 <__sflush_r>
 8006c3e:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <_fflush_r+0x4c>)
 8006c40:	429c      	cmp	r4, r3
 8006c42:	d101      	bne.n	8006c48 <_fflush_r+0x38>
 8006c44:	68ac      	ldr	r4, [r5, #8]
 8006c46:	e7f1      	b.n	8006c2c <_fflush_r+0x1c>
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <_fflush_r+0x50>)
 8006c4a:	429c      	cmp	r4, r3
 8006c4c:	bf08      	it	eq
 8006c4e:	68ec      	ldreq	r4, [r5, #12]
 8006c50:	e7ec      	b.n	8006c2c <_fflush_r+0x1c>
 8006c52:	2000      	movs	r0, #0
 8006c54:	bd38      	pop	{r3, r4, r5, pc}
 8006c56:	bf00      	nop
 8006c58:	080071e4 	.word	0x080071e4
 8006c5c:	08007204 	.word	0x08007204
 8006c60:	080071c4 	.word	0x080071c4

08006c64 <_lseek_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4c07      	ldr	r4, [pc, #28]	; (8006c84 <_lseek_r+0x20>)
 8006c68:	4605      	mov	r5, r0
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	6022      	str	r2, [r4, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f7fa ff80 	bl	8001b78 <_lseek>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_lseek_r+0x1e>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_lseek_r+0x1e>
 8006c80:	602b      	str	r3, [r5, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	200003c4 	.word	0x200003c4

08006c88 <__swhatbuf_r>:
 8006c88:	b570      	push	{r4, r5, r6, lr}
 8006c8a:	460e      	mov	r6, r1
 8006c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c90:	2900      	cmp	r1, #0
 8006c92:	b096      	sub	sp, #88	; 0x58
 8006c94:	4614      	mov	r4, r2
 8006c96:	461d      	mov	r5, r3
 8006c98:	da07      	bge.n	8006caa <__swhatbuf_r+0x22>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	602b      	str	r3, [r5, #0]
 8006c9e:	89b3      	ldrh	r3, [r6, #12]
 8006ca0:	061a      	lsls	r2, r3, #24
 8006ca2:	d410      	bmi.n	8006cc6 <__swhatbuf_r+0x3e>
 8006ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca8:	e00e      	b.n	8006cc8 <__swhatbuf_r+0x40>
 8006caa:	466a      	mov	r2, sp
 8006cac:	f000 f884 	bl	8006db8 <_fstat_r>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	dbf2      	blt.n	8006c9a <__swhatbuf_r+0x12>
 8006cb4:	9a01      	ldr	r2, [sp, #4]
 8006cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cbe:	425a      	negs	r2, r3
 8006cc0:	415a      	adcs	r2, r3
 8006cc2:	602a      	str	r2, [r5, #0]
 8006cc4:	e7ee      	b.n	8006ca4 <__swhatbuf_r+0x1c>
 8006cc6:	2340      	movs	r3, #64	; 0x40
 8006cc8:	2000      	movs	r0, #0
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	b016      	add	sp, #88	; 0x58
 8006cce:	bd70      	pop	{r4, r5, r6, pc}

08006cd0 <__smakebuf_r>:
 8006cd0:	898b      	ldrh	r3, [r1, #12]
 8006cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cd4:	079d      	lsls	r5, r3, #30
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	460c      	mov	r4, r1
 8006cda:	d507      	bpl.n	8006cec <__smakebuf_r+0x1c>
 8006cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	6123      	str	r3, [r4, #16]
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	6163      	str	r3, [r4, #20]
 8006ce8:	b002      	add	sp, #8
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
 8006cec:	ab01      	add	r3, sp, #4
 8006cee:	466a      	mov	r2, sp
 8006cf0:	f7ff ffca 	bl	8006c88 <__swhatbuf_r>
 8006cf4:	9900      	ldr	r1, [sp, #0]
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f7ff fc33 	bl	8006564 <_malloc_r>
 8006cfe:	b948      	cbnz	r0, 8006d14 <__smakebuf_r+0x44>
 8006d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d04:	059a      	lsls	r2, r3, #22
 8006d06:	d4ef      	bmi.n	8006ce8 <__smakebuf_r+0x18>
 8006d08:	f023 0303 	bic.w	r3, r3, #3
 8006d0c:	f043 0302 	orr.w	r3, r3, #2
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	e7e3      	b.n	8006cdc <__smakebuf_r+0xc>
 8006d14:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <__smakebuf_r+0x7c>)
 8006d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	6020      	str	r0, [r4, #0]
 8006d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	9b00      	ldr	r3, [sp, #0]
 8006d24:	6163      	str	r3, [r4, #20]
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	6120      	str	r0, [r4, #16]
 8006d2a:	b15b      	cbz	r3, 8006d44 <__smakebuf_r+0x74>
 8006d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d30:	4630      	mov	r0, r6
 8006d32:	f000 f853 	bl	8006ddc <_isatty_r>
 8006d36:	b128      	cbz	r0, 8006d44 <__smakebuf_r+0x74>
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	81a3      	strh	r3, [r4, #12]
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	431d      	orrs	r5, r3
 8006d48:	81a5      	strh	r5, [r4, #12]
 8006d4a:	e7cd      	b.n	8006ce8 <__smakebuf_r+0x18>
 8006d4c:	08005d69 	.word	0x08005d69

08006d50 <__ascii_mbtowc>:
 8006d50:	b082      	sub	sp, #8
 8006d52:	b901      	cbnz	r1, 8006d56 <__ascii_mbtowc+0x6>
 8006d54:	a901      	add	r1, sp, #4
 8006d56:	b142      	cbz	r2, 8006d6a <__ascii_mbtowc+0x1a>
 8006d58:	b14b      	cbz	r3, 8006d6e <__ascii_mbtowc+0x1e>
 8006d5a:	7813      	ldrb	r3, [r2, #0]
 8006d5c:	600b      	str	r3, [r1, #0]
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	1c10      	adds	r0, r2, #0
 8006d62:	bf18      	it	ne
 8006d64:	2001      	movne	r0, #1
 8006d66:	b002      	add	sp, #8
 8006d68:	4770      	bx	lr
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	e7fb      	b.n	8006d66 <__ascii_mbtowc+0x16>
 8006d6e:	f06f 0001 	mvn.w	r0, #1
 8006d72:	e7f8      	b.n	8006d66 <__ascii_mbtowc+0x16>

08006d74 <__malloc_lock>:
 8006d74:	4770      	bx	lr

08006d76 <__malloc_unlock>:
 8006d76:	4770      	bx	lr

08006d78 <_read_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4c07      	ldr	r4, [pc, #28]	; (8006d98 <_read_r+0x20>)
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	4608      	mov	r0, r1
 8006d80:	4611      	mov	r1, r2
 8006d82:	2200      	movs	r2, #0
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f7fa fe96 	bl	8001ab8 <_read>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_read_r+0x1e>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_read_r+0x1e>
 8006d94:	602b      	str	r3, [r5, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	200003c4 	.word	0x200003c4

08006d9c <__ascii_wctomb>:
 8006d9c:	b149      	cbz	r1, 8006db2 <__ascii_wctomb+0x16>
 8006d9e:	2aff      	cmp	r2, #255	; 0xff
 8006da0:	bf85      	ittet	hi
 8006da2:	238a      	movhi	r3, #138	; 0x8a
 8006da4:	6003      	strhi	r3, [r0, #0]
 8006da6:	700a      	strbls	r2, [r1, #0]
 8006da8:	f04f 30ff 	movhi.w	r0, #4294967295
 8006dac:	bf98      	it	ls
 8006dae:	2001      	movls	r0, #1
 8006db0:	4770      	bx	lr
 8006db2:	4608      	mov	r0, r1
 8006db4:	4770      	bx	lr
	...

08006db8 <_fstat_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4c07      	ldr	r4, [pc, #28]	; (8006dd8 <_fstat_r+0x20>)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	f7fa febc 	bl	8001b42 <_fstat>
 8006dca:	1c43      	adds	r3, r0, #1
 8006dcc:	d102      	bne.n	8006dd4 <_fstat_r+0x1c>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	b103      	cbz	r3, 8006dd4 <_fstat_r+0x1c>
 8006dd2:	602b      	str	r3, [r5, #0]
 8006dd4:	bd38      	pop	{r3, r4, r5, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200003c4 	.word	0x200003c4

08006ddc <_isatty_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4c06      	ldr	r4, [pc, #24]	; (8006df8 <_isatty_r+0x1c>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4605      	mov	r5, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	f7fa febb 	bl	8001b62 <_isatty>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_isatty_r+0x1a>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_isatty_r+0x1a>
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	200003c4 	.word	0x200003c4

08006dfc <fmod>:
 8006dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e00:	ed2d 8b02 	vpush	{d8}
 8006e04:	b08b      	sub	sp, #44	; 0x2c
 8006e06:	ec55 4b10 	vmov	r4, r5, d0
 8006e0a:	ec57 6b11 	vmov	r6, r7, d1
 8006e0e:	f000 f859 	bl	8006ec4 <__ieee754_fmod>
 8006e12:	4b2a      	ldr	r3, [pc, #168]	; (8006ebc <fmod+0xc0>)
 8006e14:	eeb0 8a40 	vmov.f32	s16, s0
 8006e18:	eef0 8a60 	vmov.f32	s17, s1
 8006e1c:	f993 8000 	ldrsb.w	r8, [r3]
 8006e20:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006e24:	d030      	beq.n	8006e88 <fmod+0x8c>
 8006e26:	4632      	mov	r2, r6
 8006e28:	463b      	mov	r3, r7
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	4639      	mov	r1, r7
 8006e2e:	f7f9 fe85 	bl	8000b3c <__aeabi_dcmpun>
 8006e32:	bb48      	cbnz	r0, 8006e88 <fmod+0x8c>
 8006e34:	4622      	mov	r2, r4
 8006e36:	462b      	mov	r3, r5
 8006e38:	4620      	mov	r0, r4
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	f7f9 fe7e 	bl	8000b3c <__aeabi_dcmpun>
 8006e40:	4681      	mov	r9, r0
 8006e42:	bb08      	cbnz	r0, 8006e88 <fmod+0x8c>
 8006e44:	2200      	movs	r2, #0
 8006e46:	2300      	movs	r3, #0
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fe44 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e50:	b1d0      	cbz	r0, 8006e88 <fmod+0x8c>
 8006e52:	2301      	movs	r3, #1
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <fmod+0xc4>)
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006e5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e62:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e66:	f1b8 0f00 	cmp.w	r8, #0
 8006e6a:	d116      	bne.n	8006e9a <fmod+0x9e>
 8006e6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006e70:	4668      	mov	r0, sp
 8006e72:	f000 f939 	bl	80070e8 <matherr>
 8006e76:	b1d8      	cbz	r0, 8006eb0 <fmod+0xb4>
 8006e78:	9b08      	ldr	r3, [sp, #32]
 8006e7a:	b11b      	cbz	r3, 8006e84 <fmod+0x88>
 8006e7c:	f7fd fc66 	bl	800474c <__errno>
 8006e80:	9b08      	ldr	r3, [sp, #32]
 8006e82:	6003      	str	r3, [r0, #0]
 8006e84:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006e88:	eeb0 0a48 	vmov.f32	s0, s16
 8006e8c:	eef0 0a68 	vmov.f32	s1, s17
 8006e90:	b00b      	add	sp, #44	; 0x2c
 8006e92:	ecbd 8b02 	vpop	{d8}
 8006e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	f7f9 fcdb 	bl	800085c <__aeabi_ddiv>
 8006ea6:	f1b8 0f02 	cmp.w	r8, #2
 8006eaa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006eae:	d1df      	bne.n	8006e70 <fmod+0x74>
 8006eb0:	f7fd fc4c 	bl	800474c <__errno>
 8006eb4:	2321      	movs	r3, #33	; 0x21
 8006eb6:	6003      	str	r3, [r0, #0]
 8006eb8:	e7de      	b.n	8006e78 <fmod+0x7c>
 8006eba:	bf00      	nop
 8006ebc:	200001e0 	.word	0x200001e0
 8006ec0:	08007440 	.word	0x08007440

08006ec4 <__ieee754_fmod>:
 8006ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	ec53 2b11 	vmov	r2, r3, d1
 8006ecc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8006ed0:	ea5e 0402 	orrs.w	r4, lr, r2
 8006ed4:	ec51 0b10 	vmov	r0, r1, d0
 8006ed8:	461e      	mov	r6, r3
 8006eda:	ee11 5a10 	vmov	r5, s2
 8006ede:	4694      	mov	ip, r2
 8006ee0:	d00c      	beq.n	8006efc <__ieee754_fmod+0x38>
 8006ee2:	4c7a      	ldr	r4, [pc, #488]	; (80070cc <__ieee754_fmod+0x208>)
 8006ee4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8006ee8:	45a0      	cmp	r8, r4
 8006eea:	4689      	mov	r9, r1
 8006eec:	dc06      	bgt.n	8006efc <__ieee754_fmod+0x38>
 8006eee:	4254      	negs	r4, r2
 8006ef0:	4314      	orrs	r4, r2
 8006ef2:	4f77      	ldr	r7, [pc, #476]	; (80070d0 <__ieee754_fmod+0x20c>)
 8006ef4:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8006ef8:	42bc      	cmp	r4, r7
 8006efa:	d909      	bls.n	8006f10 <__ieee754_fmod+0x4c>
 8006efc:	f7f9 fb84 	bl	8000608 <__aeabi_dmul>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	f7f9 fcaa 	bl	800085c <__aeabi_ddiv>
 8006f08:	ec41 0b10 	vmov	d0, r0, r1
 8006f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f10:	45f0      	cmp	r8, lr
 8006f12:	ee10 2a10 	vmov	r2, s0
 8006f16:	4607      	mov	r7, r0
 8006f18:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8006f1c:	dc0a      	bgt.n	8006f34 <__ieee754_fmod+0x70>
 8006f1e:	dbf3      	blt.n	8006f08 <__ieee754_fmod+0x44>
 8006f20:	42a8      	cmp	r0, r5
 8006f22:	d3f1      	bcc.n	8006f08 <__ieee754_fmod+0x44>
 8006f24:	d106      	bne.n	8006f34 <__ieee754_fmod+0x70>
 8006f26:	496b      	ldr	r1, [pc, #428]	; (80070d4 <__ieee754_fmod+0x210>)
 8006f28:	0fe4      	lsrs	r4, r4, #31
 8006f2a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006f2e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006f32:	e7e9      	b.n	8006f08 <__ieee754_fmod+0x44>
 8006f34:	4b68      	ldr	r3, [pc, #416]	; (80070d8 <__ieee754_fmod+0x214>)
 8006f36:	4598      	cmp	r8, r3
 8006f38:	dc49      	bgt.n	8006fce <__ieee754_fmod+0x10a>
 8006f3a:	f1b8 0f00 	cmp.w	r8, #0
 8006f3e:	d13d      	bne.n	8006fbc <__ieee754_fmod+0xf8>
 8006f40:	4866      	ldr	r0, [pc, #408]	; (80070dc <__ieee754_fmod+0x218>)
 8006f42:	4611      	mov	r1, r2
 8006f44:	2900      	cmp	r1, #0
 8006f46:	dc36      	bgt.n	8006fb6 <__ieee754_fmod+0xf2>
 8006f48:	459e      	cmp	lr, r3
 8006f4a:	dc51      	bgt.n	8006ff0 <__ieee754_fmod+0x12c>
 8006f4c:	f1be 0f00 	cmp.w	lr, #0
 8006f50:	d145      	bne.n	8006fde <__ieee754_fmod+0x11a>
 8006f52:	4b62      	ldr	r3, [pc, #392]	; (80070dc <__ieee754_fmod+0x218>)
 8006f54:	4629      	mov	r1, r5
 8006f56:	2900      	cmp	r1, #0
 8006f58:	dc3e      	bgt.n	8006fd8 <__ieee754_fmod+0x114>
 8006f5a:	4961      	ldr	r1, [pc, #388]	; (80070e0 <__ieee754_fmod+0x21c>)
 8006f5c:	4288      	cmp	r0, r1
 8006f5e:	db4c      	blt.n	8006ffa <__ieee754_fmod+0x136>
 8006f60:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8006f64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006f68:	4a5d      	ldr	r2, [pc, #372]	; (80070e0 <__ieee754_fmod+0x21c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	db59      	blt.n	8007022 <__ieee754_fmod+0x15e>
 8006f6e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8006f72:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8006f76:	1ac0      	subs	r0, r0, r3
 8006f78:	1b8a      	subs	r2, r1, r6
 8006f7a:	eba7 050c 	sub.w	r5, r7, ip
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d166      	bne.n	8007050 <__ieee754_fmod+0x18c>
 8006f82:	4567      	cmp	r7, ip
 8006f84:	bf38      	it	cc
 8006f86:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	bfbc      	itt	lt
 8006f8e:	463d      	movlt	r5, r7
 8006f90:	460a      	movlt	r2, r1
 8006f92:	ea52 0105 	orrs.w	r1, r2, r5
 8006f96:	d0c6      	beq.n	8006f26 <__ieee754_fmod+0x62>
 8006f98:	494f      	ldr	r1, [pc, #316]	; (80070d8 <__ieee754_fmod+0x214>)
 8006f9a:	428a      	cmp	r2, r1
 8006f9c:	dd6d      	ble.n	800707a <__ieee754_fmod+0x1b6>
 8006f9e:	4950      	ldr	r1, [pc, #320]	; (80070e0 <__ieee754_fmod+0x21c>)
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	db70      	blt.n	8007086 <__ieee754_fmod+0x1c2>
 8006fa4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8006fa8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006fac:	4314      	orrs	r4, r2
 8006fae:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	e7a8      	b.n	8006f08 <__ieee754_fmod+0x44>
 8006fb6:	3801      	subs	r0, #1
 8006fb8:	0049      	lsls	r1, r1, #1
 8006fba:	e7c3      	b.n	8006f44 <__ieee754_fmod+0x80>
 8006fbc:	4848      	ldr	r0, [pc, #288]	; (80070e0 <__ieee754_fmod+0x21c>)
 8006fbe:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8006fc2:	0049      	lsls	r1, r1, #1
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	f100 30ff 	add.w	r0, r0, #4294967295
 8006fca:	dcfa      	bgt.n	8006fc2 <__ieee754_fmod+0xfe>
 8006fcc:	e7bc      	b.n	8006f48 <__ieee754_fmod+0x84>
 8006fce:	ea4f 5028 	mov.w	r0, r8, asr #20
 8006fd2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8006fd6:	e7b7      	b.n	8006f48 <__ieee754_fmod+0x84>
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	0049      	lsls	r1, r1, #1
 8006fdc:	e7bb      	b.n	8006f56 <__ieee754_fmod+0x92>
 8006fde:	4b40      	ldr	r3, [pc, #256]	; (80070e0 <__ieee754_fmod+0x21c>)
 8006fe0:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8006fe4:	0049      	lsls	r1, r1, #1
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fec:	dcfa      	bgt.n	8006fe4 <__ieee754_fmod+0x120>
 8006fee:	e7b4      	b.n	8006f5a <__ieee754_fmod+0x96>
 8006ff0:	ea4f 532e 	mov.w	r3, lr, asr #20
 8006ff4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ff8:	e7af      	b.n	8006f5a <__ieee754_fmod+0x96>
 8006ffa:	1a0f      	subs	r7, r1, r0
 8006ffc:	2f1f      	cmp	r7, #31
 8006ffe:	dc0a      	bgt.n	8007016 <__ieee754_fmod+0x152>
 8007000:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8007004:	fa08 f807 	lsl.w	r8, r8, r7
 8007008:	fa22 f101 	lsr.w	r1, r2, r1
 800700c:	ea41 0108 	orr.w	r1, r1, r8
 8007010:	fa02 f707 	lsl.w	r7, r2, r7
 8007014:	e7a8      	b.n	8006f68 <__ieee754_fmod+0xa4>
 8007016:	4933      	ldr	r1, [pc, #204]	; (80070e4 <__ieee754_fmod+0x220>)
 8007018:	1a09      	subs	r1, r1, r0
 800701a:	fa02 f101 	lsl.w	r1, r2, r1
 800701e:	2700      	movs	r7, #0
 8007020:	e7a2      	b.n	8006f68 <__ieee754_fmod+0xa4>
 8007022:	eba2 0c03 	sub.w	ip, r2, r3
 8007026:	f1bc 0f1f 	cmp.w	ip, #31
 800702a:	dc0a      	bgt.n	8007042 <__ieee754_fmod+0x17e>
 800702c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8007030:	fa0e fe0c 	lsl.w	lr, lr, ip
 8007034:	fa25 f606 	lsr.w	r6, r5, r6
 8007038:	ea46 060e 	orr.w	r6, r6, lr
 800703c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007040:	e799      	b.n	8006f76 <__ieee754_fmod+0xb2>
 8007042:	4e28      	ldr	r6, [pc, #160]	; (80070e4 <__ieee754_fmod+0x220>)
 8007044:	1af6      	subs	r6, r6, r3
 8007046:	fa05 f606 	lsl.w	r6, r5, r6
 800704a:	f04f 0c00 	mov.w	ip, #0
 800704e:	e792      	b.n	8006f76 <__ieee754_fmod+0xb2>
 8007050:	4567      	cmp	r7, ip
 8007052:	bf38      	it	cc
 8007054:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8007058:	2a00      	cmp	r2, #0
 800705a:	da05      	bge.n	8007068 <__ieee754_fmod+0x1a4>
 800705c:	0ffa      	lsrs	r2, r7, #31
 800705e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007062:	007f      	lsls	r7, r7, #1
 8007064:	3801      	subs	r0, #1
 8007066:	e787      	b.n	8006f78 <__ieee754_fmod+0xb4>
 8007068:	ea52 0105 	orrs.w	r1, r2, r5
 800706c:	f43f af5b 	beq.w	8006f26 <__ieee754_fmod+0x62>
 8007070:	0fe9      	lsrs	r1, r5, #31
 8007072:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8007076:	006f      	lsls	r7, r5, #1
 8007078:	e7f4      	b.n	8007064 <__ieee754_fmod+0x1a0>
 800707a:	0fe8      	lsrs	r0, r5, #31
 800707c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007080:	006d      	lsls	r5, r5, #1
 8007082:	3b01      	subs	r3, #1
 8007084:	e789      	b.n	8006f9a <__ieee754_fmod+0xd6>
 8007086:	1ac9      	subs	r1, r1, r3
 8007088:	2914      	cmp	r1, #20
 800708a:	dc0a      	bgt.n	80070a2 <__ieee754_fmod+0x1de>
 800708c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8007090:	fa02 f303 	lsl.w	r3, r2, r3
 8007094:	40cd      	lsrs	r5, r1
 8007096:	432b      	orrs	r3, r5
 8007098:	410a      	asrs	r2, r1
 800709a:	ea42 0104 	orr.w	r1, r2, r4
 800709e:	4618      	mov	r0, r3
 80070a0:	e732      	b.n	8006f08 <__ieee754_fmod+0x44>
 80070a2:	291f      	cmp	r1, #31
 80070a4:	dc07      	bgt.n	80070b6 <__ieee754_fmod+0x1f2>
 80070a6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80070aa:	40cd      	lsrs	r5, r1
 80070ac:	fa02 f303 	lsl.w	r3, r2, r3
 80070b0:	432b      	orrs	r3, r5
 80070b2:	4622      	mov	r2, r4
 80070b4:	e7f1      	b.n	800709a <__ieee754_fmod+0x1d6>
 80070b6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80070ba:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80070be:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80070c2:	33e2      	adds	r3, #226	; 0xe2
 80070c4:	fa42 f303 	asr.w	r3, r2, r3
 80070c8:	e7f3      	b.n	80070b2 <__ieee754_fmod+0x1ee>
 80070ca:	bf00      	nop
 80070cc:	7fefffff 	.word	0x7fefffff
 80070d0:	7ff00000 	.word	0x7ff00000
 80070d4:	08007448 	.word	0x08007448
 80070d8:	000fffff 	.word	0x000fffff
 80070dc:	fffffbed 	.word	0xfffffbed
 80070e0:	fffffc02 	.word	0xfffffc02
 80070e4:	fffffbe2 	.word	0xfffffbe2

080070e8 <matherr>:
 80070e8:	2000      	movs	r0, #0
 80070ea:	4770      	bx	lr

080070ec <_init>:
 80070ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ee:	bf00      	nop
 80070f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f2:	bc08      	pop	{r3}
 80070f4:	469e      	mov	lr, r3
 80070f6:	4770      	bx	lr

080070f8 <_fini>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	bf00      	nop
 80070fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fe:	bc08      	pop	{r3}
 8007100:	469e      	mov	lr, r3
 8007102:	4770      	bx	lr
