
MOTOR_Grellier_Leconte.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08006af0  08006af0  00016af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd8  08006dd8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006de0  08006de0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006de0  08006de0  00016de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001e0  08006fc8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006fc8  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010152  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002491  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  000327f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00033740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180c6  00000000  00000000  00034568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cca0  00000000  00000000  0004c62e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f0cf  00000000  00000000  000592ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e839d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e90  00000000  00000000  000e8418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ad8 	.word	0x08006ad8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08006ad8 	.word	0x08006ad8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <Encoder_Init>:
#include "encoder.h"
#include "tim.h"


void Encoder_Init(void){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8000ebc:	f000 fb74 	bl	80015a8 <MX_TIM2_Init>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <Encoder_Init+0x24>)
 8000ec4:	f001 ff58 	bl	8002d78 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <Encoder_Init+0x24>)
 8000ecc:	f001 ff54 	bl	8002d78 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <Encoder_Init+0x24>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000029c 	.word	0x2000029c

08000ee0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_GPIO_Init+0xb4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2120      	movs	r1, #32
 8000f6a:	480b      	ldr	r0, [pc, #44]	; (8000f98 <MX_GPIO_Init+0xb8>)
 8000f6c:	f001 f812 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f70:	2320      	movs	r3, #32
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_GPIO_Init+0xb8>)
 8000f88:	f000 fe82 	bl	8001c90 <HAL_GPIO_Init>

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <MX_I2C1_Init+0x54>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_I2C1_Init+0x58>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fda:	f001 f80f 	bl	8001ffc <HAL_I2C_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe4:	f000 f916 	bl	8001214 <Error_Handler>
  }

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000208 	.word	0x20000208
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	000186a0 	.word	0x000186a0

08000ff8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_I2C_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12b      	bne.n	8001072 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_I2C_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001036:	23c0      	movs	r3, #192	; 0xc0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103a:	2312      	movs	r3, #18
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001046:	2304      	movs	r3, #4
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <HAL_I2C_MspInit+0x8c>)
 8001052:	f000 fe1d 	bl	8001c90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_I2C_MspInit+0x88>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	; 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40005400 	.word	0x40005400
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	; 0x38
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f000 fca1 	bl	80019d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  Motor_Init();
 8001092:	f000 f8c7 	bl	8001224 <Motor_Init>
  Encoder_Init();
 8001096:	f7ff ff0f 	bl	8000eb8 <Encoder_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109a:	f000 f821 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109e:	f7ff ff1f 	bl	8000ee0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010a2:	f000 fbfb 	bl	800189c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010a6:	f7ff ff79 	bl	8000f9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t MSG[50]={'\0'};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2232      	movs	r2, #50	; 0x32
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 f827 	bl	8004104 <memset>
  Motor_Pwm_Update(0.5);
 80010b6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80010ba:	f000 f8c3 	bl	8001244 <Motor_Pwm_Update>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //sprintf(MSG,"cc: %ld\n\r",TIM2->CNT);
	  sprintf(MSG,"cc: %ld\n\r",__HAL_TIM_GET_COUNTER(&htim2));
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <main+0x50>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4905      	ldr	r1, [pc, #20]	; (80010dc <main+0x54>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 fc97 	bl	80049fc <siprintf>
	  printf(MSG);
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fc7b 	bl	80049cc <iprintf>
	  sprintf(MSG,"cc: %ld\n\r",__HAL_TIM_GET_COUNTER(&htim2));
 80010d6:	e7f2      	b.n	80010be <main+0x36>
 80010d8:	2000029c 	.word	0x2000029c
 80010dc:	08006af0 	.word	0x08006af0

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	; 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	2230      	movs	r2, #48	; 0x30
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 f808 	bl	8004104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <SystemClock_Config+0xd0>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <SystemClock_Config+0xd0>)
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <SystemClock_Config+0xd0>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <SystemClock_Config+0xd4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800112c:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <SystemClock_Config+0xd4>)
 800112e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <SystemClock_Config+0xd4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2301      	movs	r3, #1
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001148:	2310      	movs	r3, #16
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001154:	2310      	movs	r3, #16
 8001156:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001158:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800115c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800115e:	2304      	movs	r3, #4
 8001160:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001162:	2307      	movs	r3, #7
 8001164:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f87e 	bl	800226c <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001176:	f000 f84d 	bl	8001214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2302      	movs	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2102      	movs	r1, #2
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fad8 	bl	800274c <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011a2:	f000 f837 	bl	8001214 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3750      	adds	r7, #80	; 0x50
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	static uint16_t tempoNms = 500;
	if(tempoNms > 0 ) tempoNms--;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_SYSTICK_Callback+0x30>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_SYSTICK_Callback+0x1a>
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_SYSTICK_Callback+0x30>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_SYSTICK_Callback+0x30>)
 80011ce:	801a      	strh	r2, [r3, #0]
		tempoNms = 500;
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);


	}
}
 80011d0:	e007      	b.n	80011e2 <HAL_SYSTICK_Callback+0x2a>
		tempoNms = 500;
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_SYSTICK_Callback+0x30>)
 80011d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011d8:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011da:	2120      	movs	r1, #32
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <HAL_SYSTICK_Callback+0x34>)
 80011de:	f000 fef2 	bl	8001fc6 <HAL_GPIO_TogglePin>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000000 	.word	0x20000000
 80011ec:	40020000 	.word	0x40020000

080011f0 <__io_putchar>:

int __io_putchar(int ch){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80011f8:	1d39      	adds	r1, r7, #4
 80011fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fe:	2201      	movs	r2, #1
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <__io_putchar+0x20>)
 8001202:	f002 faf6 	bl	80037f2 <HAL_UART_Transmit>
	return ch;
 8001206:	687b      	ldr	r3, [r7, #4]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200002dc 	.word	0x200002dc

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <Motor_Init>:
#include "motor.h"
#include "tim.h"


void Motor_Init(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 8001228:	f000 fa12 	bl	8001650 <MX_TIM3_Init>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800122c:	2100      	movs	r1, #0
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <Motor_Init+0x1c>)
 8001230:	f001 fcde 	bl	8002bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001234:	2104      	movs	r1, #4
 8001236:	4802      	ldr	r0, [pc, #8]	; (8001240 <Motor_Init+0x1c>)
 8001238:	f001 fcda 	bl	8002bf0 <HAL_TIM_PWM_Start>
};
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000025c 	.word	0x2000025c

08001244 <Motor_Pwm_Update>:


void Motor_Pwm_Update(float in){
 8001244:	b580      	push	{r7, lr}
 8001246:	b090      	sub	sp, #64	; 0x40
 8001248:	af00      	add	r7, sp, #0
 800124a:	ed87 0a01 	vstr	s0, [r7, #4]

	TIM_OC_InitTypeDef sConfigOC1 = {0};
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	619a      	str	r2, [r3, #24]
	sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 8001262:	2360      	movs	r3, #96	; 0x60
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC1.Pulse = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC1.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	; 0x34

	TIM_OC_InitTypeDef sConfigOC2 = {0};
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	619a      	str	r2, [r3, #24]
	sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8001286:	2360      	movs	r3, #96	; 0x60
 8001288:	60bb      	str	r3, [r7, #8]
	sConfigOC2.Pulse = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
	sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
	sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]


	if(in<-1.0){
 8001296:	edd7 7a01 	vldr	s15, [r7, #4]
 800129a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	d501      	bpl.n	80012ac <Motor_Pwm_Update+0x68>
		in=-1.0;
 80012a8:	4b39      	ldr	r3, [pc, #228]	; (8001390 <Motor_Pwm_Update+0x14c>)
 80012aa:	607b      	str	r3, [r7, #4]
	}
	if(in>1.0){
 80012ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	dd02      	ble.n	80012c4 <Motor_Pwm_Update+0x80>
			in=1.0;
 80012be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012c2:	607b      	str	r3, [r7, #4]
		}

	if(in<0.0){
 80012c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d0:	d513      	bpl.n	80012fa <Motor_Pwm_Update+0xb6>
		sConfigOC1.Pulse = htim3.Init.Period*-in;
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <Motor_Pwm_Update+0x150>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012de:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e2:	eef1 7a67 	vneg.f32	s15, s15
 80012e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ee:	ee17 3a90 	vmov	r3, s15
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
		sConfigOC2.Pulse = htim3.Init.Period;
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <Motor_Pwm_Update+0x150>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60fb      	str	r3, [r7, #12]
	}
	if(in>0.0){
 80012fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	dd11      	ble.n	800132c <Motor_Pwm_Update+0xe8>
			sConfigOC1.Pulse = htim3.Init.Period;
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <Motor_Pwm_Update+0x150>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
			sConfigOC2.Pulse = htim3.Init.Period*in;
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <Motor_Pwm_Update+0x150>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800131a:	edd7 7a01 	vldr	s15, [r7, #4]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001326:	ee17 3a90 	vmov	r3, s15
 800132a:	60fb      	str	r3, [r7, #12]
		}
	if(in==0.0){
 800132c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001330:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	d105      	bne.n	8001346 <Motor_Pwm_Update+0x102>
			sConfigOC1.Pulse = htim3.Init.Period;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <Motor_Pwm_Update+0x150>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
			sConfigOC2.Pulse = htim3.Init.Period;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <Motor_Pwm_Update+0x150>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60fb      	str	r3, [r7, #12]
			}

	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <Motor_Pwm_Update+0x150>)
 8001350:	f001 fd4a 	bl	8002de8 <HAL_TIM_PWM_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <Motor_Pwm_Update+0x11a>
	  {
	    Error_Handler();
 800135a:	f7ff ff5b 	bl	8001214 <Error_Handler>
	  }

	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2204      	movs	r2, #4
 8001364:	4619      	mov	r1, r3
 8001366:	480b      	ldr	r0, [pc, #44]	; (8001394 <Motor_Pwm_Update+0x150>)
 8001368:	f001 fd3e 	bl	8002de8 <HAL_TIM_PWM_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <Motor_Pwm_Update+0x132>
	  {
	    Error_Handler();
 8001372:	f7ff ff4f 	bl	8001214 <Error_Handler>
	  }
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001376:	2100      	movs	r1, #0
 8001378:	4806      	ldr	r0, [pc, #24]	; (8001394 <Motor_Pwm_Update+0x150>)
 800137a:	f001 fc39 	bl	8002bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800137e:	2104      	movs	r1, #4
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <Motor_Pwm_Update+0x150>)
 8001382:	f001 fc35 	bl	8002bf0 <HAL_TIM_PWM_Start>
}
 8001386:	bf00      	nop
 8001388:	3740      	adds	r7, #64	; 0x40
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	bf800000 	.word	0xbf800000
 8001394:	2000025c 	.word	0x2000025c

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013d6:	2007      	movs	r0, #7
 80013d8:	f000 fc20 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143c:	f000 fb1c 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001440:	f000 fc1f 	bl	8001c82 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e00a      	b.n	8001470 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800145a:	f3af 8000 	nop.w
 800145e:	4601      	mov	r1, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf0      	blt.n	800145a <_read+0x12>
	}

return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e009      	b.n	80014a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fea7 	bl	80011f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf1      	blt.n	8001494 <_write+0x12>
	}
	return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_close>:

int _close(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e2:	605a      	str	r2, [r3, #4]
	return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_isatty>:

int _isatty(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x50>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x16>
		heap_end = &end;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <_sbrk+0x50>)
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <_sbrk+0x54>)
 8001538:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <_sbrk+0x50>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <_sbrk+0x50>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	466a      	mov	r2, sp
 800154a:	4293      	cmp	r3, r2
 800154c:	d907      	bls.n	800155e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800154e:	f002 fdaf 	bl	80040b0 <__errno>
 8001552:	4602      	mov	r2, r0
 8001554:	230c      	movs	r3, #12
 8001556:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	e006      	b.n	800156c <_sbrk+0x48>
	}

	heap_end += incr;
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <_sbrk+0x50>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a03      	ldr	r2, [pc, #12]	; (8001574 <_sbrk+0x50>)
 8001568:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200001fc 	.word	0x200001fc
 8001578:	20000328 	.word	0x20000328

0800157c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <SystemInit+0x28>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <SystemInit+0x28>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SystemInit+0x28>)
 8001592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001596:	609a      	str	r2, [r3, #8]
#endif
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2224      	movs	r2, #36	; 0x24
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 fda4 	bl	8004104 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_TIM2_Init+0xa4>)
 80015c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_TIM2_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <MX_TIM2_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_TIM2_Init+0xa4>)
 80015da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_TIM2_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_TIM2_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f4:	2301      	movs	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001604:	2301      	movs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_TIM2_Init+0xa4>)
 8001618:	f001 fb1c 	bl	8002c54 <HAL_TIM_Encoder_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001622:	f7ff fdf7 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <MX_TIM2_Init+0xa4>)
 8001634:	f002 f822 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800163e:	f7ff fde9 	bl	8001214 <Error_Handler>
  }

}
 8001642:	bf00      	nop
 8001644:	3730      	adds	r7, #48	; 0x30
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000029c 	.word	0x2000029c

08001650 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	; 0x38
 8001654:	af00      	add	r7, sp, #0
  int period= 4000; //Valeur de reload du timer 3
 8001656:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
 8001682:	615a      	str	r2, [r3, #20]
 8001684:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <MX_TIM3_Init+0x100>)
 8001688:	4a32      	ldr	r2, [pc, #200]	; (8001754 <MX_TIM3_Init+0x104>)
 800168a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <MX_TIM3_Init+0x100>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <MX_TIM3_Init+0x100>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = period;
 8001698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <MX_TIM3_Init+0x100>)
 800169c:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <MX_TIM3_Init+0x100>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <MX_TIM3_Init+0x100>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016aa:	4829      	ldr	r0, [pc, #164]	; (8001750 <MX_TIM3_Init+0x100>)
 80016ac:	f001 fa40 	bl	8002b30 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80016b6:	f7ff fdad 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	4619      	mov	r1, r3
 80016c6:	4822      	ldr	r0, [pc, #136]	; (8001750 <MX_TIM3_Init+0x100>)
 80016c8:	f001 fc54 	bl	8002f74 <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80016d2:	f7ff fd9f 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016d6:	481e      	ldr	r0, [pc, #120]	; (8001750 <MX_TIM3_Init+0x100>)
 80016d8:	f001 fa55 	bl	8002b86 <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80016e2:	f7ff fd97 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	4816      	ldr	r0, [pc, #88]	; (8001750 <MX_TIM3_Init+0x100>)
 80016f6:	f001 ffc1 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001700:	f7ff fd88 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001704:	2360      	movs	r3, #96	; 0x60
 8001706:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <MX_TIM3_Init+0x100>)
 800171c:	f001 fb64 	bl	8002de8 <HAL_TIM_PWM_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001726:	f7ff fd75 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	2204      	movs	r2, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <MX_TIM3_Init+0x100>)
 8001732:	f001 fb59 	bl	8002de8 <HAL_TIM_PWM_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800173c:	f7ff fd6a 	bl	8001214 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <MX_TIM3_Init+0x100>)
 8001742:	f000 f871 	bl	8001828 <HAL_TIM_MspPostInit>

}
 8001746:	bf00      	nop
 8001748:	3738      	adds	r7, #56	; 0x38
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000025c 	.word	0x2000025c
 8001754:	40000400 	.word	0x40000400

08001758 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001778:	d12b      	bne.n	80017d2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_TIM_Encoder_MspInit+0x84>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a16      	ldr	r2, [pc, #88]	; (80017dc <HAL_TIM_Encoder_MspInit+0x84>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_TIM_Encoder_MspInit+0x84>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_TIM_Encoder_MspInit+0x84>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <HAL_TIM_Encoder_MspInit+0x84>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_TIM_Encoder_MspInit+0x84>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017b2:	2303      	movs	r3, #3
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017c2:	2301      	movs	r3, #1
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80017ce:	f000 fa5f 	bl	8001c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <HAL_TIM_Base_MspInit+0x3c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10d      	bne.n	8001812 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_TIM_Base_MspInit+0x40>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_TIM_Base_MspInit+0x40>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_TIM_Base_MspInit+0x40>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40000400 	.word	0x40000400
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <HAL_TIM_MspPostInit+0x68>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d11d      	bne.n	8001886 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001866:	23c0      	movs	r3, #192	; 0xc0
 8001868:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001876:	2302      	movs	r3, #2
 8001878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_TIM_MspPostInit+0x70>)
 8001882:	f000 fa05 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40000400 	.word	0x40000400
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000

0800189c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <MX_USART2_UART_Init+0x50>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018d4:	f001 ff40 	bl	8003758 <HAL_UART_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018de:	f7ff fc99 	bl	8001214 <Error_Handler>
  }

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200002dc 	.word	0x200002dc
 80018ec:	40004400 	.word	0x40004400

080018f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_UART_MspInit+0x84>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d12b      	bne.n	800196a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_UART_MspInit+0x88>)
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800194a:	230c      	movs	r3, #12
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195a:	2307      	movs	r3, #7
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <HAL_UART_MspInit+0x8c>)
 8001966:	f000 f993 	bl	8001c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40004400 	.word	0x40004400
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001986:	e003      	b.n	8001990 <LoopCopyDataInit>

08001988 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800198a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800198c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800198e:	3104      	adds	r1, #4

08001990 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001998:	d3f6      	bcc.n	8001988 <CopyDataInit>
  ldr  r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800199c:	e002      	b.n	80019a4 <LoopFillZerobss>

0800199e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800199e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019a0:	f842 3b04 	str.w	r3, [r2], #4

080019a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019a8:	d3f9      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019aa:	f7ff fde7 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f002 fb85 	bl	80040bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fb69 	bl	8001088 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80019bc:	08006de8 	.word	0x08006de8
  ldr  r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019c4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80019c8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80019cc:	20000324 	.word	0x20000324

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_Init+0x40>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_Init+0x40>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x40>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 f90d 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f808 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff fcc6 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f917 	bl	8001c6a <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 f8ed 	bl	8001c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	2000000c 	.word	0x2000000c
 8001a74:	20000008 	.word	0x20000008

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	2000000c 	.word	0x2000000c
 8001a9c:	2000031c 	.word	0x2000031c

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	2000031c 	.word	0x2000031c

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be8:	d301      	bcc.n	8001bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <SysTick_Config+0x40>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f7ff ff8e 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <SysTick_Config+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SysTick_Config+0x40>)
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff47 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff5c 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff8e 	bl	8001b70 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5d 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffb0 	bl	8001bd8 <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001c86:	f7ff fa97 	bl	80011b8 <HAL_SYSTICK_Callback>
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	e159      	b.n	8001f60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f040 8148 	bne.w	8001f5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d00b      	beq.n	8001cea <HAL_GPIO_Init+0x5a>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cde:	2b11      	cmp	r3, #17
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d130      	bne.n	8001d4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 0201 	and.w	r2, r3, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0xfc>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b12      	cmp	r3, #18
 8001d8a:	d123      	bne.n	8001dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	69b9      	ldr	r1, [r7, #24]
 8001dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a2 	beq.w	8001f5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <HAL_GPIO_Init+0x2e4>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a55      	ldr	r2, [pc, #340]	; (8001f74 <HAL_GPIO_Init+0x2e4>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <HAL_GPIO_Init+0x2e4>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e32:	4a51      	ldr	r2, [pc, #324]	; (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	220f      	movs	r2, #15
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a48      	ldr	r2, [pc, #288]	; (8001f7c <HAL_GPIO_Init+0x2ec>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x202>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <HAL_GPIO_Init+0x2f0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x1fe>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a46      	ldr	r2, [pc, #280]	; (8001f84 <HAL_GPIO_Init+0x2f4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x1fa>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a45      	ldr	r2, [pc, #276]	; (8001f88 <HAL_GPIO_Init+0x2f8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x1f6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a44      	ldr	r2, [pc, #272]	; (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x1f2>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e82:	2307      	movs	r3, #7
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4934      	ldr	r1, [pc, #208]	; (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb2:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed6:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001edc:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f00:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2a:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f54:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f aea2 	bls.w	8001cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3724      	adds	r7, #36	; 0x24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40013c00 	.word	0x40013c00

08001f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fb0:	e003      	b.n	8001fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	041a      	lsls	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	619a      	str	r2, [r3, #24]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	401a      	ands	r2, r3
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d104      	bne.n	8001fea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	041a      	lsls	r2, r3, #16
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	619a      	str	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e11f      	b.n	800224e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe ffe8 	bl	8000ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	; 0x24
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800204e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800205e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002060:	f000 fd3e 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8002064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a7b      	ldr	r2, [pc, #492]	; (8002258 <HAL_I2C_Init+0x25c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d807      	bhi.n	8002080 <HAL_I2C_Init+0x84>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a7a      	ldr	r2, [pc, #488]	; (800225c <HAL_I2C_Init+0x260>)
 8002074:	4293      	cmp	r3, r2
 8002076:	bf94      	ite	ls
 8002078:	2301      	movls	r3, #1
 800207a:	2300      	movhi	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e006      	b.n	800208e <HAL_I2C_Init+0x92>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a77      	ldr	r2, [pc, #476]	; (8002260 <HAL_I2C_Init+0x264>)
 8002084:	4293      	cmp	r3, r2
 8002086:	bf94      	ite	ls
 8002088:	2301      	movls	r3, #1
 800208a:	2300      	movhi	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0db      	b.n	800224e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a72      	ldr	r2, [pc, #456]	; (8002264 <HAL_I2C_Init+0x268>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0c9b      	lsrs	r3, r3, #18
 80020a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a64      	ldr	r2, [pc, #400]	; (8002258 <HAL_I2C_Init+0x25c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d802      	bhi.n	80020d0 <HAL_I2C_Init+0xd4>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3301      	adds	r3, #1
 80020ce:	e009      	b.n	80020e4 <HAL_I2C_Init+0xe8>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	4a63      	ldr	r2, [pc, #396]	; (8002268 <HAL_I2C_Init+0x26c>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	3301      	adds	r3, #1
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4956      	ldr	r1, [pc, #344]	; (8002258 <HAL_I2C_Init+0x25c>)
 8002100:	428b      	cmp	r3, r1
 8002102:	d80d      	bhi.n	8002120 <HAL_I2C_Init+0x124>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e59      	subs	r1, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002112:	3301      	adds	r3, #1
 8002114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002118:	2b04      	cmp	r3, #4
 800211a:	bf38      	it	cc
 800211c:	2304      	movcc	r3, #4
 800211e:	e04f      	b.n	80021c0 <HAL_I2C_Init+0x1c4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d111      	bne.n	800214c <HAL_I2C_Init+0x150>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1e58      	subs	r0, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	440b      	add	r3, r1
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e012      	b.n	8002172 <HAL_I2C_Init+0x176>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e58      	subs	r0, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	0099      	lsls	r1, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002162:	3301      	adds	r3, #1
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Init+0x17e>
 8002176:	2301      	movs	r3, #1
 8002178:	e022      	b.n	80021c0 <HAL_I2C_Init+0x1c4>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10e      	bne.n	80021a0 <HAL_I2C_Init+0x1a4>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1e58      	subs	r0, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	440b      	add	r3, r1
 8002190:	fbb0 f3f3 	udiv	r3, r0, r3
 8002194:	3301      	adds	r3, #1
 8002196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219e:	e00f      	b.n	80021c0 <HAL_I2C_Init+0x1c4>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1e58      	subs	r0, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	0099      	lsls	r1, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b6:	3301      	adds	r3, #1
 80021b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	6809      	ldr	r1, [r1, #0]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6911      	ldr	r1, [r2, #16]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68d2      	ldr	r2, [r2, #12]
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	430b      	orrs	r3, r1
 8002202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	000186a0 	.word	0x000186a0
 800225c:	001e847f 	.word	0x001e847f
 8002260:	003d08ff 	.word	0x003d08ff
 8002264:	431bde83 	.word	0x431bde83
 8002268:	10624dd3 	.word	0x10624dd3

0800226c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e25b      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d075      	beq.n	8002376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800228a:	4ba3      	ldr	r3, [pc, #652]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b04      	cmp	r3, #4
 8002294:	d00c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002296:	4ba0      	ldr	r3, [pc, #640]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d112      	bne.n	80022c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a2:	4b9d      	ldr	r3, [pc, #628]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ae:	d10b      	bne.n	80022c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	4b99      	ldr	r3, [pc, #612]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05b      	beq.n	8002374 <HAL_RCC_OscConfig+0x108>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d157      	bne.n	8002374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e236      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_OscConfig+0x74>
 80022d2:	4b91      	ldr	r3, [pc, #580]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a90      	ldr	r2, [pc, #576]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e01d      	b.n	800231c <HAL_RCC_OscConfig+0xb0>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x98>
 80022ea:	4b8b      	ldr	r3, [pc, #556]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a8a      	ldr	r2, [pc, #552]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b88      	ldr	r3, [pc, #544]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a87      	ldr	r2, [pc, #540]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0xb0>
 8002304:	4b84      	ldr	r3, [pc, #528]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a83      	ldr	r2, [pc, #524]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b81      	ldr	r3, [pc, #516]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a80      	ldr	r2, [pc, #512]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fbbc 	bl	8001aa0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fbb8 	bl	8001aa0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1fb      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0xc0>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fba8 	bl	8001aa0 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fba4 	bl	8001aa0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1e7      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	4b6c      	ldr	r3, [pc, #432]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0xe8>
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d063      	beq.n	800244a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002382:	4b65      	ldr	r3, [pc, #404]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238e:	4b62      	ldr	r3, [pc, #392]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002396:	2b08      	cmp	r3, #8
 8002398:	d11c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239a:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a6:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x152>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e1bb      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	4b56      	ldr	r3, [pc, #344]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4952      	ldr	r1, [pc, #328]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	e03a      	b.n	800244a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023dc:	4b4f      	ldr	r3, [pc, #316]	; (800251c <HAL_RCC_OscConfig+0x2b0>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7ff fb5d 	bl	8001aa0 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ea:	f7ff fb59 	bl	8001aa0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e19c      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002408:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4940      	ldr	r1, [pc, #256]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
 800241c:	e015      	b.n	800244a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241e:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_OscConfig+0x2b0>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7ff fb3c 	bl	8001aa0 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242c:	f7ff fb38 	bl	8001aa0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e17b      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	4b36      	ldr	r3, [pc, #216]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d030      	beq.n	80024b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245e:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_RCC_OscConfig+0x2b4>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7ff fb1c 	bl	8001aa0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff fb18 	bl	8001aa0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e15b      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x200>
 800248a:	e015      	b.n	80024b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_OscConfig+0x2b4>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7ff fb05 	bl	8001aa0 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800249a:	f7ff fb01 	bl	8001aa0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e144      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a0 	beq.w	8002606 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f2:	2301      	movs	r3, #1
 80024f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x2b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d121      	bne.n	8002546 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_RCC_OscConfig+0x2b8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a07      	ldr	r2, [pc, #28]	; (8002524 <HAL_RCC_OscConfig+0x2b8>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250e:	f7ff fac7 	bl	8001aa0 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002514:	e011      	b.n	800253a <HAL_RCC_OscConfig+0x2ce>
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	42470000 	.word	0x42470000
 8002520:	42470e80 	.word	0x42470e80
 8002524:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002528:	f7ff faba 	bl	8001aa0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0fd      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b81      	ldr	r3, [pc, #516]	; (8002740 <HAL_RCC_OscConfig+0x4d4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d106      	bne.n	800255c <HAL_RCC_OscConfig+0x2f0>
 800254e:	4b7d      	ldr	r3, [pc, #500]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a7c      	ldr	r2, [pc, #496]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
 800255a:	e01c      	b.n	8002596 <HAL_RCC_OscConfig+0x32a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d10c      	bne.n	800257e <HAL_RCC_OscConfig+0x312>
 8002564:	4b77      	ldr	r3, [pc, #476]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	4a76      	ldr	r2, [pc, #472]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6713      	str	r3, [r2, #112]	; 0x70
 8002570:	4b74      	ldr	r3, [pc, #464]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a73      	ldr	r2, [pc, #460]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
 800257c:	e00b      	b.n	8002596 <HAL_RCC_OscConfig+0x32a>
 800257e:	4b71      	ldr	r3, [pc, #452]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	4a70      	ldr	r2, [pc, #448]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6713      	str	r3, [r2, #112]	; 0x70
 800258a:	4b6e      	ldr	r3, [pc, #440]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258e:	4a6d      	ldr	r2, [pc, #436]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d015      	beq.n	80025ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259e:	f7ff fa7f 	bl	8001aa0 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7ff fa7b 	bl	8001aa0 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0bc      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	4b61      	ldr	r3, [pc, #388]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ee      	beq.n	80025a6 <HAL_RCC_OscConfig+0x33a>
 80025c8:	e014      	b.n	80025f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7ff fa69 	bl	8001aa0 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff fa65 	bl	8001aa0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0a6      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	4b56      	ldr	r3, [pc, #344]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4b52      	ldr	r3, [pc, #328]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a51      	ldr	r2, [pc, #324]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8092 	beq.w	8002734 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002610:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d05c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d141      	bne.n	80026a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b48      	ldr	r3, [pc, #288]	; (8002748 <HAL_RCC_OscConfig+0x4dc>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff fa39 	bl	8001aa0 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff fa35 	bl	8001aa0 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e078      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002644:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	019b      	lsls	r3, r3, #6
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	3b01      	subs	r3, #1
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	061b      	lsls	r3, r3, #24
 8002674:	4933      	ldr	r1, [pc, #204]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800267a:	4b33      	ldr	r3, [pc, #204]	; (8002748 <HAL_RCC_OscConfig+0x4dc>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff fa0e 	bl	8001aa0 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff fa0a 	bl	8001aa0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e04d      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269a:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x41c>
 80026a6:	e045      	b.n	8002734 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x4dc>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7ff f9f7 	bl	8001aa0 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b6:	f7ff f9f3 	bl	8001aa0 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e036      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f0      	bne.n	80026b6 <HAL_RCC_OscConfig+0x44a>
 80026d4:	e02e      	b.n	8002734 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e029      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026e2:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_RCC_OscConfig+0x4d8>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d11c      	bne.n	8002730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d115      	bne.n	8002730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800270a:	4013      	ands	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002710:	4293      	cmp	r3, r2
 8002712:	d10d      	bne.n	8002730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d106      	bne.n	8002730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40007000 	.word	0x40007000
 8002744:	40023800 	.word	0x40023800
 8002748:	42470060 	.word	0x42470060

0800274c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0cc      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b68      	ldr	r3, [pc, #416]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d90c      	bls.n	8002788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0b8      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a0:	4b59      	ldr	r3, [pc, #356]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a58      	ldr	r2, [pc, #352]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b8:	4b53      	ldr	r3, [pc, #332]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b50      	ldr	r3, [pc, #320]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	494d      	ldr	r1, [pc, #308]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d044      	beq.n	800286c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d119      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e07f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d003      	beq.n	800280a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002806:	2b03      	cmp	r3, #3
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e06f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e067      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4934      	ldr	r1, [pc, #208]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	4313      	orrs	r3, r2
 800283a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800283c:	f7ff f930 	bl	8001aa0 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7ff f92c 	bl	8001aa0 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e04f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	4b25      	ldr	r3, [pc, #148]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d20c      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e032      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4916      	ldr	r1, [pc, #88]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	490e      	ldr	r1, [pc, #56]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028d2:	f000 f821 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028d6:	4601      	mov	r1, r0
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	5cd3      	ldrb	r3, [r2, r3]
 80028e6:	fa21 f303 	lsr.w	r3, r1, r3
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1c8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f890 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023c00 	.word	0x40023c00
 8002908:	40023800 	.word	0x40023800
 800290c:	08006afc 	.word	0x08006afc
 8002910:	20000004 	.word	0x20000004
 8002914:	20000008 	.word	0x20000008

08002918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	2300      	movs	r3, #0
 8002928:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800292e:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b04      	cmp	r3, #4
 8002938:	d007      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x32>
 800293a:	2b08      	cmp	r3, #8
 800293c:	d008      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x38>
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 80b4 	bne.w	8002aac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b5e      	ldr	r3, [pc, #376]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002946:	60bb      	str	r3, [r7, #8]
       break;
 8002948:	e0b3      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294a:	4b5e      	ldr	r3, [pc, #376]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800294c:	60bb      	str	r3, [r7, #8]
      break;
 800294e:	e0b0      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002950:	4b5a      	ldr	r3, [pc, #360]	; (8002abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002958:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800295a:	4b58      	ldr	r3, [pc, #352]	; (8002abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d04a      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4b55      	ldr	r3, [pc, #340]	; (8002abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	f04f 0400 	mov.w	r4, #0
 8002970:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	ea03 0501 	and.w	r5, r3, r1
 800297c:	ea04 0602 	and.w	r6, r4, r2
 8002980:	4629      	mov	r1, r5
 8002982:	4632      	mov	r2, r6
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	0154      	lsls	r4, r2, #5
 800298e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002992:	014b      	lsls	r3, r1, #5
 8002994:	4619      	mov	r1, r3
 8002996:	4622      	mov	r2, r4
 8002998:	1b49      	subs	r1, r1, r5
 800299a:	eb62 0206 	sbc.w	r2, r2, r6
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	f04f 0400 	mov.w	r4, #0
 80029a6:	0194      	lsls	r4, r2, #6
 80029a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029ac:	018b      	lsls	r3, r1, #6
 80029ae:	1a5b      	subs	r3, r3, r1
 80029b0:	eb64 0402 	sbc.w	r4, r4, r2
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	00e2      	lsls	r2, r4, #3
 80029be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029c2:	00d9      	lsls	r1, r3, #3
 80029c4:	460b      	mov	r3, r1
 80029c6:	4614      	mov	r4, r2
 80029c8:	195b      	adds	r3, r3, r5
 80029ca:	eb44 0406 	adc.w	r4, r4, r6
 80029ce:	f04f 0100 	mov.w	r1, #0
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	0262      	lsls	r2, r4, #9
 80029d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029dc:	0259      	lsls	r1, r3, #9
 80029de:	460b      	mov	r3, r1
 80029e0:	4614      	mov	r4, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	4621      	mov	r1, r4
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	461a      	mov	r2, r3
 80029ee:	4623      	mov	r3, r4
 80029f0:	f7fe f8e2 	bl	8000bb8 <__aeabi_uldivmod>
 80029f4:	4603      	mov	r3, r0
 80029f6:	460c      	mov	r4, r1
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e049      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fc:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	ea03 0501 	and.w	r5, r3, r1
 8002a12:	ea04 0602 	and.w	r6, r4, r2
 8002a16:	4629      	mov	r1, r5
 8002a18:	4632      	mov	r2, r6
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	f04f 0400 	mov.w	r4, #0
 8002a22:	0154      	lsls	r4, r2, #5
 8002a24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a28:	014b      	lsls	r3, r1, #5
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4622      	mov	r2, r4
 8002a2e:	1b49      	subs	r1, r1, r5
 8002a30:	eb62 0206 	sbc.w	r2, r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0194      	lsls	r4, r2, #6
 8002a3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a42:	018b      	lsls	r3, r1, #6
 8002a44:	1a5b      	subs	r3, r3, r1
 8002a46:	eb64 0402 	sbc.w	r4, r4, r2
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	00e2      	lsls	r2, r4, #3
 8002a54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a58:	00d9      	lsls	r1, r3, #3
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4614      	mov	r4, r2
 8002a5e:	195b      	adds	r3, r3, r5
 8002a60:	eb44 0406 	adc.w	r4, r4, r6
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	02a2      	lsls	r2, r4, #10
 8002a6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a72:	0299      	lsls	r1, r3, #10
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f04f 0400 	mov.w	r4, #0
 8002a82:	461a      	mov	r2, r3
 8002a84:	4623      	mov	r3, r4
 8002a86:	f7fe f897 	bl	8000bb8 <__aeabi_uldivmod>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	460c      	mov	r4, r1
 8002a8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	60bb      	str	r3, [r7, #8]
      break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002aae:	60bb      	str	r3, [r7, #8]
      break;
 8002ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	007a1200 	.word	0x007a1200

08002ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000004 	.word	0x20000004

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ae4:	f7ff fff0 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4601      	mov	r1, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0a9b      	lsrs	r3, r3, #10
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af6:	5cd3      	ldrb	r3, [r2, r3]
 8002af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08006b0c 	.word	0x08006b0c

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b0c:	f7ff ffdc 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b10:	4601      	mov	r1, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0b5b      	lsrs	r3, r3, #13
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	08006b0c 	.word	0x08006b0c

08002b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e01d      	b.n	8002b7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe fe44 	bl	80017e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 fab8 	bl	80030e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e01d      	b.n	8002bd4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f815 	bl	8002bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	f000 fa8d 	bl	80030e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	6839      	ldr	r1, [r7, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fd14 	bl	8003630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <HAL_TIM_PWM_Start+0x60>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d107      	bne.n	8002c22 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b06      	cmp	r3, #6
 8002c32:	d007      	beq.n	8002c44 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40010000 	.word	0x40010000

08002c54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e083      	b.n	8002d70 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fe fd6b 	bl	8001758 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c98:	f023 0307 	bic.w	r3, r3, #7
 8002c9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f000 fa1b 	bl	80030e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002cf4:	f023 030c 	bic.w	r3, r3, #12
 8002cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	4313      	orrs	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	011a      	lsls	r2, r3, #4
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	031b      	lsls	r3, r3, #12
 8002d24:	4313      	orrs	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	4313      	orrs	r3, r2
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_TIM_Encoder_Start+0x16>
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d008      	beq.n	8002d9e <HAL_TIM_Encoder_Start+0x26>
 8002d8c:	e00f      	b.n	8002dae <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2201      	movs	r2, #1
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fc4a 	bl	8003630 <TIM_CCxChannelCmd>
      break;
 8002d9c:	e016      	b.n	8002dcc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2201      	movs	r2, #1
 8002da4:	2104      	movs	r1, #4
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fc42 	bl	8003630 <TIM_CCxChannelCmd>
      break;
 8002dac:	e00e      	b.n	8002dcc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2201      	movs	r2, #1
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fc3a 	bl	8003630 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	2104      	movs	r1, #4
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fc33 	bl	8003630 <TIM_CCxChannelCmd>
      break;
 8002dca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e0b4      	b.n	8002f6c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b0c      	cmp	r3, #12
 8002e16:	f200 809f 	bhi.w	8002f58 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e55 	.word	0x08002e55
 8002e24:	08002f59 	.word	0x08002f59
 8002e28:	08002f59 	.word	0x08002f59
 8002e2c:	08002f59 	.word	0x08002f59
 8002e30:	08002e95 	.word	0x08002e95
 8002e34:	08002f59 	.word	0x08002f59
 8002e38:	08002f59 	.word	0x08002f59
 8002e3c:	08002f59 	.word	0x08002f59
 8002e40:	08002ed7 	.word	0x08002ed7
 8002e44:	08002f59 	.word	0x08002f59
 8002e48:	08002f59 	.word	0x08002f59
 8002e4c:	08002f59 	.word	0x08002f59
 8002e50:	08002f17 	.word	0x08002f17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f9c2 	bl	80031e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0208 	orr.w	r2, r2, #8
 8002e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0204 	bic.w	r2, r2, #4
 8002e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6999      	ldr	r1, [r3, #24]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	619a      	str	r2, [r3, #24]
      break;
 8002e92:	e062      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fa08 	bl	80032b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6999      	ldr	r1, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	619a      	str	r2, [r3, #24]
      break;
 8002ed4:	e041      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fa53 	bl	8003388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0208 	orr.w	r2, r2, #8
 8002ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0204 	bic.w	r2, r2, #4
 8002f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69d9      	ldr	r1, [r3, #28]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]
      break;
 8002f14:	e021      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fa9d 	bl	800345c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69d9      	ldr	r1, [r3, #28]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	61da      	str	r2, [r3, #28]
      break;
 8002f56:	e000      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002f58:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIM_ConfigClockSource+0x18>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0a6      	b.n	80030da <HAL_TIM_ConfigClockSource+0x166>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b40      	cmp	r3, #64	; 0x40
 8002fc2:	d067      	beq.n	8003094 <HAL_TIM_ConfigClockSource+0x120>
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d80b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x6c>
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d073      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x140>
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d802      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x62>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d06f      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002fd4:	e078      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d06c      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x140>
 8002fda:	2b30      	cmp	r3, #48	; 0x30
 8002fdc:	d06a      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002fde:	e073      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002fe0:	2b70      	cmp	r3, #112	; 0x70
 8002fe2:	d00d      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0x8c>
 8002fe4:	2b70      	cmp	r3, #112	; 0x70
 8002fe6:	d804      	bhi.n	8002ff2 <HAL_TIM_ConfigClockSource+0x7e>
 8002fe8:	2b50      	cmp	r3, #80	; 0x50
 8002fea:	d033      	beq.n	8003054 <HAL_TIM_ConfigClockSource+0xe0>
 8002fec:	2b60      	cmp	r3, #96	; 0x60
 8002fee:	d041      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ff0:	e06a      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	d066      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x152>
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffc:	d017      	beq.n	800302e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ffe:	e063      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f000 faee 	bl	80035f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003022:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]
      break;
 800302c:	e04c      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6899      	ldr	r1, [r3, #8]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f000 fad7 	bl	80035f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003050:	609a      	str	r2, [r3, #8]
      break;
 8003052:	e039      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	461a      	mov	r2, r3
 8003062:	f000 fa4b 	bl	80034fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2150      	movs	r1, #80	; 0x50
 800306c:	4618      	mov	r0, r3
 800306e:	f000 faa4 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8003072:	e029      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	461a      	mov	r2, r3
 8003082:	f000 fa6a 	bl	800355a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2160      	movs	r1, #96	; 0x60
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fa94 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8003092:	e019      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	461a      	mov	r2, r3
 80030a2:	f000 fa2b 	bl	80034fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2140      	movs	r1, #64	; 0x40
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fa84 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 80030b2:	e009      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 fa7b 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 80030c4:	e000      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80030c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <TIM_Base_SetConfig+0xe4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00f      	beq.n	800311c <TIM_Base_SetConfig+0x38>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003102:	d00b      	beq.n	800311c <TIM_Base_SetConfig+0x38>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a31      	ldr	r2, [pc, #196]	; (80031cc <TIM_Base_SetConfig+0xe8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <TIM_Base_SetConfig+0x38>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <TIM_Base_SetConfig+0xec>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_Base_SetConfig+0x38>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a2f      	ldr	r2, [pc, #188]	; (80031d4 <TIM_Base_SetConfig+0xf0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d108      	bne.n	800312e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a25      	ldr	r2, [pc, #148]	; (80031c8 <TIM_Base_SetConfig+0xe4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01b      	beq.n	800316e <TIM_Base_SetConfig+0x8a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313c:	d017      	beq.n	800316e <TIM_Base_SetConfig+0x8a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <TIM_Base_SetConfig+0xe8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <TIM_Base_SetConfig+0x8a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <TIM_Base_SetConfig+0xec>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00f      	beq.n	800316e <TIM_Base_SetConfig+0x8a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a20      	ldr	r2, [pc, #128]	; (80031d4 <TIM_Base_SetConfig+0xf0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00b      	beq.n	800316e <TIM_Base_SetConfig+0x8a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <TIM_Base_SetConfig+0xf4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <TIM_Base_SetConfig+0x8a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <TIM_Base_SetConfig+0xf8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d003      	beq.n	800316e <TIM_Base_SetConfig+0x8a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <TIM_Base_SetConfig+0xfc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d108      	bne.n	8003180 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <TIM_Base_SetConfig+0xe4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d103      	bne.n	80031b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	615a      	str	r2, [r3, #20]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40010000 	.word	0x40010000
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800
 80031d4:	40000c00 	.word	0x40000c00
 80031d8:	40014000 	.word	0x40014000
 80031dc:	40014400 	.word	0x40014400
 80031e0:	40014800 	.word	0x40014800

080031e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	f023 0201 	bic.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0303 	bic.w	r3, r3, #3
 800321a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f023 0302 	bic.w	r3, r3, #2
 800322c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a1c      	ldr	r2, [pc, #112]	; (80032ac <TIM_OC1_SetConfig+0xc8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d10c      	bne.n	800325a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f023 0308 	bic.w	r3, r3, #8
 8003246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a13      	ldr	r2, [pc, #76]	; (80032ac <TIM_OC1_SetConfig+0xc8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d111      	bne.n	8003286 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	621a      	str	r2, [r3, #32]
}
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40010000 	.word	0x40010000

080032b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f023 0210 	bic.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f023 0320 	bic.w	r3, r3, #32
 80032fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a1e      	ldr	r2, [pc, #120]	; (8003384 <TIM_OC2_SetConfig+0xd4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d10d      	bne.n	800332c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <TIM_OC2_SetConfig+0xd4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d113      	bne.n	800335c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800333a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	621a      	str	r2, [r3, #32]
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000

08003388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <TIM_OC3_SetConfig+0xd0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10d      	bne.n	8003402 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a14      	ldr	r2, [pc, #80]	; (8003458 <TIM_OC3_SetConfig+0xd0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d113      	bne.n	8003432 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	621a      	str	r2, [r3, #32]
}
 800344c:	bf00      	nop
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40010000 	.word	0x40010000

0800345c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	031b      	lsls	r3, r3, #12
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a10      	ldr	r2, [pc, #64]	; (80034f8 <TIM_OC4_SetConfig+0x9c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d109      	bne.n	80034d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000

080034fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f023 0201 	bic.w	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f023 030a 	bic.w	r3, r3, #10
 8003538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355a:	b480      	push	{r7}
 800355c:	b087      	sub	sp, #28
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 0210 	bic.w	r2, r3, #16
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	031b      	lsls	r3, r3, #12
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003596:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f043 0307 	orr.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800360a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	021a      	lsls	r2, r3, #8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	431a      	orrs	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	609a      	str	r2, [r3, #8]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2201      	movs	r2, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	43db      	mvns	r3, r3
 8003652:	401a      	ands	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003690:	2302      	movs	r3, #2
 8003692:	e050      	b.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d013      	beq.n	800370a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a18      	ldr	r2, [pc, #96]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a16      	ldr	r2, [pc, #88]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a13      	ldr	r2, [pc, #76]	; (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d10c      	bne.n	8003724 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	4313      	orrs	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40010000 	.word	0x40010000
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40014000 	.word	0x40014000

08003758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e03f      	b.n	80037ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe f8b6 	bl	80018f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f90b 	bl	80039b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b088      	sub	sp, #32
 80037f6:	af02      	add	r7, sp, #8
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b20      	cmp	r3, #32
 8003810:	f040 8083 	bne.w	800391a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_UART_Transmit+0x2e>
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e07b      	b.n	800391c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_UART_Transmit+0x40>
 800382e:	2302      	movs	r3, #2
 8003830:	e074      	b.n	800391c <HAL_UART_Transmit+0x12a>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2221      	movs	r2, #33	; 0x21
 8003844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003848:	f7fe f92a 	bl	8001aa0 <HAL_GetTick>
 800384c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003862:	e042      	b.n	80038ea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387a:	d122      	bne.n	80038c2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2200      	movs	r2, #0
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f84c 	bl	8003924 <UART_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e042      	b.n	800391c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3302      	adds	r3, #2
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	e017      	b.n	80038ea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	3301      	adds	r3, #1
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	e013      	b.n	80038ea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2180      	movs	r1, #128	; 0x80
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f829 	bl	8003924 <UART_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e01f      	b.n	800391c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	60ba      	str	r2, [r7, #8]
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1b7      	bne.n	8003864 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2200      	movs	r2, #0
 80038fc:	2140      	movs	r1, #64	; 0x40
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f810 	bl	8003924 <UART_WaitOnFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e006      	b.n	800391c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e000      	b.n	800391c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003934:	e02c      	b.n	8003990 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d028      	beq.n	8003990 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <UART_WaitOnFlagUntilTimeout+0x30>
 8003944:	f7fe f8ac 	bl	8001aa0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	429a      	cmp	r2, r3
 8003952:	d21d      	bcs.n	8003990 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003962:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e00f      	b.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d0c3      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039fa:	f023 030c 	bic.w	r3, r3, #12
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a26:	f040 818b 	bne.w	8003d40 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4ac1      	ldr	r2, [pc, #772]	; (8003d34 <UART_SetConfig+0x37c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d005      	beq.n	8003a40 <UART_SetConfig+0x88>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4abf      	ldr	r2, [pc, #764]	; (8003d38 <UART_SetConfig+0x380>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	f040 80bd 	bne.w	8003bba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a40:	f7ff f862 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8003a44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	461d      	mov	r5, r3
 8003a4a:	f04f 0600 	mov.w	r6, #0
 8003a4e:	46a8      	mov	r8, r5
 8003a50:	46b1      	mov	r9, r6
 8003a52:	eb18 0308 	adds.w	r3, r8, r8
 8003a56:	eb49 0409 	adc.w	r4, r9, r9
 8003a5a:	4698      	mov	r8, r3
 8003a5c:	46a1      	mov	r9, r4
 8003a5e:	eb18 0805 	adds.w	r8, r8, r5
 8003a62:	eb49 0906 	adc.w	r9, r9, r6
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a7a:	4688      	mov	r8, r1
 8003a7c:	4691      	mov	r9, r2
 8003a7e:	eb18 0005 	adds.w	r0, r8, r5
 8003a82:	eb49 0106 	adc.w	r1, r9, r6
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	461d      	mov	r5, r3
 8003a8c:	f04f 0600 	mov.w	r6, #0
 8003a90:	196b      	adds	r3, r5, r5
 8003a92:	eb46 0406 	adc.w	r4, r6, r6
 8003a96:	461a      	mov	r2, r3
 8003a98:	4623      	mov	r3, r4
 8003a9a:	f7fd f88d 	bl	8000bb8 <__aeabi_uldivmod>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4ba5      	ldr	r3, [pc, #660]	; (8003d3c <UART_SetConfig+0x384>)
 8003aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	461d      	mov	r5, r3
 8003ab4:	f04f 0600 	mov.w	r6, #0
 8003ab8:	46a9      	mov	r9, r5
 8003aba:	46b2      	mov	sl, r6
 8003abc:	eb19 0309 	adds.w	r3, r9, r9
 8003ac0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ac4:	4699      	mov	r9, r3
 8003ac6:	46a2      	mov	sl, r4
 8003ac8:	eb19 0905 	adds.w	r9, r9, r5
 8003acc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003adc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ae0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ae4:	4689      	mov	r9, r1
 8003ae6:	4692      	mov	sl, r2
 8003ae8:	eb19 0005 	adds.w	r0, r9, r5
 8003aec:	eb4a 0106 	adc.w	r1, sl, r6
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	461d      	mov	r5, r3
 8003af6:	f04f 0600 	mov.w	r6, #0
 8003afa:	196b      	adds	r3, r5, r5
 8003afc:	eb46 0406 	adc.w	r4, r6, r6
 8003b00:	461a      	mov	r2, r3
 8003b02:	4623      	mov	r3, r4
 8003b04:	f7fd f858 	bl	8000bb8 <__aeabi_uldivmod>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	460c      	mov	r4, r1
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4b8b      	ldr	r3, [pc, #556]	; (8003d3c <UART_SetConfig+0x384>)
 8003b10:	fba3 1302 	umull	r1, r3, r3, r2
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	2164      	movs	r1, #100	; 0x64
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	3332      	adds	r3, #50	; 0x32
 8003b22:	4a86      	ldr	r2, [pc, #536]	; (8003d3c <UART_SetConfig+0x384>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b30:	4498      	add	r8, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	461d      	mov	r5, r3
 8003b36:	f04f 0600 	mov.w	r6, #0
 8003b3a:	46a9      	mov	r9, r5
 8003b3c:	46b2      	mov	sl, r6
 8003b3e:	eb19 0309 	adds.w	r3, r9, r9
 8003b42:	eb4a 040a 	adc.w	r4, sl, sl
 8003b46:	4699      	mov	r9, r3
 8003b48:	46a2      	mov	sl, r4
 8003b4a:	eb19 0905 	adds.w	r9, r9, r5
 8003b4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b66:	4689      	mov	r9, r1
 8003b68:	4692      	mov	sl, r2
 8003b6a:	eb19 0005 	adds.w	r0, r9, r5
 8003b6e:	eb4a 0106 	adc.w	r1, sl, r6
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	461d      	mov	r5, r3
 8003b78:	f04f 0600 	mov.w	r6, #0
 8003b7c:	196b      	adds	r3, r5, r5
 8003b7e:	eb46 0406 	adc.w	r4, r6, r6
 8003b82:	461a      	mov	r2, r3
 8003b84:	4623      	mov	r3, r4
 8003b86:	f7fd f817 	bl	8000bb8 <__aeabi_uldivmod>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <UART_SetConfig+0x384>)
 8003b92:	fba3 1302 	umull	r1, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2164      	movs	r1, #100	; 0x64
 8003b9a:	fb01 f303 	mul.w	r3, r1, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	3332      	adds	r3, #50	; 0x32
 8003ba4:	4a65      	ldr	r2, [pc, #404]	; (8003d3c <UART_SetConfig+0x384>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	f003 0207 	and.w	r2, r3, #7
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4442      	add	r2, r8
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	e26f      	b.n	800409a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bba:	f7fe ff91 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8003bbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	f04f 0600 	mov.w	r6, #0
 8003bc8:	46a8      	mov	r8, r5
 8003bca:	46b1      	mov	r9, r6
 8003bcc:	eb18 0308 	adds.w	r3, r8, r8
 8003bd0:	eb49 0409 	adc.w	r4, r9, r9
 8003bd4:	4698      	mov	r8, r3
 8003bd6:	46a1      	mov	r9, r4
 8003bd8:	eb18 0805 	adds.w	r8, r8, r5
 8003bdc:	eb49 0906 	adc.w	r9, r9, r6
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bf0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bf4:	4688      	mov	r8, r1
 8003bf6:	4691      	mov	r9, r2
 8003bf8:	eb18 0005 	adds.w	r0, r8, r5
 8003bfc:	eb49 0106 	adc.w	r1, r9, r6
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	461d      	mov	r5, r3
 8003c06:	f04f 0600 	mov.w	r6, #0
 8003c0a:	196b      	adds	r3, r5, r5
 8003c0c:	eb46 0406 	adc.w	r4, r6, r6
 8003c10:	461a      	mov	r2, r3
 8003c12:	4623      	mov	r3, r4
 8003c14:	f7fc ffd0 	bl	8000bb8 <__aeabi_uldivmod>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <UART_SetConfig+0x384>)
 8003c20:	fba3 2302 	umull	r2, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	461d      	mov	r5, r3
 8003c2e:	f04f 0600 	mov.w	r6, #0
 8003c32:	46a9      	mov	r9, r5
 8003c34:	46b2      	mov	sl, r6
 8003c36:	eb19 0309 	adds.w	r3, r9, r9
 8003c3a:	eb4a 040a 	adc.w	r4, sl, sl
 8003c3e:	4699      	mov	r9, r3
 8003c40:	46a2      	mov	sl, r4
 8003c42:	eb19 0905 	adds.w	r9, r9, r5
 8003c46:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c5e:	4689      	mov	r9, r1
 8003c60:	4692      	mov	sl, r2
 8003c62:	eb19 0005 	adds.w	r0, r9, r5
 8003c66:	eb4a 0106 	adc.w	r1, sl, r6
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	461d      	mov	r5, r3
 8003c70:	f04f 0600 	mov.w	r6, #0
 8003c74:	196b      	adds	r3, r5, r5
 8003c76:	eb46 0406 	adc.w	r4, r6, r6
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	f7fc ff9b 	bl	8000bb8 <__aeabi_uldivmod>
 8003c82:	4603      	mov	r3, r0
 8003c84:	460c      	mov	r4, r1
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <UART_SetConfig+0x384>)
 8003c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2164      	movs	r1, #100	; 0x64
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	3332      	adds	r3, #50	; 0x32
 8003c9c:	4a27      	ldr	r2, [pc, #156]	; (8003d3c <UART_SetConfig+0x384>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003caa:	4498      	add	r8, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	461d      	mov	r5, r3
 8003cb0:	f04f 0600 	mov.w	r6, #0
 8003cb4:	46a9      	mov	r9, r5
 8003cb6:	46b2      	mov	sl, r6
 8003cb8:	eb19 0309 	adds.w	r3, r9, r9
 8003cbc:	eb4a 040a 	adc.w	r4, sl, sl
 8003cc0:	4699      	mov	r9, r3
 8003cc2:	46a2      	mov	sl, r4
 8003cc4:	eb19 0905 	adds.w	r9, r9, r5
 8003cc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ccc:	f04f 0100 	mov.w	r1, #0
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ce0:	4689      	mov	r9, r1
 8003ce2:	4692      	mov	sl, r2
 8003ce4:	eb19 0005 	adds.w	r0, r9, r5
 8003ce8:	eb4a 0106 	adc.w	r1, sl, r6
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	461d      	mov	r5, r3
 8003cf2:	f04f 0600 	mov.w	r6, #0
 8003cf6:	196b      	adds	r3, r5, r5
 8003cf8:	eb46 0406 	adc.w	r4, r6, r6
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4623      	mov	r3, r4
 8003d00:	f7fc ff5a 	bl	8000bb8 <__aeabi_uldivmod>
 8003d04:	4603      	mov	r3, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <UART_SetConfig+0x384>)
 8003d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	2164      	movs	r1, #100	; 0x64
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	3332      	adds	r3, #50	; 0x32
 8003d1e:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <UART_SetConfig+0x384>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	f003 0207 	and.w	r2, r3, #7
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4442      	add	r2, r8
 8003d30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d32:	e1b2      	b.n	800409a <UART_SetConfig+0x6e2>
 8003d34:	40011000 	.word	0x40011000
 8003d38:	40011400 	.word	0x40011400
 8003d3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4ad7      	ldr	r2, [pc, #860]	; (80040a4 <UART_SetConfig+0x6ec>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d005      	beq.n	8003d56 <UART_SetConfig+0x39e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4ad6      	ldr	r2, [pc, #856]	; (80040a8 <UART_SetConfig+0x6f0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	f040 80d1 	bne.w	8003ef8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d56:	f7fe fed7 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8003d5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	469a      	mov	sl, r3
 8003d60:	f04f 0b00 	mov.w	fp, #0
 8003d64:	46d0      	mov	r8, sl
 8003d66:	46d9      	mov	r9, fp
 8003d68:	eb18 0308 	adds.w	r3, r8, r8
 8003d6c:	eb49 0409 	adc.w	r4, r9, r9
 8003d70:	4698      	mov	r8, r3
 8003d72:	46a1      	mov	r9, r4
 8003d74:	eb18 080a 	adds.w	r8, r8, sl
 8003d78:	eb49 090b 	adc.w	r9, r9, fp
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d90:	4688      	mov	r8, r1
 8003d92:	4691      	mov	r9, r2
 8003d94:	eb1a 0508 	adds.w	r5, sl, r8
 8003d98:	eb4b 0609 	adc.w	r6, fp, r9
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4619      	mov	r1, r3
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	f04f 0400 	mov.w	r4, #0
 8003dae:	0094      	lsls	r4, r2, #2
 8003db0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003db4:	008b      	lsls	r3, r1, #2
 8003db6:	461a      	mov	r2, r3
 8003db8:	4623      	mov	r3, r4
 8003dba:	4628      	mov	r0, r5
 8003dbc:	4631      	mov	r1, r6
 8003dbe:	f7fc fefb 	bl	8000bb8 <__aeabi_uldivmod>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4bb8      	ldr	r3, [pc, #736]	; (80040ac <UART_SetConfig+0x6f4>)
 8003dca:	fba3 2302 	umull	r2, r3, r3, r2
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	469b      	mov	fp, r3
 8003dd8:	f04f 0c00 	mov.w	ip, #0
 8003ddc:	46d9      	mov	r9, fp
 8003dde:	46e2      	mov	sl, ip
 8003de0:	eb19 0309 	adds.w	r3, r9, r9
 8003de4:	eb4a 040a 	adc.w	r4, sl, sl
 8003de8:	4699      	mov	r9, r3
 8003dea:	46a2      	mov	sl, r4
 8003dec:	eb19 090b 	adds.w	r9, r9, fp
 8003df0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e08:	4689      	mov	r9, r1
 8003e0a:	4692      	mov	sl, r2
 8003e0c:	eb1b 0509 	adds.w	r5, fp, r9
 8003e10:	eb4c 060a 	adc.w	r6, ip, sl
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	f04f 0400 	mov.w	r4, #0
 8003e26:	0094      	lsls	r4, r2, #2
 8003e28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e2c:	008b      	lsls	r3, r1, #2
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4623      	mov	r3, r4
 8003e32:	4628      	mov	r0, r5
 8003e34:	4631      	mov	r1, r6
 8003e36:	f7fc febf 	bl	8000bb8 <__aeabi_uldivmod>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b9a      	ldr	r3, [pc, #616]	; (80040ac <UART_SetConfig+0x6f4>)
 8003e42:	fba3 1302 	umull	r1, r3, r3, r2
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	2164      	movs	r1, #100	; 0x64
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	3332      	adds	r3, #50	; 0x32
 8003e54:	4a95      	ldr	r2, [pc, #596]	; (80040ac <UART_SetConfig+0x6f4>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e60:	4498      	add	r8, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	469b      	mov	fp, r3
 8003e66:	f04f 0c00 	mov.w	ip, #0
 8003e6a:	46d9      	mov	r9, fp
 8003e6c:	46e2      	mov	sl, ip
 8003e6e:	eb19 0309 	adds.w	r3, r9, r9
 8003e72:	eb4a 040a 	adc.w	r4, sl, sl
 8003e76:	4699      	mov	r9, r3
 8003e78:	46a2      	mov	sl, r4
 8003e7a:	eb19 090b 	adds.w	r9, r9, fp
 8003e7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e96:	4689      	mov	r9, r1
 8003e98:	4692      	mov	sl, r2
 8003e9a:	eb1b 0509 	adds.w	r5, fp, r9
 8003e9e:	eb4c 060a 	adc.w	r6, ip, sl
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	f04f 0400 	mov.w	r4, #0
 8003eb4:	0094      	lsls	r4, r2, #2
 8003eb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eba:	008b      	lsls	r3, r1, #2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	4631      	mov	r1, r6
 8003ec4:	f7fc fe78 	bl	8000bb8 <__aeabi_uldivmod>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b77      	ldr	r3, [pc, #476]	; (80040ac <UART_SetConfig+0x6f4>)
 8003ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	2164      	movs	r1, #100	; 0x64
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	3332      	adds	r3, #50	; 0x32
 8003ee2:	4a72      	ldr	r2, [pc, #456]	; (80040ac <UART_SetConfig+0x6f4>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	f003 020f 	and.w	r2, r3, #15
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4442      	add	r2, r8
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	e0d0      	b.n	800409a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ef8:	f7fe fdf2 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8003efc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	469a      	mov	sl, r3
 8003f02:	f04f 0b00 	mov.w	fp, #0
 8003f06:	46d0      	mov	r8, sl
 8003f08:	46d9      	mov	r9, fp
 8003f0a:	eb18 0308 	adds.w	r3, r8, r8
 8003f0e:	eb49 0409 	adc.w	r4, r9, r9
 8003f12:	4698      	mov	r8, r3
 8003f14:	46a1      	mov	r9, r4
 8003f16:	eb18 080a 	adds.w	r8, r8, sl
 8003f1a:	eb49 090b 	adc.w	r9, r9, fp
 8003f1e:	f04f 0100 	mov.w	r1, #0
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f32:	4688      	mov	r8, r1
 8003f34:	4691      	mov	r9, r2
 8003f36:	eb1a 0508 	adds.w	r5, sl, r8
 8003f3a:	eb4b 0609 	adc.w	r6, fp, r9
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4619      	mov	r1, r3
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	f04f 0400 	mov.w	r4, #0
 8003f50:	0094      	lsls	r4, r2, #2
 8003f52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f56:	008b      	lsls	r3, r1, #2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	4631      	mov	r1, r6
 8003f60:	f7fc fe2a 	bl	8000bb8 <__aeabi_uldivmod>
 8003f64:	4603      	mov	r3, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b50      	ldr	r3, [pc, #320]	; (80040ac <UART_SetConfig+0x6f4>)
 8003f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	469b      	mov	fp, r3
 8003f7a:	f04f 0c00 	mov.w	ip, #0
 8003f7e:	46d9      	mov	r9, fp
 8003f80:	46e2      	mov	sl, ip
 8003f82:	eb19 0309 	adds.w	r3, r9, r9
 8003f86:	eb4a 040a 	adc.w	r4, sl, sl
 8003f8a:	4699      	mov	r9, r3
 8003f8c:	46a2      	mov	sl, r4
 8003f8e:	eb19 090b 	adds.w	r9, r9, fp
 8003f92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003faa:	4689      	mov	r9, r1
 8003fac:	4692      	mov	sl, r2
 8003fae:	eb1b 0509 	adds.w	r5, fp, r9
 8003fb2:	eb4c 060a 	adc.w	r6, ip, sl
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	f04f 0400 	mov.w	r4, #0
 8003fc8:	0094      	lsls	r4, r2, #2
 8003fca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fce:	008b      	lsls	r3, r1, #2
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	f7fc fdee 	bl	8000bb8 <__aeabi_uldivmod>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b32      	ldr	r3, [pc, #200]	; (80040ac <UART_SetConfig+0x6f4>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	2164      	movs	r1, #100	; 0x64
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	3332      	adds	r3, #50	; 0x32
 8003ff6:	4a2d      	ldr	r2, [pc, #180]	; (80040ac <UART_SetConfig+0x6f4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004002:	4498      	add	r8, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	469b      	mov	fp, r3
 8004008:	f04f 0c00 	mov.w	ip, #0
 800400c:	46d9      	mov	r9, fp
 800400e:	46e2      	mov	sl, ip
 8004010:	eb19 0309 	adds.w	r3, r9, r9
 8004014:	eb4a 040a 	adc.w	r4, sl, sl
 8004018:	4699      	mov	r9, r3
 800401a:	46a2      	mov	sl, r4
 800401c:	eb19 090b 	adds.w	r9, r9, fp
 8004020:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004024:	f04f 0100 	mov.w	r1, #0
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004030:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004034:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004038:	4689      	mov	r9, r1
 800403a:	4692      	mov	sl, r2
 800403c:	eb1b 0509 	adds.w	r5, fp, r9
 8004040:	eb4c 060a 	adc.w	r6, ip, sl
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4619      	mov	r1, r3
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	f04f 0400 	mov.w	r4, #0
 8004056:	0094      	lsls	r4, r2, #2
 8004058:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800405c:	008b      	lsls	r3, r1, #2
 800405e:	461a      	mov	r2, r3
 8004060:	4623      	mov	r3, r4
 8004062:	4628      	mov	r0, r5
 8004064:	4631      	mov	r1, r6
 8004066:	f7fc fda7 	bl	8000bb8 <__aeabi_uldivmod>
 800406a:	4603      	mov	r3, r0
 800406c:	460c      	mov	r4, r1
 800406e:	461a      	mov	r2, r3
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <UART_SetConfig+0x6f4>)
 8004072:	fba3 1302 	umull	r1, r3, r3, r2
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	2164      	movs	r1, #100	; 0x64
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	3332      	adds	r3, #50	; 0x32
 8004084:	4a09      	ldr	r2, [pc, #36]	; (80040ac <UART_SetConfig+0x6f4>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	f003 020f 	and.w	r2, r3, #15
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4442      	add	r2, r8
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	e7ff      	b.n	800409a <UART_SetConfig+0x6e2>
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a4:	40011000 	.word	0x40011000
 80040a8:	40011400 	.word	0x40011400
 80040ac:	51eb851f 	.word	0x51eb851f

080040b0 <__errno>:
 80040b0:	4b01      	ldr	r3, [pc, #4]	; (80040b8 <__errno+0x8>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000010 	.word	0x20000010

080040bc <__libc_init_array>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4e0d      	ldr	r6, [pc, #52]	; (80040f4 <__libc_init_array+0x38>)
 80040c0:	4c0d      	ldr	r4, [pc, #52]	; (80040f8 <__libc_init_array+0x3c>)
 80040c2:	1ba4      	subs	r4, r4, r6
 80040c4:	10a4      	asrs	r4, r4, #2
 80040c6:	2500      	movs	r5, #0
 80040c8:	42a5      	cmp	r5, r4
 80040ca:	d109      	bne.n	80040e0 <__libc_init_array+0x24>
 80040cc:	4e0b      	ldr	r6, [pc, #44]	; (80040fc <__libc_init_array+0x40>)
 80040ce:	4c0c      	ldr	r4, [pc, #48]	; (8004100 <__libc_init_array+0x44>)
 80040d0:	f002 fd02 	bl	8006ad8 <_init>
 80040d4:	1ba4      	subs	r4, r4, r6
 80040d6:	10a4      	asrs	r4, r4, #2
 80040d8:	2500      	movs	r5, #0
 80040da:	42a5      	cmp	r5, r4
 80040dc:	d105      	bne.n	80040ea <__libc_init_array+0x2e>
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040e4:	4798      	blx	r3
 80040e6:	3501      	adds	r5, #1
 80040e8:	e7ee      	b.n	80040c8 <__libc_init_array+0xc>
 80040ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040ee:	4798      	blx	r3
 80040f0:	3501      	adds	r5, #1
 80040f2:	e7f2      	b.n	80040da <__libc_init_array+0x1e>
 80040f4:	08006de0 	.word	0x08006de0
 80040f8:	08006de0 	.word	0x08006de0
 80040fc:	08006de0 	.word	0x08006de0
 8004100:	08006de4 	.word	0x08006de4

08004104 <memset>:
 8004104:	4402      	add	r2, r0
 8004106:	4603      	mov	r3, r0
 8004108:	4293      	cmp	r3, r2
 800410a:	d100      	bne.n	800410e <memset+0xa>
 800410c:	4770      	bx	lr
 800410e:	f803 1b01 	strb.w	r1, [r3], #1
 8004112:	e7f9      	b.n	8004108 <memset+0x4>

08004114 <__cvt>:
 8004114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004118:	ec55 4b10 	vmov	r4, r5, d0
 800411c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800411e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004122:	2d00      	cmp	r5, #0
 8004124:	460e      	mov	r6, r1
 8004126:	4691      	mov	r9, r2
 8004128:	4619      	mov	r1, r3
 800412a:	bfb8      	it	lt
 800412c:	4622      	movlt	r2, r4
 800412e:	462b      	mov	r3, r5
 8004130:	f027 0720 	bic.w	r7, r7, #32
 8004134:	bfbb      	ittet	lt
 8004136:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800413a:	461d      	movlt	r5, r3
 800413c:	2300      	movge	r3, #0
 800413e:	232d      	movlt	r3, #45	; 0x2d
 8004140:	bfb8      	it	lt
 8004142:	4614      	movlt	r4, r2
 8004144:	2f46      	cmp	r7, #70	; 0x46
 8004146:	700b      	strb	r3, [r1, #0]
 8004148:	d004      	beq.n	8004154 <__cvt+0x40>
 800414a:	2f45      	cmp	r7, #69	; 0x45
 800414c:	d100      	bne.n	8004150 <__cvt+0x3c>
 800414e:	3601      	adds	r6, #1
 8004150:	2102      	movs	r1, #2
 8004152:	e000      	b.n	8004156 <__cvt+0x42>
 8004154:	2103      	movs	r1, #3
 8004156:	ab03      	add	r3, sp, #12
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	ab02      	add	r3, sp, #8
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	4632      	mov	r2, r6
 8004160:	4653      	mov	r3, sl
 8004162:	ec45 4b10 	vmov	d0, r4, r5
 8004166:	f000 fcf7 	bl	8004b58 <_dtoa_r>
 800416a:	2f47      	cmp	r7, #71	; 0x47
 800416c:	4680      	mov	r8, r0
 800416e:	d102      	bne.n	8004176 <__cvt+0x62>
 8004170:	f019 0f01 	tst.w	r9, #1
 8004174:	d026      	beq.n	80041c4 <__cvt+0xb0>
 8004176:	2f46      	cmp	r7, #70	; 0x46
 8004178:	eb08 0906 	add.w	r9, r8, r6
 800417c:	d111      	bne.n	80041a2 <__cvt+0x8e>
 800417e:	f898 3000 	ldrb.w	r3, [r8]
 8004182:	2b30      	cmp	r3, #48	; 0x30
 8004184:	d10a      	bne.n	800419c <__cvt+0x88>
 8004186:	2200      	movs	r2, #0
 8004188:	2300      	movs	r3, #0
 800418a:	4620      	mov	r0, r4
 800418c:	4629      	mov	r1, r5
 800418e:	f7fc fca3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004192:	b918      	cbnz	r0, 800419c <__cvt+0x88>
 8004194:	f1c6 0601 	rsb	r6, r6, #1
 8004198:	f8ca 6000 	str.w	r6, [sl]
 800419c:	f8da 3000 	ldr.w	r3, [sl]
 80041a0:	4499      	add	r9, r3
 80041a2:	2200      	movs	r2, #0
 80041a4:	2300      	movs	r3, #0
 80041a6:	4620      	mov	r0, r4
 80041a8:	4629      	mov	r1, r5
 80041aa:	f7fc fc95 	bl	8000ad8 <__aeabi_dcmpeq>
 80041ae:	b938      	cbnz	r0, 80041c0 <__cvt+0xac>
 80041b0:	2230      	movs	r2, #48	; 0x30
 80041b2:	9b03      	ldr	r3, [sp, #12]
 80041b4:	454b      	cmp	r3, r9
 80041b6:	d205      	bcs.n	80041c4 <__cvt+0xb0>
 80041b8:	1c59      	adds	r1, r3, #1
 80041ba:	9103      	str	r1, [sp, #12]
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e7f8      	b.n	80041b2 <__cvt+0x9e>
 80041c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041c8:	eba3 0308 	sub.w	r3, r3, r8
 80041cc:	4640      	mov	r0, r8
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	b004      	add	sp, #16
 80041d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080041d6 <__exponent>:
 80041d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041d8:	2900      	cmp	r1, #0
 80041da:	4604      	mov	r4, r0
 80041dc:	bfba      	itte	lt
 80041de:	4249      	neglt	r1, r1
 80041e0:	232d      	movlt	r3, #45	; 0x2d
 80041e2:	232b      	movge	r3, #43	; 0x2b
 80041e4:	2909      	cmp	r1, #9
 80041e6:	f804 2b02 	strb.w	r2, [r4], #2
 80041ea:	7043      	strb	r3, [r0, #1]
 80041ec:	dd20      	ble.n	8004230 <__exponent+0x5a>
 80041ee:	f10d 0307 	add.w	r3, sp, #7
 80041f2:	461f      	mov	r7, r3
 80041f4:	260a      	movs	r6, #10
 80041f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80041fa:	fb06 1115 	mls	r1, r6, r5, r1
 80041fe:	3130      	adds	r1, #48	; 0x30
 8004200:	2d09      	cmp	r5, #9
 8004202:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004206:	f103 32ff 	add.w	r2, r3, #4294967295
 800420a:	4629      	mov	r1, r5
 800420c:	dc09      	bgt.n	8004222 <__exponent+0x4c>
 800420e:	3130      	adds	r1, #48	; 0x30
 8004210:	3b02      	subs	r3, #2
 8004212:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004216:	42bb      	cmp	r3, r7
 8004218:	4622      	mov	r2, r4
 800421a:	d304      	bcc.n	8004226 <__exponent+0x50>
 800421c:	1a10      	subs	r0, r2, r0
 800421e:	b003      	add	sp, #12
 8004220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004222:	4613      	mov	r3, r2
 8004224:	e7e7      	b.n	80041f6 <__exponent+0x20>
 8004226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800422a:	f804 2b01 	strb.w	r2, [r4], #1
 800422e:	e7f2      	b.n	8004216 <__exponent+0x40>
 8004230:	2330      	movs	r3, #48	; 0x30
 8004232:	4419      	add	r1, r3
 8004234:	7083      	strb	r3, [r0, #2]
 8004236:	1d02      	adds	r2, r0, #4
 8004238:	70c1      	strb	r1, [r0, #3]
 800423a:	e7ef      	b.n	800421c <__exponent+0x46>

0800423c <_printf_float>:
 800423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004240:	b08d      	sub	sp, #52	; 0x34
 8004242:	460c      	mov	r4, r1
 8004244:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004248:	4616      	mov	r6, r2
 800424a:	461f      	mov	r7, r3
 800424c:	4605      	mov	r5, r0
 800424e:	f001 fb05 	bl	800585c <_localeconv_r>
 8004252:	6803      	ldr	r3, [r0, #0]
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fb ffc2 	bl	80001e0 <strlen>
 800425c:	2300      	movs	r3, #0
 800425e:	930a      	str	r3, [sp, #40]	; 0x28
 8004260:	f8d8 3000 	ldr.w	r3, [r8]
 8004264:	9005      	str	r0, [sp, #20]
 8004266:	3307      	adds	r3, #7
 8004268:	f023 0307 	bic.w	r3, r3, #7
 800426c:	f103 0208 	add.w	r2, r3, #8
 8004270:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004274:	f8d4 b000 	ldr.w	fp, [r4]
 8004278:	f8c8 2000 	str.w	r2, [r8]
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004284:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004288:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800428c:	9307      	str	r3, [sp, #28]
 800428e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004292:	f04f 32ff 	mov.w	r2, #4294967295
 8004296:	4ba7      	ldr	r3, [pc, #668]	; (8004534 <_printf_float+0x2f8>)
 8004298:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800429c:	f7fc fc4e 	bl	8000b3c <__aeabi_dcmpun>
 80042a0:	bb70      	cbnz	r0, 8004300 <_printf_float+0xc4>
 80042a2:	f04f 32ff 	mov.w	r2, #4294967295
 80042a6:	4ba3      	ldr	r3, [pc, #652]	; (8004534 <_printf_float+0x2f8>)
 80042a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042ac:	f7fc fc28 	bl	8000b00 <__aeabi_dcmple>
 80042b0:	bb30      	cbnz	r0, 8004300 <_printf_float+0xc4>
 80042b2:	2200      	movs	r2, #0
 80042b4:	2300      	movs	r3, #0
 80042b6:	4640      	mov	r0, r8
 80042b8:	4649      	mov	r1, r9
 80042ba:	f7fc fc17 	bl	8000aec <__aeabi_dcmplt>
 80042be:	b110      	cbz	r0, 80042c6 <_printf_float+0x8a>
 80042c0:	232d      	movs	r3, #45	; 0x2d
 80042c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c6:	4a9c      	ldr	r2, [pc, #624]	; (8004538 <_printf_float+0x2fc>)
 80042c8:	4b9c      	ldr	r3, [pc, #624]	; (800453c <_printf_float+0x300>)
 80042ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80042ce:	bf8c      	ite	hi
 80042d0:	4690      	movhi	r8, r2
 80042d2:	4698      	movls	r8, r3
 80042d4:	2303      	movs	r3, #3
 80042d6:	f02b 0204 	bic.w	r2, fp, #4
 80042da:	6123      	str	r3, [r4, #16]
 80042dc:	6022      	str	r2, [r4, #0]
 80042de:	f04f 0900 	mov.w	r9, #0
 80042e2:	9700      	str	r7, [sp, #0]
 80042e4:	4633      	mov	r3, r6
 80042e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80042e8:	4621      	mov	r1, r4
 80042ea:	4628      	mov	r0, r5
 80042ec:	f000 f9e6 	bl	80046bc <_printf_common>
 80042f0:	3001      	adds	r0, #1
 80042f2:	f040 808d 	bne.w	8004410 <_printf_float+0x1d4>
 80042f6:	f04f 30ff 	mov.w	r0, #4294967295
 80042fa:	b00d      	add	sp, #52	; 0x34
 80042fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	4640      	mov	r0, r8
 8004306:	4649      	mov	r1, r9
 8004308:	f7fc fc18 	bl	8000b3c <__aeabi_dcmpun>
 800430c:	b110      	cbz	r0, 8004314 <_printf_float+0xd8>
 800430e:	4a8c      	ldr	r2, [pc, #560]	; (8004540 <_printf_float+0x304>)
 8004310:	4b8c      	ldr	r3, [pc, #560]	; (8004544 <_printf_float+0x308>)
 8004312:	e7da      	b.n	80042ca <_printf_float+0x8e>
 8004314:	6861      	ldr	r1, [r4, #4]
 8004316:	1c4b      	adds	r3, r1, #1
 8004318:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800431c:	a80a      	add	r0, sp, #40	; 0x28
 800431e:	d13e      	bne.n	800439e <_printf_float+0x162>
 8004320:	2306      	movs	r3, #6
 8004322:	6063      	str	r3, [r4, #4]
 8004324:	2300      	movs	r3, #0
 8004326:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800432a:	ab09      	add	r3, sp, #36	; 0x24
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	ec49 8b10 	vmov	d0, r8, r9
 8004332:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004336:	6022      	str	r2, [r4, #0]
 8004338:	f8cd a004 	str.w	sl, [sp, #4]
 800433c:	6861      	ldr	r1, [r4, #4]
 800433e:	4628      	mov	r0, r5
 8004340:	f7ff fee8 	bl	8004114 <__cvt>
 8004344:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004348:	2b47      	cmp	r3, #71	; 0x47
 800434a:	4680      	mov	r8, r0
 800434c:	d109      	bne.n	8004362 <_printf_float+0x126>
 800434e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004350:	1cd8      	adds	r0, r3, #3
 8004352:	db02      	blt.n	800435a <_printf_float+0x11e>
 8004354:	6862      	ldr	r2, [r4, #4]
 8004356:	4293      	cmp	r3, r2
 8004358:	dd47      	ble.n	80043ea <_printf_float+0x1ae>
 800435a:	f1aa 0a02 	sub.w	sl, sl, #2
 800435e:	fa5f fa8a 	uxtb.w	sl, sl
 8004362:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004366:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004368:	d824      	bhi.n	80043b4 <_printf_float+0x178>
 800436a:	3901      	subs	r1, #1
 800436c:	4652      	mov	r2, sl
 800436e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004372:	9109      	str	r1, [sp, #36]	; 0x24
 8004374:	f7ff ff2f 	bl	80041d6 <__exponent>
 8004378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800437a:	1813      	adds	r3, r2, r0
 800437c:	2a01      	cmp	r2, #1
 800437e:	4681      	mov	r9, r0
 8004380:	6123      	str	r3, [r4, #16]
 8004382:	dc02      	bgt.n	800438a <_printf_float+0x14e>
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	07d1      	lsls	r1, r2, #31
 8004388:	d501      	bpl.n	800438e <_printf_float+0x152>
 800438a:	3301      	adds	r3, #1
 800438c:	6123      	str	r3, [r4, #16]
 800438e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0a5      	beq.n	80042e2 <_printf_float+0xa6>
 8004396:	232d      	movs	r3, #45	; 0x2d
 8004398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800439c:	e7a1      	b.n	80042e2 <_printf_float+0xa6>
 800439e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80043a2:	f000 8177 	beq.w	8004694 <_printf_float+0x458>
 80043a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80043aa:	d1bb      	bne.n	8004324 <_printf_float+0xe8>
 80043ac:	2900      	cmp	r1, #0
 80043ae:	d1b9      	bne.n	8004324 <_printf_float+0xe8>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e7b6      	b.n	8004322 <_printf_float+0xe6>
 80043b4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80043b8:	d119      	bne.n	80043ee <_printf_float+0x1b2>
 80043ba:	2900      	cmp	r1, #0
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	dd0c      	ble.n	80043da <_printf_float+0x19e>
 80043c0:	6121      	str	r1, [r4, #16]
 80043c2:	b913      	cbnz	r3, 80043ca <_printf_float+0x18e>
 80043c4:	6822      	ldr	r2, [r4, #0]
 80043c6:	07d2      	lsls	r2, r2, #31
 80043c8:	d502      	bpl.n	80043d0 <_printf_float+0x194>
 80043ca:	3301      	adds	r3, #1
 80043cc:	440b      	add	r3, r1
 80043ce:	6123      	str	r3, [r4, #16]
 80043d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80043d4:	f04f 0900 	mov.w	r9, #0
 80043d8:	e7d9      	b.n	800438e <_printf_float+0x152>
 80043da:	b913      	cbnz	r3, 80043e2 <_printf_float+0x1a6>
 80043dc:	6822      	ldr	r2, [r4, #0]
 80043de:	07d0      	lsls	r0, r2, #31
 80043e0:	d501      	bpl.n	80043e6 <_printf_float+0x1aa>
 80043e2:	3302      	adds	r3, #2
 80043e4:	e7f3      	b.n	80043ce <_printf_float+0x192>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e7f1      	b.n	80043ce <_printf_float+0x192>
 80043ea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80043ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80043f2:	4293      	cmp	r3, r2
 80043f4:	db05      	blt.n	8004402 <_printf_float+0x1c6>
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	6123      	str	r3, [r4, #16]
 80043fa:	07d1      	lsls	r1, r2, #31
 80043fc:	d5e8      	bpl.n	80043d0 <_printf_float+0x194>
 80043fe:	3301      	adds	r3, #1
 8004400:	e7e5      	b.n	80043ce <_printf_float+0x192>
 8004402:	2b00      	cmp	r3, #0
 8004404:	bfd4      	ite	le
 8004406:	f1c3 0302 	rsble	r3, r3, #2
 800440a:	2301      	movgt	r3, #1
 800440c:	4413      	add	r3, r2
 800440e:	e7de      	b.n	80043ce <_printf_float+0x192>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	055a      	lsls	r2, r3, #21
 8004414:	d407      	bmi.n	8004426 <_printf_float+0x1ea>
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	4642      	mov	r2, r8
 800441a:	4631      	mov	r1, r6
 800441c:	4628      	mov	r0, r5
 800441e:	47b8      	blx	r7
 8004420:	3001      	adds	r0, #1
 8004422:	d12b      	bne.n	800447c <_printf_float+0x240>
 8004424:	e767      	b.n	80042f6 <_printf_float+0xba>
 8004426:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800442a:	f240 80dc 	bls.w	80045e6 <_printf_float+0x3aa>
 800442e:	2200      	movs	r2, #0
 8004430:	2300      	movs	r3, #0
 8004432:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004436:	f7fc fb4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800443a:	2800      	cmp	r0, #0
 800443c:	d033      	beq.n	80044a6 <_printf_float+0x26a>
 800443e:	2301      	movs	r3, #1
 8004440:	4a41      	ldr	r2, [pc, #260]	; (8004548 <_printf_float+0x30c>)
 8004442:	4631      	mov	r1, r6
 8004444:	4628      	mov	r0, r5
 8004446:	47b8      	blx	r7
 8004448:	3001      	adds	r0, #1
 800444a:	f43f af54 	beq.w	80042f6 <_printf_float+0xba>
 800444e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004452:	429a      	cmp	r2, r3
 8004454:	db02      	blt.n	800445c <_printf_float+0x220>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	07d8      	lsls	r0, r3, #31
 800445a:	d50f      	bpl.n	800447c <_printf_float+0x240>
 800445c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004460:	4631      	mov	r1, r6
 8004462:	4628      	mov	r0, r5
 8004464:	47b8      	blx	r7
 8004466:	3001      	adds	r0, #1
 8004468:	f43f af45 	beq.w	80042f6 <_printf_float+0xba>
 800446c:	f04f 0800 	mov.w	r8, #0
 8004470:	f104 091a 	add.w	r9, r4, #26
 8004474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004476:	3b01      	subs	r3, #1
 8004478:	4543      	cmp	r3, r8
 800447a:	dc09      	bgt.n	8004490 <_printf_float+0x254>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	079b      	lsls	r3, r3, #30
 8004480:	f100 8103 	bmi.w	800468a <_printf_float+0x44e>
 8004484:	68e0      	ldr	r0, [r4, #12]
 8004486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004488:	4298      	cmp	r0, r3
 800448a:	bfb8      	it	lt
 800448c:	4618      	movlt	r0, r3
 800448e:	e734      	b.n	80042fa <_printf_float+0xbe>
 8004490:	2301      	movs	r3, #1
 8004492:	464a      	mov	r2, r9
 8004494:	4631      	mov	r1, r6
 8004496:	4628      	mov	r0, r5
 8004498:	47b8      	blx	r7
 800449a:	3001      	adds	r0, #1
 800449c:	f43f af2b 	beq.w	80042f6 <_printf_float+0xba>
 80044a0:	f108 0801 	add.w	r8, r8, #1
 80044a4:	e7e6      	b.n	8004474 <_printf_float+0x238>
 80044a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	dc2b      	bgt.n	8004504 <_printf_float+0x2c8>
 80044ac:	2301      	movs	r3, #1
 80044ae:	4a26      	ldr	r2, [pc, #152]	; (8004548 <_printf_float+0x30c>)
 80044b0:	4631      	mov	r1, r6
 80044b2:	4628      	mov	r0, r5
 80044b4:	47b8      	blx	r7
 80044b6:	3001      	adds	r0, #1
 80044b8:	f43f af1d 	beq.w	80042f6 <_printf_float+0xba>
 80044bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044be:	b923      	cbnz	r3, 80044ca <_printf_float+0x28e>
 80044c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c2:	b913      	cbnz	r3, 80044ca <_printf_float+0x28e>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	07d9      	lsls	r1, r3, #31
 80044c8:	d5d8      	bpl.n	800447c <_printf_float+0x240>
 80044ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044ce:	4631      	mov	r1, r6
 80044d0:	4628      	mov	r0, r5
 80044d2:	47b8      	blx	r7
 80044d4:	3001      	adds	r0, #1
 80044d6:	f43f af0e 	beq.w	80042f6 <_printf_float+0xba>
 80044da:	f04f 0900 	mov.w	r9, #0
 80044de:	f104 0a1a 	add.w	sl, r4, #26
 80044e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e4:	425b      	negs	r3, r3
 80044e6:	454b      	cmp	r3, r9
 80044e8:	dc01      	bgt.n	80044ee <_printf_float+0x2b2>
 80044ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ec:	e794      	b.n	8004418 <_printf_float+0x1dc>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4652      	mov	r2, sl
 80044f2:	4631      	mov	r1, r6
 80044f4:	4628      	mov	r0, r5
 80044f6:	47b8      	blx	r7
 80044f8:	3001      	adds	r0, #1
 80044fa:	f43f aefc 	beq.w	80042f6 <_printf_float+0xba>
 80044fe:	f109 0901 	add.w	r9, r9, #1
 8004502:	e7ee      	b.n	80044e2 <_printf_float+0x2a6>
 8004504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004508:	429a      	cmp	r2, r3
 800450a:	bfa8      	it	ge
 800450c:	461a      	movge	r2, r3
 800450e:	2a00      	cmp	r2, #0
 8004510:	4691      	mov	r9, r2
 8004512:	dd07      	ble.n	8004524 <_printf_float+0x2e8>
 8004514:	4613      	mov	r3, r2
 8004516:	4631      	mov	r1, r6
 8004518:	4642      	mov	r2, r8
 800451a:	4628      	mov	r0, r5
 800451c:	47b8      	blx	r7
 800451e:	3001      	adds	r0, #1
 8004520:	f43f aee9 	beq.w	80042f6 <_printf_float+0xba>
 8004524:	f104 031a 	add.w	r3, r4, #26
 8004528:	f04f 0b00 	mov.w	fp, #0
 800452c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004530:	9306      	str	r3, [sp, #24]
 8004532:	e015      	b.n	8004560 <_printf_float+0x324>
 8004534:	7fefffff 	.word	0x7fefffff
 8004538:	08006b1c 	.word	0x08006b1c
 800453c:	08006b18 	.word	0x08006b18
 8004540:	08006b24 	.word	0x08006b24
 8004544:	08006b20 	.word	0x08006b20
 8004548:	08006b28 	.word	0x08006b28
 800454c:	2301      	movs	r3, #1
 800454e:	9a06      	ldr	r2, [sp, #24]
 8004550:	4631      	mov	r1, r6
 8004552:	4628      	mov	r0, r5
 8004554:	47b8      	blx	r7
 8004556:	3001      	adds	r0, #1
 8004558:	f43f aecd 	beq.w	80042f6 <_printf_float+0xba>
 800455c:	f10b 0b01 	add.w	fp, fp, #1
 8004560:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004564:	ebaa 0309 	sub.w	r3, sl, r9
 8004568:	455b      	cmp	r3, fp
 800456a:	dcef      	bgt.n	800454c <_printf_float+0x310>
 800456c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004570:	429a      	cmp	r2, r3
 8004572:	44d0      	add	r8, sl
 8004574:	db15      	blt.n	80045a2 <_printf_float+0x366>
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	07da      	lsls	r2, r3, #31
 800457a:	d412      	bmi.n	80045a2 <_printf_float+0x366>
 800457c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800457e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004580:	eba3 020a 	sub.w	r2, r3, sl
 8004584:	eba3 0a01 	sub.w	sl, r3, r1
 8004588:	4592      	cmp	sl, r2
 800458a:	bfa8      	it	ge
 800458c:	4692      	movge	sl, r2
 800458e:	f1ba 0f00 	cmp.w	sl, #0
 8004592:	dc0e      	bgt.n	80045b2 <_printf_float+0x376>
 8004594:	f04f 0800 	mov.w	r8, #0
 8004598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800459c:	f104 091a 	add.w	r9, r4, #26
 80045a0:	e019      	b.n	80045d6 <_printf_float+0x39a>
 80045a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	d1e5      	bne.n	800457c <_printf_float+0x340>
 80045b0:	e6a1      	b.n	80042f6 <_printf_float+0xba>
 80045b2:	4653      	mov	r3, sl
 80045b4:	4642      	mov	r2, r8
 80045b6:	4631      	mov	r1, r6
 80045b8:	4628      	mov	r0, r5
 80045ba:	47b8      	blx	r7
 80045bc:	3001      	adds	r0, #1
 80045be:	d1e9      	bne.n	8004594 <_printf_float+0x358>
 80045c0:	e699      	b.n	80042f6 <_printf_float+0xba>
 80045c2:	2301      	movs	r3, #1
 80045c4:	464a      	mov	r2, r9
 80045c6:	4631      	mov	r1, r6
 80045c8:	4628      	mov	r0, r5
 80045ca:	47b8      	blx	r7
 80045cc:	3001      	adds	r0, #1
 80045ce:	f43f ae92 	beq.w	80042f6 <_printf_float+0xba>
 80045d2:	f108 0801 	add.w	r8, r8, #1
 80045d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	eba3 030a 	sub.w	r3, r3, sl
 80045e0:	4543      	cmp	r3, r8
 80045e2:	dcee      	bgt.n	80045c2 <_printf_float+0x386>
 80045e4:	e74a      	b.n	800447c <_printf_float+0x240>
 80045e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045e8:	2a01      	cmp	r2, #1
 80045ea:	dc01      	bgt.n	80045f0 <_printf_float+0x3b4>
 80045ec:	07db      	lsls	r3, r3, #31
 80045ee:	d53a      	bpl.n	8004666 <_printf_float+0x42a>
 80045f0:	2301      	movs	r3, #1
 80045f2:	4642      	mov	r2, r8
 80045f4:	4631      	mov	r1, r6
 80045f6:	4628      	mov	r0, r5
 80045f8:	47b8      	blx	r7
 80045fa:	3001      	adds	r0, #1
 80045fc:	f43f ae7b 	beq.w	80042f6 <_printf_float+0xba>
 8004600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004604:	4631      	mov	r1, r6
 8004606:	4628      	mov	r0, r5
 8004608:	47b8      	blx	r7
 800460a:	3001      	adds	r0, #1
 800460c:	f108 0801 	add.w	r8, r8, #1
 8004610:	f43f ae71 	beq.w	80042f6 <_printf_float+0xba>
 8004614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004616:	2200      	movs	r2, #0
 8004618:	f103 3aff 	add.w	sl, r3, #4294967295
 800461c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004620:	2300      	movs	r3, #0
 8004622:	f7fc fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 8004626:	b9c8      	cbnz	r0, 800465c <_printf_float+0x420>
 8004628:	4653      	mov	r3, sl
 800462a:	4642      	mov	r2, r8
 800462c:	4631      	mov	r1, r6
 800462e:	4628      	mov	r0, r5
 8004630:	47b8      	blx	r7
 8004632:	3001      	adds	r0, #1
 8004634:	d10e      	bne.n	8004654 <_printf_float+0x418>
 8004636:	e65e      	b.n	80042f6 <_printf_float+0xba>
 8004638:	2301      	movs	r3, #1
 800463a:	4652      	mov	r2, sl
 800463c:	4631      	mov	r1, r6
 800463e:	4628      	mov	r0, r5
 8004640:	47b8      	blx	r7
 8004642:	3001      	adds	r0, #1
 8004644:	f43f ae57 	beq.w	80042f6 <_printf_float+0xba>
 8004648:	f108 0801 	add.w	r8, r8, #1
 800464c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800464e:	3b01      	subs	r3, #1
 8004650:	4543      	cmp	r3, r8
 8004652:	dcf1      	bgt.n	8004638 <_printf_float+0x3fc>
 8004654:	464b      	mov	r3, r9
 8004656:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800465a:	e6de      	b.n	800441a <_printf_float+0x1de>
 800465c:	f04f 0800 	mov.w	r8, #0
 8004660:	f104 0a1a 	add.w	sl, r4, #26
 8004664:	e7f2      	b.n	800464c <_printf_float+0x410>
 8004666:	2301      	movs	r3, #1
 8004668:	e7df      	b.n	800462a <_printf_float+0x3ee>
 800466a:	2301      	movs	r3, #1
 800466c:	464a      	mov	r2, r9
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	47b8      	blx	r7
 8004674:	3001      	adds	r0, #1
 8004676:	f43f ae3e 	beq.w	80042f6 <_printf_float+0xba>
 800467a:	f108 0801 	add.w	r8, r8, #1
 800467e:	68e3      	ldr	r3, [r4, #12]
 8004680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	4543      	cmp	r3, r8
 8004686:	dcf0      	bgt.n	800466a <_printf_float+0x42e>
 8004688:	e6fc      	b.n	8004484 <_printf_float+0x248>
 800468a:	f04f 0800 	mov.w	r8, #0
 800468e:	f104 0919 	add.w	r9, r4, #25
 8004692:	e7f4      	b.n	800467e <_printf_float+0x442>
 8004694:	2900      	cmp	r1, #0
 8004696:	f43f ae8b 	beq.w	80043b0 <_printf_float+0x174>
 800469a:	2300      	movs	r3, #0
 800469c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80046a0:	ab09      	add	r3, sp, #36	; 0x24
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	ec49 8b10 	vmov	d0, r8, r9
 80046a8:	6022      	str	r2, [r4, #0]
 80046aa:	f8cd a004 	str.w	sl, [sp, #4]
 80046ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046b2:	4628      	mov	r0, r5
 80046b4:	f7ff fd2e 	bl	8004114 <__cvt>
 80046b8:	4680      	mov	r8, r0
 80046ba:	e648      	b.n	800434e <_printf_float+0x112>

080046bc <_printf_common>:
 80046bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c0:	4691      	mov	r9, r2
 80046c2:	461f      	mov	r7, r3
 80046c4:	688a      	ldr	r2, [r1, #8]
 80046c6:	690b      	ldr	r3, [r1, #16]
 80046c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046cc:	4293      	cmp	r3, r2
 80046ce:	bfb8      	it	lt
 80046d0:	4613      	movlt	r3, r2
 80046d2:	f8c9 3000 	str.w	r3, [r9]
 80046d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046da:	4606      	mov	r6, r0
 80046dc:	460c      	mov	r4, r1
 80046de:	b112      	cbz	r2, 80046e6 <_printf_common+0x2a>
 80046e0:	3301      	adds	r3, #1
 80046e2:	f8c9 3000 	str.w	r3, [r9]
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	0699      	lsls	r1, r3, #26
 80046ea:	bf42      	ittt	mi
 80046ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80046f0:	3302      	addmi	r3, #2
 80046f2:	f8c9 3000 	strmi.w	r3, [r9]
 80046f6:	6825      	ldr	r5, [r4, #0]
 80046f8:	f015 0506 	ands.w	r5, r5, #6
 80046fc:	d107      	bne.n	800470e <_printf_common+0x52>
 80046fe:	f104 0a19 	add.w	sl, r4, #25
 8004702:	68e3      	ldr	r3, [r4, #12]
 8004704:	f8d9 2000 	ldr.w	r2, [r9]
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	42ab      	cmp	r3, r5
 800470c:	dc28      	bgt.n	8004760 <_printf_common+0xa4>
 800470e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	3300      	adds	r3, #0
 8004716:	bf18      	it	ne
 8004718:	2301      	movne	r3, #1
 800471a:	0692      	lsls	r2, r2, #26
 800471c:	d42d      	bmi.n	800477a <_printf_common+0xbe>
 800471e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004722:	4639      	mov	r1, r7
 8004724:	4630      	mov	r0, r6
 8004726:	47c0      	blx	r8
 8004728:	3001      	adds	r0, #1
 800472a:	d020      	beq.n	800476e <_printf_common+0xb2>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	68e5      	ldr	r5, [r4, #12]
 8004730:	f8d9 2000 	ldr.w	r2, [r9]
 8004734:	f003 0306 	and.w	r3, r3, #6
 8004738:	2b04      	cmp	r3, #4
 800473a:	bf08      	it	eq
 800473c:	1aad      	subeq	r5, r5, r2
 800473e:	68a3      	ldr	r3, [r4, #8]
 8004740:	6922      	ldr	r2, [r4, #16]
 8004742:	bf0c      	ite	eq
 8004744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004748:	2500      	movne	r5, #0
 800474a:	4293      	cmp	r3, r2
 800474c:	bfc4      	itt	gt
 800474e:	1a9b      	subgt	r3, r3, r2
 8004750:	18ed      	addgt	r5, r5, r3
 8004752:	f04f 0900 	mov.w	r9, #0
 8004756:	341a      	adds	r4, #26
 8004758:	454d      	cmp	r5, r9
 800475a:	d11a      	bne.n	8004792 <_printf_common+0xd6>
 800475c:	2000      	movs	r0, #0
 800475e:	e008      	b.n	8004772 <_printf_common+0xb6>
 8004760:	2301      	movs	r3, #1
 8004762:	4652      	mov	r2, sl
 8004764:	4639      	mov	r1, r7
 8004766:	4630      	mov	r0, r6
 8004768:	47c0      	blx	r8
 800476a:	3001      	adds	r0, #1
 800476c:	d103      	bne.n	8004776 <_printf_common+0xba>
 800476e:	f04f 30ff 	mov.w	r0, #4294967295
 8004772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004776:	3501      	adds	r5, #1
 8004778:	e7c3      	b.n	8004702 <_printf_common+0x46>
 800477a:	18e1      	adds	r1, r4, r3
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	2030      	movs	r0, #48	; 0x30
 8004780:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004784:	4422      	add	r2, r4
 8004786:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800478a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800478e:	3302      	adds	r3, #2
 8004790:	e7c5      	b.n	800471e <_printf_common+0x62>
 8004792:	2301      	movs	r3, #1
 8004794:	4622      	mov	r2, r4
 8004796:	4639      	mov	r1, r7
 8004798:	4630      	mov	r0, r6
 800479a:	47c0      	blx	r8
 800479c:	3001      	adds	r0, #1
 800479e:	d0e6      	beq.n	800476e <_printf_common+0xb2>
 80047a0:	f109 0901 	add.w	r9, r9, #1
 80047a4:	e7d8      	b.n	8004758 <_printf_common+0x9c>
	...

080047a8 <_printf_i>:
 80047a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80047b0:	460c      	mov	r4, r1
 80047b2:	7e09      	ldrb	r1, [r1, #24]
 80047b4:	b085      	sub	sp, #20
 80047b6:	296e      	cmp	r1, #110	; 0x6e
 80047b8:	4617      	mov	r7, r2
 80047ba:	4606      	mov	r6, r0
 80047bc:	4698      	mov	r8, r3
 80047be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047c0:	f000 80b3 	beq.w	800492a <_printf_i+0x182>
 80047c4:	d822      	bhi.n	800480c <_printf_i+0x64>
 80047c6:	2963      	cmp	r1, #99	; 0x63
 80047c8:	d036      	beq.n	8004838 <_printf_i+0x90>
 80047ca:	d80a      	bhi.n	80047e2 <_printf_i+0x3a>
 80047cc:	2900      	cmp	r1, #0
 80047ce:	f000 80b9 	beq.w	8004944 <_printf_i+0x19c>
 80047d2:	2958      	cmp	r1, #88	; 0x58
 80047d4:	f000 8083 	beq.w	80048de <_printf_i+0x136>
 80047d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80047e0:	e032      	b.n	8004848 <_printf_i+0xa0>
 80047e2:	2964      	cmp	r1, #100	; 0x64
 80047e4:	d001      	beq.n	80047ea <_printf_i+0x42>
 80047e6:	2969      	cmp	r1, #105	; 0x69
 80047e8:	d1f6      	bne.n	80047d8 <_printf_i+0x30>
 80047ea:	6820      	ldr	r0, [r4, #0]
 80047ec:	6813      	ldr	r3, [r2, #0]
 80047ee:	0605      	lsls	r5, r0, #24
 80047f0:	f103 0104 	add.w	r1, r3, #4
 80047f4:	d52a      	bpl.n	800484c <_printf_i+0xa4>
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6011      	str	r1, [r2, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da03      	bge.n	8004806 <_printf_i+0x5e>
 80047fe:	222d      	movs	r2, #45	; 0x2d
 8004800:	425b      	negs	r3, r3
 8004802:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004806:	486f      	ldr	r0, [pc, #444]	; (80049c4 <_printf_i+0x21c>)
 8004808:	220a      	movs	r2, #10
 800480a:	e039      	b.n	8004880 <_printf_i+0xd8>
 800480c:	2973      	cmp	r1, #115	; 0x73
 800480e:	f000 809d 	beq.w	800494c <_printf_i+0x1a4>
 8004812:	d808      	bhi.n	8004826 <_printf_i+0x7e>
 8004814:	296f      	cmp	r1, #111	; 0x6f
 8004816:	d020      	beq.n	800485a <_printf_i+0xb2>
 8004818:	2970      	cmp	r1, #112	; 0x70
 800481a:	d1dd      	bne.n	80047d8 <_printf_i+0x30>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	f043 0320 	orr.w	r3, r3, #32
 8004822:	6023      	str	r3, [r4, #0]
 8004824:	e003      	b.n	800482e <_printf_i+0x86>
 8004826:	2975      	cmp	r1, #117	; 0x75
 8004828:	d017      	beq.n	800485a <_printf_i+0xb2>
 800482a:	2978      	cmp	r1, #120	; 0x78
 800482c:	d1d4      	bne.n	80047d8 <_printf_i+0x30>
 800482e:	2378      	movs	r3, #120	; 0x78
 8004830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004834:	4864      	ldr	r0, [pc, #400]	; (80049c8 <_printf_i+0x220>)
 8004836:	e055      	b.n	80048e4 <_printf_i+0x13c>
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	1d19      	adds	r1, r3, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6011      	str	r1, [r2, #0]
 8004840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004848:	2301      	movs	r3, #1
 800484a:	e08c      	b.n	8004966 <_printf_i+0x1be>
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6011      	str	r1, [r2, #0]
 8004850:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004854:	bf18      	it	ne
 8004856:	b21b      	sxthne	r3, r3
 8004858:	e7cf      	b.n	80047fa <_printf_i+0x52>
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	6825      	ldr	r5, [r4, #0]
 800485e:	1d18      	adds	r0, r3, #4
 8004860:	6010      	str	r0, [r2, #0]
 8004862:	0628      	lsls	r0, r5, #24
 8004864:	d501      	bpl.n	800486a <_printf_i+0xc2>
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	e002      	b.n	8004870 <_printf_i+0xc8>
 800486a:	0668      	lsls	r0, r5, #25
 800486c:	d5fb      	bpl.n	8004866 <_printf_i+0xbe>
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	4854      	ldr	r0, [pc, #336]	; (80049c4 <_printf_i+0x21c>)
 8004872:	296f      	cmp	r1, #111	; 0x6f
 8004874:	bf14      	ite	ne
 8004876:	220a      	movne	r2, #10
 8004878:	2208      	moveq	r2, #8
 800487a:	2100      	movs	r1, #0
 800487c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004880:	6865      	ldr	r5, [r4, #4]
 8004882:	60a5      	str	r5, [r4, #8]
 8004884:	2d00      	cmp	r5, #0
 8004886:	f2c0 8095 	blt.w	80049b4 <_printf_i+0x20c>
 800488a:	6821      	ldr	r1, [r4, #0]
 800488c:	f021 0104 	bic.w	r1, r1, #4
 8004890:	6021      	str	r1, [r4, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d13d      	bne.n	8004912 <_printf_i+0x16a>
 8004896:	2d00      	cmp	r5, #0
 8004898:	f040 808e 	bne.w	80049b8 <_printf_i+0x210>
 800489c:	4665      	mov	r5, ip
 800489e:	2a08      	cmp	r2, #8
 80048a0:	d10b      	bne.n	80048ba <_printf_i+0x112>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	07db      	lsls	r3, r3, #31
 80048a6:	d508      	bpl.n	80048ba <_printf_i+0x112>
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	6862      	ldr	r2, [r4, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	bfde      	ittt	le
 80048b0:	2330      	movle	r3, #48	; 0x30
 80048b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048ba:	ebac 0305 	sub.w	r3, ip, r5
 80048be:	6123      	str	r3, [r4, #16]
 80048c0:	f8cd 8000 	str.w	r8, [sp]
 80048c4:	463b      	mov	r3, r7
 80048c6:	aa03      	add	r2, sp, #12
 80048c8:	4621      	mov	r1, r4
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7ff fef6 	bl	80046bc <_printf_common>
 80048d0:	3001      	adds	r0, #1
 80048d2:	d14d      	bne.n	8004970 <_printf_i+0x1c8>
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	b005      	add	sp, #20
 80048da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048de:	4839      	ldr	r0, [pc, #228]	; (80049c4 <_printf_i+0x21c>)
 80048e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80048e4:	6813      	ldr	r3, [r2, #0]
 80048e6:	6821      	ldr	r1, [r4, #0]
 80048e8:	1d1d      	adds	r5, r3, #4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6015      	str	r5, [r2, #0]
 80048ee:	060a      	lsls	r2, r1, #24
 80048f0:	d50b      	bpl.n	800490a <_printf_i+0x162>
 80048f2:	07ca      	lsls	r2, r1, #31
 80048f4:	bf44      	itt	mi
 80048f6:	f041 0120 	orrmi.w	r1, r1, #32
 80048fa:	6021      	strmi	r1, [r4, #0]
 80048fc:	b91b      	cbnz	r3, 8004906 <_printf_i+0x15e>
 80048fe:	6822      	ldr	r2, [r4, #0]
 8004900:	f022 0220 	bic.w	r2, r2, #32
 8004904:	6022      	str	r2, [r4, #0]
 8004906:	2210      	movs	r2, #16
 8004908:	e7b7      	b.n	800487a <_printf_i+0xd2>
 800490a:	064d      	lsls	r5, r1, #25
 800490c:	bf48      	it	mi
 800490e:	b29b      	uxthmi	r3, r3
 8004910:	e7ef      	b.n	80048f2 <_printf_i+0x14a>
 8004912:	4665      	mov	r5, ip
 8004914:	fbb3 f1f2 	udiv	r1, r3, r2
 8004918:	fb02 3311 	mls	r3, r2, r1, r3
 800491c:	5cc3      	ldrb	r3, [r0, r3]
 800491e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004922:	460b      	mov	r3, r1
 8004924:	2900      	cmp	r1, #0
 8004926:	d1f5      	bne.n	8004914 <_printf_i+0x16c>
 8004928:	e7b9      	b.n	800489e <_printf_i+0xf6>
 800492a:	6813      	ldr	r3, [r2, #0]
 800492c:	6825      	ldr	r5, [r4, #0]
 800492e:	6961      	ldr	r1, [r4, #20]
 8004930:	1d18      	adds	r0, r3, #4
 8004932:	6010      	str	r0, [r2, #0]
 8004934:	0628      	lsls	r0, r5, #24
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	d501      	bpl.n	800493e <_printf_i+0x196>
 800493a:	6019      	str	r1, [r3, #0]
 800493c:	e002      	b.n	8004944 <_printf_i+0x19c>
 800493e:	066a      	lsls	r2, r5, #25
 8004940:	d5fb      	bpl.n	800493a <_printf_i+0x192>
 8004942:	8019      	strh	r1, [r3, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	6123      	str	r3, [r4, #16]
 8004948:	4665      	mov	r5, ip
 800494a:	e7b9      	b.n	80048c0 <_printf_i+0x118>
 800494c:	6813      	ldr	r3, [r2, #0]
 800494e:	1d19      	adds	r1, r3, #4
 8004950:	6011      	str	r1, [r2, #0]
 8004952:	681d      	ldr	r5, [r3, #0]
 8004954:	6862      	ldr	r2, [r4, #4]
 8004956:	2100      	movs	r1, #0
 8004958:	4628      	mov	r0, r5
 800495a:	f7fb fc49 	bl	80001f0 <memchr>
 800495e:	b108      	cbz	r0, 8004964 <_printf_i+0x1bc>
 8004960:	1b40      	subs	r0, r0, r5
 8004962:	6060      	str	r0, [r4, #4]
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	6123      	str	r3, [r4, #16]
 8004968:	2300      	movs	r3, #0
 800496a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800496e:	e7a7      	b.n	80048c0 <_printf_i+0x118>
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	462a      	mov	r2, r5
 8004974:	4639      	mov	r1, r7
 8004976:	4630      	mov	r0, r6
 8004978:	47c0      	blx	r8
 800497a:	3001      	adds	r0, #1
 800497c:	d0aa      	beq.n	80048d4 <_printf_i+0x12c>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	079b      	lsls	r3, r3, #30
 8004982:	d413      	bmi.n	80049ac <_printf_i+0x204>
 8004984:	68e0      	ldr	r0, [r4, #12]
 8004986:	9b03      	ldr	r3, [sp, #12]
 8004988:	4298      	cmp	r0, r3
 800498a:	bfb8      	it	lt
 800498c:	4618      	movlt	r0, r3
 800498e:	e7a3      	b.n	80048d8 <_printf_i+0x130>
 8004990:	2301      	movs	r3, #1
 8004992:	464a      	mov	r2, r9
 8004994:	4639      	mov	r1, r7
 8004996:	4630      	mov	r0, r6
 8004998:	47c0      	blx	r8
 800499a:	3001      	adds	r0, #1
 800499c:	d09a      	beq.n	80048d4 <_printf_i+0x12c>
 800499e:	3501      	adds	r5, #1
 80049a0:	68e3      	ldr	r3, [r4, #12]
 80049a2:	9a03      	ldr	r2, [sp, #12]
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	42ab      	cmp	r3, r5
 80049a8:	dcf2      	bgt.n	8004990 <_printf_i+0x1e8>
 80049aa:	e7eb      	b.n	8004984 <_printf_i+0x1dc>
 80049ac:	2500      	movs	r5, #0
 80049ae:	f104 0919 	add.w	r9, r4, #25
 80049b2:	e7f5      	b.n	80049a0 <_printf_i+0x1f8>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1ac      	bne.n	8004912 <_printf_i+0x16a>
 80049b8:	7803      	ldrb	r3, [r0, #0]
 80049ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c2:	e76c      	b.n	800489e <_printf_i+0xf6>
 80049c4:	08006b2a 	.word	0x08006b2a
 80049c8:	08006b3b 	.word	0x08006b3b

080049cc <iprintf>:
 80049cc:	b40f      	push	{r0, r1, r2, r3}
 80049ce:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <iprintf+0x2c>)
 80049d0:	b513      	push	{r0, r1, r4, lr}
 80049d2:	681c      	ldr	r4, [r3, #0]
 80049d4:	b124      	cbz	r4, 80049e0 <iprintf+0x14>
 80049d6:	69a3      	ldr	r3, [r4, #24]
 80049d8:	b913      	cbnz	r3, 80049e0 <iprintf+0x14>
 80049da:	4620      	mov	r0, r4
 80049dc:	f000 feb4 	bl	8005748 <__sinit>
 80049e0:	ab05      	add	r3, sp, #20
 80049e2:	9a04      	ldr	r2, [sp, #16]
 80049e4:	68a1      	ldr	r1, [r4, #8]
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	4620      	mov	r0, r4
 80049ea:	f001 fc65 	bl	80062b8 <_vfiprintf_r>
 80049ee:	b002      	add	sp, #8
 80049f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049f4:	b004      	add	sp, #16
 80049f6:	4770      	bx	lr
 80049f8:	20000010 	.word	0x20000010

080049fc <siprintf>:
 80049fc:	b40e      	push	{r1, r2, r3}
 80049fe:	b500      	push	{lr}
 8004a00:	b09c      	sub	sp, #112	; 0x70
 8004a02:	ab1d      	add	r3, sp, #116	; 0x74
 8004a04:	9002      	str	r0, [sp, #8]
 8004a06:	9006      	str	r0, [sp, #24]
 8004a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a0c:	4809      	ldr	r0, [pc, #36]	; (8004a34 <siprintf+0x38>)
 8004a0e:	9107      	str	r1, [sp, #28]
 8004a10:	9104      	str	r1, [sp, #16]
 8004a12:	4909      	ldr	r1, [pc, #36]	; (8004a38 <siprintf+0x3c>)
 8004a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a18:	9105      	str	r1, [sp, #20]
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	a902      	add	r1, sp, #8
 8004a20:	f001 fb28 	bl	8006074 <_svfiprintf_r>
 8004a24:	9b02      	ldr	r3, [sp, #8]
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	b01c      	add	sp, #112	; 0x70
 8004a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a30:	b003      	add	sp, #12
 8004a32:	4770      	bx	lr
 8004a34:	20000010 	.word	0x20000010
 8004a38:	ffff0208 	.word	0xffff0208

08004a3c <quorem>:
 8004a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a40:	6903      	ldr	r3, [r0, #16]
 8004a42:	690c      	ldr	r4, [r1, #16]
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	4680      	mov	r8, r0
 8004a48:	f2c0 8082 	blt.w	8004b50 <quorem+0x114>
 8004a4c:	3c01      	subs	r4, #1
 8004a4e:	f101 0714 	add.w	r7, r1, #20
 8004a52:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a56:	f100 0614 	add.w	r6, r0, #20
 8004a5a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a62:	eb06 030c 	add.w	r3, r6, ip
 8004a66:	3501      	adds	r5, #1
 8004a68:	eb07 090c 	add.w	r9, r7, ip
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a72:	b395      	cbz	r5, 8004ada <quorem+0x9e>
 8004a74:	f04f 0a00 	mov.w	sl, #0
 8004a78:	4638      	mov	r0, r7
 8004a7a:	46b6      	mov	lr, r6
 8004a7c:	46d3      	mov	fp, sl
 8004a7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a82:	b293      	uxth	r3, r2
 8004a84:	fb05 a303 	mla	r3, r5, r3, sl
 8004a88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	ebab 0303 	sub.w	r3, fp, r3
 8004a92:	0c12      	lsrs	r2, r2, #16
 8004a94:	f8de b000 	ldr.w	fp, [lr]
 8004a98:	fb05 a202 	mla	r2, r5, r2, sl
 8004a9c:	fa13 f38b 	uxtah	r3, r3, fp
 8004aa0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004aa4:	fa1f fb82 	uxth.w	fp, r2
 8004aa8:	f8de 2000 	ldr.w	r2, [lr]
 8004aac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004aba:	4581      	cmp	r9, r0
 8004abc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ac0:	f84e 3b04 	str.w	r3, [lr], #4
 8004ac4:	d2db      	bcs.n	8004a7e <quorem+0x42>
 8004ac6:	f856 300c 	ldr.w	r3, [r6, ip]
 8004aca:	b933      	cbnz	r3, 8004ada <quorem+0x9e>
 8004acc:	9b01      	ldr	r3, [sp, #4]
 8004ace:	3b04      	subs	r3, #4
 8004ad0:	429e      	cmp	r6, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	d330      	bcc.n	8004b38 <quorem+0xfc>
 8004ad6:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ada:	4640      	mov	r0, r8
 8004adc:	f001 f8f4 	bl	8005cc8 <__mcmp>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	db25      	blt.n	8004b30 <quorem+0xf4>
 8004ae4:	3501      	adds	r5, #1
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f04f 0c00 	mov.w	ip, #0
 8004aec:	f857 2b04 	ldr.w	r2, [r7], #4
 8004af0:	f8d0 e000 	ldr.w	lr, [r0]
 8004af4:	b293      	uxth	r3, r2
 8004af6:	ebac 0303 	sub.w	r3, ip, r3
 8004afa:	0c12      	lsrs	r2, r2, #16
 8004afc:	fa13 f38e 	uxtah	r3, r3, lr
 8004b00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b0e:	45b9      	cmp	r9, r7
 8004b10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b14:	f840 3b04 	str.w	r3, [r0], #4
 8004b18:	d2e8      	bcs.n	8004aec <quorem+0xb0>
 8004b1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004b1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004b22:	b92a      	cbnz	r2, 8004b30 <quorem+0xf4>
 8004b24:	3b04      	subs	r3, #4
 8004b26:	429e      	cmp	r6, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	d30b      	bcc.n	8004b44 <quorem+0x108>
 8004b2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b30:	4628      	mov	r0, r5
 8004b32:	b003      	add	sp, #12
 8004b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	3b04      	subs	r3, #4
 8004b3c:	2a00      	cmp	r2, #0
 8004b3e:	d1ca      	bne.n	8004ad6 <quorem+0x9a>
 8004b40:	3c01      	subs	r4, #1
 8004b42:	e7c5      	b.n	8004ad0 <quorem+0x94>
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	3b04      	subs	r3, #4
 8004b48:	2a00      	cmp	r2, #0
 8004b4a:	d1ef      	bne.n	8004b2c <quorem+0xf0>
 8004b4c:	3c01      	subs	r4, #1
 8004b4e:	e7ea      	b.n	8004b26 <quorem+0xea>
 8004b50:	2000      	movs	r0, #0
 8004b52:	e7ee      	b.n	8004b32 <quorem+0xf6>
 8004b54:	0000      	movs	r0, r0
	...

08004b58 <_dtoa_r>:
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	ec57 6b10 	vmov	r6, r7, d0
 8004b60:	b097      	sub	sp, #92	; 0x5c
 8004b62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b64:	9106      	str	r1, [sp, #24]
 8004b66:	4604      	mov	r4, r0
 8004b68:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b6a:	9312      	str	r3, [sp, #72]	; 0x48
 8004b6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004b70:	e9cd 6700 	strd	r6, r7, [sp]
 8004b74:	b93d      	cbnz	r5, 8004b86 <_dtoa_r+0x2e>
 8004b76:	2010      	movs	r0, #16
 8004b78:	f000 fe7e 	bl	8005878 <malloc>
 8004b7c:	6260      	str	r0, [r4, #36]	; 0x24
 8004b7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b82:	6005      	str	r5, [r0, #0]
 8004b84:	60c5      	str	r5, [r0, #12]
 8004b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	b151      	cbz	r1, 8004ba2 <_dtoa_r+0x4a>
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	604a      	str	r2, [r1, #4]
 8004b90:	2301      	movs	r3, #1
 8004b92:	4093      	lsls	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
 8004b96:	4620      	mov	r0, r4
 8004b98:	f000 feb5 	bl	8005906 <_Bfree>
 8004b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	1e3b      	subs	r3, r7, #0
 8004ba4:	bfbb      	ittet	lt
 8004ba6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004baa:	9301      	strlt	r3, [sp, #4]
 8004bac:	2300      	movge	r3, #0
 8004bae:	2201      	movlt	r2, #1
 8004bb0:	bfac      	ite	ge
 8004bb2:	f8c8 3000 	strge.w	r3, [r8]
 8004bb6:	f8c8 2000 	strlt.w	r2, [r8]
 8004bba:	4baf      	ldr	r3, [pc, #700]	; (8004e78 <_dtoa_r+0x320>)
 8004bbc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004bc0:	ea33 0308 	bics.w	r3, r3, r8
 8004bc4:	d114      	bne.n	8004bf0 <_dtoa_r+0x98>
 8004bc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	9b00      	ldr	r3, [sp, #0]
 8004bd0:	b923      	cbnz	r3, 8004bdc <_dtoa_r+0x84>
 8004bd2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	f000 8542 	beq.w	8005660 <_dtoa_r+0xb08>
 8004bdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bde:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004e8c <_dtoa_r+0x334>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8544 	beq.w	8005670 <_dtoa_r+0xb18>
 8004be8:	f10b 0303 	add.w	r3, fp, #3
 8004bec:	f000 bd3e 	b.w	800566c <_dtoa_r+0xb14>
 8004bf0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	f7fb ff6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c00:	4681      	mov	r9, r0
 8004c02:	b168      	cbz	r0, 8004c20 <_dtoa_r+0xc8>
 8004c04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c06:	2301      	movs	r3, #1
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8524 	beq.w	800565a <_dtoa_r+0xb02>
 8004c12:	4b9a      	ldr	r3, [pc, #616]	; (8004e7c <_dtoa_r+0x324>)
 8004c14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c16:	f103 3bff 	add.w	fp, r3, #4294967295
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	f000 bd28 	b.w	8005670 <_dtoa_r+0xb18>
 8004c20:	aa14      	add	r2, sp, #80	; 0x50
 8004c22:	a915      	add	r1, sp, #84	; 0x54
 8004c24:	ec47 6b10 	vmov	d0, r6, r7
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f001 f8c4 	bl	8005db6 <__d2b>
 8004c2e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c32:	9004      	str	r0, [sp, #16]
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	d07c      	beq.n	8004d32 <_dtoa_r+0x1da>
 8004c38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c3c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004c40:	46b2      	mov	sl, r6
 8004c42:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c4a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004c4e:	2200      	movs	r2, #0
 8004c50:	4b8b      	ldr	r3, [pc, #556]	; (8004e80 <_dtoa_r+0x328>)
 8004c52:	4650      	mov	r0, sl
 8004c54:	4659      	mov	r1, fp
 8004c56:	f7fb fb1f 	bl	8000298 <__aeabi_dsub>
 8004c5a:	a381      	add	r3, pc, #516	; (adr r3, 8004e60 <_dtoa_r+0x308>)
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f7fb fcd2 	bl	8000608 <__aeabi_dmul>
 8004c64:	a380      	add	r3, pc, #512	; (adr r3, 8004e68 <_dtoa_r+0x310>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fb17 	bl	800029c <__adddf3>
 8004c6e:	4606      	mov	r6, r0
 8004c70:	4628      	mov	r0, r5
 8004c72:	460f      	mov	r7, r1
 8004c74:	f7fb fc5e 	bl	8000534 <__aeabi_i2d>
 8004c78:	a37d      	add	r3, pc, #500	; (adr r3, 8004e70 <_dtoa_r+0x318>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f7fb fcc3 	bl	8000608 <__aeabi_dmul>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4630      	mov	r0, r6
 8004c88:	4639      	mov	r1, r7
 8004c8a:	f7fb fb07 	bl	800029c <__adddf3>
 8004c8e:	4606      	mov	r6, r0
 8004c90:	460f      	mov	r7, r1
 8004c92:	f7fb ff69 	bl	8000b68 <__aeabi_d2iz>
 8004c96:	2200      	movs	r2, #0
 8004c98:	4682      	mov	sl, r0
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	f7fb ff24 	bl	8000aec <__aeabi_dcmplt>
 8004ca4:	b148      	cbz	r0, 8004cba <_dtoa_r+0x162>
 8004ca6:	4650      	mov	r0, sl
 8004ca8:	f7fb fc44 	bl	8000534 <__aeabi_i2d>
 8004cac:	4632      	mov	r2, r6
 8004cae:	463b      	mov	r3, r7
 8004cb0:	f7fb ff12 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cb4:	b908      	cbnz	r0, 8004cba <_dtoa_r+0x162>
 8004cb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cba:	f1ba 0f16 	cmp.w	sl, #22
 8004cbe:	d859      	bhi.n	8004d74 <_dtoa_r+0x21c>
 8004cc0:	4970      	ldr	r1, [pc, #448]	; (8004e84 <_dtoa_r+0x32c>)
 8004cc2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004cc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cce:	f7fb ff2b 	bl	8000b28 <__aeabi_dcmpgt>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d050      	beq.n	8004d78 <_dtoa_r+0x220>
 8004cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cda:	2300      	movs	r3, #0
 8004cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ce0:	1b5d      	subs	r5, r3, r5
 8004ce2:	f1b5 0801 	subs.w	r8, r5, #1
 8004ce6:	bf49      	itett	mi
 8004ce8:	f1c5 0301 	rsbmi	r3, r5, #1
 8004cec:	2300      	movpl	r3, #0
 8004cee:	9305      	strmi	r3, [sp, #20]
 8004cf0:	f04f 0800 	movmi.w	r8, #0
 8004cf4:	bf58      	it	pl
 8004cf6:	9305      	strpl	r3, [sp, #20]
 8004cf8:	f1ba 0f00 	cmp.w	sl, #0
 8004cfc:	db3e      	blt.n	8004d7c <_dtoa_r+0x224>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	44d0      	add	r8, sl
 8004d02:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004d06:	9307      	str	r3, [sp, #28]
 8004d08:	9b06      	ldr	r3, [sp, #24]
 8004d0a:	2b09      	cmp	r3, #9
 8004d0c:	f200 8090 	bhi.w	8004e30 <_dtoa_r+0x2d8>
 8004d10:	2b05      	cmp	r3, #5
 8004d12:	bfc4      	itt	gt
 8004d14:	3b04      	subgt	r3, #4
 8004d16:	9306      	strgt	r3, [sp, #24]
 8004d18:	9b06      	ldr	r3, [sp, #24]
 8004d1a:	f1a3 0302 	sub.w	r3, r3, #2
 8004d1e:	bfcc      	ite	gt
 8004d20:	2500      	movgt	r5, #0
 8004d22:	2501      	movle	r5, #1
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	f200 808f 	bhi.w	8004e48 <_dtoa_r+0x2f0>
 8004d2a:	e8df f003 	tbb	[pc, r3]
 8004d2e:	7f7d      	.short	0x7f7d
 8004d30:	7131      	.short	0x7131
 8004d32:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004d36:	441d      	add	r5, r3
 8004d38:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004d3c:	2820      	cmp	r0, #32
 8004d3e:	dd13      	ble.n	8004d68 <_dtoa_r+0x210>
 8004d40:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004d44:	9b00      	ldr	r3, [sp, #0]
 8004d46:	fa08 f800 	lsl.w	r8, r8, r0
 8004d4a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004d4e:	fa23 f000 	lsr.w	r0, r3, r0
 8004d52:	ea48 0000 	orr.w	r0, r8, r0
 8004d56:	f7fb fbdd 	bl	8000514 <__aeabi_ui2d>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4682      	mov	sl, r0
 8004d5e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004d62:	3d01      	subs	r5, #1
 8004d64:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d66:	e772      	b.n	8004c4e <_dtoa_r+0xf6>
 8004d68:	9b00      	ldr	r3, [sp, #0]
 8004d6a:	f1c0 0020 	rsb	r0, r0, #32
 8004d6e:	fa03 f000 	lsl.w	r0, r3, r0
 8004d72:	e7f0      	b.n	8004d56 <_dtoa_r+0x1fe>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e7b1      	b.n	8004cdc <_dtoa_r+0x184>
 8004d78:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d7a:	e7b0      	b.n	8004cde <_dtoa_r+0x186>
 8004d7c:	9b05      	ldr	r3, [sp, #20]
 8004d7e:	eba3 030a 	sub.w	r3, r3, sl
 8004d82:	9305      	str	r3, [sp, #20]
 8004d84:	f1ca 0300 	rsb	r3, sl, #0
 8004d88:	9307      	str	r3, [sp, #28]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8004d8e:	e7bb      	b.n	8004d08 <_dtoa_r+0x1b0>
 8004d90:	2301      	movs	r3, #1
 8004d92:	930a      	str	r3, [sp, #40]	; 0x28
 8004d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	dd59      	ble.n	8004e4e <_dtoa_r+0x2f6>
 8004d9a:	9302      	str	r3, [sp, #8]
 8004d9c:	4699      	mov	r9, r3
 8004d9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004da0:	2200      	movs	r2, #0
 8004da2:	6072      	str	r2, [r6, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	f102 0014 	add.w	r0, r2, #20
 8004daa:	4298      	cmp	r0, r3
 8004dac:	6871      	ldr	r1, [r6, #4]
 8004dae:	d953      	bls.n	8004e58 <_dtoa_r+0x300>
 8004db0:	4620      	mov	r0, r4
 8004db2:	f000 fd74 	bl	800589e <_Balloc>
 8004db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004db8:	6030      	str	r0, [r6, #0]
 8004dba:	f1b9 0f0e 	cmp.w	r9, #14
 8004dbe:	f8d3 b000 	ldr.w	fp, [r3]
 8004dc2:	f200 80e6 	bhi.w	8004f92 <_dtoa_r+0x43a>
 8004dc6:	2d00      	cmp	r5, #0
 8004dc8:	f000 80e3 	beq.w	8004f92 <_dtoa_r+0x43a>
 8004dcc:	ed9d 7b00 	vldr	d7, [sp]
 8004dd0:	f1ba 0f00 	cmp.w	sl, #0
 8004dd4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004dd8:	dd74      	ble.n	8004ec4 <_dtoa_r+0x36c>
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <_dtoa_r+0x32c>)
 8004ddc:	f00a 030f 	and.w	r3, sl, #15
 8004de0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004de4:	ed93 7b00 	vldr	d7, [r3]
 8004de8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004dec:	06f0      	lsls	r0, r6, #27
 8004dee:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004df2:	d565      	bpl.n	8004ec0 <_dtoa_r+0x368>
 8004df4:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <_dtoa_r+0x330>)
 8004df6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dfa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dfe:	f7fb fd2d 	bl	800085c <__aeabi_ddiv>
 8004e02:	e9cd 0100 	strd	r0, r1, [sp]
 8004e06:	f006 060f 	and.w	r6, r6, #15
 8004e0a:	2503      	movs	r5, #3
 8004e0c:	4f1e      	ldr	r7, [pc, #120]	; (8004e88 <_dtoa_r+0x330>)
 8004e0e:	e04c      	b.n	8004eaa <_dtoa_r+0x352>
 8004e10:	2301      	movs	r3, #1
 8004e12:	930a      	str	r3, [sp, #40]	; 0x28
 8004e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e16:	4453      	add	r3, sl
 8004e18:	f103 0901 	add.w	r9, r3, #1
 8004e1c:	9302      	str	r3, [sp, #8]
 8004e1e:	464b      	mov	r3, r9
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	bfb8      	it	lt
 8004e24:	2301      	movlt	r3, #1
 8004e26:	e7ba      	b.n	8004d9e <_dtoa_r+0x246>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e7b2      	b.n	8004d92 <_dtoa_r+0x23a>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e7f0      	b.n	8004e12 <_dtoa_r+0x2ba>
 8004e30:	2501      	movs	r5, #1
 8004e32:	2300      	movs	r3, #0
 8004e34:	9306      	str	r3, [sp, #24]
 8004e36:	950a      	str	r5, [sp, #40]	; 0x28
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3c:	9302      	str	r3, [sp, #8]
 8004e3e:	4699      	mov	r9, r3
 8004e40:	2200      	movs	r2, #0
 8004e42:	2312      	movs	r3, #18
 8004e44:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e46:	e7aa      	b.n	8004d9e <_dtoa_r+0x246>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e4c:	e7f4      	b.n	8004e38 <_dtoa_r+0x2e0>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	9302      	str	r3, [sp, #8]
 8004e52:	4699      	mov	r9, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	e7f5      	b.n	8004e44 <_dtoa_r+0x2ec>
 8004e58:	3101      	adds	r1, #1
 8004e5a:	6071      	str	r1, [r6, #4]
 8004e5c:	0052      	lsls	r2, r2, #1
 8004e5e:	e7a2      	b.n	8004da6 <_dtoa_r+0x24e>
 8004e60:	636f4361 	.word	0x636f4361
 8004e64:	3fd287a7 	.word	0x3fd287a7
 8004e68:	8b60c8b3 	.word	0x8b60c8b3
 8004e6c:	3fc68a28 	.word	0x3fc68a28
 8004e70:	509f79fb 	.word	0x509f79fb
 8004e74:	3fd34413 	.word	0x3fd34413
 8004e78:	7ff00000 	.word	0x7ff00000
 8004e7c:	08006b29 	.word	0x08006b29
 8004e80:	3ff80000 	.word	0x3ff80000
 8004e84:	08006be8 	.word	0x08006be8
 8004e88:	08006bc0 	.word	0x08006bc0
 8004e8c:	08006b55 	.word	0x08006b55
 8004e90:	07f1      	lsls	r1, r6, #31
 8004e92:	d508      	bpl.n	8004ea6 <_dtoa_r+0x34e>
 8004e94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e9c:	f7fb fbb4 	bl	8000608 <__aeabi_dmul>
 8004ea0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ea4:	3501      	adds	r5, #1
 8004ea6:	1076      	asrs	r6, r6, #1
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	2e00      	cmp	r6, #0
 8004eac:	d1f0      	bne.n	8004e90 <_dtoa_r+0x338>
 8004eae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004eb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eb6:	f7fb fcd1 	bl	800085c <__aeabi_ddiv>
 8004eba:	e9cd 0100 	strd	r0, r1, [sp]
 8004ebe:	e01a      	b.n	8004ef6 <_dtoa_r+0x39e>
 8004ec0:	2502      	movs	r5, #2
 8004ec2:	e7a3      	b.n	8004e0c <_dtoa_r+0x2b4>
 8004ec4:	f000 80a0 	beq.w	8005008 <_dtoa_r+0x4b0>
 8004ec8:	f1ca 0600 	rsb	r6, sl, #0
 8004ecc:	4b9f      	ldr	r3, [pc, #636]	; (800514c <_dtoa_r+0x5f4>)
 8004ece:	4fa0      	ldr	r7, [pc, #640]	; (8005150 <_dtoa_r+0x5f8>)
 8004ed0:	f006 020f 	and.w	r2, r6, #15
 8004ed4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ee0:	f7fb fb92 	bl	8000608 <__aeabi_dmul>
 8004ee4:	e9cd 0100 	strd	r0, r1, [sp]
 8004ee8:	1136      	asrs	r6, r6, #4
 8004eea:	2300      	movs	r3, #0
 8004eec:	2502      	movs	r5, #2
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	d17f      	bne.n	8004ff2 <_dtoa_r+0x49a>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e1      	bne.n	8004eba <_dtoa_r+0x362>
 8004ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8087 	beq.w	800500c <_dtoa_r+0x4b4>
 8004efe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004f02:	2200      	movs	r2, #0
 8004f04:	4b93      	ldr	r3, [pc, #588]	; (8005154 <_dtoa_r+0x5fc>)
 8004f06:	4630      	mov	r0, r6
 8004f08:	4639      	mov	r1, r7
 8004f0a:	f7fb fdef 	bl	8000aec <__aeabi_dcmplt>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d07c      	beq.n	800500c <_dtoa_r+0x4b4>
 8004f12:	f1b9 0f00 	cmp.w	r9, #0
 8004f16:	d079      	beq.n	800500c <_dtoa_r+0x4b4>
 8004f18:	9b02      	ldr	r3, [sp, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	dd35      	ble.n	8004f8a <_dtoa_r+0x432>
 8004f1e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004f22:	9308      	str	r3, [sp, #32]
 8004f24:	4639      	mov	r1, r7
 8004f26:	2200      	movs	r2, #0
 8004f28:	4b8b      	ldr	r3, [pc, #556]	; (8005158 <_dtoa_r+0x600>)
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f7fb fb6c 	bl	8000608 <__aeabi_dmul>
 8004f30:	e9cd 0100 	strd	r0, r1, [sp]
 8004f34:	9f02      	ldr	r7, [sp, #8]
 8004f36:	3501      	adds	r5, #1
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f7fb fafb 	bl	8000534 <__aeabi_i2d>
 8004f3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f42:	f7fb fb61 	bl	8000608 <__aeabi_dmul>
 8004f46:	2200      	movs	r2, #0
 8004f48:	4b84      	ldr	r3, [pc, #528]	; (800515c <_dtoa_r+0x604>)
 8004f4a:	f7fb f9a7 	bl	800029c <__adddf3>
 8004f4e:	4605      	mov	r5, r0
 8004f50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004f54:	2f00      	cmp	r7, #0
 8004f56:	d15d      	bne.n	8005014 <_dtoa_r+0x4bc>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4b81      	ldr	r3, [pc, #516]	; (8005160 <_dtoa_r+0x608>)
 8004f5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f60:	f7fb f99a 	bl	8000298 <__aeabi_dsub>
 8004f64:	462a      	mov	r2, r5
 8004f66:	4633      	mov	r3, r6
 8004f68:	e9cd 0100 	strd	r0, r1, [sp]
 8004f6c:	f7fb fddc 	bl	8000b28 <__aeabi_dcmpgt>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	f040 8288 	bne.w	8005486 <_dtoa_r+0x92e>
 8004f76:	462a      	mov	r2, r5
 8004f78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f80:	f7fb fdb4 	bl	8000aec <__aeabi_dcmplt>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	f040 827c 	bne.w	8005482 <_dtoa_r+0x92a>
 8004f8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f8e:	e9cd 2300 	strd	r2, r3, [sp]
 8004f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f2c0 8150 	blt.w	800523a <_dtoa_r+0x6e2>
 8004f9a:	f1ba 0f0e 	cmp.w	sl, #14
 8004f9e:	f300 814c 	bgt.w	800523a <_dtoa_r+0x6e2>
 8004fa2:	4b6a      	ldr	r3, [pc, #424]	; (800514c <_dtoa_r+0x5f4>)
 8004fa4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004fa8:	ed93 7b00 	vldr	d7, [r3]
 8004fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004fb4:	f280 80d8 	bge.w	8005168 <_dtoa_r+0x610>
 8004fb8:	f1b9 0f00 	cmp.w	r9, #0
 8004fbc:	f300 80d4 	bgt.w	8005168 <_dtoa_r+0x610>
 8004fc0:	f040 825e 	bne.w	8005480 <_dtoa_r+0x928>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4b66      	ldr	r3, [pc, #408]	; (8005160 <_dtoa_r+0x608>)
 8004fc8:	ec51 0b17 	vmov	r0, r1, d7
 8004fcc:	f7fb fb1c 	bl	8000608 <__aeabi_dmul>
 8004fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fd4:	f7fb fd9e 	bl	8000b14 <__aeabi_dcmpge>
 8004fd8:	464f      	mov	r7, r9
 8004fda:	464e      	mov	r6, r9
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	f040 8234 	bne.w	800544a <_dtoa_r+0x8f2>
 8004fe2:	2331      	movs	r3, #49	; 0x31
 8004fe4:	f10b 0501 	add.w	r5, fp, #1
 8004fe8:	f88b 3000 	strb.w	r3, [fp]
 8004fec:	f10a 0a01 	add.w	sl, sl, #1
 8004ff0:	e22f      	b.n	8005452 <_dtoa_r+0x8fa>
 8004ff2:	07f2      	lsls	r2, r6, #31
 8004ff4:	d505      	bpl.n	8005002 <_dtoa_r+0x4aa>
 8004ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ffa:	f7fb fb05 	bl	8000608 <__aeabi_dmul>
 8004ffe:	3501      	adds	r5, #1
 8005000:	2301      	movs	r3, #1
 8005002:	1076      	asrs	r6, r6, #1
 8005004:	3708      	adds	r7, #8
 8005006:	e772      	b.n	8004eee <_dtoa_r+0x396>
 8005008:	2502      	movs	r5, #2
 800500a:	e774      	b.n	8004ef6 <_dtoa_r+0x39e>
 800500c:	f8cd a020 	str.w	sl, [sp, #32]
 8005010:	464f      	mov	r7, r9
 8005012:	e791      	b.n	8004f38 <_dtoa_r+0x3e0>
 8005014:	4b4d      	ldr	r3, [pc, #308]	; (800514c <_dtoa_r+0x5f4>)
 8005016:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800501a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800501e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	d047      	beq.n	80050b4 <_dtoa_r+0x55c>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	2000      	movs	r0, #0
 800502a:	494e      	ldr	r1, [pc, #312]	; (8005164 <_dtoa_r+0x60c>)
 800502c:	f7fb fc16 	bl	800085c <__aeabi_ddiv>
 8005030:	462a      	mov	r2, r5
 8005032:	4633      	mov	r3, r6
 8005034:	f7fb f930 	bl	8000298 <__aeabi_dsub>
 8005038:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800503c:	465d      	mov	r5, fp
 800503e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005042:	f7fb fd91 	bl	8000b68 <__aeabi_d2iz>
 8005046:	4606      	mov	r6, r0
 8005048:	f7fb fa74 	bl	8000534 <__aeabi_i2d>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005054:	f7fb f920 	bl	8000298 <__aeabi_dsub>
 8005058:	3630      	adds	r6, #48	; 0x30
 800505a:	f805 6b01 	strb.w	r6, [r5], #1
 800505e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005062:	e9cd 0100 	strd	r0, r1, [sp]
 8005066:	f7fb fd41 	bl	8000aec <__aeabi_dcmplt>
 800506a:	2800      	cmp	r0, #0
 800506c:	d163      	bne.n	8005136 <_dtoa_r+0x5de>
 800506e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005072:	2000      	movs	r0, #0
 8005074:	4937      	ldr	r1, [pc, #220]	; (8005154 <_dtoa_r+0x5fc>)
 8005076:	f7fb f90f 	bl	8000298 <__aeabi_dsub>
 800507a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800507e:	f7fb fd35 	bl	8000aec <__aeabi_dcmplt>
 8005082:	2800      	cmp	r0, #0
 8005084:	f040 80b7 	bne.w	80051f6 <_dtoa_r+0x69e>
 8005088:	eba5 030b 	sub.w	r3, r5, fp
 800508c:	429f      	cmp	r7, r3
 800508e:	f77f af7c 	ble.w	8004f8a <_dtoa_r+0x432>
 8005092:	2200      	movs	r2, #0
 8005094:	4b30      	ldr	r3, [pc, #192]	; (8005158 <_dtoa_r+0x600>)
 8005096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800509a:	f7fb fab5 	bl	8000608 <__aeabi_dmul>
 800509e:	2200      	movs	r2, #0
 80050a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80050a4:	4b2c      	ldr	r3, [pc, #176]	; (8005158 <_dtoa_r+0x600>)
 80050a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050aa:	f7fb faad 	bl	8000608 <__aeabi_dmul>
 80050ae:	e9cd 0100 	strd	r0, r1, [sp]
 80050b2:	e7c4      	b.n	800503e <_dtoa_r+0x4e6>
 80050b4:	462a      	mov	r2, r5
 80050b6:	4633      	mov	r3, r6
 80050b8:	f7fb faa6 	bl	8000608 <__aeabi_dmul>
 80050bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80050c0:	eb0b 0507 	add.w	r5, fp, r7
 80050c4:	465e      	mov	r6, fp
 80050c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050ca:	f7fb fd4d 	bl	8000b68 <__aeabi_d2iz>
 80050ce:	4607      	mov	r7, r0
 80050d0:	f7fb fa30 	bl	8000534 <__aeabi_i2d>
 80050d4:	3730      	adds	r7, #48	; 0x30
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050de:	f7fb f8db 	bl	8000298 <__aeabi_dsub>
 80050e2:	f806 7b01 	strb.w	r7, [r6], #1
 80050e6:	42ae      	cmp	r6, r5
 80050e8:	e9cd 0100 	strd	r0, r1, [sp]
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	d126      	bne.n	8005140 <_dtoa_r+0x5e8>
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <_dtoa_r+0x60c>)
 80050f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050f8:	f7fb f8d0 	bl	800029c <__adddf3>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005104:	f7fb fd10 	bl	8000b28 <__aeabi_dcmpgt>
 8005108:	2800      	cmp	r0, #0
 800510a:	d174      	bne.n	80051f6 <_dtoa_r+0x69e>
 800510c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005110:	2000      	movs	r0, #0
 8005112:	4914      	ldr	r1, [pc, #80]	; (8005164 <_dtoa_r+0x60c>)
 8005114:	f7fb f8c0 	bl	8000298 <__aeabi_dsub>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005120:	f7fb fce4 	bl	8000aec <__aeabi_dcmplt>
 8005124:	2800      	cmp	r0, #0
 8005126:	f43f af30 	beq.w	8004f8a <_dtoa_r+0x432>
 800512a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800512e:	2b30      	cmp	r3, #48	; 0x30
 8005130:	f105 32ff 	add.w	r2, r5, #4294967295
 8005134:	d002      	beq.n	800513c <_dtoa_r+0x5e4>
 8005136:	f8dd a020 	ldr.w	sl, [sp, #32]
 800513a:	e04a      	b.n	80051d2 <_dtoa_r+0x67a>
 800513c:	4615      	mov	r5, r2
 800513e:	e7f4      	b.n	800512a <_dtoa_r+0x5d2>
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <_dtoa_r+0x600>)
 8005142:	f7fb fa61 	bl	8000608 <__aeabi_dmul>
 8005146:	e9cd 0100 	strd	r0, r1, [sp]
 800514a:	e7bc      	b.n	80050c6 <_dtoa_r+0x56e>
 800514c:	08006be8 	.word	0x08006be8
 8005150:	08006bc0 	.word	0x08006bc0
 8005154:	3ff00000 	.word	0x3ff00000
 8005158:	40240000 	.word	0x40240000
 800515c:	401c0000 	.word	0x401c0000
 8005160:	40140000 	.word	0x40140000
 8005164:	3fe00000 	.word	0x3fe00000
 8005168:	e9dd 6700 	ldrd	r6, r7, [sp]
 800516c:	465d      	mov	r5, fp
 800516e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005172:	4630      	mov	r0, r6
 8005174:	4639      	mov	r1, r7
 8005176:	f7fb fb71 	bl	800085c <__aeabi_ddiv>
 800517a:	f7fb fcf5 	bl	8000b68 <__aeabi_d2iz>
 800517e:	4680      	mov	r8, r0
 8005180:	f7fb f9d8 	bl	8000534 <__aeabi_i2d>
 8005184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005188:	f7fb fa3e 	bl	8000608 <__aeabi_dmul>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4630      	mov	r0, r6
 8005192:	4639      	mov	r1, r7
 8005194:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005198:	f7fb f87e 	bl	8000298 <__aeabi_dsub>
 800519c:	f805 6b01 	strb.w	r6, [r5], #1
 80051a0:	eba5 060b 	sub.w	r6, r5, fp
 80051a4:	45b1      	cmp	r9, r6
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	d139      	bne.n	8005220 <_dtoa_r+0x6c8>
 80051ac:	f7fb f876 	bl	800029c <__adddf3>
 80051b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051b4:	4606      	mov	r6, r0
 80051b6:	460f      	mov	r7, r1
 80051b8:	f7fb fcb6 	bl	8000b28 <__aeabi_dcmpgt>
 80051bc:	b9c8      	cbnz	r0, 80051f2 <_dtoa_r+0x69a>
 80051be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051c2:	4630      	mov	r0, r6
 80051c4:	4639      	mov	r1, r7
 80051c6:	f7fb fc87 	bl	8000ad8 <__aeabi_dcmpeq>
 80051ca:	b110      	cbz	r0, 80051d2 <_dtoa_r+0x67a>
 80051cc:	f018 0f01 	tst.w	r8, #1
 80051d0:	d10f      	bne.n	80051f2 <_dtoa_r+0x69a>
 80051d2:	9904      	ldr	r1, [sp, #16]
 80051d4:	4620      	mov	r0, r4
 80051d6:	f000 fb96 	bl	8005906 <_Bfree>
 80051da:	2300      	movs	r3, #0
 80051dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051de:	702b      	strb	r3, [r5, #0]
 80051e0:	f10a 0301 	add.w	r3, sl, #1
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8241 	beq.w	8005670 <_dtoa_r+0xb18>
 80051ee:	601d      	str	r5, [r3, #0]
 80051f0:	e23e      	b.n	8005670 <_dtoa_r+0xb18>
 80051f2:	f8cd a020 	str.w	sl, [sp, #32]
 80051f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80051fa:	2a39      	cmp	r2, #57	; 0x39
 80051fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8005200:	d108      	bne.n	8005214 <_dtoa_r+0x6bc>
 8005202:	459b      	cmp	fp, r3
 8005204:	d10a      	bne.n	800521c <_dtoa_r+0x6c4>
 8005206:	9b08      	ldr	r3, [sp, #32]
 8005208:	3301      	adds	r3, #1
 800520a:	9308      	str	r3, [sp, #32]
 800520c:	2330      	movs	r3, #48	; 0x30
 800520e:	f88b 3000 	strb.w	r3, [fp]
 8005212:	465b      	mov	r3, fp
 8005214:	781a      	ldrb	r2, [r3, #0]
 8005216:	3201      	adds	r2, #1
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	e78c      	b.n	8005136 <_dtoa_r+0x5de>
 800521c:	461d      	mov	r5, r3
 800521e:	e7ea      	b.n	80051f6 <_dtoa_r+0x69e>
 8005220:	2200      	movs	r2, #0
 8005222:	4b9b      	ldr	r3, [pc, #620]	; (8005490 <_dtoa_r+0x938>)
 8005224:	f7fb f9f0 	bl	8000608 <__aeabi_dmul>
 8005228:	2200      	movs	r2, #0
 800522a:	2300      	movs	r3, #0
 800522c:	4606      	mov	r6, r0
 800522e:	460f      	mov	r7, r1
 8005230:	f7fb fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8005234:	2800      	cmp	r0, #0
 8005236:	d09a      	beq.n	800516e <_dtoa_r+0x616>
 8005238:	e7cb      	b.n	80051d2 <_dtoa_r+0x67a>
 800523a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800523c:	2a00      	cmp	r2, #0
 800523e:	f000 808b 	beq.w	8005358 <_dtoa_r+0x800>
 8005242:	9a06      	ldr	r2, [sp, #24]
 8005244:	2a01      	cmp	r2, #1
 8005246:	dc6e      	bgt.n	8005326 <_dtoa_r+0x7ce>
 8005248:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800524a:	2a00      	cmp	r2, #0
 800524c:	d067      	beq.n	800531e <_dtoa_r+0x7c6>
 800524e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005252:	9f07      	ldr	r7, [sp, #28]
 8005254:	9d05      	ldr	r5, [sp, #20]
 8005256:	9a05      	ldr	r2, [sp, #20]
 8005258:	2101      	movs	r1, #1
 800525a:	441a      	add	r2, r3
 800525c:	4620      	mov	r0, r4
 800525e:	9205      	str	r2, [sp, #20]
 8005260:	4498      	add	r8, r3
 8005262:	f000 fbf0 	bl	8005a46 <__i2b>
 8005266:	4606      	mov	r6, r0
 8005268:	2d00      	cmp	r5, #0
 800526a:	dd0c      	ble.n	8005286 <_dtoa_r+0x72e>
 800526c:	f1b8 0f00 	cmp.w	r8, #0
 8005270:	dd09      	ble.n	8005286 <_dtoa_r+0x72e>
 8005272:	4545      	cmp	r5, r8
 8005274:	9a05      	ldr	r2, [sp, #20]
 8005276:	462b      	mov	r3, r5
 8005278:	bfa8      	it	ge
 800527a:	4643      	movge	r3, r8
 800527c:	1ad2      	subs	r2, r2, r3
 800527e:	9205      	str	r2, [sp, #20]
 8005280:	1aed      	subs	r5, r5, r3
 8005282:	eba8 0803 	sub.w	r8, r8, r3
 8005286:	9b07      	ldr	r3, [sp, #28]
 8005288:	b1eb      	cbz	r3, 80052c6 <_dtoa_r+0x76e>
 800528a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800528c:	2b00      	cmp	r3, #0
 800528e:	d067      	beq.n	8005360 <_dtoa_r+0x808>
 8005290:	b18f      	cbz	r7, 80052b6 <_dtoa_r+0x75e>
 8005292:	4631      	mov	r1, r6
 8005294:	463a      	mov	r2, r7
 8005296:	4620      	mov	r0, r4
 8005298:	f000 fc74 	bl	8005b84 <__pow5mult>
 800529c:	9a04      	ldr	r2, [sp, #16]
 800529e:	4601      	mov	r1, r0
 80052a0:	4606      	mov	r6, r0
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 fbd8 	bl	8005a58 <__multiply>
 80052a8:	9904      	ldr	r1, [sp, #16]
 80052aa:	9008      	str	r0, [sp, #32]
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 fb2a 	bl	8005906 <_Bfree>
 80052b2:	9b08      	ldr	r3, [sp, #32]
 80052b4:	9304      	str	r3, [sp, #16]
 80052b6:	9b07      	ldr	r3, [sp, #28]
 80052b8:	1bda      	subs	r2, r3, r7
 80052ba:	d004      	beq.n	80052c6 <_dtoa_r+0x76e>
 80052bc:	9904      	ldr	r1, [sp, #16]
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 fc60 	bl	8005b84 <__pow5mult>
 80052c4:	9004      	str	r0, [sp, #16]
 80052c6:	2101      	movs	r1, #1
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 fbbc 	bl	8005a46 <__i2b>
 80052ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052d0:	4607      	mov	r7, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 81d0 	beq.w	8005678 <_dtoa_r+0xb20>
 80052d8:	461a      	mov	r2, r3
 80052da:	4601      	mov	r1, r0
 80052dc:	4620      	mov	r0, r4
 80052de:	f000 fc51 	bl	8005b84 <__pow5mult>
 80052e2:	9b06      	ldr	r3, [sp, #24]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	4607      	mov	r7, r0
 80052e8:	dc40      	bgt.n	800536c <_dtoa_r+0x814>
 80052ea:	9b00      	ldr	r3, [sp, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d139      	bne.n	8005364 <_dtoa_r+0x80c>
 80052f0:	9b01      	ldr	r3, [sp, #4]
 80052f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d136      	bne.n	8005368 <_dtoa_r+0x810>
 80052fa:	9b01      	ldr	r3, [sp, #4]
 80052fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005300:	0d1b      	lsrs	r3, r3, #20
 8005302:	051b      	lsls	r3, r3, #20
 8005304:	b12b      	cbz	r3, 8005312 <_dtoa_r+0x7ba>
 8005306:	9b05      	ldr	r3, [sp, #20]
 8005308:	3301      	adds	r3, #1
 800530a:	9305      	str	r3, [sp, #20]
 800530c:	f108 0801 	add.w	r8, r8, #1
 8005310:	2301      	movs	r3, #1
 8005312:	9307      	str	r3, [sp, #28]
 8005314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005316:	2b00      	cmp	r3, #0
 8005318:	d12a      	bne.n	8005370 <_dtoa_r+0x818>
 800531a:	2001      	movs	r0, #1
 800531c:	e030      	b.n	8005380 <_dtoa_r+0x828>
 800531e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005320:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005324:	e795      	b.n	8005252 <_dtoa_r+0x6fa>
 8005326:	9b07      	ldr	r3, [sp, #28]
 8005328:	f109 37ff 	add.w	r7, r9, #4294967295
 800532c:	42bb      	cmp	r3, r7
 800532e:	bfbf      	itttt	lt
 8005330:	9b07      	ldrlt	r3, [sp, #28]
 8005332:	9707      	strlt	r7, [sp, #28]
 8005334:	1afa      	sublt	r2, r7, r3
 8005336:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005338:	bfbb      	ittet	lt
 800533a:	189b      	addlt	r3, r3, r2
 800533c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800533e:	1bdf      	subge	r7, r3, r7
 8005340:	2700      	movlt	r7, #0
 8005342:	f1b9 0f00 	cmp.w	r9, #0
 8005346:	bfb5      	itete	lt
 8005348:	9b05      	ldrlt	r3, [sp, #20]
 800534a:	9d05      	ldrge	r5, [sp, #20]
 800534c:	eba3 0509 	sublt.w	r5, r3, r9
 8005350:	464b      	movge	r3, r9
 8005352:	bfb8      	it	lt
 8005354:	2300      	movlt	r3, #0
 8005356:	e77e      	b.n	8005256 <_dtoa_r+0x6fe>
 8005358:	9f07      	ldr	r7, [sp, #28]
 800535a:	9d05      	ldr	r5, [sp, #20]
 800535c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800535e:	e783      	b.n	8005268 <_dtoa_r+0x710>
 8005360:	9a07      	ldr	r2, [sp, #28]
 8005362:	e7ab      	b.n	80052bc <_dtoa_r+0x764>
 8005364:	2300      	movs	r3, #0
 8005366:	e7d4      	b.n	8005312 <_dtoa_r+0x7ba>
 8005368:	9b00      	ldr	r3, [sp, #0]
 800536a:	e7d2      	b.n	8005312 <_dtoa_r+0x7ba>
 800536c:	2300      	movs	r3, #0
 800536e:	9307      	str	r3, [sp, #28]
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005376:	6918      	ldr	r0, [r3, #16]
 8005378:	f000 fb17 	bl	80059aa <__hi0bits>
 800537c:	f1c0 0020 	rsb	r0, r0, #32
 8005380:	4440      	add	r0, r8
 8005382:	f010 001f 	ands.w	r0, r0, #31
 8005386:	d047      	beq.n	8005418 <_dtoa_r+0x8c0>
 8005388:	f1c0 0320 	rsb	r3, r0, #32
 800538c:	2b04      	cmp	r3, #4
 800538e:	dd3b      	ble.n	8005408 <_dtoa_r+0x8b0>
 8005390:	9b05      	ldr	r3, [sp, #20]
 8005392:	f1c0 001c 	rsb	r0, r0, #28
 8005396:	4403      	add	r3, r0
 8005398:	9305      	str	r3, [sp, #20]
 800539a:	4405      	add	r5, r0
 800539c:	4480      	add	r8, r0
 800539e:	9b05      	ldr	r3, [sp, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	dd05      	ble.n	80053b0 <_dtoa_r+0x858>
 80053a4:	461a      	mov	r2, r3
 80053a6:	9904      	ldr	r1, [sp, #16]
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fc39 	bl	8005c20 <__lshift>
 80053ae:	9004      	str	r0, [sp, #16]
 80053b0:	f1b8 0f00 	cmp.w	r8, #0
 80053b4:	dd05      	ble.n	80053c2 <_dtoa_r+0x86a>
 80053b6:	4639      	mov	r1, r7
 80053b8:	4642      	mov	r2, r8
 80053ba:	4620      	mov	r0, r4
 80053bc:	f000 fc30 	bl	8005c20 <__lshift>
 80053c0:	4607      	mov	r7, r0
 80053c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053c4:	b353      	cbz	r3, 800541c <_dtoa_r+0x8c4>
 80053c6:	4639      	mov	r1, r7
 80053c8:	9804      	ldr	r0, [sp, #16]
 80053ca:	f000 fc7d 	bl	8005cc8 <__mcmp>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	da24      	bge.n	800541c <_dtoa_r+0x8c4>
 80053d2:	2300      	movs	r3, #0
 80053d4:	220a      	movs	r2, #10
 80053d6:	9904      	ldr	r1, [sp, #16]
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 faab 	bl	8005934 <__multadd>
 80053de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e0:	9004      	str	r0, [sp, #16]
 80053e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 814d 	beq.w	8005686 <_dtoa_r+0xb2e>
 80053ec:	2300      	movs	r3, #0
 80053ee:	4631      	mov	r1, r6
 80053f0:	220a      	movs	r2, #10
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 fa9e 	bl	8005934 <__multadd>
 80053f8:	9b02      	ldr	r3, [sp, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	4606      	mov	r6, r0
 80053fe:	dc4f      	bgt.n	80054a0 <_dtoa_r+0x948>
 8005400:	9b06      	ldr	r3, [sp, #24]
 8005402:	2b02      	cmp	r3, #2
 8005404:	dd4c      	ble.n	80054a0 <_dtoa_r+0x948>
 8005406:	e011      	b.n	800542c <_dtoa_r+0x8d4>
 8005408:	d0c9      	beq.n	800539e <_dtoa_r+0x846>
 800540a:	9a05      	ldr	r2, [sp, #20]
 800540c:	331c      	adds	r3, #28
 800540e:	441a      	add	r2, r3
 8005410:	9205      	str	r2, [sp, #20]
 8005412:	441d      	add	r5, r3
 8005414:	4498      	add	r8, r3
 8005416:	e7c2      	b.n	800539e <_dtoa_r+0x846>
 8005418:	4603      	mov	r3, r0
 800541a:	e7f6      	b.n	800540a <_dtoa_r+0x8b2>
 800541c:	f1b9 0f00 	cmp.w	r9, #0
 8005420:	dc38      	bgt.n	8005494 <_dtoa_r+0x93c>
 8005422:	9b06      	ldr	r3, [sp, #24]
 8005424:	2b02      	cmp	r3, #2
 8005426:	dd35      	ble.n	8005494 <_dtoa_r+0x93c>
 8005428:	f8cd 9008 	str.w	r9, [sp, #8]
 800542c:	9b02      	ldr	r3, [sp, #8]
 800542e:	b963      	cbnz	r3, 800544a <_dtoa_r+0x8f2>
 8005430:	4639      	mov	r1, r7
 8005432:	2205      	movs	r2, #5
 8005434:	4620      	mov	r0, r4
 8005436:	f000 fa7d 	bl	8005934 <__multadd>
 800543a:	4601      	mov	r1, r0
 800543c:	4607      	mov	r7, r0
 800543e:	9804      	ldr	r0, [sp, #16]
 8005440:	f000 fc42 	bl	8005cc8 <__mcmp>
 8005444:	2800      	cmp	r0, #0
 8005446:	f73f adcc 	bgt.w	8004fe2 <_dtoa_r+0x48a>
 800544a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800544c:	465d      	mov	r5, fp
 800544e:	ea6f 0a03 	mvn.w	sl, r3
 8005452:	f04f 0900 	mov.w	r9, #0
 8005456:	4639      	mov	r1, r7
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fa54 	bl	8005906 <_Bfree>
 800545e:	2e00      	cmp	r6, #0
 8005460:	f43f aeb7 	beq.w	80051d2 <_dtoa_r+0x67a>
 8005464:	f1b9 0f00 	cmp.w	r9, #0
 8005468:	d005      	beq.n	8005476 <_dtoa_r+0x91e>
 800546a:	45b1      	cmp	r9, r6
 800546c:	d003      	beq.n	8005476 <_dtoa_r+0x91e>
 800546e:	4649      	mov	r1, r9
 8005470:	4620      	mov	r0, r4
 8005472:	f000 fa48 	bl	8005906 <_Bfree>
 8005476:	4631      	mov	r1, r6
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fa44 	bl	8005906 <_Bfree>
 800547e:	e6a8      	b.n	80051d2 <_dtoa_r+0x67a>
 8005480:	2700      	movs	r7, #0
 8005482:	463e      	mov	r6, r7
 8005484:	e7e1      	b.n	800544a <_dtoa_r+0x8f2>
 8005486:	f8dd a020 	ldr.w	sl, [sp, #32]
 800548a:	463e      	mov	r6, r7
 800548c:	e5a9      	b.n	8004fe2 <_dtoa_r+0x48a>
 800548e:	bf00      	nop
 8005490:	40240000 	.word	0x40240000
 8005494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005496:	f8cd 9008 	str.w	r9, [sp, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 80fa 	beq.w	8005694 <_dtoa_r+0xb3c>
 80054a0:	2d00      	cmp	r5, #0
 80054a2:	dd05      	ble.n	80054b0 <_dtoa_r+0x958>
 80054a4:	4631      	mov	r1, r6
 80054a6:	462a      	mov	r2, r5
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fbb9 	bl	8005c20 <__lshift>
 80054ae:	4606      	mov	r6, r0
 80054b0:	9b07      	ldr	r3, [sp, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d04c      	beq.n	8005550 <_dtoa_r+0x9f8>
 80054b6:	6871      	ldr	r1, [r6, #4]
 80054b8:	4620      	mov	r0, r4
 80054ba:	f000 f9f0 	bl	800589e <_Balloc>
 80054be:	6932      	ldr	r2, [r6, #16]
 80054c0:	3202      	adds	r2, #2
 80054c2:	4605      	mov	r5, r0
 80054c4:	0092      	lsls	r2, r2, #2
 80054c6:	f106 010c 	add.w	r1, r6, #12
 80054ca:	300c      	adds	r0, #12
 80054cc:	f000 f9dc 	bl	8005888 <memcpy>
 80054d0:	2201      	movs	r2, #1
 80054d2:	4629      	mov	r1, r5
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 fba3 	bl	8005c20 <__lshift>
 80054da:	9b00      	ldr	r3, [sp, #0]
 80054dc:	f8cd b014 	str.w	fp, [sp, #20]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	46b1      	mov	r9, r6
 80054e6:	9307      	str	r3, [sp, #28]
 80054e8:	4606      	mov	r6, r0
 80054ea:	4639      	mov	r1, r7
 80054ec:	9804      	ldr	r0, [sp, #16]
 80054ee:	f7ff faa5 	bl	8004a3c <quorem>
 80054f2:	4649      	mov	r1, r9
 80054f4:	4605      	mov	r5, r0
 80054f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054fa:	9804      	ldr	r0, [sp, #16]
 80054fc:	f000 fbe4 	bl	8005cc8 <__mcmp>
 8005500:	4632      	mov	r2, r6
 8005502:	9000      	str	r0, [sp, #0]
 8005504:	4639      	mov	r1, r7
 8005506:	4620      	mov	r0, r4
 8005508:	f000 fbf8 	bl	8005cfc <__mdiff>
 800550c:	68c3      	ldr	r3, [r0, #12]
 800550e:	4602      	mov	r2, r0
 8005510:	bb03      	cbnz	r3, 8005554 <_dtoa_r+0x9fc>
 8005512:	4601      	mov	r1, r0
 8005514:	9008      	str	r0, [sp, #32]
 8005516:	9804      	ldr	r0, [sp, #16]
 8005518:	f000 fbd6 	bl	8005cc8 <__mcmp>
 800551c:	9a08      	ldr	r2, [sp, #32]
 800551e:	4603      	mov	r3, r0
 8005520:	4611      	mov	r1, r2
 8005522:	4620      	mov	r0, r4
 8005524:	9308      	str	r3, [sp, #32]
 8005526:	f000 f9ee 	bl	8005906 <_Bfree>
 800552a:	9b08      	ldr	r3, [sp, #32]
 800552c:	b9a3      	cbnz	r3, 8005558 <_dtoa_r+0xa00>
 800552e:	9a06      	ldr	r2, [sp, #24]
 8005530:	b992      	cbnz	r2, 8005558 <_dtoa_r+0xa00>
 8005532:	9a07      	ldr	r2, [sp, #28]
 8005534:	b982      	cbnz	r2, 8005558 <_dtoa_r+0xa00>
 8005536:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800553a:	d029      	beq.n	8005590 <_dtoa_r+0xa38>
 800553c:	9b00      	ldr	r3, [sp, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	dd01      	ble.n	8005546 <_dtoa_r+0x9ee>
 8005542:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005546:	9b05      	ldr	r3, [sp, #20]
 8005548:	1c5d      	adds	r5, r3, #1
 800554a:	f883 8000 	strb.w	r8, [r3]
 800554e:	e782      	b.n	8005456 <_dtoa_r+0x8fe>
 8005550:	4630      	mov	r0, r6
 8005552:	e7c2      	b.n	80054da <_dtoa_r+0x982>
 8005554:	2301      	movs	r3, #1
 8005556:	e7e3      	b.n	8005520 <_dtoa_r+0x9c8>
 8005558:	9a00      	ldr	r2, [sp, #0]
 800555a:	2a00      	cmp	r2, #0
 800555c:	db04      	blt.n	8005568 <_dtoa_r+0xa10>
 800555e:	d125      	bne.n	80055ac <_dtoa_r+0xa54>
 8005560:	9a06      	ldr	r2, [sp, #24]
 8005562:	bb1a      	cbnz	r2, 80055ac <_dtoa_r+0xa54>
 8005564:	9a07      	ldr	r2, [sp, #28]
 8005566:	bb0a      	cbnz	r2, 80055ac <_dtoa_r+0xa54>
 8005568:	2b00      	cmp	r3, #0
 800556a:	ddec      	ble.n	8005546 <_dtoa_r+0x9ee>
 800556c:	2201      	movs	r2, #1
 800556e:	9904      	ldr	r1, [sp, #16]
 8005570:	4620      	mov	r0, r4
 8005572:	f000 fb55 	bl	8005c20 <__lshift>
 8005576:	4639      	mov	r1, r7
 8005578:	9004      	str	r0, [sp, #16]
 800557a:	f000 fba5 	bl	8005cc8 <__mcmp>
 800557e:	2800      	cmp	r0, #0
 8005580:	dc03      	bgt.n	800558a <_dtoa_r+0xa32>
 8005582:	d1e0      	bne.n	8005546 <_dtoa_r+0x9ee>
 8005584:	f018 0f01 	tst.w	r8, #1
 8005588:	d0dd      	beq.n	8005546 <_dtoa_r+0x9ee>
 800558a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800558e:	d1d8      	bne.n	8005542 <_dtoa_r+0x9ea>
 8005590:	9b05      	ldr	r3, [sp, #20]
 8005592:	9a05      	ldr	r2, [sp, #20]
 8005594:	1c5d      	adds	r5, r3, #1
 8005596:	2339      	movs	r3, #57	; 0x39
 8005598:	7013      	strb	r3, [r2, #0]
 800559a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800559e:	2b39      	cmp	r3, #57	; 0x39
 80055a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80055a4:	d04f      	beq.n	8005646 <_dtoa_r+0xaee>
 80055a6:	3301      	adds	r3, #1
 80055a8:	7013      	strb	r3, [r2, #0]
 80055aa:	e754      	b.n	8005456 <_dtoa_r+0x8fe>
 80055ac:	9a05      	ldr	r2, [sp, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f102 0501 	add.w	r5, r2, #1
 80055b4:	dd06      	ble.n	80055c4 <_dtoa_r+0xa6c>
 80055b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055ba:	d0e9      	beq.n	8005590 <_dtoa_r+0xa38>
 80055bc:	f108 0801 	add.w	r8, r8, #1
 80055c0:	9b05      	ldr	r3, [sp, #20]
 80055c2:	e7c2      	b.n	800554a <_dtoa_r+0x9f2>
 80055c4:	9a02      	ldr	r2, [sp, #8]
 80055c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80055ca:	eba5 030b 	sub.w	r3, r5, fp
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d021      	beq.n	8005616 <_dtoa_r+0xabe>
 80055d2:	2300      	movs	r3, #0
 80055d4:	220a      	movs	r2, #10
 80055d6:	9904      	ldr	r1, [sp, #16]
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 f9ab 	bl	8005934 <__multadd>
 80055de:	45b1      	cmp	r9, r6
 80055e0:	9004      	str	r0, [sp, #16]
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	f04f 020a 	mov.w	r2, #10
 80055ea:	4649      	mov	r1, r9
 80055ec:	4620      	mov	r0, r4
 80055ee:	d105      	bne.n	80055fc <_dtoa_r+0xaa4>
 80055f0:	f000 f9a0 	bl	8005934 <__multadd>
 80055f4:	4681      	mov	r9, r0
 80055f6:	4606      	mov	r6, r0
 80055f8:	9505      	str	r5, [sp, #20]
 80055fa:	e776      	b.n	80054ea <_dtoa_r+0x992>
 80055fc:	f000 f99a 	bl	8005934 <__multadd>
 8005600:	4631      	mov	r1, r6
 8005602:	4681      	mov	r9, r0
 8005604:	2300      	movs	r3, #0
 8005606:	220a      	movs	r2, #10
 8005608:	4620      	mov	r0, r4
 800560a:	f000 f993 	bl	8005934 <__multadd>
 800560e:	4606      	mov	r6, r0
 8005610:	e7f2      	b.n	80055f8 <_dtoa_r+0xaa0>
 8005612:	f04f 0900 	mov.w	r9, #0
 8005616:	2201      	movs	r2, #1
 8005618:	9904      	ldr	r1, [sp, #16]
 800561a:	4620      	mov	r0, r4
 800561c:	f000 fb00 	bl	8005c20 <__lshift>
 8005620:	4639      	mov	r1, r7
 8005622:	9004      	str	r0, [sp, #16]
 8005624:	f000 fb50 	bl	8005cc8 <__mcmp>
 8005628:	2800      	cmp	r0, #0
 800562a:	dcb6      	bgt.n	800559a <_dtoa_r+0xa42>
 800562c:	d102      	bne.n	8005634 <_dtoa_r+0xadc>
 800562e:	f018 0f01 	tst.w	r8, #1
 8005632:	d1b2      	bne.n	800559a <_dtoa_r+0xa42>
 8005634:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005638:	2b30      	cmp	r3, #48	; 0x30
 800563a:	f105 32ff 	add.w	r2, r5, #4294967295
 800563e:	f47f af0a 	bne.w	8005456 <_dtoa_r+0x8fe>
 8005642:	4615      	mov	r5, r2
 8005644:	e7f6      	b.n	8005634 <_dtoa_r+0xadc>
 8005646:	4593      	cmp	fp, r2
 8005648:	d105      	bne.n	8005656 <_dtoa_r+0xafe>
 800564a:	2331      	movs	r3, #49	; 0x31
 800564c:	f10a 0a01 	add.w	sl, sl, #1
 8005650:	f88b 3000 	strb.w	r3, [fp]
 8005654:	e6ff      	b.n	8005456 <_dtoa_r+0x8fe>
 8005656:	4615      	mov	r5, r2
 8005658:	e79f      	b.n	800559a <_dtoa_r+0xa42>
 800565a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80056c0 <_dtoa_r+0xb68>
 800565e:	e007      	b.n	8005670 <_dtoa_r+0xb18>
 8005660:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005662:	f8df b060 	ldr.w	fp, [pc, #96]	; 80056c4 <_dtoa_r+0xb6c>
 8005666:	b11b      	cbz	r3, 8005670 <_dtoa_r+0xb18>
 8005668:	f10b 0308 	add.w	r3, fp, #8
 800566c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	4658      	mov	r0, fp
 8005672:	b017      	add	sp, #92	; 0x5c
 8005674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005678:	9b06      	ldr	r3, [sp, #24]
 800567a:	2b01      	cmp	r3, #1
 800567c:	f77f ae35 	ble.w	80052ea <_dtoa_r+0x792>
 8005680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005682:	9307      	str	r3, [sp, #28]
 8005684:	e649      	b.n	800531a <_dtoa_r+0x7c2>
 8005686:	9b02      	ldr	r3, [sp, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	dc03      	bgt.n	8005694 <_dtoa_r+0xb3c>
 800568c:	9b06      	ldr	r3, [sp, #24]
 800568e:	2b02      	cmp	r3, #2
 8005690:	f73f aecc 	bgt.w	800542c <_dtoa_r+0x8d4>
 8005694:	465d      	mov	r5, fp
 8005696:	4639      	mov	r1, r7
 8005698:	9804      	ldr	r0, [sp, #16]
 800569a:	f7ff f9cf 	bl	8004a3c <quorem>
 800569e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80056a2:	f805 8b01 	strb.w	r8, [r5], #1
 80056a6:	9a02      	ldr	r2, [sp, #8]
 80056a8:	eba5 030b 	sub.w	r3, r5, fp
 80056ac:	429a      	cmp	r2, r3
 80056ae:	ddb0      	ble.n	8005612 <_dtoa_r+0xaba>
 80056b0:	2300      	movs	r3, #0
 80056b2:	220a      	movs	r2, #10
 80056b4:	9904      	ldr	r1, [sp, #16]
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 f93c 	bl	8005934 <__multadd>
 80056bc:	9004      	str	r0, [sp, #16]
 80056be:	e7ea      	b.n	8005696 <_dtoa_r+0xb3e>
 80056c0:	08006b28 	.word	0x08006b28
 80056c4:	08006b4c 	.word	0x08006b4c

080056c8 <std>:
 80056c8:	2300      	movs	r3, #0
 80056ca:	b510      	push	{r4, lr}
 80056cc:	4604      	mov	r4, r0
 80056ce:	e9c0 3300 	strd	r3, r3, [r0]
 80056d2:	6083      	str	r3, [r0, #8]
 80056d4:	8181      	strh	r1, [r0, #12]
 80056d6:	6643      	str	r3, [r0, #100]	; 0x64
 80056d8:	81c2      	strh	r2, [r0, #14]
 80056da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056de:	6183      	str	r3, [r0, #24]
 80056e0:	4619      	mov	r1, r3
 80056e2:	2208      	movs	r2, #8
 80056e4:	305c      	adds	r0, #92	; 0x5c
 80056e6:	f7fe fd0d 	bl	8004104 <memset>
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <std+0x38>)
 80056ec:	6263      	str	r3, [r4, #36]	; 0x24
 80056ee:	4b05      	ldr	r3, [pc, #20]	; (8005704 <std+0x3c>)
 80056f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <std+0x40>)
 80056f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <std+0x44>)
 80056f8:	6224      	str	r4, [r4, #32]
 80056fa:	6323      	str	r3, [r4, #48]	; 0x30
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	bf00      	nop
 8005700:	08006505 	.word	0x08006505
 8005704:	08006527 	.word	0x08006527
 8005708:	0800655f 	.word	0x0800655f
 800570c:	08006583 	.word	0x08006583

08005710 <_cleanup_r>:
 8005710:	4901      	ldr	r1, [pc, #4]	; (8005718 <_cleanup_r+0x8>)
 8005712:	f000 b885 	b.w	8005820 <_fwalk_reent>
 8005716:	bf00      	nop
 8005718:	0800685d 	.word	0x0800685d

0800571c <__sfmoreglue>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	1e4a      	subs	r2, r1, #1
 8005720:	2568      	movs	r5, #104	; 0x68
 8005722:	4355      	muls	r5, r2
 8005724:	460e      	mov	r6, r1
 8005726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800572a:	f000 fbef 	bl	8005f0c <_malloc_r>
 800572e:	4604      	mov	r4, r0
 8005730:	b140      	cbz	r0, 8005744 <__sfmoreglue+0x28>
 8005732:	2100      	movs	r1, #0
 8005734:	e9c0 1600 	strd	r1, r6, [r0]
 8005738:	300c      	adds	r0, #12
 800573a:	60a0      	str	r0, [r4, #8]
 800573c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005740:	f7fe fce0 	bl	8004104 <memset>
 8005744:	4620      	mov	r0, r4
 8005746:	bd70      	pop	{r4, r5, r6, pc}

08005748 <__sinit>:
 8005748:	6983      	ldr	r3, [r0, #24]
 800574a:	b510      	push	{r4, lr}
 800574c:	4604      	mov	r4, r0
 800574e:	bb33      	cbnz	r3, 800579e <__sinit+0x56>
 8005750:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005754:	6503      	str	r3, [r0, #80]	; 0x50
 8005756:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <__sinit+0x58>)
 8005758:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <__sinit+0x5c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6282      	str	r2, [r0, #40]	; 0x28
 800575e:	4298      	cmp	r0, r3
 8005760:	bf04      	itt	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	6183      	streq	r3, [r0, #24]
 8005766:	f000 f81f 	bl	80057a8 <__sfp>
 800576a:	6060      	str	r0, [r4, #4]
 800576c:	4620      	mov	r0, r4
 800576e:	f000 f81b 	bl	80057a8 <__sfp>
 8005772:	60a0      	str	r0, [r4, #8]
 8005774:	4620      	mov	r0, r4
 8005776:	f000 f817 	bl	80057a8 <__sfp>
 800577a:	2200      	movs	r2, #0
 800577c:	60e0      	str	r0, [r4, #12]
 800577e:	2104      	movs	r1, #4
 8005780:	6860      	ldr	r0, [r4, #4]
 8005782:	f7ff ffa1 	bl	80056c8 <std>
 8005786:	2201      	movs	r2, #1
 8005788:	2109      	movs	r1, #9
 800578a:	68a0      	ldr	r0, [r4, #8]
 800578c:	f7ff ff9c 	bl	80056c8 <std>
 8005790:	2202      	movs	r2, #2
 8005792:	2112      	movs	r1, #18
 8005794:	68e0      	ldr	r0, [r4, #12]
 8005796:	f7ff ff97 	bl	80056c8 <std>
 800579a:	2301      	movs	r3, #1
 800579c:	61a3      	str	r3, [r4, #24]
 800579e:	bd10      	pop	{r4, pc}
 80057a0:	08006b14 	.word	0x08006b14
 80057a4:	08005711 	.word	0x08005711

080057a8 <__sfp>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <__sfp+0x70>)
 80057ac:	681e      	ldr	r6, [r3, #0]
 80057ae:	69b3      	ldr	r3, [r6, #24]
 80057b0:	4607      	mov	r7, r0
 80057b2:	b913      	cbnz	r3, 80057ba <__sfp+0x12>
 80057b4:	4630      	mov	r0, r6
 80057b6:	f7ff ffc7 	bl	8005748 <__sinit>
 80057ba:	3648      	adds	r6, #72	; 0x48
 80057bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	d503      	bpl.n	80057cc <__sfp+0x24>
 80057c4:	6833      	ldr	r3, [r6, #0]
 80057c6:	b133      	cbz	r3, 80057d6 <__sfp+0x2e>
 80057c8:	6836      	ldr	r6, [r6, #0]
 80057ca:	e7f7      	b.n	80057bc <__sfp+0x14>
 80057cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057d0:	b16d      	cbz	r5, 80057ee <__sfp+0x46>
 80057d2:	3468      	adds	r4, #104	; 0x68
 80057d4:	e7f4      	b.n	80057c0 <__sfp+0x18>
 80057d6:	2104      	movs	r1, #4
 80057d8:	4638      	mov	r0, r7
 80057da:	f7ff ff9f 	bl	800571c <__sfmoreglue>
 80057de:	6030      	str	r0, [r6, #0]
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d1f1      	bne.n	80057c8 <__sfp+0x20>
 80057e4:	230c      	movs	r3, #12
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4604      	mov	r4, r0
 80057ea:	4620      	mov	r0, r4
 80057ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <__sfp+0x74>)
 80057f0:	6665      	str	r5, [r4, #100]	; 0x64
 80057f2:	e9c4 5500 	strd	r5, r5, [r4]
 80057f6:	60a5      	str	r5, [r4, #8]
 80057f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005800:	2208      	movs	r2, #8
 8005802:	4629      	mov	r1, r5
 8005804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005808:	f7fe fc7c 	bl	8004104 <memset>
 800580c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005814:	e7e9      	b.n	80057ea <__sfp+0x42>
 8005816:	bf00      	nop
 8005818:	08006b14 	.word	0x08006b14
 800581c:	ffff0001 	.word	0xffff0001

08005820 <_fwalk_reent>:
 8005820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005824:	4680      	mov	r8, r0
 8005826:	4689      	mov	r9, r1
 8005828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800582c:	2600      	movs	r6, #0
 800582e:	b914      	cbnz	r4, 8005836 <_fwalk_reent+0x16>
 8005830:	4630      	mov	r0, r6
 8005832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005836:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800583a:	3f01      	subs	r7, #1
 800583c:	d501      	bpl.n	8005842 <_fwalk_reent+0x22>
 800583e:	6824      	ldr	r4, [r4, #0]
 8005840:	e7f5      	b.n	800582e <_fwalk_reent+0xe>
 8005842:	89ab      	ldrh	r3, [r5, #12]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d907      	bls.n	8005858 <_fwalk_reent+0x38>
 8005848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800584c:	3301      	adds	r3, #1
 800584e:	d003      	beq.n	8005858 <_fwalk_reent+0x38>
 8005850:	4629      	mov	r1, r5
 8005852:	4640      	mov	r0, r8
 8005854:	47c8      	blx	r9
 8005856:	4306      	orrs	r6, r0
 8005858:	3568      	adds	r5, #104	; 0x68
 800585a:	e7ee      	b.n	800583a <_fwalk_reent+0x1a>

0800585c <_localeconv_r>:
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <_localeconv_r+0x14>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6a18      	ldr	r0, [r3, #32]
 8005862:	4b04      	ldr	r3, [pc, #16]	; (8005874 <_localeconv_r+0x18>)
 8005864:	2800      	cmp	r0, #0
 8005866:	bf08      	it	eq
 8005868:	4618      	moveq	r0, r3
 800586a:	30f0      	adds	r0, #240	; 0xf0
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20000010 	.word	0x20000010
 8005874:	20000074 	.word	0x20000074

08005878 <malloc>:
 8005878:	4b02      	ldr	r3, [pc, #8]	; (8005884 <malloc+0xc>)
 800587a:	4601      	mov	r1, r0
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	f000 bb45 	b.w	8005f0c <_malloc_r>
 8005882:	bf00      	nop
 8005884:	20000010 	.word	0x20000010

08005888 <memcpy>:
 8005888:	b510      	push	{r4, lr}
 800588a:	1e43      	subs	r3, r0, #1
 800588c:	440a      	add	r2, r1
 800588e:	4291      	cmp	r1, r2
 8005890:	d100      	bne.n	8005894 <memcpy+0xc>
 8005892:	bd10      	pop	{r4, pc}
 8005894:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005898:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589c:	e7f7      	b.n	800588e <memcpy+0x6>

0800589e <_Balloc>:
 800589e:	b570      	push	{r4, r5, r6, lr}
 80058a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058a2:	4604      	mov	r4, r0
 80058a4:	460e      	mov	r6, r1
 80058a6:	b93d      	cbnz	r5, 80058b8 <_Balloc+0x1a>
 80058a8:	2010      	movs	r0, #16
 80058aa:	f7ff ffe5 	bl	8005878 <malloc>
 80058ae:	6260      	str	r0, [r4, #36]	; 0x24
 80058b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058b4:	6005      	str	r5, [r0, #0]
 80058b6:	60c5      	str	r5, [r0, #12]
 80058b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80058ba:	68eb      	ldr	r3, [r5, #12]
 80058bc:	b183      	cbz	r3, 80058e0 <_Balloc+0x42>
 80058be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058c6:	b9b8      	cbnz	r0, 80058f8 <_Balloc+0x5a>
 80058c8:	2101      	movs	r1, #1
 80058ca:	fa01 f506 	lsl.w	r5, r1, r6
 80058ce:	1d6a      	adds	r2, r5, #5
 80058d0:	0092      	lsls	r2, r2, #2
 80058d2:	4620      	mov	r0, r4
 80058d4:	f000 fabe 	bl	8005e54 <_calloc_r>
 80058d8:	b160      	cbz	r0, 80058f4 <_Balloc+0x56>
 80058da:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80058de:	e00e      	b.n	80058fe <_Balloc+0x60>
 80058e0:	2221      	movs	r2, #33	; 0x21
 80058e2:	2104      	movs	r1, #4
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 fab5 	bl	8005e54 <_calloc_r>
 80058ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ec:	60e8      	str	r0, [r5, #12]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e4      	bne.n	80058be <_Balloc+0x20>
 80058f4:	2000      	movs	r0, #0
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	6802      	ldr	r2, [r0, #0]
 80058fa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80058fe:	2300      	movs	r3, #0
 8005900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005904:	e7f7      	b.n	80058f6 <_Balloc+0x58>

08005906 <_Bfree>:
 8005906:	b570      	push	{r4, r5, r6, lr}
 8005908:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800590a:	4606      	mov	r6, r0
 800590c:	460d      	mov	r5, r1
 800590e:	b93c      	cbnz	r4, 8005920 <_Bfree+0x1a>
 8005910:	2010      	movs	r0, #16
 8005912:	f7ff ffb1 	bl	8005878 <malloc>
 8005916:	6270      	str	r0, [r6, #36]	; 0x24
 8005918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800591c:	6004      	str	r4, [r0, #0]
 800591e:	60c4      	str	r4, [r0, #12]
 8005920:	b13d      	cbz	r5, 8005932 <_Bfree+0x2c>
 8005922:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005924:	686a      	ldr	r2, [r5, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800592c:	6029      	str	r1, [r5, #0]
 800592e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005932:	bd70      	pop	{r4, r5, r6, pc}

08005934 <__multadd>:
 8005934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005938:	690d      	ldr	r5, [r1, #16]
 800593a:	461f      	mov	r7, r3
 800593c:	4606      	mov	r6, r0
 800593e:	460c      	mov	r4, r1
 8005940:	f101 0c14 	add.w	ip, r1, #20
 8005944:	2300      	movs	r3, #0
 8005946:	f8dc 0000 	ldr.w	r0, [ip]
 800594a:	b281      	uxth	r1, r0
 800594c:	fb02 7101 	mla	r1, r2, r1, r7
 8005950:	0c0f      	lsrs	r7, r1, #16
 8005952:	0c00      	lsrs	r0, r0, #16
 8005954:	fb02 7000 	mla	r0, r2, r0, r7
 8005958:	b289      	uxth	r1, r1
 800595a:	3301      	adds	r3, #1
 800595c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005960:	429d      	cmp	r5, r3
 8005962:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005966:	f84c 1b04 	str.w	r1, [ip], #4
 800596a:	dcec      	bgt.n	8005946 <__multadd+0x12>
 800596c:	b1d7      	cbz	r7, 80059a4 <__multadd+0x70>
 800596e:	68a3      	ldr	r3, [r4, #8]
 8005970:	42ab      	cmp	r3, r5
 8005972:	dc12      	bgt.n	800599a <__multadd+0x66>
 8005974:	6861      	ldr	r1, [r4, #4]
 8005976:	4630      	mov	r0, r6
 8005978:	3101      	adds	r1, #1
 800597a:	f7ff ff90 	bl	800589e <_Balloc>
 800597e:	6922      	ldr	r2, [r4, #16]
 8005980:	3202      	adds	r2, #2
 8005982:	f104 010c 	add.w	r1, r4, #12
 8005986:	4680      	mov	r8, r0
 8005988:	0092      	lsls	r2, r2, #2
 800598a:	300c      	adds	r0, #12
 800598c:	f7ff ff7c 	bl	8005888 <memcpy>
 8005990:	4621      	mov	r1, r4
 8005992:	4630      	mov	r0, r6
 8005994:	f7ff ffb7 	bl	8005906 <_Bfree>
 8005998:	4644      	mov	r4, r8
 800599a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800599e:	3501      	adds	r5, #1
 80059a0:	615f      	str	r7, [r3, #20]
 80059a2:	6125      	str	r5, [r4, #16]
 80059a4:	4620      	mov	r0, r4
 80059a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059aa <__hi0bits>:
 80059aa:	0c02      	lsrs	r2, r0, #16
 80059ac:	0412      	lsls	r2, r2, #16
 80059ae:	4603      	mov	r3, r0
 80059b0:	b9b2      	cbnz	r2, 80059e0 <__hi0bits+0x36>
 80059b2:	0403      	lsls	r3, r0, #16
 80059b4:	2010      	movs	r0, #16
 80059b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059ba:	bf04      	itt	eq
 80059bc:	021b      	lsleq	r3, r3, #8
 80059be:	3008      	addeq	r0, #8
 80059c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059c4:	bf04      	itt	eq
 80059c6:	011b      	lsleq	r3, r3, #4
 80059c8:	3004      	addeq	r0, #4
 80059ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80059ce:	bf04      	itt	eq
 80059d0:	009b      	lsleq	r3, r3, #2
 80059d2:	3002      	addeq	r0, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	db06      	blt.n	80059e6 <__hi0bits+0x3c>
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	d503      	bpl.n	80059e4 <__hi0bits+0x3a>
 80059dc:	3001      	adds	r0, #1
 80059de:	4770      	bx	lr
 80059e0:	2000      	movs	r0, #0
 80059e2:	e7e8      	b.n	80059b6 <__hi0bits+0xc>
 80059e4:	2020      	movs	r0, #32
 80059e6:	4770      	bx	lr

080059e8 <__lo0bits>:
 80059e8:	6803      	ldr	r3, [r0, #0]
 80059ea:	f013 0207 	ands.w	r2, r3, #7
 80059ee:	4601      	mov	r1, r0
 80059f0:	d00b      	beq.n	8005a0a <__lo0bits+0x22>
 80059f2:	07da      	lsls	r2, r3, #31
 80059f4:	d423      	bmi.n	8005a3e <__lo0bits+0x56>
 80059f6:	0798      	lsls	r0, r3, #30
 80059f8:	bf49      	itett	mi
 80059fa:	085b      	lsrmi	r3, r3, #1
 80059fc:	089b      	lsrpl	r3, r3, #2
 80059fe:	2001      	movmi	r0, #1
 8005a00:	600b      	strmi	r3, [r1, #0]
 8005a02:	bf5c      	itt	pl
 8005a04:	600b      	strpl	r3, [r1, #0]
 8005a06:	2002      	movpl	r0, #2
 8005a08:	4770      	bx	lr
 8005a0a:	b298      	uxth	r0, r3
 8005a0c:	b9a8      	cbnz	r0, 8005a3a <__lo0bits+0x52>
 8005a0e:	0c1b      	lsrs	r3, r3, #16
 8005a10:	2010      	movs	r0, #16
 8005a12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a16:	bf04      	itt	eq
 8005a18:	0a1b      	lsreq	r3, r3, #8
 8005a1a:	3008      	addeq	r0, #8
 8005a1c:	071a      	lsls	r2, r3, #28
 8005a1e:	bf04      	itt	eq
 8005a20:	091b      	lsreq	r3, r3, #4
 8005a22:	3004      	addeq	r0, #4
 8005a24:	079a      	lsls	r2, r3, #30
 8005a26:	bf04      	itt	eq
 8005a28:	089b      	lsreq	r3, r3, #2
 8005a2a:	3002      	addeq	r0, #2
 8005a2c:	07da      	lsls	r2, r3, #31
 8005a2e:	d402      	bmi.n	8005a36 <__lo0bits+0x4e>
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	d006      	beq.n	8005a42 <__lo0bits+0x5a>
 8005a34:	3001      	adds	r0, #1
 8005a36:	600b      	str	r3, [r1, #0]
 8005a38:	4770      	bx	lr
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	e7e9      	b.n	8005a12 <__lo0bits+0x2a>
 8005a3e:	2000      	movs	r0, #0
 8005a40:	4770      	bx	lr
 8005a42:	2020      	movs	r0, #32
 8005a44:	4770      	bx	lr

08005a46 <__i2b>:
 8005a46:	b510      	push	{r4, lr}
 8005a48:	460c      	mov	r4, r1
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	f7ff ff27 	bl	800589e <_Balloc>
 8005a50:	2201      	movs	r2, #1
 8005a52:	6144      	str	r4, [r0, #20]
 8005a54:	6102      	str	r2, [r0, #16]
 8005a56:	bd10      	pop	{r4, pc}

08005a58 <__multiply>:
 8005a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	690a      	ldr	r2, [r1, #16]
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	bfb8      	it	lt
 8005a66:	460b      	movlt	r3, r1
 8005a68:	4688      	mov	r8, r1
 8005a6a:	bfbc      	itt	lt
 8005a6c:	46a0      	movlt	r8, r4
 8005a6e:	461c      	movlt	r4, r3
 8005a70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005a78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a80:	eb07 0609 	add.w	r6, r7, r9
 8005a84:	42b3      	cmp	r3, r6
 8005a86:	bfb8      	it	lt
 8005a88:	3101      	addlt	r1, #1
 8005a8a:	f7ff ff08 	bl	800589e <_Balloc>
 8005a8e:	f100 0514 	add.w	r5, r0, #20
 8005a92:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005a96:	462b      	mov	r3, r5
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4573      	cmp	r3, lr
 8005a9c:	d316      	bcc.n	8005acc <__multiply+0x74>
 8005a9e:	f104 0214 	add.w	r2, r4, #20
 8005aa2:	f108 0114 	add.w	r1, r8, #20
 8005aa6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005aaa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	9b00      	ldr	r3, [sp, #0]
 8005ab2:	9201      	str	r2, [sp, #4]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d80c      	bhi.n	8005ad2 <__multiply+0x7a>
 8005ab8:	2e00      	cmp	r6, #0
 8005aba:	dd03      	ble.n	8005ac4 <__multiply+0x6c>
 8005abc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d05d      	beq.n	8005b80 <__multiply+0x128>
 8005ac4:	6106      	str	r6, [r0, #16]
 8005ac6:	b003      	add	sp, #12
 8005ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005acc:	f843 2b04 	str.w	r2, [r3], #4
 8005ad0:	e7e3      	b.n	8005a9a <__multiply+0x42>
 8005ad2:	f8b2 b000 	ldrh.w	fp, [r2]
 8005ad6:	f1bb 0f00 	cmp.w	fp, #0
 8005ada:	d023      	beq.n	8005b24 <__multiply+0xcc>
 8005adc:	4689      	mov	r9, r1
 8005ade:	46ac      	mov	ip, r5
 8005ae0:	f04f 0800 	mov.w	r8, #0
 8005ae4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005ae8:	f8dc a000 	ldr.w	sl, [ip]
 8005aec:	b2a3      	uxth	r3, r4
 8005aee:	fa1f fa8a 	uxth.w	sl, sl
 8005af2:	fb0b a303 	mla	r3, fp, r3, sl
 8005af6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005afa:	f8dc 4000 	ldr.w	r4, [ip]
 8005afe:	4443      	add	r3, r8
 8005b00:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b04:	fb0b 840a 	mla	r4, fp, sl, r8
 8005b08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b0c:	46e2      	mov	sl, ip
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b14:	454f      	cmp	r7, r9
 8005b16:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b1a:	f84a 3b04 	str.w	r3, [sl], #4
 8005b1e:	d82b      	bhi.n	8005b78 <__multiply+0x120>
 8005b20:	f8cc 8004 	str.w	r8, [ip, #4]
 8005b24:	9b01      	ldr	r3, [sp, #4]
 8005b26:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005b2a:	3204      	adds	r2, #4
 8005b2c:	f1ba 0f00 	cmp.w	sl, #0
 8005b30:	d020      	beq.n	8005b74 <__multiply+0x11c>
 8005b32:	682b      	ldr	r3, [r5, #0]
 8005b34:	4689      	mov	r9, r1
 8005b36:	46a8      	mov	r8, r5
 8005b38:	f04f 0b00 	mov.w	fp, #0
 8005b3c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005b40:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005b44:	fb0a 440c 	mla	r4, sl, ip, r4
 8005b48:	445c      	add	r4, fp
 8005b4a:	46c4      	mov	ip, r8
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b52:	f84c 3b04 	str.w	r3, [ip], #4
 8005b56:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b5a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005b5e:	0c1b      	lsrs	r3, r3, #16
 8005b60:	fb0a b303 	mla	r3, sl, r3, fp
 8005b64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005b68:	454f      	cmp	r7, r9
 8005b6a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005b6e:	d805      	bhi.n	8005b7c <__multiply+0x124>
 8005b70:	f8c8 3004 	str.w	r3, [r8, #4]
 8005b74:	3504      	adds	r5, #4
 8005b76:	e79b      	b.n	8005ab0 <__multiply+0x58>
 8005b78:	46d4      	mov	ip, sl
 8005b7a:	e7b3      	b.n	8005ae4 <__multiply+0x8c>
 8005b7c:	46e0      	mov	r8, ip
 8005b7e:	e7dd      	b.n	8005b3c <__multiply+0xe4>
 8005b80:	3e01      	subs	r6, #1
 8005b82:	e799      	b.n	8005ab8 <__multiply+0x60>

08005b84 <__pow5mult>:
 8005b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b88:	4615      	mov	r5, r2
 8005b8a:	f012 0203 	ands.w	r2, r2, #3
 8005b8e:	4606      	mov	r6, r0
 8005b90:	460f      	mov	r7, r1
 8005b92:	d007      	beq.n	8005ba4 <__pow5mult+0x20>
 8005b94:	3a01      	subs	r2, #1
 8005b96:	4c21      	ldr	r4, [pc, #132]	; (8005c1c <__pow5mult+0x98>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b9e:	f7ff fec9 	bl	8005934 <__multadd>
 8005ba2:	4607      	mov	r7, r0
 8005ba4:	10ad      	asrs	r5, r5, #2
 8005ba6:	d035      	beq.n	8005c14 <__pow5mult+0x90>
 8005ba8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005baa:	b93c      	cbnz	r4, 8005bbc <__pow5mult+0x38>
 8005bac:	2010      	movs	r0, #16
 8005bae:	f7ff fe63 	bl	8005878 <malloc>
 8005bb2:	6270      	str	r0, [r6, #36]	; 0x24
 8005bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bb8:	6004      	str	r4, [r0, #0]
 8005bba:	60c4      	str	r4, [r0, #12]
 8005bbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005bc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bc4:	b94c      	cbnz	r4, 8005bda <__pow5mult+0x56>
 8005bc6:	f240 2171 	movw	r1, #625	; 0x271
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7ff ff3b 	bl	8005a46 <__i2b>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	6003      	str	r3, [r0, #0]
 8005bda:	f04f 0800 	mov.w	r8, #0
 8005bde:	07eb      	lsls	r3, r5, #31
 8005be0:	d50a      	bpl.n	8005bf8 <__pow5mult+0x74>
 8005be2:	4639      	mov	r1, r7
 8005be4:	4622      	mov	r2, r4
 8005be6:	4630      	mov	r0, r6
 8005be8:	f7ff ff36 	bl	8005a58 <__multiply>
 8005bec:	4639      	mov	r1, r7
 8005bee:	4681      	mov	r9, r0
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f7ff fe88 	bl	8005906 <_Bfree>
 8005bf6:	464f      	mov	r7, r9
 8005bf8:	106d      	asrs	r5, r5, #1
 8005bfa:	d00b      	beq.n	8005c14 <__pow5mult+0x90>
 8005bfc:	6820      	ldr	r0, [r4, #0]
 8005bfe:	b938      	cbnz	r0, 8005c10 <__pow5mult+0x8c>
 8005c00:	4622      	mov	r2, r4
 8005c02:	4621      	mov	r1, r4
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff ff27 	bl	8005a58 <__multiply>
 8005c0a:	6020      	str	r0, [r4, #0]
 8005c0c:	f8c0 8000 	str.w	r8, [r0]
 8005c10:	4604      	mov	r4, r0
 8005c12:	e7e4      	b.n	8005bde <__pow5mult+0x5a>
 8005c14:	4638      	mov	r0, r7
 8005c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c1a:	bf00      	nop
 8005c1c:	08006cb0 	.word	0x08006cb0

08005c20 <__lshift>:
 8005c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	460c      	mov	r4, r1
 8005c26:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	6849      	ldr	r1, [r1, #4]
 8005c2e:	eb0a 0903 	add.w	r9, sl, r3
 8005c32:	68a3      	ldr	r3, [r4, #8]
 8005c34:	4607      	mov	r7, r0
 8005c36:	4616      	mov	r6, r2
 8005c38:	f109 0501 	add.w	r5, r9, #1
 8005c3c:	42ab      	cmp	r3, r5
 8005c3e:	db32      	blt.n	8005ca6 <__lshift+0x86>
 8005c40:	4638      	mov	r0, r7
 8005c42:	f7ff fe2c 	bl	800589e <_Balloc>
 8005c46:	2300      	movs	r3, #0
 8005c48:	4680      	mov	r8, r0
 8005c4a:	f100 0114 	add.w	r1, r0, #20
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4553      	cmp	r3, sl
 8005c52:	db2b      	blt.n	8005cac <__lshift+0x8c>
 8005c54:	6920      	ldr	r0, [r4, #16]
 8005c56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c5a:	f104 0314 	add.w	r3, r4, #20
 8005c5e:	f016 021f 	ands.w	r2, r6, #31
 8005c62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c6a:	d025      	beq.n	8005cb8 <__lshift+0x98>
 8005c6c:	f1c2 0e20 	rsb	lr, r2, #32
 8005c70:	2000      	movs	r0, #0
 8005c72:	681e      	ldr	r6, [r3, #0]
 8005c74:	468a      	mov	sl, r1
 8005c76:	4096      	lsls	r6, r2
 8005c78:	4330      	orrs	r0, r6
 8005c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8005c7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005c82:	459c      	cmp	ip, r3
 8005c84:	fa20 f00e 	lsr.w	r0, r0, lr
 8005c88:	d814      	bhi.n	8005cb4 <__lshift+0x94>
 8005c8a:	6048      	str	r0, [r1, #4]
 8005c8c:	b108      	cbz	r0, 8005c92 <__lshift+0x72>
 8005c8e:	f109 0502 	add.w	r5, r9, #2
 8005c92:	3d01      	subs	r5, #1
 8005c94:	4638      	mov	r0, r7
 8005c96:	f8c8 5010 	str.w	r5, [r8, #16]
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	f7ff fe33 	bl	8005906 <_Bfree>
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca6:	3101      	adds	r1, #1
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	e7c7      	b.n	8005c3c <__lshift+0x1c>
 8005cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	e7cd      	b.n	8005c50 <__lshift+0x30>
 8005cb4:	4651      	mov	r1, sl
 8005cb6:	e7dc      	b.n	8005c72 <__lshift+0x52>
 8005cb8:	3904      	subs	r1, #4
 8005cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cc2:	459c      	cmp	ip, r3
 8005cc4:	d8f9      	bhi.n	8005cba <__lshift+0x9a>
 8005cc6:	e7e4      	b.n	8005c92 <__lshift+0x72>

08005cc8 <__mcmp>:
 8005cc8:	6903      	ldr	r3, [r0, #16]
 8005cca:	690a      	ldr	r2, [r1, #16]
 8005ccc:	1a9b      	subs	r3, r3, r2
 8005cce:	b530      	push	{r4, r5, lr}
 8005cd0:	d10c      	bne.n	8005cec <__mcmp+0x24>
 8005cd2:	0092      	lsls	r2, r2, #2
 8005cd4:	3014      	adds	r0, #20
 8005cd6:	3114      	adds	r1, #20
 8005cd8:	1884      	adds	r4, r0, r2
 8005cda:	4411      	add	r1, r2
 8005cdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ce0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ce4:	4295      	cmp	r5, r2
 8005ce6:	d003      	beq.n	8005cf0 <__mcmp+0x28>
 8005ce8:	d305      	bcc.n	8005cf6 <__mcmp+0x2e>
 8005cea:	2301      	movs	r3, #1
 8005cec:	4618      	mov	r0, r3
 8005cee:	bd30      	pop	{r4, r5, pc}
 8005cf0:	42a0      	cmp	r0, r4
 8005cf2:	d3f3      	bcc.n	8005cdc <__mcmp+0x14>
 8005cf4:	e7fa      	b.n	8005cec <__mcmp+0x24>
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfa:	e7f7      	b.n	8005cec <__mcmp+0x24>

08005cfc <__mdiff>:
 8005cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d00:	460d      	mov	r5, r1
 8005d02:	4607      	mov	r7, r0
 8005d04:	4611      	mov	r1, r2
 8005d06:	4628      	mov	r0, r5
 8005d08:	4614      	mov	r4, r2
 8005d0a:	f7ff ffdd 	bl	8005cc8 <__mcmp>
 8005d0e:	1e06      	subs	r6, r0, #0
 8005d10:	d108      	bne.n	8005d24 <__mdiff+0x28>
 8005d12:	4631      	mov	r1, r6
 8005d14:	4638      	mov	r0, r7
 8005d16:	f7ff fdc2 	bl	800589e <_Balloc>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d24:	bfa4      	itt	ge
 8005d26:	4623      	movge	r3, r4
 8005d28:	462c      	movge	r4, r5
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	6861      	ldr	r1, [r4, #4]
 8005d2e:	bfa6      	itte	ge
 8005d30:	461d      	movge	r5, r3
 8005d32:	2600      	movge	r6, #0
 8005d34:	2601      	movlt	r6, #1
 8005d36:	f7ff fdb2 	bl	800589e <_Balloc>
 8005d3a:	692b      	ldr	r3, [r5, #16]
 8005d3c:	60c6      	str	r6, [r0, #12]
 8005d3e:	6926      	ldr	r6, [r4, #16]
 8005d40:	f105 0914 	add.w	r9, r5, #20
 8005d44:	f104 0214 	add.w	r2, r4, #20
 8005d48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005d4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005d50:	f100 0514 	add.w	r5, r0, #20
 8005d54:	f04f 0e00 	mov.w	lr, #0
 8005d58:	f852 ab04 	ldr.w	sl, [r2], #4
 8005d5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d60:	fa1e f18a 	uxtah	r1, lr, sl
 8005d64:	b2a3      	uxth	r3, r4
 8005d66:	1ac9      	subs	r1, r1, r3
 8005d68:	0c23      	lsrs	r3, r4, #16
 8005d6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005d6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005d72:	b289      	uxth	r1, r1
 8005d74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005d78:	45c8      	cmp	r8, r9
 8005d7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005d7e:	4694      	mov	ip, r2
 8005d80:	f845 3b04 	str.w	r3, [r5], #4
 8005d84:	d8e8      	bhi.n	8005d58 <__mdiff+0x5c>
 8005d86:	45bc      	cmp	ip, r7
 8005d88:	d304      	bcc.n	8005d94 <__mdiff+0x98>
 8005d8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005d8e:	b183      	cbz	r3, 8005db2 <__mdiff+0xb6>
 8005d90:	6106      	str	r6, [r0, #16]
 8005d92:	e7c5      	b.n	8005d20 <__mdiff+0x24>
 8005d94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005d98:	fa1e f381 	uxtah	r3, lr, r1
 8005d9c:	141a      	asrs	r2, r3, #16
 8005d9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005da8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005dac:	f845 3b04 	str.w	r3, [r5], #4
 8005db0:	e7e9      	b.n	8005d86 <__mdiff+0x8a>
 8005db2:	3e01      	subs	r6, #1
 8005db4:	e7e9      	b.n	8005d8a <__mdiff+0x8e>

08005db6 <__d2b>:
 8005db6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dba:	460e      	mov	r6, r1
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	ec59 8b10 	vmov	r8, r9, d0
 8005dc2:	4615      	mov	r5, r2
 8005dc4:	f7ff fd6b 	bl	800589e <_Balloc>
 8005dc8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005dcc:	4607      	mov	r7, r0
 8005dce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dd2:	bb34      	cbnz	r4, 8005e22 <__d2b+0x6c>
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	f1b8 0300 	subs.w	r3, r8, #0
 8005dda:	d027      	beq.n	8005e2c <__d2b+0x76>
 8005ddc:	a802      	add	r0, sp, #8
 8005dde:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005de2:	f7ff fe01 	bl	80059e8 <__lo0bits>
 8005de6:	9900      	ldr	r1, [sp, #0]
 8005de8:	b1f0      	cbz	r0, 8005e28 <__d2b+0x72>
 8005dea:	9a01      	ldr	r2, [sp, #4]
 8005dec:	f1c0 0320 	rsb	r3, r0, #32
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	430b      	orrs	r3, r1
 8005df6:	40c2      	lsrs	r2, r0
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	9201      	str	r2, [sp, #4]
 8005dfc:	9b01      	ldr	r3, [sp, #4]
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf14      	ite	ne
 8005e04:	2102      	movne	r1, #2
 8005e06:	2101      	moveq	r1, #1
 8005e08:	6139      	str	r1, [r7, #16]
 8005e0a:	b1c4      	cbz	r4, 8005e3e <__d2b+0x88>
 8005e0c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e10:	4404      	add	r4, r0
 8005e12:	6034      	str	r4, [r6, #0]
 8005e14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e18:	6028      	str	r0, [r5, #0]
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	b003      	add	sp, #12
 8005e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e26:	e7d5      	b.n	8005dd4 <__d2b+0x1e>
 8005e28:	6179      	str	r1, [r7, #20]
 8005e2a:	e7e7      	b.n	8005dfc <__d2b+0x46>
 8005e2c:	a801      	add	r0, sp, #4
 8005e2e:	f7ff fddb 	bl	80059e8 <__lo0bits>
 8005e32:	9b01      	ldr	r3, [sp, #4]
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	2101      	movs	r1, #1
 8005e38:	6139      	str	r1, [r7, #16]
 8005e3a:	3020      	adds	r0, #32
 8005e3c:	e7e5      	b.n	8005e0a <__d2b+0x54>
 8005e3e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005e42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e46:	6030      	str	r0, [r6, #0]
 8005e48:	6918      	ldr	r0, [r3, #16]
 8005e4a:	f7ff fdae 	bl	80059aa <__hi0bits>
 8005e4e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005e52:	e7e1      	b.n	8005e18 <__d2b+0x62>

08005e54 <_calloc_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	fb02 f401 	mul.w	r4, r2, r1
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	f000 f856 	bl	8005f0c <_malloc_r>
 8005e60:	4605      	mov	r5, r0
 8005e62:	b118      	cbz	r0, 8005e6c <_calloc_r+0x18>
 8005e64:	4622      	mov	r2, r4
 8005e66:	2100      	movs	r1, #0
 8005e68:	f7fe f94c 	bl	8004104 <memset>
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}

08005e70 <_free_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4605      	mov	r5, r0
 8005e74:	2900      	cmp	r1, #0
 8005e76:	d045      	beq.n	8005f04 <_free_r+0x94>
 8005e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e7c:	1f0c      	subs	r4, r1, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bfb8      	it	lt
 8005e82:	18e4      	addlt	r4, r4, r3
 8005e84:	f000 fdb5 	bl	80069f2 <__malloc_lock>
 8005e88:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <_free_r+0x98>)
 8005e8a:	6813      	ldr	r3, [r2, #0]
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	b933      	cbnz	r3, 8005e9e <_free_r+0x2e>
 8005e90:	6063      	str	r3, [r4, #4]
 8005e92:	6014      	str	r4, [r2, #0]
 8005e94:	4628      	mov	r0, r5
 8005e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e9a:	f000 bdab 	b.w	80069f4 <__malloc_unlock>
 8005e9e:	42a3      	cmp	r3, r4
 8005ea0:	d90c      	bls.n	8005ebc <_free_r+0x4c>
 8005ea2:	6821      	ldr	r1, [r4, #0]
 8005ea4:	1862      	adds	r2, r4, r1
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	bf04      	itt	eq
 8005eaa:	681a      	ldreq	r2, [r3, #0]
 8005eac:	685b      	ldreq	r3, [r3, #4]
 8005eae:	6063      	str	r3, [r4, #4]
 8005eb0:	bf04      	itt	eq
 8005eb2:	1852      	addeq	r2, r2, r1
 8005eb4:	6022      	streq	r2, [r4, #0]
 8005eb6:	6004      	str	r4, [r0, #0]
 8005eb8:	e7ec      	b.n	8005e94 <_free_r+0x24>
 8005eba:	4613      	mov	r3, r2
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	b10a      	cbz	r2, 8005ec4 <_free_r+0x54>
 8005ec0:	42a2      	cmp	r2, r4
 8005ec2:	d9fa      	bls.n	8005eba <_free_r+0x4a>
 8005ec4:	6819      	ldr	r1, [r3, #0]
 8005ec6:	1858      	adds	r0, r3, r1
 8005ec8:	42a0      	cmp	r0, r4
 8005eca:	d10b      	bne.n	8005ee4 <_free_r+0x74>
 8005ecc:	6820      	ldr	r0, [r4, #0]
 8005ece:	4401      	add	r1, r0
 8005ed0:	1858      	adds	r0, r3, r1
 8005ed2:	4282      	cmp	r2, r0
 8005ed4:	6019      	str	r1, [r3, #0]
 8005ed6:	d1dd      	bne.n	8005e94 <_free_r+0x24>
 8005ed8:	6810      	ldr	r0, [r2, #0]
 8005eda:	6852      	ldr	r2, [r2, #4]
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	4401      	add	r1, r0
 8005ee0:	6019      	str	r1, [r3, #0]
 8005ee2:	e7d7      	b.n	8005e94 <_free_r+0x24>
 8005ee4:	d902      	bls.n	8005eec <_free_r+0x7c>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	e7d3      	b.n	8005e94 <_free_r+0x24>
 8005eec:	6820      	ldr	r0, [r4, #0]
 8005eee:	1821      	adds	r1, r4, r0
 8005ef0:	428a      	cmp	r2, r1
 8005ef2:	bf04      	itt	eq
 8005ef4:	6811      	ldreq	r1, [r2, #0]
 8005ef6:	6852      	ldreq	r2, [r2, #4]
 8005ef8:	6062      	str	r2, [r4, #4]
 8005efa:	bf04      	itt	eq
 8005efc:	1809      	addeq	r1, r1, r0
 8005efe:	6021      	streq	r1, [r4, #0]
 8005f00:	605c      	str	r4, [r3, #4]
 8005f02:	e7c7      	b.n	8005e94 <_free_r+0x24>
 8005f04:	bd38      	pop	{r3, r4, r5, pc}
 8005f06:	bf00      	nop
 8005f08:	20000200 	.word	0x20000200

08005f0c <_malloc_r>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	1ccd      	adds	r5, r1, #3
 8005f10:	f025 0503 	bic.w	r5, r5, #3
 8005f14:	3508      	adds	r5, #8
 8005f16:	2d0c      	cmp	r5, #12
 8005f18:	bf38      	it	cc
 8005f1a:	250c      	movcc	r5, #12
 8005f1c:	2d00      	cmp	r5, #0
 8005f1e:	4606      	mov	r6, r0
 8005f20:	db01      	blt.n	8005f26 <_malloc_r+0x1a>
 8005f22:	42a9      	cmp	r1, r5
 8005f24:	d903      	bls.n	8005f2e <_malloc_r+0x22>
 8005f26:	230c      	movs	r3, #12
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	bd70      	pop	{r4, r5, r6, pc}
 8005f2e:	f000 fd60 	bl	80069f2 <__malloc_lock>
 8005f32:	4a21      	ldr	r2, [pc, #132]	; (8005fb8 <_malloc_r+0xac>)
 8005f34:	6814      	ldr	r4, [r2, #0]
 8005f36:	4621      	mov	r1, r4
 8005f38:	b991      	cbnz	r1, 8005f60 <_malloc_r+0x54>
 8005f3a:	4c20      	ldr	r4, [pc, #128]	; (8005fbc <_malloc_r+0xb0>)
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	b91b      	cbnz	r3, 8005f48 <_malloc_r+0x3c>
 8005f40:	4630      	mov	r0, r6
 8005f42:	f000 facf 	bl	80064e4 <_sbrk_r>
 8005f46:	6020      	str	r0, [r4, #0]
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f000 faca 	bl	80064e4 <_sbrk_r>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d124      	bne.n	8005f9e <_malloc_r+0x92>
 8005f54:	230c      	movs	r3, #12
 8005f56:	6033      	str	r3, [r6, #0]
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f000 fd4b 	bl	80069f4 <__malloc_unlock>
 8005f5e:	e7e4      	b.n	8005f2a <_malloc_r+0x1e>
 8005f60:	680b      	ldr	r3, [r1, #0]
 8005f62:	1b5b      	subs	r3, r3, r5
 8005f64:	d418      	bmi.n	8005f98 <_malloc_r+0x8c>
 8005f66:	2b0b      	cmp	r3, #11
 8005f68:	d90f      	bls.n	8005f8a <_malloc_r+0x7e>
 8005f6a:	600b      	str	r3, [r1, #0]
 8005f6c:	50cd      	str	r5, [r1, r3]
 8005f6e:	18cc      	adds	r4, r1, r3
 8005f70:	4630      	mov	r0, r6
 8005f72:	f000 fd3f 	bl	80069f4 <__malloc_unlock>
 8005f76:	f104 000b 	add.w	r0, r4, #11
 8005f7a:	1d23      	adds	r3, r4, #4
 8005f7c:	f020 0007 	bic.w	r0, r0, #7
 8005f80:	1ac3      	subs	r3, r0, r3
 8005f82:	d0d3      	beq.n	8005f2c <_malloc_r+0x20>
 8005f84:	425a      	negs	r2, r3
 8005f86:	50e2      	str	r2, [r4, r3]
 8005f88:	e7d0      	b.n	8005f2c <_malloc_r+0x20>
 8005f8a:	428c      	cmp	r4, r1
 8005f8c:	684b      	ldr	r3, [r1, #4]
 8005f8e:	bf16      	itet	ne
 8005f90:	6063      	strne	r3, [r4, #4]
 8005f92:	6013      	streq	r3, [r2, #0]
 8005f94:	460c      	movne	r4, r1
 8005f96:	e7eb      	b.n	8005f70 <_malloc_r+0x64>
 8005f98:	460c      	mov	r4, r1
 8005f9a:	6849      	ldr	r1, [r1, #4]
 8005f9c:	e7cc      	b.n	8005f38 <_malloc_r+0x2c>
 8005f9e:	1cc4      	adds	r4, r0, #3
 8005fa0:	f024 0403 	bic.w	r4, r4, #3
 8005fa4:	42a0      	cmp	r0, r4
 8005fa6:	d005      	beq.n	8005fb4 <_malloc_r+0xa8>
 8005fa8:	1a21      	subs	r1, r4, r0
 8005faa:	4630      	mov	r0, r6
 8005fac:	f000 fa9a 	bl	80064e4 <_sbrk_r>
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d0cf      	beq.n	8005f54 <_malloc_r+0x48>
 8005fb4:	6025      	str	r5, [r4, #0]
 8005fb6:	e7db      	b.n	8005f70 <_malloc_r+0x64>
 8005fb8:	20000200 	.word	0x20000200
 8005fbc:	20000204 	.word	0x20000204

08005fc0 <__ssputs_r>:
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	688e      	ldr	r6, [r1, #8]
 8005fc6:	429e      	cmp	r6, r3
 8005fc8:	4682      	mov	sl, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	4690      	mov	r8, r2
 8005fce:	4699      	mov	r9, r3
 8005fd0:	d837      	bhi.n	8006042 <__ssputs_r+0x82>
 8005fd2:	898a      	ldrh	r2, [r1, #12]
 8005fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fd8:	d031      	beq.n	800603e <__ssputs_r+0x7e>
 8005fda:	6825      	ldr	r5, [r4, #0]
 8005fdc:	6909      	ldr	r1, [r1, #16]
 8005fde:	1a6f      	subs	r7, r5, r1
 8005fe0:	6965      	ldr	r5, [r4, #20]
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005fec:	f109 0301 	add.w	r3, r9, #1
 8005ff0:	443b      	add	r3, r7
 8005ff2:	429d      	cmp	r5, r3
 8005ff4:	bf38      	it	cc
 8005ff6:	461d      	movcc	r5, r3
 8005ff8:	0553      	lsls	r3, r2, #21
 8005ffa:	d530      	bpl.n	800605e <__ssputs_r+0x9e>
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f7ff ff85 	bl	8005f0c <_malloc_r>
 8006002:	4606      	mov	r6, r0
 8006004:	b950      	cbnz	r0, 800601c <__ssputs_r+0x5c>
 8006006:	230c      	movs	r3, #12
 8006008:	f8ca 3000 	str.w	r3, [sl]
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006012:	81a3      	strh	r3, [r4, #12]
 8006014:	f04f 30ff 	mov.w	r0, #4294967295
 8006018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601c:	463a      	mov	r2, r7
 800601e:	6921      	ldr	r1, [r4, #16]
 8006020:	f7ff fc32 	bl	8005888 <memcpy>
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	6126      	str	r6, [r4, #16]
 8006032:	6165      	str	r5, [r4, #20]
 8006034:	443e      	add	r6, r7
 8006036:	1bed      	subs	r5, r5, r7
 8006038:	6026      	str	r6, [r4, #0]
 800603a:	60a5      	str	r5, [r4, #8]
 800603c:	464e      	mov	r6, r9
 800603e:	454e      	cmp	r6, r9
 8006040:	d900      	bls.n	8006044 <__ssputs_r+0x84>
 8006042:	464e      	mov	r6, r9
 8006044:	4632      	mov	r2, r6
 8006046:	4641      	mov	r1, r8
 8006048:	6820      	ldr	r0, [r4, #0]
 800604a:	f000 fcb9 	bl	80069c0 <memmove>
 800604e:	68a3      	ldr	r3, [r4, #8]
 8006050:	1b9b      	subs	r3, r3, r6
 8006052:	60a3      	str	r3, [r4, #8]
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	441e      	add	r6, r3
 8006058:	6026      	str	r6, [r4, #0]
 800605a:	2000      	movs	r0, #0
 800605c:	e7dc      	b.n	8006018 <__ssputs_r+0x58>
 800605e:	462a      	mov	r2, r5
 8006060:	f000 fcc9 	bl	80069f6 <_realloc_r>
 8006064:	4606      	mov	r6, r0
 8006066:	2800      	cmp	r0, #0
 8006068:	d1e2      	bne.n	8006030 <__ssputs_r+0x70>
 800606a:	6921      	ldr	r1, [r4, #16]
 800606c:	4650      	mov	r0, sl
 800606e:	f7ff feff 	bl	8005e70 <_free_r>
 8006072:	e7c8      	b.n	8006006 <__ssputs_r+0x46>

08006074 <_svfiprintf_r>:
 8006074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006078:	461d      	mov	r5, r3
 800607a:	898b      	ldrh	r3, [r1, #12]
 800607c:	061f      	lsls	r7, r3, #24
 800607e:	b09d      	sub	sp, #116	; 0x74
 8006080:	4680      	mov	r8, r0
 8006082:	460c      	mov	r4, r1
 8006084:	4616      	mov	r6, r2
 8006086:	d50f      	bpl.n	80060a8 <_svfiprintf_r+0x34>
 8006088:	690b      	ldr	r3, [r1, #16]
 800608a:	b96b      	cbnz	r3, 80060a8 <_svfiprintf_r+0x34>
 800608c:	2140      	movs	r1, #64	; 0x40
 800608e:	f7ff ff3d 	bl	8005f0c <_malloc_r>
 8006092:	6020      	str	r0, [r4, #0]
 8006094:	6120      	str	r0, [r4, #16]
 8006096:	b928      	cbnz	r0, 80060a4 <_svfiprintf_r+0x30>
 8006098:	230c      	movs	r3, #12
 800609a:	f8c8 3000 	str.w	r3, [r8]
 800609e:	f04f 30ff 	mov.w	r0, #4294967295
 80060a2:	e0c8      	b.n	8006236 <_svfiprintf_r+0x1c2>
 80060a4:	2340      	movs	r3, #64	; 0x40
 80060a6:	6163      	str	r3, [r4, #20]
 80060a8:	2300      	movs	r3, #0
 80060aa:	9309      	str	r3, [sp, #36]	; 0x24
 80060ac:	2320      	movs	r3, #32
 80060ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060b2:	2330      	movs	r3, #48	; 0x30
 80060b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060b8:	9503      	str	r5, [sp, #12]
 80060ba:	f04f 0b01 	mov.w	fp, #1
 80060be:	4637      	mov	r7, r6
 80060c0:	463d      	mov	r5, r7
 80060c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060c6:	b10b      	cbz	r3, 80060cc <_svfiprintf_r+0x58>
 80060c8:	2b25      	cmp	r3, #37	; 0x25
 80060ca:	d13e      	bne.n	800614a <_svfiprintf_r+0xd6>
 80060cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80060d0:	d00b      	beq.n	80060ea <_svfiprintf_r+0x76>
 80060d2:	4653      	mov	r3, sl
 80060d4:	4632      	mov	r2, r6
 80060d6:	4621      	mov	r1, r4
 80060d8:	4640      	mov	r0, r8
 80060da:	f7ff ff71 	bl	8005fc0 <__ssputs_r>
 80060de:	3001      	adds	r0, #1
 80060e0:	f000 80a4 	beq.w	800622c <_svfiprintf_r+0x1b8>
 80060e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e6:	4453      	add	r3, sl
 80060e8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ea:	783b      	ldrb	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 809d 	beq.w	800622c <_svfiprintf_r+0x1b8>
 80060f2:	2300      	movs	r3, #0
 80060f4:	f04f 32ff 	mov.w	r2, #4294967295
 80060f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060fc:	9304      	str	r3, [sp, #16]
 80060fe:	9307      	str	r3, [sp, #28]
 8006100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006104:	931a      	str	r3, [sp, #104]	; 0x68
 8006106:	462f      	mov	r7, r5
 8006108:	2205      	movs	r2, #5
 800610a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800610e:	4850      	ldr	r0, [pc, #320]	; (8006250 <_svfiprintf_r+0x1dc>)
 8006110:	f7fa f86e 	bl	80001f0 <memchr>
 8006114:	9b04      	ldr	r3, [sp, #16]
 8006116:	b9d0      	cbnz	r0, 800614e <_svfiprintf_r+0xda>
 8006118:	06d9      	lsls	r1, r3, #27
 800611a:	bf44      	itt	mi
 800611c:	2220      	movmi	r2, #32
 800611e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006122:	071a      	lsls	r2, r3, #28
 8006124:	bf44      	itt	mi
 8006126:	222b      	movmi	r2, #43	; 0x2b
 8006128:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800612c:	782a      	ldrb	r2, [r5, #0]
 800612e:	2a2a      	cmp	r2, #42	; 0x2a
 8006130:	d015      	beq.n	800615e <_svfiprintf_r+0xea>
 8006132:	9a07      	ldr	r2, [sp, #28]
 8006134:	462f      	mov	r7, r5
 8006136:	2000      	movs	r0, #0
 8006138:	250a      	movs	r5, #10
 800613a:	4639      	mov	r1, r7
 800613c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006140:	3b30      	subs	r3, #48	; 0x30
 8006142:	2b09      	cmp	r3, #9
 8006144:	d94d      	bls.n	80061e2 <_svfiprintf_r+0x16e>
 8006146:	b1b8      	cbz	r0, 8006178 <_svfiprintf_r+0x104>
 8006148:	e00f      	b.n	800616a <_svfiprintf_r+0xf6>
 800614a:	462f      	mov	r7, r5
 800614c:	e7b8      	b.n	80060c0 <_svfiprintf_r+0x4c>
 800614e:	4a40      	ldr	r2, [pc, #256]	; (8006250 <_svfiprintf_r+0x1dc>)
 8006150:	1a80      	subs	r0, r0, r2
 8006152:	fa0b f000 	lsl.w	r0, fp, r0
 8006156:	4318      	orrs	r0, r3
 8006158:	9004      	str	r0, [sp, #16]
 800615a:	463d      	mov	r5, r7
 800615c:	e7d3      	b.n	8006106 <_svfiprintf_r+0x92>
 800615e:	9a03      	ldr	r2, [sp, #12]
 8006160:	1d11      	adds	r1, r2, #4
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	9103      	str	r1, [sp, #12]
 8006166:	2a00      	cmp	r2, #0
 8006168:	db01      	blt.n	800616e <_svfiprintf_r+0xfa>
 800616a:	9207      	str	r2, [sp, #28]
 800616c:	e004      	b.n	8006178 <_svfiprintf_r+0x104>
 800616e:	4252      	negs	r2, r2
 8006170:	f043 0302 	orr.w	r3, r3, #2
 8006174:	9207      	str	r2, [sp, #28]
 8006176:	9304      	str	r3, [sp, #16]
 8006178:	783b      	ldrb	r3, [r7, #0]
 800617a:	2b2e      	cmp	r3, #46	; 0x2e
 800617c:	d10c      	bne.n	8006198 <_svfiprintf_r+0x124>
 800617e:	787b      	ldrb	r3, [r7, #1]
 8006180:	2b2a      	cmp	r3, #42	; 0x2a
 8006182:	d133      	bne.n	80061ec <_svfiprintf_r+0x178>
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	1d1a      	adds	r2, r3, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	9203      	str	r2, [sp, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	bfb8      	it	lt
 8006190:	f04f 33ff 	movlt.w	r3, #4294967295
 8006194:	3702      	adds	r7, #2
 8006196:	9305      	str	r3, [sp, #20]
 8006198:	4d2e      	ldr	r5, [pc, #184]	; (8006254 <_svfiprintf_r+0x1e0>)
 800619a:	7839      	ldrb	r1, [r7, #0]
 800619c:	2203      	movs	r2, #3
 800619e:	4628      	mov	r0, r5
 80061a0:	f7fa f826 	bl	80001f0 <memchr>
 80061a4:	b138      	cbz	r0, 80061b6 <_svfiprintf_r+0x142>
 80061a6:	2340      	movs	r3, #64	; 0x40
 80061a8:	1b40      	subs	r0, r0, r5
 80061aa:	fa03 f000 	lsl.w	r0, r3, r0
 80061ae:	9b04      	ldr	r3, [sp, #16]
 80061b0:	4303      	orrs	r3, r0
 80061b2:	3701      	adds	r7, #1
 80061b4:	9304      	str	r3, [sp, #16]
 80061b6:	7839      	ldrb	r1, [r7, #0]
 80061b8:	4827      	ldr	r0, [pc, #156]	; (8006258 <_svfiprintf_r+0x1e4>)
 80061ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061be:	2206      	movs	r2, #6
 80061c0:	1c7e      	adds	r6, r7, #1
 80061c2:	f7fa f815 	bl	80001f0 <memchr>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d038      	beq.n	800623c <_svfiprintf_r+0x1c8>
 80061ca:	4b24      	ldr	r3, [pc, #144]	; (800625c <_svfiprintf_r+0x1e8>)
 80061cc:	bb13      	cbnz	r3, 8006214 <_svfiprintf_r+0x1a0>
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	3307      	adds	r3, #7
 80061d2:	f023 0307 	bic.w	r3, r3, #7
 80061d6:	3308      	adds	r3, #8
 80061d8:	9303      	str	r3, [sp, #12]
 80061da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061dc:	444b      	add	r3, r9
 80061de:	9309      	str	r3, [sp, #36]	; 0x24
 80061e0:	e76d      	b.n	80060be <_svfiprintf_r+0x4a>
 80061e2:	fb05 3202 	mla	r2, r5, r2, r3
 80061e6:	2001      	movs	r0, #1
 80061e8:	460f      	mov	r7, r1
 80061ea:	e7a6      	b.n	800613a <_svfiprintf_r+0xc6>
 80061ec:	2300      	movs	r3, #0
 80061ee:	3701      	adds	r7, #1
 80061f0:	9305      	str	r3, [sp, #20]
 80061f2:	4619      	mov	r1, r3
 80061f4:	250a      	movs	r5, #10
 80061f6:	4638      	mov	r0, r7
 80061f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061fc:	3a30      	subs	r2, #48	; 0x30
 80061fe:	2a09      	cmp	r2, #9
 8006200:	d903      	bls.n	800620a <_svfiprintf_r+0x196>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0c8      	beq.n	8006198 <_svfiprintf_r+0x124>
 8006206:	9105      	str	r1, [sp, #20]
 8006208:	e7c6      	b.n	8006198 <_svfiprintf_r+0x124>
 800620a:	fb05 2101 	mla	r1, r5, r1, r2
 800620e:	2301      	movs	r3, #1
 8006210:	4607      	mov	r7, r0
 8006212:	e7f0      	b.n	80061f6 <_svfiprintf_r+0x182>
 8006214:	ab03      	add	r3, sp, #12
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	4622      	mov	r2, r4
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <_svfiprintf_r+0x1ec>)
 800621c:	a904      	add	r1, sp, #16
 800621e:	4640      	mov	r0, r8
 8006220:	f7fe f80c 	bl	800423c <_printf_float>
 8006224:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006228:	4681      	mov	r9, r0
 800622a:	d1d6      	bne.n	80061da <_svfiprintf_r+0x166>
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	065b      	lsls	r3, r3, #25
 8006230:	f53f af35 	bmi.w	800609e <_svfiprintf_r+0x2a>
 8006234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006236:	b01d      	add	sp, #116	; 0x74
 8006238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623c:	ab03      	add	r3, sp, #12
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	4622      	mov	r2, r4
 8006242:	4b07      	ldr	r3, [pc, #28]	; (8006260 <_svfiprintf_r+0x1ec>)
 8006244:	a904      	add	r1, sp, #16
 8006246:	4640      	mov	r0, r8
 8006248:	f7fe faae 	bl	80047a8 <_printf_i>
 800624c:	e7ea      	b.n	8006224 <_svfiprintf_r+0x1b0>
 800624e:	bf00      	nop
 8006250:	08006cbc 	.word	0x08006cbc
 8006254:	08006cc2 	.word	0x08006cc2
 8006258:	08006cc6 	.word	0x08006cc6
 800625c:	0800423d 	.word	0x0800423d
 8006260:	08005fc1 	.word	0x08005fc1

08006264 <__sfputc_r>:
 8006264:	6893      	ldr	r3, [r2, #8]
 8006266:	3b01      	subs	r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	b410      	push	{r4}
 800626c:	6093      	str	r3, [r2, #8]
 800626e:	da08      	bge.n	8006282 <__sfputc_r+0x1e>
 8006270:	6994      	ldr	r4, [r2, #24]
 8006272:	42a3      	cmp	r3, r4
 8006274:	db01      	blt.n	800627a <__sfputc_r+0x16>
 8006276:	290a      	cmp	r1, #10
 8006278:	d103      	bne.n	8006282 <__sfputc_r+0x1e>
 800627a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800627e:	f000 b985 	b.w	800658c <__swbuf_r>
 8006282:	6813      	ldr	r3, [r2, #0]
 8006284:	1c58      	adds	r0, r3, #1
 8006286:	6010      	str	r0, [r2, #0]
 8006288:	7019      	strb	r1, [r3, #0]
 800628a:	4608      	mov	r0, r1
 800628c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006290:	4770      	bx	lr

08006292 <__sfputs_r>:
 8006292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006294:	4606      	mov	r6, r0
 8006296:	460f      	mov	r7, r1
 8006298:	4614      	mov	r4, r2
 800629a:	18d5      	adds	r5, r2, r3
 800629c:	42ac      	cmp	r4, r5
 800629e:	d101      	bne.n	80062a4 <__sfputs_r+0x12>
 80062a0:	2000      	movs	r0, #0
 80062a2:	e007      	b.n	80062b4 <__sfputs_r+0x22>
 80062a4:	463a      	mov	r2, r7
 80062a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062aa:	4630      	mov	r0, r6
 80062ac:	f7ff ffda 	bl	8006264 <__sfputc_r>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d1f3      	bne.n	800629c <__sfputs_r+0xa>
 80062b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062b8 <_vfiprintf_r>:
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	460c      	mov	r4, r1
 80062be:	b09d      	sub	sp, #116	; 0x74
 80062c0:	4617      	mov	r7, r2
 80062c2:	461d      	mov	r5, r3
 80062c4:	4606      	mov	r6, r0
 80062c6:	b118      	cbz	r0, 80062d0 <_vfiprintf_r+0x18>
 80062c8:	6983      	ldr	r3, [r0, #24]
 80062ca:	b90b      	cbnz	r3, 80062d0 <_vfiprintf_r+0x18>
 80062cc:	f7ff fa3c 	bl	8005748 <__sinit>
 80062d0:	4b7c      	ldr	r3, [pc, #496]	; (80064c4 <_vfiprintf_r+0x20c>)
 80062d2:	429c      	cmp	r4, r3
 80062d4:	d158      	bne.n	8006388 <_vfiprintf_r+0xd0>
 80062d6:	6874      	ldr	r4, [r6, #4]
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	0718      	lsls	r0, r3, #28
 80062dc:	d55e      	bpl.n	800639c <_vfiprintf_r+0xe4>
 80062de:	6923      	ldr	r3, [r4, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d05b      	beq.n	800639c <_vfiprintf_r+0xe4>
 80062e4:	2300      	movs	r3, #0
 80062e6:	9309      	str	r3, [sp, #36]	; 0x24
 80062e8:	2320      	movs	r3, #32
 80062ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062ee:	2330      	movs	r3, #48	; 0x30
 80062f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062f4:	9503      	str	r5, [sp, #12]
 80062f6:	f04f 0b01 	mov.w	fp, #1
 80062fa:	46b8      	mov	r8, r7
 80062fc:	4645      	mov	r5, r8
 80062fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006302:	b10b      	cbz	r3, 8006308 <_vfiprintf_r+0x50>
 8006304:	2b25      	cmp	r3, #37	; 0x25
 8006306:	d154      	bne.n	80063b2 <_vfiprintf_r+0xfa>
 8006308:	ebb8 0a07 	subs.w	sl, r8, r7
 800630c:	d00b      	beq.n	8006326 <_vfiprintf_r+0x6e>
 800630e:	4653      	mov	r3, sl
 8006310:	463a      	mov	r2, r7
 8006312:	4621      	mov	r1, r4
 8006314:	4630      	mov	r0, r6
 8006316:	f7ff ffbc 	bl	8006292 <__sfputs_r>
 800631a:	3001      	adds	r0, #1
 800631c:	f000 80c2 	beq.w	80064a4 <_vfiprintf_r+0x1ec>
 8006320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006322:	4453      	add	r3, sl
 8006324:	9309      	str	r3, [sp, #36]	; 0x24
 8006326:	f898 3000 	ldrb.w	r3, [r8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80ba 	beq.w	80064a4 <_vfiprintf_r+0x1ec>
 8006330:	2300      	movs	r3, #0
 8006332:	f04f 32ff 	mov.w	r2, #4294967295
 8006336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800633a:	9304      	str	r3, [sp, #16]
 800633c:	9307      	str	r3, [sp, #28]
 800633e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006342:	931a      	str	r3, [sp, #104]	; 0x68
 8006344:	46a8      	mov	r8, r5
 8006346:	2205      	movs	r2, #5
 8006348:	f818 1b01 	ldrb.w	r1, [r8], #1
 800634c:	485e      	ldr	r0, [pc, #376]	; (80064c8 <_vfiprintf_r+0x210>)
 800634e:	f7f9 ff4f 	bl	80001f0 <memchr>
 8006352:	9b04      	ldr	r3, [sp, #16]
 8006354:	bb78      	cbnz	r0, 80063b6 <_vfiprintf_r+0xfe>
 8006356:	06d9      	lsls	r1, r3, #27
 8006358:	bf44      	itt	mi
 800635a:	2220      	movmi	r2, #32
 800635c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006360:	071a      	lsls	r2, r3, #28
 8006362:	bf44      	itt	mi
 8006364:	222b      	movmi	r2, #43	; 0x2b
 8006366:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800636a:	782a      	ldrb	r2, [r5, #0]
 800636c:	2a2a      	cmp	r2, #42	; 0x2a
 800636e:	d02a      	beq.n	80063c6 <_vfiprintf_r+0x10e>
 8006370:	9a07      	ldr	r2, [sp, #28]
 8006372:	46a8      	mov	r8, r5
 8006374:	2000      	movs	r0, #0
 8006376:	250a      	movs	r5, #10
 8006378:	4641      	mov	r1, r8
 800637a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800637e:	3b30      	subs	r3, #48	; 0x30
 8006380:	2b09      	cmp	r3, #9
 8006382:	d969      	bls.n	8006458 <_vfiprintf_r+0x1a0>
 8006384:	b360      	cbz	r0, 80063e0 <_vfiprintf_r+0x128>
 8006386:	e024      	b.n	80063d2 <_vfiprintf_r+0x11a>
 8006388:	4b50      	ldr	r3, [pc, #320]	; (80064cc <_vfiprintf_r+0x214>)
 800638a:	429c      	cmp	r4, r3
 800638c:	d101      	bne.n	8006392 <_vfiprintf_r+0xda>
 800638e:	68b4      	ldr	r4, [r6, #8]
 8006390:	e7a2      	b.n	80062d8 <_vfiprintf_r+0x20>
 8006392:	4b4f      	ldr	r3, [pc, #316]	; (80064d0 <_vfiprintf_r+0x218>)
 8006394:	429c      	cmp	r4, r3
 8006396:	bf08      	it	eq
 8006398:	68f4      	ldreq	r4, [r6, #12]
 800639a:	e79d      	b.n	80062d8 <_vfiprintf_r+0x20>
 800639c:	4621      	mov	r1, r4
 800639e:	4630      	mov	r0, r6
 80063a0:	f000 f958 	bl	8006654 <__swsetup_r>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d09d      	beq.n	80062e4 <_vfiprintf_r+0x2c>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	b01d      	add	sp, #116	; 0x74
 80063ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b2:	46a8      	mov	r8, r5
 80063b4:	e7a2      	b.n	80062fc <_vfiprintf_r+0x44>
 80063b6:	4a44      	ldr	r2, [pc, #272]	; (80064c8 <_vfiprintf_r+0x210>)
 80063b8:	1a80      	subs	r0, r0, r2
 80063ba:	fa0b f000 	lsl.w	r0, fp, r0
 80063be:	4318      	orrs	r0, r3
 80063c0:	9004      	str	r0, [sp, #16]
 80063c2:	4645      	mov	r5, r8
 80063c4:	e7be      	b.n	8006344 <_vfiprintf_r+0x8c>
 80063c6:	9a03      	ldr	r2, [sp, #12]
 80063c8:	1d11      	adds	r1, r2, #4
 80063ca:	6812      	ldr	r2, [r2, #0]
 80063cc:	9103      	str	r1, [sp, #12]
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	db01      	blt.n	80063d6 <_vfiprintf_r+0x11e>
 80063d2:	9207      	str	r2, [sp, #28]
 80063d4:	e004      	b.n	80063e0 <_vfiprintf_r+0x128>
 80063d6:	4252      	negs	r2, r2
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	9207      	str	r2, [sp, #28]
 80063de:	9304      	str	r3, [sp, #16]
 80063e0:	f898 3000 	ldrb.w	r3, [r8]
 80063e4:	2b2e      	cmp	r3, #46	; 0x2e
 80063e6:	d10e      	bne.n	8006406 <_vfiprintf_r+0x14e>
 80063e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80063ec:	2b2a      	cmp	r3, #42	; 0x2a
 80063ee:	d138      	bne.n	8006462 <_vfiprintf_r+0x1aa>
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	1d1a      	adds	r2, r3, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	9203      	str	r2, [sp, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bfb8      	it	lt
 80063fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006400:	f108 0802 	add.w	r8, r8, #2
 8006404:	9305      	str	r3, [sp, #20]
 8006406:	4d33      	ldr	r5, [pc, #204]	; (80064d4 <_vfiprintf_r+0x21c>)
 8006408:	f898 1000 	ldrb.w	r1, [r8]
 800640c:	2203      	movs	r2, #3
 800640e:	4628      	mov	r0, r5
 8006410:	f7f9 feee 	bl	80001f0 <memchr>
 8006414:	b140      	cbz	r0, 8006428 <_vfiprintf_r+0x170>
 8006416:	2340      	movs	r3, #64	; 0x40
 8006418:	1b40      	subs	r0, r0, r5
 800641a:	fa03 f000 	lsl.w	r0, r3, r0
 800641e:	9b04      	ldr	r3, [sp, #16]
 8006420:	4303      	orrs	r3, r0
 8006422:	f108 0801 	add.w	r8, r8, #1
 8006426:	9304      	str	r3, [sp, #16]
 8006428:	f898 1000 	ldrb.w	r1, [r8]
 800642c:	482a      	ldr	r0, [pc, #168]	; (80064d8 <_vfiprintf_r+0x220>)
 800642e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006432:	2206      	movs	r2, #6
 8006434:	f108 0701 	add.w	r7, r8, #1
 8006438:	f7f9 feda 	bl	80001f0 <memchr>
 800643c:	2800      	cmp	r0, #0
 800643e:	d037      	beq.n	80064b0 <_vfiprintf_r+0x1f8>
 8006440:	4b26      	ldr	r3, [pc, #152]	; (80064dc <_vfiprintf_r+0x224>)
 8006442:	bb1b      	cbnz	r3, 800648c <_vfiprintf_r+0x1d4>
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	3307      	adds	r3, #7
 8006448:	f023 0307 	bic.w	r3, r3, #7
 800644c:	3308      	adds	r3, #8
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006452:	444b      	add	r3, r9
 8006454:	9309      	str	r3, [sp, #36]	; 0x24
 8006456:	e750      	b.n	80062fa <_vfiprintf_r+0x42>
 8006458:	fb05 3202 	mla	r2, r5, r2, r3
 800645c:	2001      	movs	r0, #1
 800645e:	4688      	mov	r8, r1
 8006460:	e78a      	b.n	8006378 <_vfiprintf_r+0xc0>
 8006462:	2300      	movs	r3, #0
 8006464:	f108 0801 	add.w	r8, r8, #1
 8006468:	9305      	str	r3, [sp, #20]
 800646a:	4619      	mov	r1, r3
 800646c:	250a      	movs	r5, #10
 800646e:	4640      	mov	r0, r8
 8006470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006474:	3a30      	subs	r2, #48	; 0x30
 8006476:	2a09      	cmp	r2, #9
 8006478:	d903      	bls.n	8006482 <_vfiprintf_r+0x1ca>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0c3      	beq.n	8006406 <_vfiprintf_r+0x14e>
 800647e:	9105      	str	r1, [sp, #20]
 8006480:	e7c1      	b.n	8006406 <_vfiprintf_r+0x14e>
 8006482:	fb05 2101 	mla	r1, r5, r1, r2
 8006486:	2301      	movs	r3, #1
 8006488:	4680      	mov	r8, r0
 800648a:	e7f0      	b.n	800646e <_vfiprintf_r+0x1b6>
 800648c:	ab03      	add	r3, sp, #12
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	4622      	mov	r2, r4
 8006492:	4b13      	ldr	r3, [pc, #76]	; (80064e0 <_vfiprintf_r+0x228>)
 8006494:	a904      	add	r1, sp, #16
 8006496:	4630      	mov	r0, r6
 8006498:	f7fd fed0 	bl	800423c <_printf_float>
 800649c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064a0:	4681      	mov	r9, r0
 80064a2:	d1d5      	bne.n	8006450 <_vfiprintf_r+0x198>
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	065b      	lsls	r3, r3, #25
 80064a8:	f53f af7e 	bmi.w	80063a8 <_vfiprintf_r+0xf0>
 80064ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ae:	e77d      	b.n	80063ac <_vfiprintf_r+0xf4>
 80064b0:	ab03      	add	r3, sp, #12
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	4622      	mov	r2, r4
 80064b6:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <_vfiprintf_r+0x228>)
 80064b8:	a904      	add	r1, sp, #16
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7fe f974 	bl	80047a8 <_printf_i>
 80064c0:	e7ec      	b.n	800649c <_vfiprintf_r+0x1e4>
 80064c2:	bf00      	nop
 80064c4:	08006b7c 	.word	0x08006b7c
 80064c8:	08006cbc 	.word	0x08006cbc
 80064cc:	08006b9c 	.word	0x08006b9c
 80064d0:	08006b5c 	.word	0x08006b5c
 80064d4:	08006cc2 	.word	0x08006cc2
 80064d8:	08006cc6 	.word	0x08006cc6
 80064dc:	0800423d 	.word	0x0800423d
 80064e0:	08006293 	.word	0x08006293

080064e4 <_sbrk_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4c06      	ldr	r4, [pc, #24]	; (8006500 <_sbrk_r+0x1c>)
 80064e8:	2300      	movs	r3, #0
 80064ea:	4605      	mov	r5, r0
 80064ec:	4608      	mov	r0, r1
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	f7fb f818 	bl	8001524 <_sbrk>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d102      	bne.n	80064fe <_sbrk_r+0x1a>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	b103      	cbz	r3, 80064fe <_sbrk_r+0x1a>
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
 8006500:	20000320 	.word	0x20000320

08006504 <__sread>:
 8006504:	b510      	push	{r4, lr}
 8006506:	460c      	mov	r4, r1
 8006508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650c:	f000 fa9a 	bl	8006a44 <_read_r>
 8006510:	2800      	cmp	r0, #0
 8006512:	bfab      	itete	ge
 8006514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006516:	89a3      	ldrhlt	r3, [r4, #12]
 8006518:	181b      	addge	r3, r3, r0
 800651a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800651e:	bfac      	ite	ge
 8006520:	6563      	strge	r3, [r4, #84]	; 0x54
 8006522:	81a3      	strhlt	r3, [r4, #12]
 8006524:	bd10      	pop	{r4, pc}

08006526 <__swrite>:
 8006526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800652a:	461f      	mov	r7, r3
 800652c:	898b      	ldrh	r3, [r1, #12]
 800652e:	05db      	lsls	r3, r3, #23
 8006530:	4605      	mov	r5, r0
 8006532:	460c      	mov	r4, r1
 8006534:	4616      	mov	r6, r2
 8006536:	d505      	bpl.n	8006544 <__swrite+0x1e>
 8006538:	2302      	movs	r3, #2
 800653a:	2200      	movs	r2, #0
 800653c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006540:	f000 f9b6 	bl	80068b0 <_lseek_r>
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800654a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800654e:	81a3      	strh	r3, [r4, #12]
 8006550:	4632      	mov	r2, r6
 8006552:	463b      	mov	r3, r7
 8006554:	4628      	mov	r0, r5
 8006556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800655a:	f000 b869 	b.w	8006630 <_write_r>

0800655e <__sseek>:
 800655e:	b510      	push	{r4, lr}
 8006560:	460c      	mov	r4, r1
 8006562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006566:	f000 f9a3 	bl	80068b0 <_lseek_r>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	bf15      	itete	ne
 8006570:	6560      	strne	r0, [r4, #84]	; 0x54
 8006572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800657a:	81a3      	strheq	r3, [r4, #12]
 800657c:	bf18      	it	ne
 800657e:	81a3      	strhne	r3, [r4, #12]
 8006580:	bd10      	pop	{r4, pc}

08006582 <__sclose>:
 8006582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006586:	f000 b8d3 	b.w	8006730 <_close_r>
	...

0800658c <__swbuf_r>:
 800658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658e:	460e      	mov	r6, r1
 8006590:	4614      	mov	r4, r2
 8006592:	4605      	mov	r5, r0
 8006594:	b118      	cbz	r0, 800659e <__swbuf_r+0x12>
 8006596:	6983      	ldr	r3, [r0, #24]
 8006598:	b90b      	cbnz	r3, 800659e <__swbuf_r+0x12>
 800659a:	f7ff f8d5 	bl	8005748 <__sinit>
 800659e:	4b21      	ldr	r3, [pc, #132]	; (8006624 <__swbuf_r+0x98>)
 80065a0:	429c      	cmp	r4, r3
 80065a2:	d12a      	bne.n	80065fa <__swbuf_r+0x6e>
 80065a4:	686c      	ldr	r4, [r5, #4]
 80065a6:	69a3      	ldr	r3, [r4, #24]
 80065a8:	60a3      	str	r3, [r4, #8]
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	071a      	lsls	r2, r3, #28
 80065ae:	d52e      	bpl.n	800660e <__swbuf_r+0x82>
 80065b0:	6923      	ldr	r3, [r4, #16]
 80065b2:	b363      	cbz	r3, 800660e <__swbuf_r+0x82>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	1ac0      	subs	r0, r0, r3
 80065ba:	6963      	ldr	r3, [r4, #20]
 80065bc:	b2f6      	uxtb	r6, r6
 80065be:	4283      	cmp	r3, r0
 80065c0:	4637      	mov	r7, r6
 80065c2:	dc04      	bgt.n	80065ce <__swbuf_r+0x42>
 80065c4:	4621      	mov	r1, r4
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 f948 	bl	800685c <_fflush_r>
 80065cc:	bb28      	cbnz	r0, 800661a <__swbuf_r+0x8e>
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	60a3      	str	r3, [r4, #8]
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	6022      	str	r2, [r4, #0]
 80065da:	701e      	strb	r6, [r3, #0]
 80065dc:	6963      	ldr	r3, [r4, #20]
 80065de:	3001      	adds	r0, #1
 80065e0:	4283      	cmp	r3, r0
 80065e2:	d004      	beq.n	80065ee <__swbuf_r+0x62>
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	07db      	lsls	r3, r3, #31
 80065e8:	d519      	bpl.n	800661e <__swbuf_r+0x92>
 80065ea:	2e0a      	cmp	r6, #10
 80065ec:	d117      	bne.n	800661e <__swbuf_r+0x92>
 80065ee:	4621      	mov	r1, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 f933 	bl	800685c <_fflush_r>
 80065f6:	b190      	cbz	r0, 800661e <__swbuf_r+0x92>
 80065f8:	e00f      	b.n	800661a <__swbuf_r+0x8e>
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <__swbuf_r+0x9c>)
 80065fc:	429c      	cmp	r4, r3
 80065fe:	d101      	bne.n	8006604 <__swbuf_r+0x78>
 8006600:	68ac      	ldr	r4, [r5, #8]
 8006602:	e7d0      	b.n	80065a6 <__swbuf_r+0x1a>
 8006604:	4b09      	ldr	r3, [pc, #36]	; (800662c <__swbuf_r+0xa0>)
 8006606:	429c      	cmp	r4, r3
 8006608:	bf08      	it	eq
 800660a:	68ec      	ldreq	r4, [r5, #12]
 800660c:	e7cb      	b.n	80065a6 <__swbuf_r+0x1a>
 800660e:	4621      	mov	r1, r4
 8006610:	4628      	mov	r0, r5
 8006612:	f000 f81f 	bl	8006654 <__swsetup_r>
 8006616:	2800      	cmp	r0, #0
 8006618:	d0cc      	beq.n	80065b4 <__swbuf_r+0x28>
 800661a:	f04f 37ff 	mov.w	r7, #4294967295
 800661e:	4638      	mov	r0, r7
 8006620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006622:	bf00      	nop
 8006624:	08006b7c 	.word	0x08006b7c
 8006628:	08006b9c 	.word	0x08006b9c
 800662c:	08006b5c 	.word	0x08006b5c

08006630 <_write_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4c07      	ldr	r4, [pc, #28]	; (8006650 <_write_r+0x20>)
 8006634:	4605      	mov	r5, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	6022      	str	r2, [r4, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fa ff1f 	bl	8001482 <_write>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_write_r+0x1e>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	b103      	cbz	r3, 800664e <_write_r+0x1e>
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	20000320 	.word	0x20000320

08006654 <__swsetup_r>:
 8006654:	4b32      	ldr	r3, [pc, #200]	; (8006720 <__swsetup_r+0xcc>)
 8006656:	b570      	push	{r4, r5, r6, lr}
 8006658:	681d      	ldr	r5, [r3, #0]
 800665a:	4606      	mov	r6, r0
 800665c:	460c      	mov	r4, r1
 800665e:	b125      	cbz	r5, 800666a <__swsetup_r+0x16>
 8006660:	69ab      	ldr	r3, [r5, #24]
 8006662:	b913      	cbnz	r3, 800666a <__swsetup_r+0x16>
 8006664:	4628      	mov	r0, r5
 8006666:	f7ff f86f 	bl	8005748 <__sinit>
 800666a:	4b2e      	ldr	r3, [pc, #184]	; (8006724 <__swsetup_r+0xd0>)
 800666c:	429c      	cmp	r4, r3
 800666e:	d10f      	bne.n	8006690 <__swsetup_r+0x3c>
 8006670:	686c      	ldr	r4, [r5, #4]
 8006672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006676:	b29a      	uxth	r2, r3
 8006678:	0715      	lsls	r5, r2, #28
 800667a:	d42c      	bmi.n	80066d6 <__swsetup_r+0x82>
 800667c:	06d0      	lsls	r0, r2, #27
 800667e:	d411      	bmi.n	80066a4 <__swsetup_r+0x50>
 8006680:	2209      	movs	r2, #9
 8006682:	6032      	str	r2, [r6, #0]
 8006684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006688:	81a3      	strh	r3, [r4, #12]
 800668a:	f04f 30ff 	mov.w	r0, #4294967295
 800668e:	e03e      	b.n	800670e <__swsetup_r+0xba>
 8006690:	4b25      	ldr	r3, [pc, #148]	; (8006728 <__swsetup_r+0xd4>)
 8006692:	429c      	cmp	r4, r3
 8006694:	d101      	bne.n	800669a <__swsetup_r+0x46>
 8006696:	68ac      	ldr	r4, [r5, #8]
 8006698:	e7eb      	b.n	8006672 <__swsetup_r+0x1e>
 800669a:	4b24      	ldr	r3, [pc, #144]	; (800672c <__swsetup_r+0xd8>)
 800669c:	429c      	cmp	r4, r3
 800669e:	bf08      	it	eq
 80066a0:	68ec      	ldreq	r4, [r5, #12]
 80066a2:	e7e6      	b.n	8006672 <__swsetup_r+0x1e>
 80066a4:	0751      	lsls	r1, r2, #29
 80066a6:	d512      	bpl.n	80066ce <__swsetup_r+0x7a>
 80066a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066aa:	b141      	cbz	r1, 80066be <__swsetup_r+0x6a>
 80066ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b0:	4299      	cmp	r1, r3
 80066b2:	d002      	beq.n	80066ba <__swsetup_r+0x66>
 80066b4:	4630      	mov	r0, r6
 80066b6:	f7ff fbdb 	bl	8005e70 <_free_r>
 80066ba:	2300      	movs	r3, #0
 80066bc:	6363      	str	r3, [r4, #52]	; 0x34
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	2300      	movs	r3, #0
 80066c8:	6063      	str	r3, [r4, #4]
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f043 0308 	orr.w	r3, r3, #8
 80066d4:	81a3      	strh	r3, [r4, #12]
 80066d6:	6923      	ldr	r3, [r4, #16]
 80066d8:	b94b      	cbnz	r3, 80066ee <__swsetup_r+0x9a>
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e4:	d003      	beq.n	80066ee <__swsetup_r+0x9a>
 80066e6:	4621      	mov	r1, r4
 80066e8:	4630      	mov	r0, r6
 80066ea:	f000 f917 	bl	800691c <__smakebuf_r>
 80066ee:	89a2      	ldrh	r2, [r4, #12]
 80066f0:	f012 0301 	ands.w	r3, r2, #1
 80066f4:	d00c      	beq.n	8006710 <__swsetup_r+0xbc>
 80066f6:	2300      	movs	r3, #0
 80066f8:	60a3      	str	r3, [r4, #8]
 80066fa:	6963      	ldr	r3, [r4, #20]
 80066fc:	425b      	negs	r3, r3
 80066fe:	61a3      	str	r3, [r4, #24]
 8006700:	6923      	ldr	r3, [r4, #16]
 8006702:	b953      	cbnz	r3, 800671a <__swsetup_r+0xc6>
 8006704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006708:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800670c:	d1ba      	bne.n	8006684 <__swsetup_r+0x30>
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	0792      	lsls	r2, r2, #30
 8006712:	bf58      	it	pl
 8006714:	6963      	ldrpl	r3, [r4, #20]
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	e7f2      	b.n	8006700 <__swsetup_r+0xac>
 800671a:	2000      	movs	r0, #0
 800671c:	e7f7      	b.n	800670e <__swsetup_r+0xba>
 800671e:	bf00      	nop
 8006720:	20000010 	.word	0x20000010
 8006724:	08006b7c 	.word	0x08006b7c
 8006728:	08006b9c 	.word	0x08006b9c
 800672c:	08006b5c 	.word	0x08006b5c

08006730 <_close_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4c06      	ldr	r4, [pc, #24]	; (800674c <_close_r+0x1c>)
 8006734:	2300      	movs	r3, #0
 8006736:	4605      	mov	r5, r0
 8006738:	4608      	mov	r0, r1
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	f7fa febd 	bl	80014ba <_close>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_close_r+0x1a>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	b103      	cbz	r3, 800674a <_close_r+0x1a>
 8006748:	602b      	str	r3, [r5, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	20000320 	.word	0x20000320

08006750 <__sflush_r>:
 8006750:	898a      	ldrh	r2, [r1, #12]
 8006752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	4605      	mov	r5, r0
 8006758:	0710      	lsls	r0, r2, #28
 800675a:	460c      	mov	r4, r1
 800675c:	d458      	bmi.n	8006810 <__sflush_r+0xc0>
 800675e:	684b      	ldr	r3, [r1, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	dc05      	bgt.n	8006770 <__sflush_r+0x20>
 8006764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	dc02      	bgt.n	8006770 <__sflush_r+0x20>
 800676a:	2000      	movs	r0, #0
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006772:	2e00      	cmp	r6, #0
 8006774:	d0f9      	beq.n	800676a <__sflush_r+0x1a>
 8006776:	2300      	movs	r3, #0
 8006778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800677c:	682f      	ldr	r7, [r5, #0]
 800677e:	6a21      	ldr	r1, [r4, #32]
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	d032      	beq.n	80067ea <__sflush_r+0x9a>
 8006784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	075a      	lsls	r2, r3, #29
 800678a:	d505      	bpl.n	8006798 <__sflush_r+0x48>
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	1ac0      	subs	r0, r0, r3
 8006790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006792:	b10b      	cbz	r3, 8006798 <__sflush_r+0x48>
 8006794:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006796:	1ac0      	subs	r0, r0, r3
 8006798:	2300      	movs	r3, #0
 800679a:	4602      	mov	r2, r0
 800679c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800679e:	6a21      	ldr	r1, [r4, #32]
 80067a0:	4628      	mov	r0, r5
 80067a2:	47b0      	blx	r6
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	d106      	bne.n	80067b8 <__sflush_r+0x68>
 80067aa:	6829      	ldr	r1, [r5, #0]
 80067ac:	291d      	cmp	r1, #29
 80067ae:	d848      	bhi.n	8006842 <__sflush_r+0xf2>
 80067b0:	4a29      	ldr	r2, [pc, #164]	; (8006858 <__sflush_r+0x108>)
 80067b2:	40ca      	lsrs	r2, r1
 80067b4:	07d6      	lsls	r6, r2, #31
 80067b6:	d544      	bpl.n	8006842 <__sflush_r+0xf2>
 80067b8:	2200      	movs	r2, #0
 80067ba:	6062      	str	r2, [r4, #4]
 80067bc:	04d9      	lsls	r1, r3, #19
 80067be:	6922      	ldr	r2, [r4, #16]
 80067c0:	6022      	str	r2, [r4, #0]
 80067c2:	d504      	bpl.n	80067ce <__sflush_r+0x7e>
 80067c4:	1c42      	adds	r2, r0, #1
 80067c6:	d101      	bne.n	80067cc <__sflush_r+0x7c>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	b903      	cbnz	r3, 80067ce <__sflush_r+0x7e>
 80067cc:	6560      	str	r0, [r4, #84]	; 0x54
 80067ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067d0:	602f      	str	r7, [r5, #0]
 80067d2:	2900      	cmp	r1, #0
 80067d4:	d0c9      	beq.n	800676a <__sflush_r+0x1a>
 80067d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067da:	4299      	cmp	r1, r3
 80067dc:	d002      	beq.n	80067e4 <__sflush_r+0x94>
 80067de:	4628      	mov	r0, r5
 80067e0:	f7ff fb46 	bl	8005e70 <_free_r>
 80067e4:	2000      	movs	r0, #0
 80067e6:	6360      	str	r0, [r4, #52]	; 0x34
 80067e8:	e7c0      	b.n	800676c <__sflush_r+0x1c>
 80067ea:	2301      	movs	r3, #1
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b0      	blx	r6
 80067f0:	1c41      	adds	r1, r0, #1
 80067f2:	d1c8      	bne.n	8006786 <__sflush_r+0x36>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0c5      	beq.n	8006786 <__sflush_r+0x36>
 80067fa:	2b1d      	cmp	r3, #29
 80067fc:	d001      	beq.n	8006802 <__sflush_r+0xb2>
 80067fe:	2b16      	cmp	r3, #22
 8006800:	d101      	bne.n	8006806 <__sflush_r+0xb6>
 8006802:	602f      	str	r7, [r5, #0]
 8006804:	e7b1      	b.n	800676a <__sflush_r+0x1a>
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	e7ad      	b.n	800676c <__sflush_r+0x1c>
 8006810:	690f      	ldr	r7, [r1, #16]
 8006812:	2f00      	cmp	r7, #0
 8006814:	d0a9      	beq.n	800676a <__sflush_r+0x1a>
 8006816:	0793      	lsls	r3, r2, #30
 8006818:	680e      	ldr	r6, [r1, #0]
 800681a:	bf08      	it	eq
 800681c:	694b      	ldreq	r3, [r1, #20]
 800681e:	600f      	str	r7, [r1, #0]
 8006820:	bf18      	it	ne
 8006822:	2300      	movne	r3, #0
 8006824:	eba6 0807 	sub.w	r8, r6, r7
 8006828:	608b      	str	r3, [r1, #8]
 800682a:	f1b8 0f00 	cmp.w	r8, #0
 800682e:	dd9c      	ble.n	800676a <__sflush_r+0x1a>
 8006830:	4643      	mov	r3, r8
 8006832:	463a      	mov	r2, r7
 8006834:	6a21      	ldr	r1, [r4, #32]
 8006836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006838:	4628      	mov	r0, r5
 800683a:	47b0      	blx	r6
 800683c:	2800      	cmp	r0, #0
 800683e:	dc06      	bgt.n	800684e <__sflush_r+0xfe>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	e78e      	b.n	800676c <__sflush_r+0x1c>
 800684e:	4407      	add	r7, r0
 8006850:	eba8 0800 	sub.w	r8, r8, r0
 8006854:	e7e9      	b.n	800682a <__sflush_r+0xda>
 8006856:	bf00      	nop
 8006858:	20400001 	.word	0x20400001

0800685c <_fflush_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	690b      	ldr	r3, [r1, #16]
 8006860:	4605      	mov	r5, r0
 8006862:	460c      	mov	r4, r1
 8006864:	b1db      	cbz	r3, 800689e <_fflush_r+0x42>
 8006866:	b118      	cbz	r0, 8006870 <_fflush_r+0x14>
 8006868:	6983      	ldr	r3, [r0, #24]
 800686a:	b90b      	cbnz	r3, 8006870 <_fflush_r+0x14>
 800686c:	f7fe ff6c 	bl	8005748 <__sinit>
 8006870:	4b0c      	ldr	r3, [pc, #48]	; (80068a4 <_fflush_r+0x48>)
 8006872:	429c      	cmp	r4, r3
 8006874:	d109      	bne.n	800688a <_fflush_r+0x2e>
 8006876:	686c      	ldr	r4, [r5, #4]
 8006878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687c:	b17b      	cbz	r3, 800689e <_fflush_r+0x42>
 800687e:	4621      	mov	r1, r4
 8006880:	4628      	mov	r0, r5
 8006882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006886:	f7ff bf63 	b.w	8006750 <__sflush_r>
 800688a:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <_fflush_r+0x4c>)
 800688c:	429c      	cmp	r4, r3
 800688e:	d101      	bne.n	8006894 <_fflush_r+0x38>
 8006890:	68ac      	ldr	r4, [r5, #8]
 8006892:	e7f1      	b.n	8006878 <_fflush_r+0x1c>
 8006894:	4b05      	ldr	r3, [pc, #20]	; (80068ac <_fflush_r+0x50>)
 8006896:	429c      	cmp	r4, r3
 8006898:	bf08      	it	eq
 800689a:	68ec      	ldreq	r4, [r5, #12]
 800689c:	e7ec      	b.n	8006878 <_fflush_r+0x1c>
 800689e:	2000      	movs	r0, #0
 80068a0:	bd38      	pop	{r3, r4, r5, pc}
 80068a2:	bf00      	nop
 80068a4:	08006b7c 	.word	0x08006b7c
 80068a8:	08006b9c 	.word	0x08006b9c
 80068ac:	08006b5c 	.word	0x08006b5c

080068b0 <_lseek_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4c07      	ldr	r4, [pc, #28]	; (80068d0 <_lseek_r+0x20>)
 80068b4:	4605      	mov	r5, r0
 80068b6:	4608      	mov	r0, r1
 80068b8:	4611      	mov	r1, r2
 80068ba:	2200      	movs	r2, #0
 80068bc:	6022      	str	r2, [r4, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	f7fa fe22 	bl	8001508 <_lseek>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d102      	bne.n	80068ce <_lseek_r+0x1e>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	b103      	cbz	r3, 80068ce <_lseek_r+0x1e>
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	20000320 	.word	0x20000320

080068d4 <__swhatbuf_r>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	460e      	mov	r6, r1
 80068d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068dc:	2900      	cmp	r1, #0
 80068de:	b096      	sub	sp, #88	; 0x58
 80068e0:	4614      	mov	r4, r2
 80068e2:	461d      	mov	r5, r3
 80068e4:	da07      	bge.n	80068f6 <__swhatbuf_r+0x22>
 80068e6:	2300      	movs	r3, #0
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	89b3      	ldrh	r3, [r6, #12]
 80068ec:	061a      	lsls	r2, r3, #24
 80068ee:	d410      	bmi.n	8006912 <__swhatbuf_r+0x3e>
 80068f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068f4:	e00e      	b.n	8006914 <__swhatbuf_r+0x40>
 80068f6:	466a      	mov	r2, sp
 80068f8:	f000 f8c4 	bl	8006a84 <_fstat_r>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	dbf2      	blt.n	80068e6 <__swhatbuf_r+0x12>
 8006900:	9a01      	ldr	r2, [sp, #4]
 8006902:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006906:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800690a:	425a      	negs	r2, r3
 800690c:	415a      	adcs	r2, r3
 800690e:	602a      	str	r2, [r5, #0]
 8006910:	e7ee      	b.n	80068f0 <__swhatbuf_r+0x1c>
 8006912:	2340      	movs	r3, #64	; 0x40
 8006914:	2000      	movs	r0, #0
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	b016      	add	sp, #88	; 0x58
 800691a:	bd70      	pop	{r4, r5, r6, pc}

0800691c <__smakebuf_r>:
 800691c:	898b      	ldrh	r3, [r1, #12]
 800691e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006920:	079d      	lsls	r5, r3, #30
 8006922:	4606      	mov	r6, r0
 8006924:	460c      	mov	r4, r1
 8006926:	d507      	bpl.n	8006938 <__smakebuf_r+0x1c>
 8006928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800692c:	6023      	str	r3, [r4, #0]
 800692e:	6123      	str	r3, [r4, #16]
 8006930:	2301      	movs	r3, #1
 8006932:	6163      	str	r3, [r4, #20]
 8006934:	b002      	add	sp, #8
 8006936:	bd70      	pop	{r4, r5, r6, pc}
 8006938:	ab01      	add	r3, sp, #4
 800693a:	466a      	mov	r2, sp
 800693c:	f7ff ffca 	bl	80068d4 <__swhatbuf_r>
 8006940:	9900      	ldr	r1, [sp, #0]
 8006942:	4605      	mov	r5, r0
 8006944:	4630      	mov	r0, r6
 8006946:	f7ff fae1 	bl	8005f0c <_malloc_r>
 800694a:	b948      	cbnz	r0, 8006960 <__smakebuf_r+0x44>
 800694c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006950:	059a      	lsls	r2, r3, #22
 8006952:	d4ef      	bmi.n	8006934 <__smakebuf_r+0x18>
 8006954:	f023 0303 	bic.w	r3, r3, #3
 8006958:	f043 0302 	orr.w	r3, r3, #2
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	e7e3      	b.n	8006928 <__smakebuf_r+0xc>
 8006960:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <__smakebuf_r+0x7c>)
 8006962:	62b3      	str	r3, [r6, #40]	; 0x28
 8006964:	89a3      	ldrh	r3, [r4, #12]
 8006966:	6020      	str	r0, [r4, #0]
 8006968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696c:	81a3      	strh	r3, [r4, #12]
 800696e:	9b00      	ldr	r3, [sp, #0]
 8006970:	6163      	str	r3, [r4, #20]
 8006972:	9b01      	ldr	r3, [sp, #4]
 8006974:	6120      	str	r0, [r4, #16]
 8006976:	b15b      	cbz	r3, 8006990 <__smakebuf_r+0x74>
 8006978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800697c:	4630      	mov	r0, r6
 800697e:	f000 f893 	bl	8006aa8 <_isatty_r>
 8006982:	b128      	cbz	r0, 8006990 <__smakebuf_r+0x74>
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	431d      	orrs	r5, r3
 8006994:	81a5      	strh	r5, [r4, #12]
 8006996:	e7cd      	b.n	8006934 <__smakebuf_r+0x18>
 8006998:	08005711 	.word	0x08005711

0800699c <__ascii_mbtowc>:
 800699c:	b082      	sub	sp, #8
 800699e:	b901      	cbnz	r1, 80069a2 <__ascii_mbtowc+0x6>
 80069a0:	a901      	add	r1, sp, #4
 80069a2:	b142      	cbz	r2, 80069b6 <__ascii_mbtowc+0x1a>
 80069a4:	b14b      	cbz	r3, 80069ba <__ascii_mbtowc+0x1e>
 80069a6:	7813      	ldrb	r3, [r2, #0]
 80069a8:	600b      	str	r3, [r1, #0]
 80069aa:	7812      	ldrb	r2, [r2, #0]
 80069ac:	1c10      	adds	r0, r2, #0
 80069ae:	bf18      	it	ne
 80069b0:	2001      	movne	r0, #1
 80069b2:	b002      	add	sp, #8
 80069b4:	4770      	bx	lr
 80069b6:	4610      	mov	r0, r2
 80069b8:	e7fb      	b.n	80069b2 <__ascii_mbtowc+0x16>
 80069ba:	f06f 0001 	mvn.w	r0, #1
 80069be:	e7f8      	b.n	80069b2 <__ascii_mbtowc+0x16>

080069c0 <memmove>:
 80069c0:	4288      	cmp	r0, r1
 80069c2:	b510      	push	{r4, lr}
 80069c4:	eb01 0302 	add.w	r3, r1, r2
 80069c8:	d807      	bhi.n	80069da <memmove+0x1a>
 80069ca:	1e42      	subs	r2, r0, #1
 80069cc:	4299      	cmp	r1, r3
 80069ce:	d00a      	beq.n	80069e6 <memmove+0x26>
 80069d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069d8:	e7f8      	b.n	80069cc <memmove+0xc>
 80069da:	4283      	cmp	r3, r0
 80069dc:	d9f5      	bls.n	80069ca <memmove+0xa>
 80069de:	1881      	adds	r1, r0, r2
 80069e0:	1ad2      	subs	r2, r2, r3
 80069e2:	42d3      	cmn	r3, r2
 80069e4:	d100      	bne.n	80069e8 <memmove+0x28>
 80069e6:	bd10      	pop	{r4, pc}
 80069e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069f0:	e7f7      	b.n	80069e2 <memmove+0x22>

080069f2 <__malloc_lock>:
 80069f2:	4770      	bx	lr

080069f4 <__malloc_unlock>:
 80069f4:	4770      	bx	lr

080069f6 <_realloc_r>:
 80069f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f8:	4607      	mov	r7, r0
 80069fa:	4614      	mov	r4, r2
 80069fc:	460e      	mov	r6, r1
 80069fe:	b921      	cbnz	r1, 8006a0a <_realloc_r+0x14>
 8006a00:	4611      	mov	r1, r2
 8006a02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a06:	f7ff ba81 	b.w	8005f0c <_malloc_r>
 8006a0a:	b922      	cbnz	r2, 8006a16 <_realloc_r+0x20>
 8006a0c:	f7ff fa30 	bl	8005e70 <_free_r>
 8006a10:	4625      	mov	r5, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a16:	f000 f857 	bl	8006ac8 <_malloc_usable_size_r>
 8006a1a:	42a0      	cmp	r0, r4
 8006a1c:	d20f      	bcs.n	8006a3e <_realloc_r+0x48>
 8006a1e:	4621      	mov	r1, r4
 8006a20:	4638      	mov	r0, r7
 8006a22:	f7ff fa73 	bl	8005f0c <_malloc_r>
 8006a26:	4605      	mov	r5, r0
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d0f2      	beq.n	8006a12 <_realloc_r+0x1c>
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4622      	mov	r2, r4
 8006a30:	f7fe ff2a 	bl	8005888 <memcpy>
 8006a34:	4631      	mov	r1, r6
 8006a36:	4638      	mov	r0, r7
 8006a38:	f7ff fa1a 	bl	8005e70 <_free_r>
 8006a3c:	e7e9      	b.n	8006a12 <_realloc_r+0x1c>
 8006a3e:	4635      	mov	r5, r6
 8006a40:	e7e7      	b.n	8006a12 <_realloc_r+0x1c>
	...

08006a44 <_read_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4c07      	ldr	r4, [pc, #28]	; (8006a64 <_read_r+0x20>)
 8006a48:	4605      	mov	r5, r0
 8006a4a:	4608      	mov	r0, r1
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	2200      	movs	r2, #0
 8006a50:	6022      	str	r2, [r4, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f7fa fcf8 	bl	8001448 <_read>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_read_r+0x1e>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_read_r+0x1e>
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	20000320 	.word	0x20000320

08006a68 <__ascii_wctomb>:
 8006a68:	b149      	cbz	r1, 8006a7e <__ascii_wctomb+0x16>
 8006a6a:	2aff      	cmp	r2, #255	; 0xff
 8006a6c:	bf85      	ittet	hi
 8006a6e:	238a      	movhi	r3, #138	; 0x8a
 8006a70:	6003      	strhi	r3, [r0, #0]
 8006a72:	700a      	strbls	r2, [r1, #0]
 8006a74:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a78:	bf98      	it	ls
 8006a7a:	2001      	movls	r0, #1
 8006a7c:	4770      	bx	lr
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4770      	bx	lr
	...

08006a84 <_fstat_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4c07      	ldr	r4, [pc, #28]	; (8006aa4 <_fstat_r+0x20>)
 8006a88:	2300      	movs	r3, #0
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	4611      	mov	r1, r2
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	f7fa fd1e 	bl	80014d2 <_fstat>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	d102      	bne.n	8006aa0 <_fstat_r+0x1c>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	b103      	cbz	r3, 8006aa0 <_fstat_r+0x1c>
 8006a9e:	602b      	str	r3, [r5, #0]
 8006aa0:	bd38      	pop	{r3, r4, r5, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000320 	.word	0x20000320

08006aa8 <_isatty_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4c06      	ldr	r4, [pc, #24]	; (8006ac4 <_isatty_r+0x1c>)
 8006aac:	2300      	movs	r3, #0
 8006aae:	4605      	mov	r5, r0
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	f7fa fd1d 	bl	80014f2 <_isatty>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d102      	bne.n	8006ac2 <_isatty_r+0x1a>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	b103      	cbz	r3, 8006ac2 <_isatty_r+0x1a>
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	20000320 	.word	0x20000320

08006ac8 <_malloc_usable_size_r>:
 8006ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006acc:	1f18      	subs	r0, r3, #4
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bfbc      	itt	lt
 8006ad2:	580b      	ldrlt	r3, [r1, r0]
 8006ad4:	18c0      	addlt	r0, r0, r3
 8006ad6:	4770      	bx	lr

08006ad8 <_init>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr

08006ae4 <_fini>:
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	bf00      	nop
 8006ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aea:	bc08      	pop	{r3}
 8006aec:	469e      	mov	lr, r3
 8006aee:	4770      	bx	lr
